{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to PHP Refresher Everyone can forget about grammar and vocabulary. What is most important is to know where to look. The key to becoming a proficient PHP developer is to keep learning and practicing regularly. With a strong foundation in the basics, a commitment to ongoing learning, and a willingness to experiment with new tools and technologies, you can refresh your PHP skills and take your programming career to the next level. Basic Topics Advanced Topics Basics Functions Data Structures Classes This material is a work in progress, so your feedback is welcome. The best way to provide that feedback is to click here and create an issue in this GitHub repository .","title":"Home"},{"location":"#welcome-to-php-refresher","text":"Everyone can forget about grammar and vocabulary. What is most important is to know where to look. The key to becoming a proficient PHP developer is to keep learning and practicing regularly. With a strong foundation in the basics, a commitment to ongoing learning, and a willingness to experiment with new tools and technologies, you can refresh your PHP skills and take your programming career to the next level. Basic Topics Advanced Topics Basics Functions Data Structures Classes This material is a work in progress, so your feedback is welcome. The best way to provide that feedback is to click here and create an issue in this GitHub repository .","title":"Welcome to PHP Refresher"},{"location":"phpRefresh/","text":"PHP (recursive acronym for PHP: Hypertext Preprocessor) is a widely-used open source general-purpose scripting language that is especially suited for web development and can be embedded into HTML. A PHP script is executed on the server, and the plain HTML result is sent back to the browser. <!DOCTYPE html> <html> <head> <title>Example</title> </head> <body> <?php echo \"Hi, I'm a PHP script!\" ; ?> </body> </html> PHP is lossly typed (i.e. types are not necessarily enforced), dynamically, implicitly typed (i.e. you don\u2019t have to declare variables), case sensitive (i.e. var and VAR are two different variables) and object-oriented (i.e. everything is an object, like C# and Java). PHP is a language like C that uses curly braces to contain code statements within loops or conditionals. PHP statements end with a semicolon (;) just like C. There are not dot notation in PHP. Everything is function based. \"name\".split(); //doesnt work split(\"name\"); //works PHP Resources The website http://www.php.net is the official website for the PHP language, and Docs PHP Syntax A PHP script can be placed anywhere in the document. A PHP script starts with <?php and ends with ?> The default file extension for PHP files is \".php\". A PHP file normally contains HTML tags, and some PHP scripting code. PHP Case Sensitivity In PHP, keywords (e.g. if, else, while, echo, etc.), classes, functions, and user-defined functions are not case-sensitive. Warning: However; all variable names are case-sensitive! PHP Comments A comment in PHP code is a line that is not executed as a part of the program. Its only purpose is to be read by someone who is looking at the code. Syntax for single-line comments: <!DOCTYPE html> <html> <body> <?php // This is a single-line comment # This is also a single-line comment ?> </body> </html> Syntax for multiple-line comments: <!DOCTYPE html> <html> <body> <?php /* This is a multiple-lines comment block that spans over multiple lines */ ?> </body> </html>","title":"General"},{"location":"phpRefresh/#php-resources","text":"The website http://www.php.net is the official website for the PHP language, and Docs","title":"PHP Resources"},{"location":"phpRefresh/#php-syntax","text":"A PHP script can be placed anywhere in the document. A PHP script starts with <?php and ends with ?> The default file extension for PHP files is \".php\". A PHP file normally contains HTML tags, and some PHP scripting code.","title":"PHP Syntax"},{"location":"phpRefresh/#php-case-sensitivity","text":"In PHP, keywords (e.g. if, else, while, echo, etc.), classes, functions, and user-defined functions are not case-sensitive. Warning: However; all variable names are case-sensitive!","title":"PHP Case Sensitivity"},{"location":"phpRefresh/#php-comments","text":"A comment in PHP code is a line that is not executed as a part of the program. Its only purpose is to be read by someone who is looking at the code.","title":"PHP Comments"},{"location":"phpRefresh/#syntax-for-single-line-comments","text":"<!DOCTYPE html> <html> <body> <?php // This is a single-line comment # This is also a single-line comment ?> </body> </html>","title":"Syntax for single-line comments:"},{"location":"phpRefresh/#syntax-for-multiple-line-comments","text":"<!DOCTYPE html> <html> <body> <?php /* This is a multiple-lines comment block that spans over multiple lines */ ?> </body> </html>","title":"Syntax for multiple-line comments:"},{"location":"Adv/phpFile/","text":"PHP File Handling File handling is an important part of any web application. You often need to open and process a file for different tasks. PHP has several functions for creating, reading, uploading, and editing files. readfile() The readfile() function reads a file and writes it to the output buffer. Assume we have a text file called \"webdictionary.txt\", stored on the server, that looks like this: AJAX = Asynchronous JavaScript and XML CSS = Cascading Style Sheets HTML = Hyper Text Markup Language PHP = PHP Hypertext Preprocessor SQL = Structured Query Language SVG = Scalable Vector Graphics XML = EXtensible Markup Language The PHP code to read the file and write it to the output buffer is as follows (the readfile() function returns the number of bytes read on success): <?php echo readfile ( \"webdictionary.txt\" ); ?> The readfile() function is useful if all you want to do is open up a file and read its contents. fopen() A better method to open files is with the fopen() function. This function gives you more options than the readfile() function. <?php $myfile = fopen ( \"webdictionary.txt\" , \"r\" ) or die ( \"Unable to open file!\" ); echo fread ( $myfile , filesize ( \"webdictionary.txt\" )); fclose ( $myfile ); ?> The file may be opened in one of the following modes: Modes Description r Open a file for read only. File pointer starts at the beginning of the file w Open a file for write only. Erases the contents of the file or creates a new file if it doesn't exist. File pointer starts at the beginning of the file a Open a file for write only. The existing data in file is preserved. File pointer starts at the end of the file. Creates a new file if the file doesn't exist x Creates a new file for write only. Returns FALSE and an error if file already exists r+ Open a file for read/write. File pointer starts at the beginning of the file w+ Open a file for read/write. Erases the contents of the file or creates a new file if it doesn't exist. File pointer starts at the beginning of the file a+ Open a file for read/write. The existing data in file is preserved. File pointer starts at the end of the file. Creates a new file if the file doesn't exist x+ Creates a new file for read/write. Returns FALSE and an error if file already exists The fopen() function is also used to create a file. If you use fopen() on a file that does not exist, it will create it, given that the file is opened for writing (w) or appending (a). <?php $myfile = fopen ( \"webdictionary.txt\" , \"w\" ) or die ( \"Unable to open file!\" ); fwrite ( $myfile , \"Hello World!\" ); fclose ( $myfile ); ?> File Permissions If you are having errors when trying to get this code to run, check that you have granted your PHP file access to write information to the hard drive. fread() The fread() function reads from an open file. The first parameter of fread() contains the name of the file to read from and the second parameter specifies the maximum number of bytes to read. The following PHP code reads the \"webdictionary.txt\" file to the end: fread($myfile,filesize(\"webdictionary.txt\")); fwrite() The fwrite() function is used to write to a file. The first parameter of fwrite() contains the name of the file to write to and the second parameter is the string to be written. <?php $myfile = fopen ( \"newfile.txt\" , \"w\" ) or die ( \"Unable to open file!\" ); $txt = \"John Doe \\n \" ; fwrite ( $myfile , $txt ); $txt = \"Jane Doe \\n \" ; fwrite ( $myfile , $txt ); fclose ( $myfile ); ?> fclose() The fclose() function is used to close an open file. It's a good programming practice to close all files after you have finished with them. The fclose() requires the name of the file (or a variable that holds the filename) we want to close: <?php $myfile = fopen ( \"webdictionary.txt\" , \"r\" ); // some code to be executed.... fclose ( $myfile ); ?> fgets() The fgets() function is used to read a single line from a file. <?php $myfile = fopen ( \"webdictionary.txt\" , \"r\" ) or die ( \"Unable to open file!\" ); echo fgets ( $myfile ); fclose ( $myfile ); ?> After a call to the fgets() function, the file pointer has moved to the next line. feof() The feof() function checks if the \"end-of-file\" (EOF) has been reached. The feof() function is useful for looping through data of unknown length. <?php $myfile = fopen ( \"webdictionary.txt\" , \"r\" ) or die ( \"Unable to open file!\" ); // Output one line until end-of-file while ( ! feof ( $myfile )) { echo fgets ( $myfile ) . \"<br>\" ; } fclose ( $myfile ); ?> fgetc() The fgetc() function is used to read a single character from a file. <?php $myfile = fopen ( \"webdictionary.txt\" , \"r\" ) or die ( \"Unable to open file!\" ); // Output one character until end-of-file while ( ! feof ( $myfile )) { echo fgetc ( $myfile ); } fclose ( $myfile ); ?> After a call to the fgetc() function, the file pointer moves to the next character. PHP File Upload With PHP, it is easy to upload files to the server. Configure The \"php.ini\" File First, ensure that PHP is configured to allow file uploads. In your \"php.ini\" file, search for the file_uploads directive, and set it to On: file_uploads = On Create The HTML Form <!DOCTYPE html> < html > < body > < form action = \"upload.php\" method = \"post\" enctype = \"multipart/form-data\" > Select image to upload: < input type = \"file\" name = \"fileToUpload\" id = \"fileToUpload\" > < input type = \"submit\" value = \"Upload Image\" name = \"submit\" > </ form > </ body > </ html > Some rules to follow for the HTML form above: Make sure that the form uses method=\"post\" The form also needs the following attribute: enctype=\"multipart/form-data\". It specifies which content-type to use when submitting the form Without the requirements above, the file upload will not work. Other things to notice: The type=\"file\" attribute of the input tag shows the input field as a file-select control, with a \"Browse\" button next to the input control The form above sends data to a file called \"upload.php\", which we will create next. Create The Upload File PHP Script The \"upload.php\" file contains the code for uploading a file: <?php $target_dir = \"uploads/\" ; $target_file = $target_dir . basename ( $_FILES [ \"fileToUpload\" ][ \"name\" ]); $uploadOk = 1 ; $imageFileType = strtolower ( pathinfo ( $target_file , PATHINFO_EXTENSION )); // Check if image file is a actual image or fake image if ( isset ( $_POST [ \"submit\" ])) { $check = getimagesize ( $_FILES [ \"fileToUpload\" ][ \"tmp_name\" ]); if ( $check !== false ) { echo \"File is an image - \" . $check [ \"mime\" ] . \".\" ; $uploadOk = 1 ; } else { echo \"File is not an image.\" ; $uploadOk = 0 ; } } ?> PHP script explained: $target_dir = \"uploads/\" - specifies the directory where the file is going to be placed $target_file specifies the path of the file to be uploaded $uploadOk=1 is not used yet (will be used later) $imageFileType holds the file extension of the file (in lower case) Next, check if the image file is an actual image or a fake image You will need to create a new directory called \"uploads\" in the directory where \"upload.php\" file resides. The uploaded files will be saved there. Check if File Already Exists Now we can add some restrictions. First, we will check if the file already exists in the \"uploads\" folder. If it does, an error message is displayed, and $uploadOk is set to 0: // Check if file already exists if (file_exists($target_file)) { echo \"Sorry, file already exists.\"; $uploadOk = 0; } ?> Limit File Size The file input field in our HTML form above is named \"fileToUpload\". Now, we want to check the size of the file. If the file is larger than 500KB, an error message is displayed, and $uploadOk is set to 0: // Check file size if ($_FILES[\"fileToUpload\"][\"size\"] > 500000) { echo \"Sorry, your file is too large.\"; $uploadOk = 0; } ?> Limit File Type The code below only allows users to upload JPG, JPEG, PNG, and GIF files. All other file types gives an error message before setting $uploadOk to 0: // Allow certain file formats if($imageFileType != \"jpg\" && $imageFileType != \"png\" && $imageFileType != \"jpeg\" && $imageFileType != \"gif\" ) { echo \"Sorry, only JPG, JPEG, PNG & GIF files are allowed.\"; $uploadOk = 0; } ?> Complete Upload File PHP Script The complete \"upload.php\" file now looks like this: <?php $target_dir = \"uploads/\" ; $target_file = $target_dir . basename ( $_FILES [ \"fileToUpload\" ][ \"name\" ]); $uploadOk = 1 ; $imageFileType = strtolower ( pathinfo ( $target_file , PATHINFO_EXTENSION )); // Check if image file is a actual image or fake image if ( isset ( $_POST [ \"submit\" ])) { $check = getimagesize ( $_FILES [ \"fileToUpload\" ][ \"tmp_name\" ]); if ( $check !== false ) { echo \"File is an image - \" . $check [ \"mime\" ] . \".\" ; $uploadOk = 1 ; } else { echo \"File is not an image.\" ; $uploadOk = 0 ; } } // Check if file already exists if ( file_exists ( $target_file )) { echo \"Sorry, file already exists.\" ; $uploadOk = 0 ; } // Check file size if ( $_FILES [ \"fileToUpload\" ][ \"size\" ] > 500000 ) { echo \"Sorry, your file is too large.\" ; $uploadOk = 0 ; } // Allow certain file formats if ( $imageFileType != \"jpg\" && $imageFileType != \"png\" && $imageFileType != \"jpeg\" && $imageFileType != \"gif\" ) { echo \"Sorry, only JPG, JPEG, PNG & GIF files are allowed.\" ; $uploadOk = 0 ; } // Check if $uploadOk is set to 0 by an error if ( $uploadOk == 0 ) { echo \"Sorry, your file was not uploaded.\" ; // if everything is ok, try to upload file } else { if ( move_uploaded_file ( $_FILES [ \"fileToUpload\" ][ \"tmp_name\" ], $target_file )) { echo \"The file \" . htmlspecialchars ( basename ( $_FILES [ \"fileToUpload\" ][ \"name\" ])) . \" has been uploaded.\" ; } else { echo \"Sorry, there was an error uploading your file.\" ; } } ?>","title":"File Management"},{"location":"Adv/phpFile/#php-file-handling","text":"File handling is an important part of any web application. You often need to open and process a file for different tasks. PHP has several functions for creating, reading, uploading, and editing files.","title":"PHP File Handling"},{"location":"Adv/phpFile/#readfile","text":"The readfile() function reads a file and writes it to the output buffer. Assume we have a text file called \"webdictionary.txt\", stored on the server, that looks like this: AJAX = Asynchronous JavaScript and XML CSS = Cascading Style Sheets HTML = Hyper Text Markup Language PHP = PHP Hypertext Preprocessor SQL = Structured Query Language SVG = Scalable Vector Graphics XML = EXtensible Markup Language The PHP code to read the file and write it to the output buffer is as follows (the readfile() function returns the number of bytes read on success): <?php echo readfile ( \"webdictionary.txt\" ); ?> The readfile() function is useful if all you want to do is open up a file and read its contents.","title":"readfile()"},{"location":"Adv/phpFile/#fopen","text":"A better method to open files is with the fopen() function. This function gives you more options than the readfile() function. <?php $myfile = fopen ( \"webdictionary.txt\" , \"r\" ) or die ( \"Unable to open file!\" ); echo fread ( $myfile , filesize ( \"webdictionary.txt\" )); fclose ( $myfile ); ?> The file may be opened in one of the following modes: Modes Description r Open a file for read only. File pointer starts at the beginning of the file w Open a file for write only. Erases the contents of the file or creates a new file if it doesn't exist. File pointer starts at the beginning of the file a Open a file for write only. The existing data in file is preserved. File pointer starts at the end of the file. Creates a new file if the file doesn't exist x Creates a new file for write only. Returns FALSE and an error if file already exists r+ Open a file for read/write. File pointer starts at the beginning of the file w+ Open a file for read/write. Erases the contents of the file or creates a new file if it doesn't exist. File pointer starts at the beginning of the file a+ Open a file for read/write. The existing data in file is preserved. File pointer starts at the end of the file. Creates a new file if the file doesn't exist x+ Creates a new file for read/write. Returns FALSE and an error if file already exists The fopen() function is also used to create a file. If you use fopen() on a file that does not exist, it will create it, given that the file is opened for writing (w) or appending (a). <?php $myfile = fopen ( \"webdictionary.txt\" , \"w\" ) or die ( \"Unable to open file!\" ); fwrite ( $myfile , \"Hello World!\" ); fclose ( $myfile ); ?>","title":"fopen()"},{"location":"Adv/phpFile/#file-permissions","text":"If you are having errors when trying to get this code to run, check that you have granted your PHP file access to write information to the hard drive.","title":"File Permissions"},{"location":"Adv/phpFile/#fread","text":"The fread() function reads from an open file. The first parameter of fread() contains the name of the file to read from and the second parameter specifies the maximum number of bytes to read. The following PHP code reads the \"webdictionary.txt\" file to the end: fread($myfile,filesize(\"webdictionary.txt\"));","title":"fread()"},{"location":"Adv/phpFile/#fwrite","text":"The fwrite() function is used to write to a file. The first parameter of fwrite() contains the name of the file to write to and the second parameter is the string to be written. <?php $myfile = fopen ( \"newfile.txt\" , \"w\" ) or die ( \"Unable to open file!\" ); $txt = \"John Doe \\n \" ; fwrite ( $myfile , $txt ); $txt = \"Jane Doe \\n \" ; fwrite ( $myfile , $txt ); fclose ( $myfile ); ?>","title":"fwrite()"},{"location":"Adv/phpFile/#fclose","text":"The fclose() function is used to close an open file. It's a good programming practice to close all files after you have finished with them. The fclose() requires the name of the file (or a variable that holds the filename) we want to close: <?php $myfile = fopen ( \"webdictionary.txt\" , \"r\" ); // some code to be executed.... fclose ( $myfile ); ?>","title":"fclose()"},{"location":"Adv/phpFile/#fgets","text":"The fgets() function is used to read a single line from a file. <?php $myfile = fopen ( \"webdictionary.txt\" , \"r\" ) or die ( \"Unable to open file!\" ); echo fgets ( $myfile ); fclose ( $myfile ); ?> After a call to the fgets() function, the file pointer has moved to the next line.","title":"fgets()"},{"location":"Adv/phpFile/#feof","text":"The feof() function checks if the \"end-of-file\" (EOF) has been reached. The feof() function is useful for looping through data of unknown length. <?php $myfile = fopen ( \"webdictionary.txt\" , \"r\" ) or die ( \"Unable to open file!\" ); // Output one line until end-of-file while ( ! feof ( $myfile )) { echo fgets ( $myfile ) . \"<br>\" ; } fclose ( $myfile ); ?>","title":"feof()"},{"location":"Adv/phpFile/#fgetc","text":"The fgetc() function is used to read a single character from a file. <?php $myfile = fopen ( \"webdictionary.txt\" , \"r\" ) or die ( \"Unable to open file!\" ); // Output one character until end-of-file while ( ! feof ( $myfile )) { echo fgetc ( $myfile ); } fclose ( $myfile ); ?> After a call to the fgetc() function, the file pointer moves to the next character.","title":"fgetc()"},{"location":"Adv/phpFile/#php-file-upload","text":"With PHP, it is easy to upload files to the server.","title":"PHP File Upload"},{"location":"Adv/phpFile/#configure-the-phpini-file","text":"First, ensure that PHP is configured to allow file uploads. In your \"php.ini\" file, search for the file_uploads directive, and set it to On: file_uploads = On","title":"Configure The \"php.ini\" File"},{"location":"Adv/phpFile/#create-the-html-form","text":"<!DOCTYPE html> < html > < body > < form action = \"upload.php\" method = \"post\" enctype = \"multipart/form-data\" > Select image to upload: < input type = \"file\" name = \"fileToUpload\" id = \"fileToUpload\" > < input type = \"submit\" value = \"Upload Image\" name = \"submit\" > </ form > </ body > </ html > Some rules to follow for the HTML form above: Make sure that the form uses method=\"post\" The form also needs the following attribute: enctype=\"multipart/form-data\". It specifies which content-type to use when submitting the form Without the requirements above, the file upload will not work. Other things to notice: The type=\"file\" attribute of the input tag shows the input field as a file-select control, with a \"Browse\" button next to the input control The form above sends data to a file called \"upload.php\", which we will create next.","title":"Create The HTML Form"},{"location":"Adv/phpFile/#create-the-upload-file-php-script","text":"The \"upload.php\" file contains the code for uploading a file: <?php $target_dir = \"uploads/\" ; $target_file = $target_dir . basename ( $_FILES [ \"fileToUpload\" ][ \"name\" ]); $uploadOk = 1 ; $imageFileType = strtolower ( pathinfo ( $target_file , PATHINFO_EXTENSION )); // Check if image file is a actual image or fake image if ( isset ( $_POST [ \"submit\" ])) { $check = getimagesize ( $_FILES [ \"fileToUpload\" ][ \"tmp_name\" ]); if ( $check !== false ) { echo \"File is an image - \" . $check [ \"mime\" ] . \".\" ; $uploadOk = 1 ; } else { echo \"File is not an image.\" ; $uploadOk = 0 ; } } ?> PHP script explained: $target_dir = \"uploads/\" - specifies the directory where the file is going to be placed $target_file specifies the path of the file to be uploaded $uploadOk=1 is not used yet (will be used later) $imageFileType holds the file extension of the file (in lower case) Next, check if the image file is an actual image or a fake image You will need to create a new directory called \"uploads\" in the directory where \"upload.php\" file resides. The uploaded files will be saved there.","title":"Create The Upload File PHP Script"},{"location":"Adv/phpFile/#check-if-file-already-exists","text":"Now we can add some restrictions. First, we will check if the file already exists in the \"uploads\" folder. If it does, an error message is displayed, and $uploadOk is set to 0: // Check if file already exists if (file_exists($target_file)) { echo \"Sorry, file already exists.\"; $uploadOk = 0; } ?>","title":"Check if File Already Exists"},{"location":"Adv/phpFile/#limit-file-size","text":"The file input field in our HTML form above is named \"fileToUpload\". Now, we want to check the size of the file. If the file is larger than 500KB, an error message is displayed, and $uploadOk is set to 0: // Check file size if ($_FILES[\"fileToUpload\"][\"size\"] > 500000) { echo \"Sorry, your file is too large.\"; $uploadOk = 0; } ?>","title":"Limit File Size"},{"location":"Adv/phpFile/#limit-file-type","text":"The code below only allows users to upload JPG, JPEG, PNG, and GIF files. All other file types gives an error message before setting $uploadOk to 0: // Allow certain file formats if($imageFileType != \"jpg\" && $imageFileType != \"png\" && $imageFileType != \"jpeg\" && $imageFileType != \"gif\" ) { echo \"Sorry, only JPG, JPEG, PNG & GIF files are allowed.\"; $uploadOk = 0; } ?>","title":"Limit File Type"},{"location":"Adv/phpFile/#complete-upload-file-php-script","text":"The complete \"upload.php\" file now looks like this: <?php $target_dir = \"uploads/\" ; $target_file = $target_dir . basename ( $_FILES [ \"fileToUpload\" ][ \"name\" ]); $uploadOk = 1 ; $imageFileType = strtolower ( pathinfo ( $target_file , PATHINFO_EXTENSION )); // Check if image file is a actual image or fake image if ( isset ( $_POST [ \"submit\" ])) { $check = getimagesize ( $_FILES [ \"fileToUpload\" ][ \"tmp_name\" ]); if ( $check !== false ) { echo \"File is an image - \" . $check [ \"mime\" ] . \".\" ; $uploadOk = 1 ; } else { echo \"File is not an image.\" ; $uploadOk = 0 ; } } // Check if file already exists if ( file_exists ( $target_file )) { echo \"Sorry, file already exists.\" ; $uploadOk = 0 ; } // Check file size if ( $_FILES [ \"fileToUpload\" ][ \"size\" ] > 500000 ) { echo \"Sorry, your file is too large.\" ; $uploadOk = 0 ; } // Allow certain file formats if ( $imageFileType != \"jpg\" && $imageFileType != \"png\" && $imageFileType != \"jpeg\" && $imageFileType != \"gif\" ) { echo \"Sorry, only JPG, JPEG, PNG & GIF files are allowed.\" ; $uploadOk = 0 ; } // Check if $uploadOk is set to 0 by an error if ( $uploadOk == 0 ) { echo \"Sorry, your file was not uploaded.\" ; // if everything is ok, try to upload file } else { if ( move_uploaded_file ( $_FILES [ \"fileToUpload\" ][ \"tmp_name\" ], $target_file )) { echo \"The file \" . htmlspecialchars ( basename ( $_FILES [ \"fileToUpload\" ][ \"name\" ])) . \" has been uploaded.\" ; } else { echo \"Sorry, there was an error uploading your file.\" ; } } ?>","title":"Complete Upload File PHP Script"},{"location":"Adv/phpInclude/","text":"The include (or require) statement takes all the text/code/markup that exists in the specified file and copies it into the file that uses the include statement. Including files is very useful when you want to include the same PHP, HTML, or text on multiple pages of a website. PHP include and require Statements It is possible to insert the content of one PHP file into another PHP file (before the server executes it), with the include or require statement. The include and require statements are identical, except upon failure: require will produce a fatal error (E_COMPILE_ERROR) and stop the script include will only produce a warning (E_WARNING) and the script will continue So, if you want the execution to go on and show users the output, even if the include file is missing, use the include statement. Otherwise, in case of FrameWork, CMS, or a complex PHP application coding, always use the require statement to include a key file to the flow of execution. This will help avoid compromising your application's security and integrity, just in-case one key file is accidentally missing. Including files saves a lot of work. This means that you can create a standard header, footer, or menu file for all your web pages. Then, when the header needs to be updated, you can only update the header include file. PHP include Examples Example 1 <html> <body> <h1>Welcome to my home page!</h1> <p>Some text.</p> <p>Some more text.</p> <?php include 'footer.php' ; ?> </body> </html> Example 2 Assume we have a standard menu file called \"menu.php\": <?php echo '<a href=\"/default.asp\">Home</a> - <a href=\"/html/default.asp\">HTML Tutorial</a> - <a href=\"/css/default.asp\">CSS Tutorial</a> - <a href=\"/js/default.asp\">JavaScript Tutorial</a> - <a href=\"default.asp\">PHP Tutorial</a>' ; ?> All pages in the Web site should use this menu file. Here is how it can be done (we are using a <'div> element so that the menu easily can be styled with CSS later): <html> <body> <div class=\"menu\"> <?php include 'menu.php' ; ?> </div> <h1>Welcome to my home page!</h1> <p>Some text.</p> <p>Some more text.</p> </body> </html> Example 3 Assume we have a file called \"vars.php\", with some variables defined: <?php $color = 'red' ; $car = 'BMW' ; ?> Then, if we include the \"vars.php\" file, the variables can be used in the calling file: <html> <body> <h1>Welcome to my home page!</h1> <?php include 'vars.php' ; echo \"I have a $color $car .\" ; ?> </body> </html> PHP include vs. require The require statement is also used to include a file into the PHP code. However, there is one big difference between include and require; when a file is included with the include statement and PHP cannot find it, the script will continue to execute: <html> <body> <h1>Welcome to my home page!</h1> <?php include 'noFileExists.php' ; echo \"I have a $color $car .\" ; ?> </body> </html> If we do the same example using the require statement, the echo statement will not be executed because the script execution dies after the require statement returned a fatal error: <html> <body> <h1>Welcome to my home page!</h1> <?php require 'noFileExists.php' ; echo \"I have a $color $car .\" ; ?> </body> </html> Conclusion Use require when the file is required by the application. Use include when the file is not required and application should continue when file is not found.","title":"Include"},{"location":"Adv/phpInclude/#php-include-and-require-statements","text":"It is possible to insert the content of one PHP file into another PHP file (before the server executes it), with the include or require statement. The include and require statements are identical, except upon failure: require will produce a fatal error (E_COMPILE_ERROR) and stop the script include will only produce a warning (E_WARNING) and the script will continue So, if you want the execution to go on and show users the output, even if the include file is missing, use the include statement. Otherwise, in case of FrameWork, CMS, or a complex PHP application coding, always use the require statement to include a key file to the flow of execution. This will help avoid compromising your application's security and integrity, just in-case one key file is accidentally missing. Including files saves a lot of work. This means that you can create a standard header, footer, or menu file for all your web pages. Then, when the header needs to be updated, you can only update the header include file.","title":"PHP include and require Statements"},{"location":"Adv/phpInclude/#php-include-examples","text":"","title":"PHP include Examples"},{"location":"Adv/phpInclude/#example-1","text":"<html> <body> <h1>Welcome to my home page!</h1> <p>Some text.</p> <p>Some more text.</p> <?php include 'footer.php' ; ?> </body> </html>","title":"Example 1"},{"location":"Adv/phpInclude/#example-2","text":"Assume we have a standard menu file called \"menu.php\": <?php echo '<a href=\"/default.asp\">Home</a> - <a href=\"/html/default.asp\">HTML Tutorial</a> - <a href=\"/css/default.asp\">CSS Tutorial</a> - <a href=\"/js/default.asp\">JavaScript Tutorial</a> - <a href=\"default.asp\">PHP Tutorial</a>' ; ?> All pages in the Web site should use this menu file. Here is how it can be done (we are using a <'div> element so that the menu easily can be styled with CSS later): <html> <body> <div class=\"menu\"> <?php include 'menu.php' ; ?> </div> <h1>Welcome to my home page!</h1> <p>Some text.</p> <p>Some more text.</p> </body> </html>","title":"Example 2"},{"location":"Adv/phpInclude/#example-3","text":"Assume we have a file called \"vars.php\", with some variables defined: <?php $color = 'red' ; $car = 'BMW' ; ?> Then, if we include the \"vars.php\" file, the variables can be used in the calling file: <html> <body> <h1>Welcome to my home page!</h1> <?php include 'vars.php' ; echo \"I have a $color $car .\" ; ?> </body> </html>","title":"Example 3"},{"location":"Adv/phpInclude/#php-include-vs-require","text":"The require statement is also used to include a file into the PHP code. However, there is one big difference between include and require; when a file is included with the include statement and PHP cannot find it, the script will continue to execute: <html> <body> <h1>Welcome to my home page!</h1> <?php include 'noFileExists.php' ; echo \"I have a $color $car .\" ; ?> </body> </html> If we do the same example using the require statement, the echo statement will not be executed because the script execution dies after the require statement returned a fatal error: <html> <body> <h1>Welcome to my home page!</h1> <?php require 'noFileExists.php' ; echo \"I have a $color $car .\" ; ?> </body> </html>","title":"PHP include vs. require"},{"location":"Adv/phpInclude/#conclusion","text":"Use require when the file is required by the application. Use include when the file is not required and application should continue when file is not found.","title":"Conclusion"},{"location":"DS/phpArray/","text":"An array stores multiple values in one single variable. <?php $cars = array ( \"Volvo\" , \"BMW\" , \"Toyota\" ); echo \"I like \" . $cars [ 0 ] . \", \" . $cars [ 1 ] . \" and \" . $cars [ 2 ] . \".\" ; ?> Create an Array in PHP In PHP, the array() function is used to create an array: array(); In PHP, there are three types of arrays: Indexed arrays - Arrays with a numeric index Associative arrays - Arrays with named keys Multidimensional arrays - Arrays containing one or more arrays PHP Indexed Arrays There are two ways to create indexed arrays: The index can be assigned automatically (index always starts at 0), like this: $cars = array(\"Volvo\", \"BMW\", \"Toyota\"); or the index can be assigned manually: $cars[0] = \"Volvo\"; $cars[1] = \"BMW\"; $cars[2] = \"Toyota\"; <?php $cars = array ( \"Volvo\" , \"BMW\" , \"Toyota\" ); echo \"I like \" . $cars [ 0 ] . \", \" . $cars [ 1 ] . \" and \" . $cars [ 2 ] . \".\" ; ?> <?php $cars = array ( \"Volvo\" , \"BMW\" , \"Toyota\" ); $arrlength = count ( $cars ); for ( $x = 0 ; $x < $arrlength ; $x ++ ) { echo $cars [ $x ]; echo \"<br>\" ; } ?> PHP Associative Arrays Associative arrays are arrays with named keys. There are two ways to create an associative array: $age = array(\"Peter\"=>\"35\", \"Ben\"=>\"37\", \"Joe\"=>\"43\"); or: $age['Peter'] = \"35\"; $age['Ben'] = \"37\"; $age['Joe'] = \"43\"; <?php $age = array ( \"Peter\" => \"35\" , \"Ben\" => \"37\" , \"Joe\" => \"43\" ); echo \"Peter is \" . $age [ 'Peter' ] . \" years old.\" ; ?> <?php $age = array ( \"Peter\" => \"35\" , \"Ben\" => \"37\" , \"Joe\" => \"43\" ); foreach ( $age as $x => $x_value ) { echo \"Key=\" . $x . \", Value=\" . $x_value ; echo \"<br>\" ; } ?> PHP Multidimensional Arrays Multidimensional arrays are arrays containing one or more arrays. <?php $cars = array ( array ( \"Volvo\" , 22 , 18 ), array ( \"BMW\" , 15 , 13 ), array ( \"Saab\" , 5 , 2 ), array ( \"Land Rover\" , 17 , 15 ) ); echo $cars [ 0 ][ 0 ] . \": In stock: \" . $cars [ 0 ][ 1 ] . \", sold: \" . $cars [ 0 ][ 2 ] . \".<br>\" ; echo $cars [ 1 ][ 0 ] . \": In stock: \" . $cars [ 1 ][ 1 ] . \", sold: \" . $cars [ 1 ][ 2 ] . \".<br>\" ; echo $cars [ 2 ][ 0 ] . \": In stock: \" . $cars [ 2 ][ 1 ] . \", sold: \" . $cars [ 2 ][ 2 ] . \".<br>\" ; echo $cars [ 3 ][ 0 ] . \": In stock: \" . $cars [ 3 ][ 1 ] . \", sold: \" . $cars [ 3 ][ 2 ] . \".<br>\" ; ?> <?php for ( $row = 0 ; $row < 4 ; $row ++ ) { echo \"<p><b>Row number $row </b></p>\" ; echo \"<ul>\" ; for ( $col = 0 ; $col < 3 ; $col ++ ) { echo \"<li>\" . $cars [ $row ][ $col ] . \"</li>\" ; } echo \"</ul>\" ; } ?> The Array Functions The PHP array functions are used to perform operations on arrays. All functions at the reference . The count() Function The count() function is used to return the length (the number of elements) of an array. <?php $cars = array ( \"Volvo\" , \"BMW\" , \"Toyota\" ); echo count ( $cars ); ?> Sorting Arrays sort() - sort arrays in ascending order rsort() - sort arrays in descending order asort() - sort associative arrays in ascending order, according to the value ksort() - sort associative arrays in ascending order, according to the key arsort() - sort associative arrays in descending order, according to the value krsort() - sort associative arrays in descending order, according to the key sort() The sort() function sorts an array alphabetically. <?php $cars = array ( \"Volvo\" , \"BMW\" , \"Toyota\" ); sort ( $cars ); echo $cars [ 0 ]; ?> rsort() The rsort() function sorts an array in descending order. <?php $cars = array ( \"Volvo\" , \"BMW\" , \"Toyota\" ); rsort ( $cars ); echo $cars [ 0 ]; ?> asort() The asort() function sorts an associative array in ascending order, according to the value. <?php $age = array ( \"Peter\" => \"35\" , \"Ben\" => \"37\" , \"Joe\" => \"43\" ); asort ( $age ); foreach ( $age as $x => $x_value ) { echo \"Key=\" . $x . \", Value=\" . $x_value ; echo \"<br>\" ; } ?> ksort() The ksort() function sorts an associative array in ascending order, according to the key. <?php $age = array ( \"Peter\" => \"35\" , \"Ben\" => \"37\" , \"Joe\" => \"43\" ); ksort ( $age ); foreach ( $age as $x => $x_value ) { echo \"Key=\" . $x . \", Value=\" . $x_value ; echo \"<br>\" ; } ?> arsort() The arsort() function sorts an associative array in descending order, according to the value. <?php $age = array ( \"Peter\" => \"35\" , \"Ben\" => \"37\" , \"Joe\" => \"43\" ); arsort ( $age ); foreach ( $age as $x => $x_value ) { echo \"Key=\" . $x . \", Value=\" . $x_value ; echo \"<br>\" ; } ?> krsort() The krsort() function sorts an associative array in descending order, according to the key. <?php $age = array ( \"Peter\" => \"35\" , \"Ben\" => \"37\" , \"Joe\" => \"43\" ); krsort ( $age ); foreach ( $age as $x => $x_value ) { echo \"Key=\" . $x . \", Value=\" . $x_value ; echo \"<br>\" ; } ?>","title":"Array"},{"location":"DS/phpArray/#create-an-array-in-php","text":"In PHP, the array() function is used to create an array: array(); In PHP, there are three types of arrays: Indexed arrays - Arrays with a numeric index Associative arrays - Arrays with named keys Multidimensional arrays - Arrays containing one or more arrays","title":"Create an Array in PHP"},{"location":"DS/phpArray/#php-indexed-arrays","text":"There are two ways to create indexed arrays: The index can be assigned automatically (index always starts at 0), like this: $cars = array(\"Volvo\", \"BMW\", \"Toyota\"); or the index can be assigned manually: $cars[0] = \"Volvo\"; $cars[1] = \"BMW\"; $cars[2] = \"Toyota\"; <?php $cars = array ( \"Volvo\" , \"BMW\" , \"Toyota\" ); echo \"I like \" . $cars [ 0 ] . \", \" . $cars [ 1 ] . \" and \" . $cars [ 2 ] . \".\" ; ?> <?php $cars = array ( \"Volvo\" , \"BMW\" , \"Toyota\" ); $arrlength = count ( $cars ); for ( $x = 0 ; $x < $arrlength ; $x ++ ) { echo $cars [ $x ]; echo \"<br>\" ; } ?>","title":"PHP Indexed Arrays"},{"location":"DS/phpArray/#php-associative-arrays","text":"Associative arrays are arrays with named keys. There are two ways to create an associative array: $age = array(\"Peter\"=>\"35\", \"Ben\"=>\"37\", \"Joe\"=>\"43\"); or: $age['Peter'] = \"35\"; $age['Ben'] = \"37\"; $age['Joe'] = \"43\"; <?php $age = array ( \"Peter\" => \"35\" , \"Ben\" => \"37\" , \"Joe\" => \"43\" ); echo \"Peter is \" . $age [ 'Peter' ] . \" years old.\" ; ?> <?php $age = array ( \"Peter\" => \"35\" , \"Ben\" => \"37\" , \"Joe\" => \"43\" ); foreach ( $age as $x => $x_value ) { echo \"Key=\" . $x . \", Value=\" . $x_value ; echo \"<br>\" ; } ?>","title":"PHP Associative Arrays"},{"location":"DS/phpArray/#php-multidimensional-arrays","text":"Multidimensional arrays are arrays containing one or more arrays. <?php $cars = array ( array ( \"Volvo\" , 22 , 18 ), array ( \"BMW\" , 15 , 13 ), array ( \"Saab\" , 5 , 2 ), array ( \"Land Rover\" , 17 , 15 ) ); echo $cars [ 0 ][ 0 ] . \": In stock: \" . $cars [ 0 ][ 1 ] . \", sold: \" . $cars [ 0 ][ 2 ] . \".<br>\" ; echo $cars [ 1 ][ 0 ] . \": In stock: \" . $cars [ 1 ][ 1 ] . \", sold: \" . $cars [ 1 ][ 2 ] . \".<br>\" ; echo $cars [ 2 ][ 0 ] . \": In stock: \" . $cars [ 2 ][ 1 ] . \", sold: \" . $cars [ 2 ][ 2 ] . \".<br>\" ; echo $cars [ 3 ][ 0 ] . \": In stock: \" . $cars [ 3 ][ 1 ] . \", sold: \" . $cars [ 3 ][ 2 ] . \".<br>\" ; ?> <?php for ( $row = 0 ; $row < 4 ; $row ++ ) { echo \"<p><b>Row number $row </b></p>\" ; echo \"<ul>\" ; for ( $col = 0 ; $col < 3 ; $col ++ ) { echo \"<li>\" . $cars [ $row ][ $col ] . \"</li>\" ; } echo \"</ul>\" ; } ?>","title":"PHP Multidimensional Arrays"},{"location":"DS/phpArray/#the-array-functions","text":"The PHP array functions are used to perform operations on arrays. All functions at the reference .","title":"The Array Functions"},{"location":"DS/phpArray/#the-count-function","text":"The count() function is used to return the length (the number of elements) of an array. <?php $cars = array ( \"Volvo\" , \"BMW\" , \"Toyota\" ); echo count ( $cars ); ?>","title":"The count() Function"},{"location":"DS/phpArray/#sorting-arrays","text":"sort() - sort arrays in ascending order rsort() - sort arrays in descending order asort() - sort associative arrays in ascending order, according to the value ksort() - sort associative arrays in ascending order, according to the key arsort() - sort associative arrays in descending order, according to the value krsort() - sort associative arrays in descending order, according to the key","title":"Sorting Arrays"},{"location":"DS/phpArray/#sort","text":"The sort() function sorts an array alphabetically. <?php $cars = array ( \"Volvo\" , \"BMW\" , \"Toyota\" ); sort ( $cars ); echo $cars [ 0 ]; ?>","title":"sort()"},{"location":"DS/phpArray/#rsort","text":"The rsort() function sorts an array in descending order. <?php $cars = array ( \"Volvo\" , \"BMW\" , \"Toyota\" ); rsort ( $cars ); echo $cars [ 0 ]; ?>","title":"rsort()"},{"location":"DS/phpArray/#asort","text":"The asort() function sorts an associative array in ascending order, according to the value. <?php $age = array ( \"Peter\" => \"35\" , \"Ben\" => \"37\" , \"Joe\" => \"43\" ); asort ( $age ); foreach ( $age as $x => $x_value ) { echo \"Key=\" . $x . \", Value=\" . $x_value ; echo \"<br>\" ; } ?>","title":"asort()"},{"location":"DS/phpArray/#ksort","text":"The ksort() function sorts an associative array in ascending order, according to the key. <?php $age = array ( \"Peter\" => \"35\" , \"Ben\" => \"37\" , \"Joe\" => \"43\" ); ksort ( $age ); foreach ( $age as $x => $x_value ) { echo \"Key=\" . $x . \", Value=\" . $x_value ; echo \"<br>\" ; } ?>","title":"ksort()"},{"location":"DS/phpArray/#arsort","text":"The arsort() function sorts an associative array in descending order, according to the value. <?php $age = array ( \"Peter\" => \"35\" , \"Ben\" => \"37\" , \"Joe\" => \"43\" ); arsort ( $age ); foreach ( $age as $x => $x_value ) { echo \"Key=\" . $x . \", Value=\" . $x_value ; echo \"<br>\" ; } ?>","title":"arsort()"},{"location":"DS/phpArray/#krsort","text":"The krsort() function sorts an associative array in descending order, according to the key. <?php $age = array ( \"Peter\" => \"35\" , \"Ben\" => \"37\" , \"Joe\" => \"43\" ); krsort ( $age ); foreach ( $age as $x => $x_value ) { echo \"Key=\" . $x . \", Value=\" . $x_value ; echo \"<br>\" ; } ?>","title":"krsort()"},{"location":"Func/phpAll/","text":"PHP has over 1000 built-in functions that can be called directly, from within a script, to perform a specific task. Here is a list of all PHP functions, keywords and constants, along with examples. PHP Functions Functions Array Calendar Date Directory Error Exception Filesystem Filter FTP JSON Keywords Libxml Mail Math Misc MySQLi Network Output Control RegEx SimpleXML Stream String Var Handling XML Parser Zip Timezones","title":"All"},{"location":"Func/phpCallback/","text":"A callback function (often referred to as just \"callback\") is a function which is passed as an argument into another function. Any existing function can be used as a callback function. To use a function as a callback function, pass a string containing the name of the function as the argument of another function: <?php function my_callback ( $item ) { return strlen ( $item ); } $strings = [ \"apple\" , \"orange\" , \"banana\" , \"coconut\" ]; $lengths = array_map ( \"my_callback\" , $strings ); print_r ( $lengths ); ?> Starting with version 7, PHP can pass anonymous functions as callback functions: <?php $strings = [ \"apple\" , \"orange\" , \"banana\" , \"coconut\" ]; $lengths = array_map ( function ( $item ) { return strlen ( $item ); } , $strings ); print_r ( $lengths ); ?> Callbacks in User Defined Functions User-defined functions and methods can also take callback functions as arguments. To use callback functions inside a user-defined function or method, call it by adding parentheses to the variable and pass arguments as with normal functions: <?php function exclaim ( $str ) { return $str . \"! \" ; } function ask ( $str ) { return $str . \"? \" ; } function printFormatted ( $str , $format ) { // Calling the $format callback function echo $format ( $str ); } // Pass \"exclaim\" and \"ask\" as callback functions to printFormatted() printFormatted ( \"Hello world\" , \"exclaim\" ); printFormatted ( \"Hello world\" , \"ask\" ); ?>","title":"Callback"},{"location":"Func/phpCallback/#callbacks-in-user-defined-functions","text":"User-defined functions and methods can also take callback functions as arguments. To use callback functions inside a user-defined function or method, call it by adding parentheses to the variable and pass arguments as with normal functions: <?php function exclaim ( $str ) { return $str . \"! \" ; } function ask ( $str ) { return $str . \"? \" ; } function printFormatted ( $str , $format ) { // Calling the $format callback function echo $format ( $str ); } // Pass \"exclaim\" and \"ask\" as callback functions to printFormatted() printFormatted ( \"Hello world\" , \"exclaim\" ); printFormatted ( \"Hello world\" , \"ask\" ); ?>","title":"Callbacks in User Defined Functions"},{"location":"Func/phpCookie/","text":"A cookie is often used to identify a user. A cookie is a small file that the server embeds on the user's computer. Each time the same computer requests a page with a browser, it will send the cookie too. With PHP, you can both create and retrieve cookie values. setcookie() setcookie($name, $value = \"\", $expire = \"\", $path = \"\", $domain = \"\", $secure = \"\", $httponly = \"\"); Only the name parameter is required. All other parameters are optional. Create/Retrieve a Cookie The following example creates a cookie named \"user\" with the value \"John Doe\". The cookie will expire after 30 days (86400 * 30). The \"/\" means that the cookie is available in entire website (otherwise, select the directory you prefer). We then retrieve the value of the cookie \"user\" (using the global variable $_COOKIE). We also use the isset() function to find out if the cookie is set: <?php $cookie_name = \"user\" ; $cookie_value = \"John Doe\" ; setcookie ( $cookie_name , $cookie_value , time () + ( 86400 * 30 ), \"/\" ); // 86400 = 1 day ?> <html> <body> <?php if ( ! isset ( $_COOKIE [ $cookie_name ])) { echo \"Cookie named '\" . $cookie_name . \"' is not set!\" ; } else { echo \"Cookie '\" . $cookie_name . \"' is set!<br>\" ; echo \"Value is: \" . $_COOKIE [ $cookie_name ]; } ?> </body> </html> The setcookie() function must appear BEFORE the html tag. The value of the cookie is automatically URLencoded when sending the cookie, and automatically decoded when received (to prevent URLencoding, use setrawcookie() instead). Modify a Cookie Value To modify a cookie, just set (again) the cookie using the setcookie() function: <?php $cookie_name = \"user\" ; $cookie_value = \"Alex Porter\" ; setcookie ( $cookie_name , $cookie_value , time () + ( 86400 * 30 ), \"/\" ); ?> <html> <body> <?php if ( ! isset ( $_COOKIE [ $cookie_name ])) { echo \"Cookie named '\" . $cookie_name . \"' is not set!\" ; } else { echo \"Cookie '\" . $cookie_name . \"' is set!<br>\" ; echo \"Value is: \" . $_COOKIE [ $cookie_name ]; } ?> </body> </html> Delete a Cookie To delete a cookie, use the setcookie() function with an expiration date in the past: <?php // set the expiration date to one hour ago setcookie ( \"user\" , \"\" , time () - 3600 ); ?> <html> <body> <?php echo \"Cookie 'user' is deleted.\" ; ?> </body> </html> Check if Cookies are Enabled The following example creates a small script that checks whether cookies are enabled. First, try to create a test cookie with the setcookie() function, then count the $_COOKIE array variable: <?php setcookie ( \"test_cookie\" , \"test\" , time () + 3600 , '/' ); ?> <html> <body> <?php if ( count ( $_COOKIE ) > 0 ) { echo \"Cookies are enabled.\" ; } else { echo \"Cookies are disabled.\" ; } ?> </body> </html>","title":"Cookies"},{"location":"Func/phpCookie/#setcookie","text":"setcookie($name, $value = \"\", $expire = \"\", $path = \"\", $domain = \"\", $secure = \"\", $httponly = \"\"); Only the name parameter is required. All other parameters are optional.","title":"setcookie()"},{"location":"Func/phpCookie/#createretrieve-a-cookie","text":"The following example creates a cookie named \"user\" with the value \"John Doe\". The cookie will expire after 30 days (86400 * 30). The \"/\" means that the cookie is available in entire website (otherwise, select the directory you prefer). We then retrieve the value of the cookie \"user\" (using the global variable $_COOKIE). We also use the isset() function to find out if the cookie is set: <?php $cookie_name = \"user\" ; $cookie_value = \"John Doe\" ; setcookie ( $cookie_name , $cookie_value , time () + ( 86400 * 30 ), \"/\" ); // 86400 = 1 day ?> <html> <body> <?php if ( ! isset ( $_COOKIE [ $cookie_name ])) { echo \"Cookie named '\" . $cookie_name . \"' is not set!\" ; } else { echo \"Cookie '\" . $cookie_name . \"' is set!<br>\" ; echo \"Value is: \" . $_COOKIE [ $cookie_name ]; } ?> </body> </html> The setcookie() function must appear BEFORE the html tag. The value of the cookie is automatically URLencoded when sending the cookie, and automatically decoded when received (to prevent URLencoding, use setrawcookie() instead).","title":"Create/Retrieve a Cookie"},{"location":"Func/phpCookie/#modify-a-cookie-value","text":"To modify a cookie, just set (again) the cookie using the setcookie() function: <?php $cookie_name = \"user\" ; $cookie_value = \"Alex Porter\" ; setcookie ( $cookie_name , $cookie_value , time () + ( 86400 * 30 ), \"/\" ); ?> <html> <body> <?php if ( ! isset ( $_COOKIE [ $cookie_name ])) { echo \"Cookie named '\" . $cookie_name . \"' is not set!\" ; } else { echo \"Cookie '\" . $cookie_name . \"' is set!<br>\" ; echo \"Value is: \" . $_COOKIE [ $cookie_name ]; } ?> </body> </html>","title":"Modify a Cookie Value"},{"location":"Func/phpCookie/#delete-a-cookie","text":"To delete a cookie, use the setcookie() function with an expiration date in the past: <?php // set the expiration date to one hour ago setcookie ( \"user\" , \"\" , time () - 3600 ); ?> <html> <body> <?php echo \"Cookie 'user' is deleted.\" ; ?> </body> </html>","title":"Delete a Cookie"},{"location":"Func/phpCookie/#check-if-cookies-are-enabled","text":"The following example creates a small script that checks whether cookies are enabled. First, try to create a test cookie with the setcookie() function, then count the $_COOKIE array variable: <?php setcookie ( \"test_cookie\" , \"test\" , time () + 3600 , '/' ); ?> <html> <body> <?php if ( count ( $_COOKIE ) > 0 ) { echo \"Cookies are enabled.\" ; } else { echo \"Cookies are disabled.\" ; } ?> </body> </html>","title":"Check if Cookies are Enabled"},{"location":"Func/phpDate/","text":"The PHP date() function is used to format a date and/or a time. Date() Function The PHP date() function formats a timestamp to a more readable date and time. date(format,timestamp) Parameter Description format Required. Specifies the format of the timestamp timestamp Optional. Specifies a timestamp. Default is the current date and time. A timestamp is a sequence of characters, denoting the date and/or time at which a certain event occurred. Get a Date The required format parameter of the date() function specifies how to format the date (or time). Here are some characters that are commonly used for dates: d - Represents the day of the month (01 to 31) m - Represents a month (01 to 12) Y - Represents a year (in four digits) l (lowercase 'L') - Represents the day of the week Other characters, like\"/\", \".\", or \"-\" can also be inserted between the characters to add additional formatting. <?php echo \"Today is \" . date ( \"Y/m/d\" ) . \"<br>\" ; echo \"Today is \" . date ( \"Y.m.d\" ) . \"<br>\" ; echo \"Today is \" . date ( \"Y-m-d\" ) . \"<br>\" ; echo \"Today is \" . date ( \"l\" ); & copy ; 2010 -<? php echo date ( \"Y\" ); ?> #Automatic Copyright Year ?> Get a Time Here are some characters that are commonly used for times: H - 24-hour format of an hour (00 to 23) h - 12-hour format of an hour with leading zeros (01 to 12) i - Minutes with leading zeros (00 to 59) s - Seconds with leading zeros (00 to 59) a - Lowercase Ante meridiem and Post meridiem (am or pm) <?php echo \"The time is \" . date ( \"h:i:sa\" ); ?> PHP date() function will return the current date/time of the server. Get Your Time Zone If the time you got back from the code is not correct, it's probably because your server is in another country or set up for a different timezone. So, if you need the time to be correct according to a specific location, you can set the timezone you want to use. <?php date_default_timezone_set ( 'America/New_York' ); echo \"The time is \" . date ( \"h:i:sa\" ); ?> Create a Date With mktime() The optional timestamp parameter in the date() function specifies a timestamp. If omitted, the current date and time will be used (as in the examples above). The PHP mktime() function returns the Unix timestamp for a date. The Unix timestamp contains the number of seconds between the Unix Epoch (January 1 1970 00:00:00 GMT) and the time specified. Syntax mktime(hour, minute, second, month, day, year) <?php $d = mktime ( 11 , 14 , 54 , 8 , 12 , 2014 ); echo \"Created date is \" . date ( \"Y-m-d h:i:sa\" , $d ); ?> Create a Date From a String With strtotime() The PHP strtotime() function is used to convert a human readable date string into a Unix timestamp (the number of seconds since January 1 1970 00:00:00 GMT). Syntax strtotime(time, now) <?php $d = strtotime ( \"10:30pm April 15 2014\" ); echo \"Created date is \" . date ( \"Y-m-d h:i:sa\" , $d ); ?> <?php $d = strtotime ( \"tomorrow\" ); echo date ( \"Y-m-d h:i:sa\" , $d ) . \"<br>\" ; $d = strtotime ( \"next Saturday\" ); echo date ( \"Y-m-d h:i:sa\" , $d ) . \"<br>\" ; $d = strtotime ( \"+3 Months\" ); echo date ( \"Y-m-d h:i:sa\" , $d ) . \"<br>\" ; ?> <?php $d = strtotime ( \"last Sunday\" ); echo date ( \"Y-m-d h:i:sa\" , $d ) . \"<br>\" ; $startdate = strtotime ( \"Saturday\" ); $enddate = strtotime ( \"+6 weeks\" , $startdate ); while ( $startdate < $enddate ) { echo date ( \"M d\" , $startdate ) . \"<br>\" ; $startdate = strtotime ( \"+1 week\" , $startdate ); } ?> <?php $d1 = strtotime ( \"July 04\" ); $d2 = ceil (( $d1 - time ()) / 60 / 60 / 24 ); echo \"There are \" . $d2 . \" days until 4th of July.\" ; ?>","title":"Date/Time"},{"location":"Func/phpDate/#date-function","text":"The PHP date() function formats a timestamp to a more readable date and time. date(format,timestamp) Parameter Description format Required. Specifies the format of the timestamp timestamp Optional. Specifies a timestamp. Default is the current date and time. A timestamp is a sequence of characters, denoting the date and/or time at which a certain event occurred.","title":"Date() Function"},{"location":"Func/phpDate/#get-a-date","text":"The required format parameter of the date() function specifies how to format the date (or time). Here are some characters that are commonly used for dates: d - Represents the day of the month (01 to 31) m - Represents a month (01 to 12) Y - Represents a year (in four digits) l (lowercase 'L') - Represents the day of the week Other characters, like\"/\", \".\", or \"-\" can also be inserted between the characters to add additional formatting. <?php echo \"Today is \" . date ( \"Y/m/d\" ) . \"<br>\" ; echo \"Today is \" . date ( \"Y.m.d\" ) . \"<br>\" ; echo \"Today is \" . date ( \"Y-m-d\" ) . \"<br>\" ; echo \"Today is \" . date ( \"l\" ); & copy ; 2010 -<? php echo date ( \"Y\" ); ?> #Automatic Copyright Year ?>","title":"Get a Date"},{"location":"Func/phpDate/#get-a-time","text":"Here are some characters that are commonly used for times: H - 24-hour format of an hour (00 to 23) h - 12-hour format of an hour with leading zeros (01 to 12) i - Minutes with leading zeros (00 to 59) s - Seconds with leading zeros (00 to 59) a - Lowercase Ante meridiem and Post meridiem (am or pm) <?php echo \"The time is \" . date ( \"h:i:sa\" ); ?> PHP date() function will return the current date/time of the server.","title":"Get a Time"},{"location":"Func/phpDate/#get-your-time-zone","text":"If the time you got back from the code is not correct, it's probably because your server is in another country or set up for a different timezone. So, if you need the time to be correct according to a specific location, you can set the timezone you want to use. <?php date_default_timezone_set ( 'America/New_York' ); echo \"The time is \" . date ( \"h:i:sa\" ); ?>","title":"Get Your Time Zone"},{"location":"Func/phpDate/#create-a-date-with-mktime","text":"The optional timestamp parameter in the date() function specifies a timestamp. If omitted, the current date and time will be used (as in the examples above). The PHP mktime() function returns the Unix timestamp for a date. The Unix timestamp contains the number of seconds between the Unix Epoch (January 1 1970 00:00:00 GMT) and the time specified. Syntax mktime(hour, minute, second, month, day, year) <?php $d = mktime ( 11 , 14 , 54 , 8 , 12 , 2014 ); echo \"Created date is \" . date ( \"Y-m-d h:i:sa\" , $d ); ?>","title":"Create a Date With mktime()"},{"location":"Func/phpDate/#create-a-date-from-a-string-with-strtotime","text":"The PHP strtotime() function is used to convert a human readable date string into a Unix timestamp (the number of seconds since January 1 1970 00:00:00 GMT). Syntax strtotime(time, now) <?php $d = strtotime ( \"10:30pm April 15 2014\" ); echo \"Created date is \" . date ( \"Y-m-d h:i:sa\" , $d ); ?> <?php $d = strtotime ( \"tomorrow\" ); echo date ( \"Y-m-d h:i:sa\" , $d ) . \"<br>\" ; $d = strtotime ( \"next Saturday\" ); echo date ( \"Y-m-d h:i:sa\" , $d ) . \"<br>\" ; $d = strtotime ( \"+3 Months\" ); echo date ( \"Y-m-d h:i:sa\" , $d ) . \"<br>\" ; ?> <?php $d = strtotime ( \"last Sunday\" ); echo date ( \"Y-m-d h:i:sa\" , $d ) . \"<br>\" ; $startdate = strtotime ( \"Saturday\" ); $enddate = strtotime ( \"+6 weeks\" , $startdate ); while ( $startdate < $enddate ) { echo date ( \"M d\" , $startdate ) . \"<br>\" ; $startdate = strtotime ( \"+1 week\" , $startdate ); } ?> <?php $d1 = strtotime ( \"July 04\" ); $d2 = ceil (( $d1 - time ()) / 60 / 60 / 24 ); echo \"There are \" . $d2 . \" days until 4th of July.\" ; ?>","title":"Create a Date From a String With strtotime()"},{"location":"Func/phpExceptions/","text":"An exception is an object that describes an error or unexpected behaviour of a PHP script. Exceptions are thrown by many PHP functions and classes. User defined functions and classes can also throw exceptions. Exceptions are a good way to stop a function when it comes across data that it cannot use. Throwing an Exception The throw statement allows a user defined function or method to throw an exception. When an exception is thrown, the code following it will not be executed. If an exception is not caught, a fatal error will occur with an \"Uncaught Exception\" message. <?php function divide ( $dividend , $divisor ) { if ( $divisor == 0 ) { throw new Exception ( \"Division by zero\" ); } return $dividend / $divisor ; } echo divide ( 5 , 0 ); ?> The result will look something like this: Fatal error: Uncaught Exception: Division by zero in C:\\webfolder\\test.php:4 Stack trace: #0 C:\\webfolder\\test.php(9): divide(5, 0) #1 {main} thrown in C:\\webfolder\\test.php on line 4 The try...catch Statement To avoid the error from the example above, we can use the try...catch statement to catch exceptions and continue the process. <?php function divide ( $dividend , $divisor ) { if ( $divisor == 0 ) { throw new Exception ( \"Division by zero\" ); } return $dividend / $divisor ; } try { echo divide ( 5 , 0 ); } catch ( Exception $e ) { echo \"Unable to divide.\" ; } ?> The catch block indicates what type of exception should be caught and the name of the variable which can be used to access the exception. In the example above, the type of exception is Exception and the variable name is $e. The try...catch...finally Statement The try...catch...finally statement can be used to catch exceptions. Code in the finally block will always run regardless of whether an exception was caught. If finally is present, the catch block is optional. <?php function divide ( $dividend , $divisor ) { if ( $divisor == 0 ) { throw new Exception ( \"Division by zero\" ); } return $dividend / $divisor ; } try { echo divide ( 5 , 0 ); } catch ( Exception $e ) { echo \"Unable to divide. \" ; } finally { echo \"Process complete.\" ; } ?> <?php function divide ( $dividend , $divisor ) { if ( $divisor == 0 ) { throw new Exception ( \"Division by zero\" ); } return $dividend / $divisor ; } try { echo divide ( 5 , 0 ); } finally { echo \"Process complete.\" ; } ?> The Exception Object The Exception Object contains information about the error or unexpected behaviour that the function encountered. Syntax new Exception(message, code, previous) Parameter Values Parameter Description message Optional. A string describing why the exception was thrown code Optional. An integer that can be used to easily distinguish this exception from others of the same type previous Optional. If this exception was thrown in a catch block of another exception, it is recommended to pass that exception into this parameter Methods When catching an exception, the following table shows some of the methods that can be used to get information about the exception: Method Description getMessage() Returns a string describing why the exception was thrown getPrevious() If this exception was triggered by another one, this method returns the previous exception. If not, then it returns null getCode() Returns the exception code getFile() Returns the full path of the file in which the exception was thrown getLine() Returns the line number of the line of code which threw the exception <?php function divide ( $dividend , $divisor ) { if ( $divisor == 0 ) { throw new Exception ( \"Division by zero\" , 1 ); } return $dividend / $divisor ; } try { echo divide ( 5 , 0 ); } catch ( Exception $ex ) { $code = $ex -> getCode (); $message = $ex -> getMessage (); $file = $ex -> getFile (); $line = $ex -> getLine (); echo \"Exception thrown in $file on line $line : [Code $code ] $message \" ; } ?>","title":"Exceptions"},{"location":"Func/phpExceptions/#throwing-an-exception","text":"The throw statement allows a user defined function or method to throw an exception. When an exception is thrown, the code following it will not be executed. If an exception is not caught, a fatal error will occur with an \"Uncaught Exception\" message. <?php function divide ( $dividend , $divisor ) { if ( $divisor == 0 ) { throw new Exception ( \"Division by zero\" ); } return $dividend / $divisor ; } echo divide ( 5 , 0 ); ?> The result will look something like this: Fatal error: Uncaught Exception: Division by zero in C:\\webfolder\\test.php:4 Stack trace: #0 C:\\webfolder\\test.php(9): divide(5, 0) #1 {main} thrown in C:\\webfolder\\test.php on line 4","title":"Throwing an Exception"},{"location":"Func/phpExceptions/#the-trycatch-statement","text":"To avoid the error from the example above, we can use the try...catch statement to catch exceptions and continue the process. <?php function divide ( $dividend , $divisor ) { if ( $divisor == 0 ) { throw new Exception ( \"Division by zero\" ); } return $dividend / $divisor ; } try { echo divide ( 5 , 0 ); } catch ( Exception $e ) { echo \"Unable to divide.\" ; } ?> The catch block indicates what type of exception should be caught and the name of the variable which can be used to access the exception. In the example above, the type of exception is Exception and the variable name is $e.","title":"The try...catch Statement"},{"location":"Func/phpExceptions/#the-trycatchfinally-statement","text":"The try...catch...finally statement can be used to catch exceptions. Code in the finally block will always run regardless of whether an exception was caught. If finally is present, the catch block is optional. <?php function divide ( $dividend , $divisor ) { if ( $divisor == 0 ) { throw new Exception ( \"Division by zero\" ); } return $dividend / $divisor ; } try { echo divide ( 5 , 0 ); } catch ( Exception $e ) { echo \"Unable to divide. \" ; } finally { echo \"Process complete.\" ; } ?> <?php function divide ( $dividend , $divisor ) { if ( $divisor == 0 ) { throw new Exception ( \"Division by zero\" ); } return $dividend / $divisor ; } try { echo divide ( 5 , 0 ); } finally { echo \"Process complete.\" ; } ?>","title":"The try...catch...finally Statement"},{"location":"Func/phpExceptions/#the-exception-object","text":"The Exception Object contains information about the error or unexpected behaviour that the function encountered.","title":"The Exception Object"},{"location":"Func/phpExceptions/#syntax","text":"new Exception(message, code, previous)","title":"Syntax"},{"location":"Func/phpExceptions/#parameter-values","text":"Parameter Description message Optional. A string describing why the exception was thrown code Optional. An integer that can be used to easily distinguish this exception from others of the same type previous Optional. If this exception was thrown in a catch block of another exception, it is recommended to pass that exception into this parameter","title":"Parameter Values"},{"location":"Func/phpExceptions/#methods","text":"When catching an exception, the following table shows some of the methods that can be used to get information about the exception: Method Description getMessage() Returns a string describing why the exception was thrown getPrevious() If this exception was triggered by another one, this method returns the previous exception. If not, then it returns null getCode() Returns the exception code getFile() Returns the full path of the file in which the exception was thrown getLine() Returns the line number of the line of code which threw the exception <?php function divide ( $dividend , $divisor ) { if ( $divisor == 0 ) { throw new Exception ( \"Division by zero\" , 1 ); } return $dividend / $divisor ; } try { echo divide ( 5 , 0 ); } catch ( Exception $ex ) { $code = $ex -> getCode (); $message = $ex -> getMessage (); $file = $ex -> getFile (); $line = $ex -> getLine (); echo \"Exception thrown in $file on line $line : [Code $code ] $message \" ; } ?>","title":"Methods"},{"location":"Func/phpFilters/","text":"Validating data = Determine if the data is in proper form. Sanitizing data = Remove any illegal character from the data. PHP filters are used to validate and sanitize external input. The PHP filter extension has many of the functions needed for checking user input, and is designed to make data validation easier and quicker. The filter_list() function can be used to list what the PHP filter extension offers: <table> <tr> <td>Filter Name</td> <td>Filter ID</td> </tr> <?php foreach ( filter_list () as $id => $filter ) { echo '<tr><td>' . $filter . '</td><td>' . filter_id ( $filter ) . '</td></tr>' ; } ?> </table> Filter Name Filter ID int 257 boolean 258 float 259 validate_regexp 272 validate_domain 277 validate_url 273 validate_email 274 validate_ip 275 validate_mac 276 string 513 stripped 513 encoded 514 special_chars 515 full_special_chars 522 unsafe_raw 516 email 517 url 518 number_int 519 number_float 520 magic_quotes 521 callback 1024 Why Use Filters? Many web applications receive external input. External input/data can be: User input from a form Cookies Web services data Server variables Database query results Invalid submitted data can lead to security problems and break your webpage! By using PHP filters you can be sure your application gets the correct input! filter_var() The filter_var() function both validate and sanitize data. The filter_var() function filters a single variable with a specified filter. It takes two pieces of data: The variable you want to check The type of check to use Sanitize a String The following example uses the filter_var() function to remove all HTML tags from a string: <?php $input = \"<b>Hello!</b>\" ; $output = filter_var ( $input , FILTER_SANITIZE_STRING ); echo $output ; ?> Validate an Integer The following example uses the filter_var() function to check if the variable $int is an integer. If $int is an integer, the output of the code below will be: \"Integer is valid\". If $int is not an integer, the output will be: \"Integer is not valid\": <?php $int = 100 ; if ( ! filter_var ( $int , FILTER_VALIDATE_INT ) === false ) { echo ( \"Integer is valid\" ); } else { echo ( \"Integer is not valid\" ); } ?> filter_var() and Problem With 0 In the example above, if $int was set to 0, the function above will return \"Integer is not valid\". To solve this problem, use the code below: <?php $int = 0 ; if ( filter_var ( $int , FILTER_VALIDATE_INT ) === 0 || ! filter_var ( $int , FILTER_VALIDATE_INT ) === false ) { echo ( \"Integer is valid\" ); } else { echo ( \"Integer is not valid\" ); } ?> Validate an IP Address The following example uses the filter_var() function to check if the variable $ip is a valid IP address: <?php $ip = \"127.0.0.1\" ; if ( ! filter_var ( $ip , FILTER_VALIDATE_IP ) === false ) { echo ( \" $ip is a valid IP address\" ); } else { echo ( \" $ip is not a valid IP address\" ); } ?> Sanitize and Validate an Email Address The following example uses the filter_var() function to first remove all illegal characters from the $email variable, then check if it is a valid email address: <?php $email = \"john.doe@example.com\" ; // Remove all illegal characters from email $email = filter_var ( $email , FILTER_SANITIZE_EMAIL ); // Validate e-mail if ( ! filter_var ( $email , FILTER_VALIDATE_EMAIL ) === false ) { echo ( \" $email is a valid email address\" ); } else { echo ( \" $email is not a valid email address\" ); } ?> Sanitize and Validate a URL The following example uses the filter_var() function to first remove all illegal characters from a URL, then check if $url is a valid URL: <?php $url = \"https://www.example.com\" ; // Remove all illegal characters from a url $url = filter_var ( $url , FILTER_SANITIZE_URL ); // Validate url if ( ! filter_var ( $url , FILTER_VALIDATE_URL ) === false ) { echo ( \" $url is a valid URL\" ); } else { echo ( \" $url is not a valid URL\" ); } ?> Validate an Integer Within a Range The following example uses the filter_var() function to check if a variable is both of type INT, and between 1 and 200: <?php $int = 122 ; $min = 1 ; $max = 200 ; if ( filter_var ( $int , FILTER_VALIDATE_INT , array ( \"options\" => array ( \"min_range\" => $min , \"max_range\" => $max ))) === false ) { echo ( \"Variable value is not within the legal range\" ); } else { echo ( \"Variable value is within the legal range\" ); } ?> Validate IPv6 Address The following example uses the filter_var() function to check if the variable $ip is a valid IPv6 address: <?php $ip = \"2001:0db8:85a3:08d3:1319:8a2e:0370:7334\" ; if ( ! filter_var ( $ip , FILTER_VALIDATE_IP , FILTER_FLAG_IPV6 ) === false ) { echo ( \" $ip is a valid IPv6 address\" ); } else { echo ( \" $ip is not a valid IPv6 address\" ); } ?> Validate URL - Must Contain QueryString The following example uses the filter_var() function to check if the variable $url is a URL with a querystring: <?php $url = \"https://www.example.com?name=Alex\" ; if ( ! filter_var ( $url , FILTER_VALIDATE_URL , FILTER_FLAG_QUERY_REQUIRED ) === false ) { echo ( \" $url is a valid URL with a query string\" ); } else { echo ( \" $url is not a valid URL with a query string\" ); } ?> Remove Characters With ASCII Value > 127 The following example uses the filter_var() function to sanitize a string. It will both remove all HTML tags, and all characters with ASCII value > 127, from the string: <?php $str = \"<h1>Hello World\u00c6\u00d8\u00c5!</h1>\" ; $newstr = filter_var ( $str , FILTER_SANITIZE_STRING , FILTER_FLAG_STRIP_HIGH ); echo $newstr ; ?>","title":"Filters"},{"location":"Func/phpFilters/#why-use-filters","text":"Many web applications receive external input. External input/data can be: User input from a form Cookies Web services data Server variables Database query results Invalid submitted data can lead to security problems and break your webpage! By using PHP filters you can be sure your application gets the correct input!","title":"Why Use Filters?"},{"location":"Func/phpFilters/#filter_var","text":"The filter_var() function both validate and sanitize data. The filter_var() function filters a single variable with a specified filter. It takes two pieces of data: The variable you want to check The type of check to use","title":"filter_var()"},{"location":"Func/phpFilters/#sanitize-a-string","text":"The following example uses the filter_var() function to remove all HTML tags from a string: <?php $input = \"<b>Hello!</b>\" ; $output = filter_var ( $input , FILTER_SANITIZE_STRING ); echo $output ; ?>","title":"Sanitize a String"},{"location":"Func/phpFilters/#validate-an-integer","text":"The following example uses the filter_var() function to check if the variable $int is an integer. If $int is an integer, the output of the code below will be: \"Integer is valid\". If $int is not an integer, the output will be: \"Integer is not valid\": <?php $int = 100 ; if ( ! filter_var ( $int , FILTER_VALIDATE_INT ) === false ) { echo ( \"Integer is valid\" ); } else { echo ( \"Integer is not valid\" ); } ?> filter_var() and Problem With 0 In the example above, if $int was set to 0, the function above will return \"Integer is not valid\". To solve this problem, use the code below: <?php $int = 0 ; if ( filter_var ( $int , FILTER_VALIDATE_INT ) === 0 || ! filter_var ( $int , FILTER_VALIDATE_INT ) === false ) { echo ( \"Integer is valid\" ); } else { echo ( \"Integer is not valid\" ); } ?>","title":"Validate an Integer"},{"location":"Func/phpFilters/#validate-an-ip-address","text":"The following example uses the filter_var() function to check if the variable $ip is a valid IP address: <?php $ip = \"127.0.0.1\" ; if ( ! filter_var ( $ip , FILTER_VALIDATE_IP ) === false ) { echo ( \" $ip is a valid IP address\" ); } else { echo ( \" $ip is not a valid IP address\" ); } ?>","title":"Validate an IP Address"},{"location":"Func/phpFilters/#sanitize-and-validate-an-email-address","text":"The following example uses the filter_var() function to first remove all illegal characters from the $email variable, then check if it is a valid email address: <?php $email = \"john.doe@example.com\" ; // Remove all illegal characters from email $email = filter_var ( $email , FILTER_SANITIZE_EMAIL ); // Validate e-mail if ( ! filter_var ( $email , FILTER_VALIDATE_EMAIL ) === false ) { echo ( \" $email is a valid email address\" ); } else { echo ( \" $email is not a valid email address\" ); } ?>","title":"Sanitize and Validate an Email Address"},{"location":"Func/phpFilters/#sanitize-and-validate-a-url","text":"The following example uses the filter_var() function to first remove all illegal characters from a URL, then check if $url is a valid URL: <?php $url = \"https://www.example.com\" ; // Remove all illegal characters from a url $url = filter_var ( $url , FILTER_SANITIZE_URL ); // Validate url if ( ! filter_var ( $url , FILTER_VALIDATE_URL ) === false ) { echo ( \" $url is a valid URL\" ); } else { echo ( \" $url is not a valid URL\" ); } ?>","title":"Sanitize and Validate a URL"},{"location":"Func/phpFilters/#validate-an-integer-within-a-range","text":"The following example uses the filter_var() function to check if a variable is both of type INT, and between 1 and 200: <?php $int = 122 ; $min = 1 ; $max = 200 ; if ( filter_var ( $int , FILTER_VALIDATE_INT , array ( \"options\" => array ( \"min_range\" => $min , \"max_range\" => $max ))) === false ) { echo ( \"Variable value is not within the legal range\" ); } else { echo ( \"Variable value is within the legal range\" ); } ?>","title":"Validate an Integer Within a Range"},{"location":"Func/phpFilters/#validate-ipv6-address","text":"The following example uses the filter_var() function to check if the variable $ip is a valid IPv6 address: <?php $ip = \"2001:0db8:85a3:08d3:1319:8a2e:0370:7334\" ; if ( ! filter_var ( $ip , FILTER_VALIDATE_IP , FILTER_FLAG_IPV6 ) === false ) { echo ( \" $ip is a valid IPv6 address\" ); } else { echo ( \" $ip is not a valid IPv6 address\" ); } ?>","title":"Validate IPv6 Address"},{"location":"Func/phpFilters/#validate-url-must-contain-querystring","text":"The following example uses the filter_var() function to check if the variable $url is a URL with a querystring: <?php $url = \"https://www.example.com?name=Alex\" ; if ( ! filter_var ( $url , FILTER_VALIDATE_URL , FILTER_FLAG_QUERY_REQUIRED ) === false ) { echo ( \" $url is a valid URL with a query string\" ); } else { echo ( \" $url is not a valid URL with a query string\" ); } ?>","title":"Validate URL - Must Contain QueryString"},{"location":"Func/phpFilters/#remove-characters-with-ascii-value-127","text":"The following example uses the filter_var() function to sanitize a string. It will both remove all HTML tags, and all characters with ASCII value > 127, from the string: <?php $str = \"<h1>Hello World\u00c6\u00d8\u00c5!</h1>\" ; $newstr = filter_var ( $str , FILTER_SANITIZE_STRING , FILTER_FLAG_STRIP_HIGH ); echo $newstr ; ?>","title":"Remove Characters With ASCII Value &gt; 127"},{"location":"Func/phpJSON/","text":"JSON stands for JavaScript Object Notation, and is a syntax for storing and exchanging data. Since the JSON format is a text-based format, it can easily be sent to and from a server, and used as a data format by any programming language. json_encode() The json_encode() function is used to encode a value to JSON format. <?php $age = array ( \"Peter\" => 35 , \"Ben\" => 37 , \"Joe\" => 43 ); echo json_encode ( $age ); ?> <?php $cars = array ( \"Volvo\" , \"BMW\" , \"Toyota\" ); echo json_encode ( $cars ); ?> json_decode() The json_decode() function is used to decode a JSON object into a PHP object or an associative array. <?php $jsonobj = '{\"Peter\":35,\"Ben\":37,\"Joe\":43}' ; var_dump ( json_decode ( $jsonobj )); ?> The json_decode() function returns an object by default. The json_decode() function has a second parameter, and when set to true, JSON objects are decoded into associative arrays. <?php $jsonobj = '{\"Peter\":35,\"Ben\":37,\"Joe\":43}' ; var_dump ( json_decode ( $jsonobj , true )); ?> Accessing the Decoded Values <?php $jsonobj = '{\"Peter\":35,\"Ben\":37,\"Joe\":43}' ; $obj = json_decode ( $jsonobj ); echo $obj -> Peter ; echo $obj -> Ben ; echo $obj -> Joe ; ?> <?php $jsonobj = '{\"Peter\":35,\"Ben\":37,\"Joe\":43}' ; $arr = json_decode ( $jsonobj , true ); echo $arr [ \"Peter\" ]; echo $arr [ \"Ben\" ]; echo $arr [ \"Joe\" ]; ?> Looping Through the Values You can also loop through the values with a foreach() loop: <?php $jsonobj = '{\"Peter\":35,\"Ben\":37,\"Joe\":43}' ; $obj = json_decode ( $jsonobj ); foreach ( $obj as $key => $value ) { echo $key . \" => \" . $value . \"<br>\" ; } ?> <?php $jsonobj = '{\"Peter\":35,\"Ben\":37,\"Joe\":43}' ; $arr = json_decode ( $jsonobj , true ); foreach ( $arr as $key => $value ) { echo $key . \" => \" . $value . \"<br>\" ; } ?>","title":"JSON"},{"location":"Func/phpJSON/#json_encode","text":"The json_encode() function is used to encode a value to JSON format. <?php $age = array ( \"Peter\" => 35 , \"Ben\" => 37 , \"Joe\" => 43 ); echo json_encode ( $age ); ?> <?php $cars = array ( \"Volvo\" , \"BMW\" , \"Toyota\" ); echo json_encode ( $cars ); ?>","title":"json_encode()"},{"location":"Func/phpJSON/#json_decode","text":"The json_decode() function is used to decode a JSON object into a PHP object or an associative array. <?php $jsonobj = '{\"Peter\":35,\"Ben\":37,\"Joe\":43}' ; var_dump ( json_decode ( $jsonobj )); ?> The json_decode() function returns an object by default. The json_decode() function has a second parameter, and when set to true, JSON objects are decoded into associative arrays. <?php $jsonobj = '{\"Peter\":35,\"Ben\":37,\"Joe\":43}' ; var_dump ( json_decode ( $jsonobj , true )); ?>","title":"json_decode()"},{"location":"Func/phpJSON/#accessing-the-decoded-values","text":"<?php $jsonobj = '{\"Peter\":35,\"Ben\":37,\"Joe\":43}' ; $obj = json_decode ( $jsonobj ); echo $obj -> Peter ; echo $obj -> Ben ; echo $obj -> Joe ; ?> <?php $jsonobj = '{\"Peter\":35,\"Ben\":37,\"Joe\":43}' ; $arr = json_decode ( $jsonobj , true ); echo $arr [ \"Peter\" ]; echo $arr [ \"Ben\" ]; echo $arr [ \"Joe\" ]; ?>","title":"Accessing the Decoded Values"},{"location":"Func/phpJSON/#looping-through-the-values","text":"You can also loop through the values with a foreach() loop: <?php $jsonobj = '{\"Peter\":35,\"Ben\":37,\"Joe\":43}' ; $obj = json_decode ( $jsonobj ); foreach ( $obj as $key => $value ) { echo $key . \" => \" . $value . \"<br>\" ; } ?> <?php $jsonobj = '{\"Peter\":35,\"Ben\":37,\"Joe\":43}' ; $arr = json_decode ( $jsonobj , true ); foreach ( $arr as $key => $value ) { echo $key . \" => \" . $value . \"<br>\" ; } ?>","title":"Looping Through the Values"},{"location":"Func/phpRegex/","text":"A regular expression is a sequence of characters that forms a search pattern. When you search for data in a text, you can use this search pattern to describe what you are searching for. Regular Expressions Functions Function Description preg_match() Returns 1 if the pattern was found in the string and 0 if not preg_match_all() Returns the number of times the pattern was found in the string, which may also be 0 preg_replace() Returns a new string where matched patterns have been replaced with another string preg_match() <?php $str = \"Visit arcelopera.github.io\" ; $pattern = \"/arce/i\" ; echo preg_match ( $pattern , $str ); // Outputs 1 ?> preg_match_all() <?php $str = \"The rain in SPAIN falls mainly on the plains.\" ; $pattern = \"/ain/i\" ; echo preg_match_all ( $pattern , $str ); // Outputs 4 ?> preg_replace() <?php $str = \"Visit Microsoft!\" ; $pattern = \"/microsoft/i\" ; echo preg_replace ( $pattern , \"ME\" , $str ); // Outputs \"Visit ME!\" ?> Regular Expression Modifiers Modifier Description i Performs a case-insensitive search m Performs a multiline search (patterns that search for the beginning or end of a string will match the beginning or end of each line) u Enables correct matching of UTF-8 encoded patterns Regular Expression Patterns Brackets are used to find a range of characters: Expression Description [abc] Find one character from the options between the brackets [^abc] Find any character NOT between the brackets [0-9] Find one character from the range 0 to 9 Metacharacters Metacharacters are characters with a special meaning. Metacharacter Description | Find a match for any one of the patterns separated by | as in: cat|dog|fish . Find just one instance of any character ^ Finds a match as the beginning of a string as in: ^Hello $ Finds a match at the end of the string as in: World$ \\d Find a digit \\s Find a whitespace character \\b Find a match at the beginning of a word like this: \\bWORD, or at the end of a word like this: WORD\\b \\uxxxx Find the Unicode character specified by the hexadecimal number xxxx Quantifiers Quantifiers define quantities Quantifier Description n+ Find one or more n n* Find zero or more n n? Find zero or one n n{x} Matches any string that contains a sequence of X n's n{x,} Matches any string that contains a sequence of at least X n's n{,y} Matches any string that contains a sequence of up to Y n's n{x,y} Matches any string that contains a sequence of X to Y n's If your expression needs to search for one of the special characters you can use a backslash ( \\ ) to escape them. For example, to search for one or more question marks you can use the following expression: $pattern = '/\\?+/'; Grouping You can use parentheses ( ) to apply quantifiers to entire patterns. They also can be used to select parts of the pattern to be used as a match. <?php $str = \"Apples and bananas.\" ; $pattern = \"/ba(na){2}/i\" ; echo preg_match ( $pattern , $str ); // Outputs 1 ?>","title":"Regex"},{"location":"Func/phpRegex/#regular-expressions-functions","text":"Function Description preg_match() Returns 1 if the pattern was found in the string and 0 if not preg_match_all() Returns the number of times the pattern was found in the string, which may also be 0 preg_replace() Returns a new string where matched patterns have been replaced with another string","title":"Regular Expressions Functions"},{"location":"Func/phpRegex/#preg_match","text":"<?php $str = \"Visit arcelopera.github.io\" ; $pattern = \"/arce/i\" ; echo preg_match ( $pattern , $str ); // Outputs 1 ?>","title":"preg_match()"},{"location":"Func/phpRegex/#preg_match_all","text":"<?php $str = \"The rain in SPAIN falls mainly on the plains.\" ; $pattern = \"/ain/i\" ; echo preg_match_all ( $pattern , $str ); // Outputs 4 ?>","title":"preg_match_all()"},{"location":"Func/phpRegex/#preg_replace","text":"<?php $str = \"Visit Microsoft!\" ; $pattern = \"/microsoft/i\" ; echo preg_replace ( $pattern , \"ME\" , $str ); // Outputs \"Visit ME!\" ?>","title":"preg_replace()"},{"location":"Func/phpRegex/#regular-expression-modifiers","text":"Modifier Description i Performs a case-insensitive search m Performs a multiline search (patterns that search for the beginning or end of a string will match the beginning or end of each line) u Enables correct matching of UTF-8 encoded patterns","title":"Regular Expression Modifiers"},{"location":"Func/phpRegex/#regular-expression-patterns","text":"Brackets are used to find a range of characters: Expression Description [abc] Find one character from the options between the brackets [^abc] Find any character NOT between the brackets [0-9] Find one character from the range 0 to 9","title":"Regular Expression Patterns"},{"location":"Func/phpRegex/#metacharacters","text":"Metacharacters are characters with a special meaning. Metacharacter Description | Find a match for any one of the patterns separated by | as in: cat|dog|fish . Find just one instance of any character ^ Finds a match as the beginning of a string as in: ^Hello $ Finds a match at the end of the string as in: World$ \\d Find a digit \\s Find a whitespace character \\b Find a match at the beginning of a word like this: \\bWORD, or at the end of a word like this: WORD\\b \\uxxxx Find the Unicode character specified by the hexadecimal number xxxx","title":"Metacharacters"},{"location":"Func/phpRegex/#quantifiers","text":"Quantifiers define quantities Quantifier Description n+ Find one or more n n* Find zero or more n n? Find zero or one n n{x} Matches any string that contains a sequence of X n's n{x,} Matches any string that contains a sequence of at least X n's n{,y} Matches any string that contains a sequence of up to Y n's n{x,y} Matches any string that contains a sequence of X to Y n's If your expression needs to search for one of the special characters you can use a backslash ( \\ ) to escape them. For example, to search for one or more question marks you can use the following expression: $pattern = '/\\?+/';","title":"Quantifiers"},{"location":"Func/phpRegex/#grouping","text":"You can use parentheses ( ) to apply quantifiers to entire patterns. They also can be used to select parts of the pattern to be used as a match. <?php $str = \"Apples and bananas.\" ; $pattern = \"/ba(na){2}/i\" ; echo preg_match ( $pattern , $str ); // Outputs 1 ?>","title":"Grouping"},{"location":"Func/phpSessions/","text":"A session is a way to store information (in variables) to be used across multiple pages. Unlike a cookie, the information is not stored on the users computer. What is a PHP Session? When you work with an application, you open it, do some changes, and then you close it. This is much like a Session. The computer knows who you are. It knows when you start the application and when you end. But on the internet there is one problem: the web server does not know who you are or what you do, because the HTTP address doesn't maintain state. Session variables solve this problem by storing user information to be used across multiple pages (e.g. username, favorite color, etc). By default, session variables last until the user closes the browser. So; Session variables hold information about one single user, and are available to all pages in one application. If you need a permanent storage, you may want to store the data in a database. Start a PHP Session A session is started with the session_start() function. Session variables are set with the PHP global variable: $_SESSION. <?php // Start the session session_start (); ?> <!DOCTYPE html> <html> <body> <?php // Set session variables $_SESSION [ \"favcolor\" ] = \"green\" ; $_SESSION [ \"favanimal\" ] = \"cat\" ; echo \"Session variables are set.\" ; ?> </body> </html> The session_start() function must be the very first thing in your document. Before any HTML tags. Get PHP Session Variable Values Next, we create another page called \"demo_session2.php\". From this page, we will access the session information we set on the first page (\"demo_session1.php\"). Notice that session variables are not passed individually to each new page, instead they are retrieved from the session we open at the beginning of each page (session_start()). Also notice that all session variable values are stored in the global $_SESSION variable: <?php session_start (); ?> <!DOCTYPE html> <html> <body> <?php // Echo session variables that were set on previous page echo \"Favorite color is \" . $_SESSION [ \"favcolor\" ] . \".<br>\" ; echo \"Favorite animal is \" . $_SESSION [ \"favanimal\" ] . \".\" ; ?> </body> </html> Another way to show all the session variable values for a user session is to run the following code: <?php session_start (); ?> <!DOCTYPE html> <html> <body> <?php print_r ( $_SESSION ); ?> </body> </html> Most sessions set a user-key on the user's computer that looks something like this: 765487cf34ert8dede5a562e4f3a7e12. Then, when a session is opened on another page, it scans the computer for a user-key. If there is a match, it accesses that session, if not, it starts a new session. Modify a PHP Session Variable To change a session variable, just overwrite it: <?php session_start (); ?> <!DOCTYPE html> <html> <body> <?php // to change a session variable, just overwrite it $_SESSION [ \"favcolor\" ] = \"yellow\" ; print_r ( $_SESSION ); ?> </body> </html> Destroy a PHP Session To remove all global session variables and destroy the session, use session_unset() and session_destroy(): <?php session_start (); ?> <!DOCTYPE html> <html> <body> <?php // remove all session variables session_unset (); // destroy the session session_destroy (); ?> </body> </html>","title":"Sessions"},{"location":"Func/phpSessions/#what-is-a-php-session","text":"When you work with an application, you open it, do some changes, and then you close it. This is much like a Session. The computer knows who you are. It knows when you start the application and when you end. But on the internet there is one problem: the web server does not know who you are or what you do, because the HTTP address doesn't maintain state. Session variables solve this problem by storing user information to be used across multiple pages (e.g. username, favorite color, etc). By default, session variables last until the user closes the browser. So; Session variables hold information about one single user, and are available to all pages in one application. If you need a permanent storage, you may want to store the data in a database.","title":"What is a PHP Session?"},{"location":"Func/phpSessions/#start-a-php-session","text":"A session is started with the session_start() function. Session variables are set with the PHP global variable: $_SESSION. <?php // Start the session session_start (); ?> <!DOCTYPE html> <html> <body> <?php // Set session variables $_SESSION [ \"favcolor\" ] = \"green\" ; $_SESSION [ \"favanimal\" ] = \"cat\" ; echo \"Session variables are set.\" ; ?> </body> </html> The session_start() function must be the very first thing in your document. Before any HTML tags.","title":"Start a PHP Session"},{"location":"Func/phpSessions/#get-php-session-variable-values","text":"Next, we create another page called \"demo_session2.php\". From this page, we will access the session information we set on the first page (\"demo_session1.php\"). Notice that session variables are not passed individually to each new page, instead they are retrieved from the session we open at the beginning of each page (session_start()). Also notice that all session variable values are stored in the global $_SESSION variable: <?php session_start (); ?> <!DOCTYPE html> <html> <body> <?php // Echo session variables that were set on previous page echo \"Favorite color is \" . $_SESSION [ \"favcolor\" ] . \".<br>\" ; echo \"Favorite animal is \" . $_SESSION [ \"favanimal\" ] . \".\" ; ?> </body> </html> Another way to show all the session variable values for a user session is to run the following code: <?php session_start (); ?> <!DOCTYPE html> <html> <body> <?php print_r ( $_SESSION ); ?> </body> </html> Most sessions set a user-key on the user's computer that looks something like this: 765487cf34ert8dede5a562e4f3a7e12. Then, when a session is opened on another page, it scans the computer for a user-key. If there is a match, it accesses that session, if not, it starts a new session.","title":"Get PHP Session Variable Values"},{"location":"Func/phpSessions/#modify-a-php-session-variable","text":"To change a session variable, just overwrite it: <?php session_start (); ?> <!DOCTYPE html> <html> <body> <?php // to change a session variable, just overwrite it $_SESSION [ \"favcolor\" ] = \"yellow\" ; print_r ( $_SESSION ); ?> </body> </html>","title":"Modify a PHP Session Variable"},{"location":"Func/phpSessions/#destroy-a-php-session","text":"To remove all global session variables and destroy the session, use session_unset() and session_destroy(): <?php session_start (); ?> <!DOCTYPE html> <html> <body> <?php // remove all session variables session_unset (); // destroy the session session_destroy (); ?> </body> </html>","title":"Destroy a PHP Session"},{"location":"Func/phpUserFunc/","text":"A function is a block of statements that can be used repeatedly in a program. A function will not execute automatically when a page loads. A function will be executed by a call to the function. Create a User Defined Function <?php function writeMsg () { echo \"Hello world!\" ; } writeMsg (); // call the function ?> Arguments Information can be passed to functions through arguments. Arguments are specified after the function name, inside the parentheses. You can add as many arguments as you want, just separate them with a comma. <?php function familyName ( $fname ) { echo \" $fname Refsnes.<br>\" ; } familyName ( \"Jani\" ); familyName ( \"Hege\" ); familyName ( \"Stale\" ); familyName ( \"Kai Jim\" ); familyName ( \"Borge\" ); ?> <?php function familyName ( $fname , $year ) { echo \" $fname Refsnes. Born in $year <br>\" ; } familyName ( \"Hege\" , \"1975\" ); familyName ( \"Stale\" , \"1978\" ); familyName ( \"Kai Jim\" , \"1983\" ); ?> PHP is a Loosely Typed Language In the example above, notice that we did not have to tell PHP which data type the variable is. PHP automatically associates a data type to the variable, depending on its value. Since the data types are not set in a strict sense, you can do things like adding a string to an integer without causing an error. In PHP 7, type declarations were added. This gives us an option to specify the expected data type when declaring a function, and by adding the strict declaration, it will throw a \"Fatal Error\" if the data type mismatches. <?php function addNumbers ( int $a , int $b ) { return $a + $b ; } echo addNumbers ( 5 , \"5 days\" ); // since strict is NOT enabled \"5 days\" is changed to int(5), and it will return 10 ?> To specify strict we need to set declare(strict_types=1);. This must be on the very first line of the PHP file. <?php declare ( strict_types = 1 ); // strict requirement function addNumbers ( int $a , int $b ) { return $a + $b ; } echo addNumbers ( 5 , \"5 days\" ); // since strict is enabled and \"5 days\" is not an integer, an error will be thrown ?> Default Parameter Values <?php declare ( strict_types = 1 ); // strict requirement function setHeight ( int $minheight = 50 ) { echo \"The height is : $minheight <br>\" ; } setHeight ( 350 ); setHeight (); // will use the default value of 50 setHeight ( 135 ); setHeight ( 80 ); ?> Returning values To let a function return a value, use the return statement <?php function sum ( int $x , int $y ) { return $x + $y ; } echo sum ( 5 , 5 ); ?> PHP Return Type Declarations PHP 7 also supports Type Declarations for the return statement. Like with the type declaration for function arguments, by enabling the strict requirement, it will throw a \"Fatal Error\" on a type mismatch. To declare a type for the function return, add a colon ( : ) and the type right before the opening curly ( /{ )bracket when declaring the function. <?php declare ( strict_types = 1 ); // strict requirement function addNumbers ( float $a , float $b ) : float { return $a + $b ; } echo addNumbers ( 1.2 , 5.2 ); ?> <?php declare ( strict_types = 1 ); // strict requirement function addNumbers ( float $a , float $b ) : int { return ( int )( $a + $b ); } echo addNumbers ( 1.2 , 5.2 ); ?> Passing Arguments by Reference In PHP, arguments are usually passed by value, which means that a copy of the value is used in the function and the variable that was passed into the function cannot be changed. When a function argument is passed by reference, changes to the argument also change the variable that was passed in. To turn a function argument into a reference, the & operator is used <?php function add_five ( & $value ) { $value += 5 ; } $num = 2 ; add_five ( $num ); echo $num ; ?>","title":"User-Defined"},{"location":"Func/phpUserFunc/#create-a-user-defined-function","text":"<?php function writeMsg () { echo \"Hello world!\" ; } writeMsg (); // call the function ?>","title":"Create a User Defined Function"},{"location":"Func/phpUserFunc/#arguments","text":"Information can be passed to functions through arguments. Arguments are specified after the function name, inside the parentheses. You can add as many arguments as you want, just separate them with a comma. <?php function familyName ( $fname ) { echo \" $fname Refsnes.<br>\" ; } familyName ( \"Jani\" ); familyName ( \"Hege\" ); familyName ( \"Stale\" ); familyName ( \"Kai Jim\" ); familyName ( \"Borge\" ); ?> <?php function familyName ( $fname , $year ) { echo \" $fname Refsnes. Born in $year <br>\" ; } familyName ( \"Hege\" , \"1975\" ); familyName ( \"Stale\" , \"1978\" ); familyName ( \"Kai Jim\" , \"1983\" ); ?>","title":"Arguments"},{"location":"Func/phpUserFunc/#php-is-a-loosely-typed-language","text":"In the example above, notice that we did not have to tell PHP which data type the variable is. PHP automatically associates a data type to the variable, depending on its value. Since the data types are not set in a strict sense, you can do things like adding a string to an integer without causing an error. In PHP 7, type declarations were added. This gives us an option to specify the expected data type when declaring a function, and by adding the strict declaration, it will throw a \"Fatal Error\" if the data type mismatches. <?php function addNumbers ( int $a , int $b ) { return $a + $b ; } echo addNumbers ( 5 , \"5 days\" ); // since strict is NOT enabled \"5 days\" is changed to int(5), and it will return 10 ?> To specify strict we need to set declare(strict_types=1);. This must be on the very first line of the PHP file. <?php declare ( strict_types = 1 ); // strict requirement function addNumbers ( int $a , int $b ) { return $a + $b ; } echo addNumbers ( 5 , \"5 days\" ); // since strict is enabled and \"5 days\" is not an integer, an error will be thrown ?>","title":"PHP is a Loosely Typed Language"},{"location":"Func/phpUserFunc/#default-parameter-values","text":"<?php declare ( strict_types = 1 ); // strict requirement function setHeight ( int $minheight = 50 ) { echo \"The height is : $minheight <br>\" ; } setHeight ( 350 ); setHeight (); // will use the default value of 50 setHeight ( 135 ); setHeight ( 80 ); ?>","title":"Default Parameter Values"},{"location":"Func/phpUserFunc/#returning-values","text":"To let a function return a value, use the return statement <?php function sum ( int $x , int $y ) { return $x + $y ; } echo sum ( 5 , 5 ); ?>","title":"Returning values"},{"location":"Func/phpUserFunc/#php-return-type-declarations","text":"PHP 7 also supports Type Declarations for the return statement. Like with the type declaration for function arguments, by enabling the strict requirement, it will throw a \"Fatal Error\" on a type mismatch. To declare a type for the function return, add a colon ( : ) and the type right before the opening curly ( /{ )bracket when declaring the function. <?php declare ( strict_types = 1 ); // strict requirement function addNumbers ( float $a , float $b ) : float { return $a + $b ; } echo addNumbers ( 1.2 , 5.2 ); ?> <?php declare ( strict_types = 1 ); // strict requirement function addNumbers ( float $a , float $b ) : int { return ( int )( $a + $b ); } echo addNumbers ( 1.2 , 5.2 ); ?>","title":"PHP Return Type Declarations"},{"location":"Func/phpUserFunc/#passing-arguments-by-reference","text":"In PHP, arguments are usually passed by value, which means that a copy of the value is used in the function and the variable that was passed into the function cannot be changed. When a function argument is passed by reference, changes to the argument also change the variable that was passed in. To turn a function argument into a reference, the & operator is used <?php function add_five ( & $value ) { $value += 5 ; } $num = 2 ; add_five ( $num ); echo $num ; ?>","title":"Passing Arguments by Reference"},{"location":"PR/phpConst/","text":"A valid constant name starts with a letter or underscore (no $ sign before the constant name). Unlike variables, constants are automatically global across the entire script. Create a PHP Constant There are 2 ways to create a constant: 1. Using the define() function 2. Using the const keyword const vs. define() const are always case-sensitive define() has has a case-insensitive option. const cannot be created inside another block scope, like inside a function or inside an if statement. define can be created inside another block scope. Using the define() function. Syntax define(name, value, case-insensitive) Parameters: name: Specifies the name of the constant value: Specifies the value of the constant case-insensitive: Specifies whether the constant name should be case-insensitive. Default is false. Note: Defining case-insensitive constants was deprecated in PHP 7.3. PHP 8.0 accepts only false, the value true will produce a warning. <?php define ( \"GREETING\" , \"Hello World!\" ); // Create a constant with a case-sensitive name define ( \"GREETING\" , \"Welcome to W3Schools.com!\" , true ); // Create a constant with a case-insensitive name echo GREETING ; ?> PHP Constant Arrays In PHP7, you can create an Array constant using the define() function. <?php define ( \"cars\" , [ \"Alfa Romeo\" , \"BMW\" , \"Toyota\" ]); echo cars [ 0 ]; ?> PHP const Keyword You can also create a constant by using the const keyword. <?php const MYCAR = \"Volvo\" ; echo MYCAR ; ?>","title":"Constant"},{"location":"PR/phpConst/#create-a-php-constant","text":"There are 2 ways to create a constant: 1. Using the define() function 2. Using the const keyword","title":"Create a PHP Constant"},{"location":"PR/phpConst/#const-vs-define","text":"const are always case-sensitive define() has has a case-insensitive option. const cannot be created inside another block scope, like inside a function or inside an if statement. define can be created inside another block scope.","title":"const vs. define()"},{"location":"PR/phpConst/#using-the-define-function","text":"Syntax define(name, value, case-insensitive) Parameters: name: Specifies the name of the constant value: Specifies the value of the constant case-insensitive: Specifies whether the constant name should be case-insensitive. Default is false. Note: Defining case-insensitive constants was deprecated in PHP 7.3. PHP 8.0 accepts only false, the value true will produce a warning. <?php define ( \"GREETING\" , \"Hello World!\" ); // Create a constant with a case-sensitive name define ( \"GREETING\" , \"Welcome to W3Schools.com!\" , true ); // Create a constant with a case-insensitive name echo GREETING ; ?>","title":"Using the define() function."},{"location":"PR/phpConst/#php-constant-arrays","text":"In PHP7, you can create an Array constant using the define() function. <?php define ( \"cars\" , [ \"Alfa Romeo\" , \"BMW\" , \"Toyota\" ]); echo cars [ 0 ]; ?>","title":"PHP Constant Arrays"},{"location":"PR/phpConst/#php-const-keyword","text":"You can also create a constant by using the const keyword. <?php const MYCAR = \"Volvo\" ; echo MYCAR ; ?>","title":"PHP const Keyword"},{"location":"PR/phpForms/","text":"Forms Handling PHP - A Simple HTML Form The example below displays a simple HTML form with two input fields and a submit button. < html > < body > < form action = \"welcome.php\" method = \"post\" > Name: < input type = \"text\" name = \"name\" >< br > E-mail: < input type = \"text\" name = \"email\" >< br > < input type = \"submit\" > </ form > </ body > </ html > When the user fills out the form above and clicks the submit button, the form data is sent for processing to a PHP file named \"welcome.php\". The form data is sent with the HTTP POST method. To display the submitted data you could simply echo all the variables. The \"welcome.php\" looks like this: <html> <body> Welcome <?php echo $_POST [ \"name\" ]; ?> <br> Your email address is: <?php echo $_POST [ \"email\" ]; ?> </body> </html> The output could be something like this: Welcome John Your email address is john.doe@example.com The same result could also be achieved using the HTTP GET method: < html > < body > < form action = \"welcome_get.php\" method = \"get\" > Name: < input type = \"text\" name = \"name\" >< br > E-mail: < input type = \"text\" name = \"email\" >< br > < input type = \"submit\" > </ form > </ body > </ html > and \"welcome_get.php\" looks like this: < html > < body > Welcome <?php echo $_GET[\"name\"]; ?> < br > Your email address is: <?php echo $_GET[\"email\"]; ?> </ body > </ html > The code above is quite simple. However, the most important thing is missing. You need to validate form data to protect your script from malicious code. GET vs. POST Both GET and POST create an array (e.g. array( key1 => value1, key2 => value2, key3 => value3, ...)). This array holds key/value pairs, where keys are the names of the form controls and values are the input data from the user. Both GET and POST are treated as $_GET and $_POST. These are superglobals, which means that they are always accessible, regardless of scope - and you can access them from any function, class or file without having to do anything special. $_GET is an array of variables passed to the current script via the URL parameters. $_POST is an array of variables passed to the current script via the HTTP POST method. When to use GET? Information sent from a form with the GET method is visible to everyone (all variable names and values are displayed in the URL). GET also has limits on the amount of information to send. The limitation is about 2000 characters. However, because the variables are displayed in the URL, it is possible to bookmark the page. This can be useful in some cases. GET may be used for sending non-sensitive data. GET should NEVER be used for sending passwords or other sensitive information! When to use POST? Information sent from a form with the POST method is invisible to others (all names/values are embedded within the body of the HTTP request) and has no limits on the amount of information to send. Moreover POST supports advanced functionality such as support for multi-part binary input while uploading files to server. However, because the variables are not displayed in the URL, it is not possible to bookmark the page. Developers prefer POST for sending form data. Forms Validation Text Fields The name, email, and website fields are text input elements, and the comment field is a textarea. The HTML code looks like this: Name: < input type = \"text\" name = \"name\" > E-mail: < input type = \"text\" name = \"email\" > Website: < input type = \"text\" name = \"website\" > Comment: < textarea name = \"comment\" rows = \"5\" cols = \"40\" ></ textarea > Radio Buttons The gender fields are radio buttons and the HTML code looks like this: Gender: < input type = \"radio\" name = \"gender\" value = \"female\" > Female < input type = \"radio\" name = \"gender\" value = \"male\" > Male < input type = \"radio\" name = \"gender\" value = \"other\" > Other The Form Element The HTML code of the form looks like this: < form method = \"post\" action = \"<?php echo htmlspecialchars($_SERVER[\" PHP_SELF \"]);? > \"> When the form is submitted, the form data is sent with method=\"post\". The $_SERVER[\"PHP_SELF\"] is a super global variable that returns the filename of the currently executing script. The $_SERVER[\"PHP_SELF\"] sends the submitted form data to the page itself, instead of jumping to a different page. This way, the user will get error messages on the same page as the form. The htmlspecialchars() function converts special characters to HTML entities. This means that it will replace HTML characters like < and > with & lt; and & gt;. This prevents attackers from exploiting the code by injecting HTML or Javascript code (Cross-site Scripting attacks) in forms. PHP Form Security The $_SERVER[\"PHP_SELF\"] variable can be used by hackers! If PHP_SELF is used in your page then a user can enter a slash (/) and then some Cross Site Scripting (XSS) commands to execute. Cross-site scripting (XSS) is a type of computer security vulnerability typically found in Web applications. XSS enables attackers to inject client-side script into Web pages viewed by other users. Assume we have the following form in a page named \"test_form.php\": < form method = \"post\" action = \"<?php echo $_SERVER[\" PHP_SELF \"];? > \"> Now, if a user enters the normal URL in the address bar like \"http://www.example.com/test_form.php\", the above code will be translated to: < form method = \"post\" action = \"test_form.php\" > So far, so good. However, consider that a user enters the following URL in the address bar: http://www.example.com/test_form.php/%22%3E%3Cscript%3Ealert('hacked')%3C/script%3E In this case, the above code will be translated to: < form method = \"post\" action = \"test_form.php/\" >< script > alert ( 'hacked' )</ script > This code adds a script tag and an alert command. And when the page loads, the JavaScript code will be executed (the user will see an alert box). This is just a simple and harmless example how the PHP_SELF variable can be exploited. Be aware of that any JavaScript code can be added inside the <'script> tag! A hacker can redirect the user to a file on another server, and that file can hold malicious code that can alter the global variables or submit the form to another address to save the user data, for example. How To Avoid $_SERVER[\"PHP_SELF\"] Exploits? $_SERVER[\"PHP_SELF\"] exploits can be avoided by using the htmlspecialchars() function. The form code should look like this: <form method=\"post\" action=\" <?php echo htmlspecialchars ( $_SERVER [ \"PHP_SELF\" ]); ?> \"> The htmlspecialchars() function converts special characters to HTML entities. Now if the user tries to exploit the PHP_SELF variable, it will result in the following output: < form method = \"post\" action = \"test_form.php/&quot;&gt;&lt;script&gt;alert('hacked')&lt;/script&gt;\" > The exploit attempt fails, and no harm is done! Validate Form Data With PHP The first thing we will do is to pass all variables through PHP's htmlspecialchars() function. When we use the htmlspecialchars() function; then if a user tries to submit the following in a text field: < script > location . href ( 'http://www.hacked.com' )</ script > This would not be executed, because it would be saved as HTML escaped code, like this: &lt; script &gt; location.href('http://www.hacked.com') &lt; /script &gt; The code is now safe to be displayed on a page or inside an e-mail. We will also do two more things when the user submits the form: Strip unnecessary characters (extra space, tab, newline) from the user input data (with the PHP trim() function) Remove backslashes (\\) from the user input data (with the PHP stripslashes() function) The next step is to create a function that will do all the checking for us (which is much more convenient than writing the same code over and over again). We will name the function test_input(). Now, we can check each $_POST variable with the test_input() function, and the script looks like this: <?php // define variables and set to empty values $name = $email = $gender = $comment = $website = \"\" ; if ( $_SERVER [ \"REQUEST_METHOD\" ] == \"POST\" ) { $name = test_input ( $_POST [ \"name\" ]); $email = test_input ( $_POST [ \"email\" ]); $website = test_input ( $_POST [ \"website\" ]); $comment = test_input ( $_POST [ \"comment\" ]); $gender = test_input ( $_POST [ \"gender\" ]); } function test_input ( $data ) { $data = trim ( $data ); $data = stripslashes ( $data ); $data = htmlspecialchars ( $data ); return $data ; } ?> Notice that at the start of the script, we check whether the form has been submitted using $_SERVER[\"REQUEST_METHOD\"]. If the REQUEST_METHOD is POST, then the form has been submitted - and it should be validated. If it has not been submitted, skip the validation and display a blank form. However, in the example above, all input fields are optional. The script works fine even if the user does not enter any data. Required Fields In the following code we have added some new variables: $nameErr, $emailErr, $genderErr, and $websiteErr. These error variables will hold error messages for the required fields. We have also added an if else statement for each $_POST variable. This checks if the $_POST variable is empty (with the PHP empty() function). If it is empty, an error message is stored in the different error variables, and if it is not empty, it sends the user input data through the test_input() function. <?php // define variables and set to empty values $nameErr = $emailErr = $genderErr = $websiteErr = \"\" ; $name = $email = $gender = $comment = $website = \"\" ; if ( $_SERVER [ \"REQUEST_METHOD\" ] == \"POST\" ) { if ( empty ( $_POST [ \"name\" ])) { $nameErr = \"Name is required\" ; } else { $name = test_input ( $_POST [ \"name\" ]); } if ( empty ( $_POST [ \"email\" ])) { $emailErr = \"Email is required\" ; } else { $email = test_input ( $_POST [ \"email\" ]); } if ( empty ( $_POST [ \"website\" ])) { $website = \"\" ; } else { $website = test_input ( $_POST [ \"website\" ]); } if ( empty ( $_POST [ \"comment\" ])) { $comment = \"\" ; } else { $comment = test_input ( $_POST [ \"comment\" ]); } if ( empty ( $_POST [ \"gender\" ])) { $genderErr = \"Gender is required\" ; } else { $gender = test_input ( $_POST [ \"gender\" ]); } } ?> Display The Error Messages Then in the HTML form, we add a little script after each required field, which generates the correct error message if needed (that is if the user tries to submit the form without filling out the required fields). <!-- HTML form --> < form method = \"post\" action = \"<?php echo htmlspecialchars($_SERVER[\" PHP_SELF \"]);? > \"> Name: < input type = \"text\" name = \"name\" > < span class = \"error\" > * <?php echo $nameErr;?> </ span > < br >< br > E-mail: < input type = \"text\" name = \"email\" > < span class = \"error\" > * <?php echo $emailErr;?> </ span > < br >< br > Website: < input type = \"text\" name = \"website\" > < span class = \"error\" > <?php echo $websiteErr;?> </ span > < br >< br > Comment: < textarea name = \"comment\" rows = \"5\" cols = \"40\" ></ textarea > < br >< br > Gender: < input type = \"radio\" name = \"gender\" value = \"female\" > Female < input type = \"radio\" name = \"gender\" value = \"male\" > Male < input type = \"radio\" name = \"gender\" value = \"other\" > Other < span class = \"error\" > * <?php echo $genderErr;?> </ span > < br >< br > < input type = \"submit\" name = \"submit\" value = \"Submit\" > </ form > Validate Name The code below shows a simple way to check if the name field only contains letters, dashes, apostrophes and whitespaces. If the value of the name field is not valid, then store an error message: $name = test_input($_POST[\"name\"]); if (!preg_match(\"/^[a-zA-Z-' ]*$/\",$name)) { $nameErr = \"Only letters and white space allowed\"; } Validate E-mail The easiest and safest way to check whether an email address is well-formed is to use PHP's filter_var() function. In the code below, if the e-mail address is not well-formed, then store an error message: $email = test_input($_POST[\"email\"]); if (!filter_var($email, FILTER_VALIDATE_EMAIL)) { $emailErr = \"Invalid email format\"; } Validate URL The code below shows a way to check if a URL address syntax is valid (this regular expression also allows dashes in the URL). If the URL address syntax is not valid, then store an error message: $website = test_input($_POST[\"website\"]); if (!preg_match(\"/\\b(?:(?:https?|ftp):\\/\\/|www\\.)[-a-z0-9+&@#\\/%?=~_|!:,.;]*[-a-z0-9+&@#\\/%=~_|]/i\",$website)) { $websiteErr = \"Invalid URL\"; } Validate Name, E-mail, and URL Now, the script looks like this. <?php // define variables and set to empty values $nameErr = $emailErr = $genderErr = $websiteErr = \"\" ; $name = $email = $gender = $comment = $website = \"\" ; if ( $_SERVER [ \"REQUEST_METHOD\" ] == \"POST\" ) { if ( empty ( $_POST [ \"name\" ])) { $nameErr = \"Name is required\" ; } else { $name = test_input ( $_POST [ \"name\" ]); // check if name only contains letters and whitespace if ( ! preg_match ( \"/^[a-zA-Z-' ]*$/\" , $name )) { $nameErr = \"Only letters and white space allowed\" ; } } if ( empty ( $_POST [ \"email\" ])) { $emailErr = \"Email is required\" ; } else { $email = test_input ( $_POST [ \"email\" ]); // check if e-mail address is well-formed if ( ! filter_var ( $email , FILTER_VALIDATE_EMAIL )) { $emailErr = \"Invalid email format\" ; } } if ( empty ( $_POST [ \"website\" ])) { $website = \"\" ; } else { $website = test_input ( $_POST [ \"website\" ]); // check if URL address syntax is valid (this regular expression also allows dashes in the URL) if ( ! preg_match ( \"/\\b(?:(?:https?|ftp):\\/\\/|www\\.)[-a-z0-9+&@#\\/%?=~_|!:,.;]*[-a-z0-9+&@#\\/%=~_|]/i\" , $website )) { $websiteErr = \"Invalid URL\" ; } } if ( empty ( $_POST [ \"comment\" ])) { $comment = \"\" ; } else { $comment = test_input ( $_POST [ \"comment\" ]); } if ( empty ( $_POST [ \"gender\" ])) { $genderErr = \"Gender is required\" ; } else { $gender = test_input ( $_POST [ \"gender\" ]); } } ?> Keep The Values in The Form To show the values in the input fields after the user hits the submit button, we add a little PHP script inside the value attribute of the following input fields: name, email, and website. In the comment textarea field, we put the script between the <'textarea> and <'/textarea> tags. The little script outputs the value of the $name, $email, $website, and $comment variables. Then, we also need to show which radio button that was checked. For this, we must manipulate the checked attribute (not the value attribute for radio buttons): Name: <input type=\"text\" name=\"name\" value=\" <?php echo $name ; ?> \"> E-mail: <input type=\"text\" name=\"email\" value=\" <?php echo $email ; ?> \"> Website: <input type=\"text\" name=\"website\" value=\" <?php echo $website ; ?> \"> Comment: <textarea name=\"comment\" rows=\"5\" cols=\"40\"> <?php echo $comment ; ?> </textarea> Gender: <input type=\"radio\" name=\"gender\" <?php if ( isset ( $gender ) && $gender == \"female\" ) echo \"checked\" ; ?> value=\"female\">Female <input type=\"radio\" name=\"gender\" <?php if ( isset ( $gender ) && $gender == \"male\" ) echo \"checked\" ; ?> value=\"male\">Male <input type=\"radio\" name=\"gender\" <?php if ( isset ( $gender ) && $gender == \"other\" ) echo \"checked\" ; ?> value=\"other\">Other Complete <!DOCTYPE HTML> <html> <head> <style> .error {color: #FF0000;} </style> </head> <body> <?php // define variables and set to empty values $nameErr = $emailErr = $genderErr = $websiteErr = \"\" ; $name = $email = $gender = $comment = $website = \"\" ; if ( $_SERVER [ \"REQUEST_METHOD\" ] == \"POST\" ) { if ( empty ( $_POST [ \"name\" ])) { $nameErr = \"Name is required\" ; } else { $name = test_input ( $_POST [ \"name\" ]); // check if name only contains letters and whitespace if ( ! preg_match ( \"/^[a-zA-Z-' ]*$/\" , $name )) { $nameErr = \"Only letters and white space allowed\" ; } } if ( empty ( $_POST [ \"email\" ])) { $emailErr = \"Email is required\" ; } else { $email = test_input ( $_POST [ \"email\" ]); // check if e-mail address is well-formed if ( ! filter_var ( $email , FILTER_VALIDATE_EMAIL )) { $emailErr = \"Invalid email format\" ; } } if ( empty ( $_POST [ \"website\" ])) { $website = \"\" ; } else { $website = test_input ( $_POST [ \"website\" ]); // check if URL address syntax is valid (this regular expression also allows dashes in the URL) if ( ! preg_match ( \"/\\b(?:(?:https?|ftp):\\/\\/|www\\.)[-a-z0-9+&@#\\/%?=~_|!:,.;]*[-a-z0-9+&@#\\/%=~_|]/i\" , $website )) { $websiteErr = \"Invalid URL\" ; } } if ( empty ( $_POST [ \"comment\" ])) { $comment = \"\" ; } else { $comment = test_input ( $_POST [ \"comment\" ]); } if ( empty ( $_POST [ \"gender\" ])) { $genderErr = \"Gender is required\" ; } else { $gender = test_input ( $_POST [ \"gender\" ]); } } function test_input ( $data ) { $data = trim ( $data ); $data = stripslashes ( $data ); $data = htmlspecialchars ( $data ); return $data ; } ?> <h2>PHP Form Validation Example</h2> <p><span class=\"error\">* required field</span></p> <form method=\"post\" action=\" <?php echo htmlspecialchars ( $_SERVER [ \"PHP_SELF\" ]); ?> \"> Name: <input type=\"text\" name=\"name\" value=\" <?php echo $name ; ?> \"> <span class=\"error\">* <?php echo $nameErr ; ?> </span> <br><br> E-mail: <input type=\"text\" name=\"email\" value=\" <?php echo $email ; ?> \"> <span class=\"error\">* <?php echo $emailErr ; ?> </span> <br><br> Website: <input type=\"text\" name=\"website\" value=\" <?php echo $website ; ?> \"> <span class=\"error\"> <?php echo $websiteErr ; ?> </span> <br><br> Comment: <textarea name=\"comment\" rows=\"5\" cols=\"40\"> <?php echo $comment ; ?> </textarea> <br><br> Gender: <input type=\"radio\" name=\"gender\" <?php if ( isset ( $gender ) && $gender == \"female\" ) echo \"checked\" ; ?> value=\"female\">Female <input type=\"radio\" name=\"gender\" <?php if ( isset ( $gender ) && $gender == \"male\" ) echo \"checked\" ; ?> value=\"male\">Male <input type=\"radio\" name=\"gender\" <?php if ( isset ( $gender ) && $gender == \"other\" ) echo \"checked\" ; ?> value=\"other\">Other <span class=\"error\">* <?php echo $genderErr ; ?> </span> <br><br> <input type=\"submit\" name=\"submit\" value=\"Submit\"> </form> <?php echo \"<h2>Your Input:</h2>\" ; echo $name ; echo \"<br>\" ; echo $email ; echo \"<br>\" ; echo $website ; echo \"<br>\" ; echo $comment ; echo \"<br>\" ; echo $gender ; ?> </body> </html>","title":"Forms"},{"location":"PR/phpForms/#forms-handling","text":"PHP - A Simple HTML Form The example below displays a simple HTML form with two input fields and a submit button. < html > < body > < form action = \"welcome.php\" method = \"post\" > Name: < input type = \"text\" name = \"name\" >< br > E-mail: < input type = \"text\" name = \"email\" >< br > < input type = \"submit\" > </ form > </ body > </ html > When the user fills out the form above and clicks the submit button, the form data is sent for processing to a PHP file named \"welcome.php\". The form data is sent with the HTTP POST method. To display the submitted data you could simply echo all the variables. The \"welcome.php\" looks like this: <html> <body> Welcome <?php echo $_POST [ \"name\" ]; ?> <br> Your email address is: <?php echo $_POST [ \"email\" ]; ?> </body> </html> The output could be something like this: Welcome John Your email address is john.doe@example.com The same result could also be achieved using the HTTP GET method: < html > < body > < form action = \"welcome_get.php\" method = \"get\" > Name: < input type = \"text\" name = \"name\" >< br > E-mail: < input type = \"text\" name = \"email\" >< br > < input type = \"submit\" > </ form > </ body > </ html > and \"welcome_get.php\" looks like this: < html > < body > Welcome <?php echo $_GET[\"name\"]; ?> < br > Your email address is: <?php echo $_GET[\"email\"]; ?> </ body > </ html > The code above is quite simple. However, the most important thing is missing. You need to validate form data to protect your script from malicious code.","title":"Forms Handling"},{"location":"PR/phpForms/#get-vs-post","text":"Both GET and POST create an array (e.g. array( key1 => value1, key2 => value2, key3 => value3, ...)). This array holds key/value pairs, where keys are the names of the form controls and values are the input data from the user. Both GET and POST are treated as $_GET and $_POST. These are superglobals, which means that they are always accessible, regardless of scope - and you can access them from any function, class or file without having to do anything special. $_GET is an array of variables passed to the current script via the URL parameters. $_POST is an array of variables passed to the current script via the HTTP POST method.","title":"GET vs. POST"},{"location":"PR/phpForms/#when-to-use-get","text":"Information sent from a form with the GET method is visible to everyone (all variable names and values are displayed in the URL). GET also has limits on the amount of information to send. The limitation is about 2000 characters. However, because the variables are displayed in the URL, it is possible to bookmark the page. This can be useful in some cases. GET may be used for sending non-sensitive data. GET should NEVER be used for sending passwords or other sensitive information!","title":"When to use GET?"},{"location":"PR/phpForms/#when-to-use-post","text":"Information sent from a form with the POST method is invisible to others (all names/values are embedded within the body of the HTTP request) and has no limits on the amount of information to send. Moreover POST supports advanced functionality such as support for multi-part binary input while uploading files to server. However, because the variables are not displayed in the URL, it is not possible to bookmark the page. Developers prefer POST for sending form data.","title":"When to use POST?"},{"location":"PR/phpForms/#forms-validation","text":"","title":"Forms Validation"},{"location":"PR/phpForms/#text-fields","text":"The name, email, and website fields are text input elements, and the comment field is a textarea. The HTML code looks like this: Name: < input type = \"text\" name = \"name\" > E-mail: < input type = \"text\" name = \"email\" > Website: < input type = \"text\" name = \"website\" > Comment: < textarea name = \"comment\" rows = \"5\" cols = \"40\" ></ textarea >","title":"Text Fields"},{"location":"PR/phpForms/#radio-buttons","text":"The gender fields are radio buttons and the HTML code looks like this: Gender: < input type = \"radio\" name = \"gender\" value = \"female\" > Female < input type = \"radio\" name = \"gender\" value = \"male\" > Male < input type = \"radio\" name = \"gender\" value = \"other\" > Other","title":"Radio Buttons"},{"location":"PR/phpForms/#the-form-element","text":"The HTML code of the form looks like this: < form method = \"post\" action = \"<?php echo htmlspecialchars($_SERVER[\" PHP_SELF \"]);? > \"> When the form is submitted, the form data is sent with method=\"post\". The $_SERVER[\"PHP_SELF\"] is a super global variable that returns the filename of the currently executing script. The $_SERVER[\"PHP_SELF\"] sends the submitted form data to the page itself, instead of jumping to a different page. This way, the user will get error messages on the same page as the form. The htmlspecialchars() function converts special characters to HTML entities. This means that it will replace HTML characters like < and > with & lt; and & gt;. This prevents attackers from exploiting the code by injecting HTML or Javascript code (Cross-site Scripting attacks) in forms.","title":"The Form Element"},{"location":"PR/phpForms/#php-form-security","text":"The $_SERVER[\"PHP_SELF\"] variable can be used by hackers! If PHP_SELF is used in your page then a user can enter a slash (/) and then some Cross Site Scripting (XSS) commands to execute. Cross-site scripting (XSS) is a type of computer security vulnerability typically found in Web applications. XSS enables attackers to inject client-side script into Web pages viewed by other users. Assume we have the following form in a page named \"test_form.php\": < form method = \"post\" action = \"<?php echo $_SERVER[\" PHP_SELF \"];? > \"> Now, if a user enters the normal URL in the address bar like \"http://www.example.com/test_form.php\", the above code will be translated to: < form method = \"post\" action = \"test_form.php\" > So far, so good. However, consider that a user enters the following URL in the address bar: http://www.example.com/test_form.php/%22%3E%3Cscript%3Ealert('hacked')%3C/script%3E In this case, the above code will be translated to: < form method = \"post\" action = \"test_form.php/\" >< script > alert ( 'hacked' )</ script > This code adds a script tag and an alert command. And when the page loads, the JavaScript code will be executed (the user will see an alert box). This is just a simple and harmless example how the PHP_SELF variable can be exploited. Be aware of that any JavaScript code can be added inside the <'script> tag! A hacker can redirect the user to a file on another server, and that file can hold malicious code that can alter the global variables or submit the form to another address to save the user data, for example.","title":"PHP Form Security"},{"location":"PR/phpForms/#how-to-avoid-_serverphp_self-exploits","text":"$_SERVER[\"PHP_SELF\"] exploits can be avoided by using the htmlspecialchars() function. The form code should look like this: <form method=\"post\" action=\" <?php echo htmlspecialchars ( $_SERVER [ \"PHP_SELF\" ]); ?> \"> The htmlspecialchars() function converts special characters to HTML entities. Now if the user tries to exploit the PHP_SELF variable, it will result in the following output: < form method = \"post\" action = \"test_form.php/&quot;&gt;&lt;script&gt;alert('hacked')&lt;/script&gt;\" > The exploit attempt fails, and no harm is done!","title":"How To Avoid $_SERVER[\"PHP_SELF\"] Exploits?"},{"location":"PR/phpForms/#validate-form-data-with-php","text":"The first thing we will do is to pass all variables through PHP's htmlspecialchars() function. When we use the htmlspecialchars() function; then if a user tries to submit the following in a text field: < script > location . href ( 'http://www.hacked.com' )</ script > This would not be executed, because it would be saved as HTML escaped code, like this: &lt; script &gt; location.href('http://www.hacked.com') &lt; /script &gt; The code is now safe to be displayed on a page or inside an e-mail. We will also do two more things when the user submits the form: Strip unnecessary characters (extra space, tab, newline) from the user input data (with the PHP trim() function) Remove backslashes (\\) from the user input data (with the PHP stripslashes() function) The next step is to create a function that will do all the checking for us (which is much more convenient than writing the same code over and over again). We will name the function test_input(). Now, we can check each $_POST variable with the test_input() function, and the script looks like this: <?php // define variables and set to empty values $name = $email = $gender = $comment = $website = \"\" ; if ( $_SERVER [ \"REQUEST_METHOD\" ] == \"POST\" ) { $name = test_input ( $_POST [ \"name\" ]); $email = test_input ( $_POST [ \"email\" ]); $website = test_input ( $_POST [ \"website\" ]); $comment = test_input ( $_POST [ \"comment\" ]); $gender = test_input ( $_POST [ \"gender\" ]); } function test_input ( $data ) { $data = trim ( $data ); $data = stripslashes ( $data ); $data = htmlspecialchars ( $data ); return $data ; } ?> Notice that at the start of the script, we check whether the form has been submitted using $_SERVER[\"REQUEST_METHOD\"]. If the REQUEST_METHOD is POST, then the form has been submitted - and it should be validated. If it has not been submitted, skip the validation and display a blank form. However, in the example above, all input fields are optional. The script works fine even if the user does not enter any data.","title":"Validate Form Data With PHP"},{"location":"PR/phpForms/#required-fields","text":"In the following code we have added some new variables: $nameErr, $emailErr, $genderErr, and $websiteErr. These error variables will hold error messages for the required fields. We have also added an if else statement for each $_POST variable. This checks if the $_POST variable is empty (with the PHP empty() function). If it is empty, an error message is stored in the different error variables, and if it is not empty, it sends the user input data through the test_input() function. <?php // define variables and set to empty values $nameErr = $emailErr = $genderErr = $websiteErr = \"\" ; $name = $email = $gender = $comment = $website = \"\" ; if ( $_SERVER [ \"REQUEST_METHOD\" ] == \"POST\" ) { if ( empty ( $_POST [ \"name\" ])) { $nameErr = \"Name is required\" ; } else { $name = test_input ( $_POST [ \"name\" ]); } if ( empty ( $_POST [ \"email\" ])) { $emailErr = \"Email is required\" ; } else { $email = test_input ( $_POST [ \"email\" ]); } if ( empty ( $_POST [ \"website\" ])) { $website = \"\" ; } else { $website = test_input ( $_POST [ \"website\" ]); } if ( empty ( $_POST [ \"comment\" ])) { $comment = \"\" ; } else { $comment = test_input ( $_POST [ \"comment\" ]); } if ( empty ( $_POST [ \"gender\" ])) { $genderErr = \"Gender is required\" ; } else { $gender = test_input ( $_POST [ \"gender\" ]); } } ?>","title":"Required Fields"},{"location":"PR/phpForms/#display-the-error-messages","text":"Then in the HTML form, we add a little script after each required field, which generates the correct error message if needed (that is if the user tries to submit the form without filling out the required fields). <!-- HTML form --> < form method = \"post\" action = \"<?php echo htmlspecialchars($_SERVER[\" PHP_SELF \"]);? > \"> Name: < input type = \"text\" name = \"name\" > < span class = \"error\" > * <?php echo $nameErr;?> </ span > < br >< br > E-mail: < input type = \"text\" name = \"email\" > < span class = \"error\" > * <?php echo $emailErr;?> </ span > < br >< br > Website: < input type = \"text\" name = \"website\" > < span class = \"error\" > <?php echo $websiteErr;?> </ span > < br >< br > Comment: < textarea name = \"comment\" rows = \"5\" cols = \"40\" ></ textarea > < br >< br > Gender: < input type = \"radio\" name = \"gender\" value = \"female\" > Female < input type = \"radio\" name = \"gender\" value = \"male\" > Male < input type = \"radio\" name = \"gender\" value = \"other\" > Other < span class = \"error\" > * <?php echo $genderErr;?> </ span > < br >< br > < input type = \"submit\" name = \"submit\" value = \"Submit\" > </ form >","title":"Display The Error Messages"},{"location":"PR/phpForms/#validate-name","text":"The code below shows a simple way to check if the name field only contains letters, dashes, apostrophes and whitespaces. If the value of the name field is not valid, then store an error message: $name = test_input($_POST[\"name\"]); if (!preg_match(\"/^[a-zA-Z-' ]*$/\",$name)) { $nameErr = \"Only letters and white space allowed\"; }","title":"Validate Name"},{"location":"PR/phpForms/#validate-e-mail","text":"The easiest and safest way to check whether an email address is well-formed is to use PHP's filter_var() function. In the code below, if the e-mail address is not well-formed, then store an error message: $email = test_input($_POST[\"email\"]); if (!filter_var($email, FILTER_VALIDATE_EMAIL)) { $emailErr = \"Invalid email format\"; }","title":"Validate E-mail"},{"location":"PR/phpForms/#validate-url","text":"The code below shows a way to check if a URL address syntax is valid (this regular expression also allows dashes in the URL). If the URL address syntax is not valid, then store an error message: $website = test_input($_POST[\"website\"]); if (!preg_match(\"/\\b(?:(?:https?|ftp):\\/\\/|www\\.)[-a-z0-9+&@#\\/%?=~_|!:,.;]*[-a-z0-9+&@#\\/%=~_|]/i\",$website)) { $websiteErr = \"Invalid URL\"; }","title":"Validate URL"},{"location":"PR/phpForms/#validate-name-e-mail-and-url","text":"Now, the script looks like this. <?php // define variables and set to empty values $nameErr = $emailErr = $genderErr = $websiteErr = \"\" ; $name = $email = $gender = $comment = $website = \"\" ; if ( $_SERVER [ \"REQUEST_METHOD\" ] == \"POST\" ) { if ( empty ( $_POST [ \"name\" ])) { $nameErr = \"Name is required\" ; } else { $name = test_input ( $_POST [ \"name\" ]); // check if name only contains letters and whitespace if ( ! preg_match ( \"/^[a-zA-Z-' ]*$/\" , $name )) { $nameErr = \"Only letters and white space allowed\" ; } } if ( empty ( $_POST [ \"email\" ])) { $emailErr = \"Email is required\" ; } else { $email = test_input ( $_POST [ \"email\" ]); // check if e-mail address is well-formed if ( ! filter_var ( $email , FILTER_VALIDATE_EMAIL )) { $emailErr = \"Invalid email format\" ; } } if ( empty ( $_POST [ \"website\" ])) { $website = \"\" ; } else { $website = test_input ( $_POST [ \"website\" ]); // check if URL address syntax is valid (this regular expression also allows dashes in the URL) if ( ! preg_match ( \"/\\b(?:(?:https?|ftp):\\/\\/|www\\.)[-a-z0-9+&@#\\/%?=~_|!:,.;]*[-a-z0-9+&@#\\/%=~_|]/i\" , $website )) { $websiteErr = \"Invalid URL\" ; } } if ( empty ( $_POST [ \"comment\" ])) { $comment = \"\" ; } else { $comment = test_input ( $_POST [ \"comment\" ]); } if ( empty ( $_POST [ \"gender\" ])) { $genderErr = \"Gender is required\" ; } else { $gender = test_input ( $_POST [ \"gender\" ]); } } ?>","title":"Validate Name, E-mail, and URL"},{"location":"PR/phpForms/#keep-the-values-in-the-form","text":"To show the values in the input fields after the user hits the submit button, we add a little PHP script inside the value attribute of the following input fields: name, email, and website. In the comment textarea field, we put the script between the <'textarea> and <'/textarea> tags. The little script outputs the value of the $name, $email, $website, and $comment variables. Then, we also need to show which radio button that was checked. For this, we must manipulate the checked attribute (not the value attribute for radio buttons): Name: <input type=\"text\" name=\"name\" value=\" <?php echo $name ; ?> \"> E-mail: <input type=\"text\" name=\"email\" value=\" <?php echo $email ; ?> \"> Website: <input type=\"text\" name=\"website\" value=\" <?php echo $website ; ?> \"> Comment: <textarea name=\"comment\" rows=\"5\" cols=\"40\"> <?php echo $comment ; ?> </textarea> Gender: <input type=\"radio\" name=\"gender\" <?php if ( isset ( $gender ) && $gender == \"female\" ) echo \"checked\" ; ?> value=\"female\">Female <input type=\"radio\" name=\"gender\" <?php if ( isset ( $gender ) && $gender == \"male\" ) echo \"checked\" ; ?> value=\"male\">Male <input type=\"radio\" name=\"gender\" <?php if ( isset ( $gender ) && $gender == \"other\" ) echo \"checked\" ; ?> value=\"other\">Other","title":"Keep The Values in The Form"},{"location":"PR/phpForms/#complete","text":"<!DOCTYPE HTML> <html> <head> <style> .error {color: #FF0000;} </style> </head> <body> <?php // define variables and set to empty values $nameErr = $emailErr = $genderErr = $websiteErr = \"\" ; $name = $email = $gender = $comment = $website = \"\" ; if ( $_SERVER [ \"REQUEST_METHOD\" ] == \"POST\" ) { if ( empty ( $_POST [ \"name\" ])) { $nameErr = \"Name is required\" ; } else { $name = test_input ( $_POST [ \"name\" ]); // check if name only contains letters and whitespace if ( ! preg_match ( \"/^[a-zA-Z-' ]*$/\" , $name )) { $nameErr = \"Only letters and white space allowed\" ; } } if ( empty ( $_POST [ \"email\" ])) { $emailErr = \"Email is required\" ; } else { $email = test_input ( $_POST [ \"email\" ]); // check if e-mail address is well-formed if ( ! filter_var ( $email , FILTER_VALIDATE_EMAIL )) { $emailErr = \"Invalid email format\" ; } } if ( empty ( $_POST [ \"website\" ])) { $website = \"\" ; } else { $website = test_input ( $_POST [ \"website\" ]); // check if URL address syntax is valid (this regular expression also allows dashes in the URL) if ( ! preg_match ( \"/\\b(?:(?:https?|ftp):\\/\\/|www\\.)[-a-z0-9+&@#\\/%?=~_|!:,.;]*[-a-z0-9+&@#\\/%=~_|]/i\" , $website )) { $websiteErr = \"Invalid URL\" ; } } if ( empty ( $_POST [ \"comment\" ])) { $comment = \"\" ; } else { $comment = test_input ( $_POST [ \"comment\" ]); } if ( empty ( $_POST [ \"gender\" ])) { $genderErr = \"Gender is required\" ; } else { $gender = test_input ( $_POST [ \"gender\" ]); } } function test_input ( $data ) { $data = trim ( $data ); $data = stripslashes ( $data ); $data = htmlspecialchars ( $data ); return $data ; } ?> <h2>PHP Form Validation Example</h2> <p><span class=\"error\">* required field</span></p> <form method=\"post\" action=\" <?php echo htmlspecialchars ( $_SERVER [ \"PHP_SELF\" ]); ?> \"> Name: <input type=\"text\" name=\"name\" value=\" <?php echo $name ; ?> \"> <span class=\"error\">* <?php echo $nameErr ; ?> </span> <br><br> E-mail: <input type=\"text\" name=\"email\" value=\" <?php echo $email ; ?> \"> <span class=\"error\">* <?php echo $emailErr ; ?> </span> <br><br> Website: <input type=\"text\" name=\"website\" value=\" <?php echo $website ; ?> \"> <span class=\"error\"> <?php echo $websiteErr ; ?> </span> <br><br> Comment: <textarea name=\"comment\" rows=\"5\" cols=\"40\"> <?php echo $comment ; ?> </textarea> <br><br> Gender: <input type=\"radio\" name=\"gender\" <?php if ( isset ( $gender ) && $gender == \"female\" ) echo \"checked\" ; ?> value=\"female\">Female <input type=\"radio\" name=\"gender\" <?php if ( isset ( $gender ) && $gender == \"male\" ) echo \"checked\" ; ?> value=\"male\">Male <input type=\"radio\" name=\"gender\" <?php if ( isset ( $gender ) && $gender == \"other\" ) echo \"checked\" ; ?> value=\"other\">Other <span class=\"error\">* <?php echo $genderErr ; ?> </span> <br><br> <input type=\"submit\" name=\"submit\" value=\"Submit\"> </form> <?php echo \"<h2>Your Input:</h2>\" ; echo $name ; echo \"<br>\" ; echo $email ; echo \"<br>\" ; echo $website ; echo \"<br>\" ; echo $comment ; echo \"<br>\" ; echo $gender ; ?> </body> </html>","title":"Complete"},{"location":"PR/phpIF/","text":"Conditional statements are used to perform different actions based on different conditions. PHP Conditional Statements In PHP we have the following conditional statements: if statement - executes some code if one condition is true if...else statement - executes some code if a condition is true and another code if that condition is false if...elseif...else statement - executes different codes for more than two conditions switch statement - selects one of many blocks of code to be executed if statement <?php $t = date ( \"H\" ); if ( $t < \"20\" ) { echo \"Have a good day!\" ; } ?> if...else statement <?php $t = date ( \"H\" ); if ( $t < \"20\" ) { echo \"Have a good day!\" ; } else { echo \"Have a good night!\" ; } ?> if...elseif...else statement <?php $t = date ( \"H\" ); if ( $t < \"10\" ) { echo \"Have a good morning!\" ; } elseif ( $t < \"20\" ) { echo \"Have a good day!\" ; } else { echo \"Have a good night!\" ; } ?> switch statement <?php $favcolor = \"red\" ; switch ( $favcolor ) { case \"red\" : echo \"Your favorite color is red!\" ; break ; case \"blue\" : echo \"Your favorite color is blue!\" ; break ; case \"green\" : echo \"Your favorite color is green!\" ; break ; default : echo \"Your favorite color is neither red, blue, nor green!\" ; } ?>","title":"Conditionals"},{"location":"PR/phpIF/#php-conditional-statements","text":"In PHP we have the following conditional statements: if statement - executes some code if one condition is true if...else statement - executes some code if a condition is true and another code if that condition is false if...elseif...else statement - executes different codes for more than two conditions switch statement - selects one of many blocks of code to be executed","title":"PHP Conditional Statements"},{"location":"PR/phpIF/#if-statement","text":"<?php $t = date ( \"H\" ); if ( $t < \"20\" ) { echo \"Have a good day!\" ; } ?>","title":"if statement"},{"location":"PR/phpIF/#ifelse-statement","text":"<?php $t = date ( \"H\" ); if ( $t < \"20\" ) { echo \"Have a good day!\" ; } else { echo \"Have a good night!\" ; } ?>","title":"if...else statement"},{"location":"PR/phpIF/#ifelseifelse-statement","text":"<?php $t = date ( \"H\" ); if ( $t < \"10\" ) { echo \"Have a good morning!\" ; } elseif ( $t < \"20\" ) { echo \"Have a good day!\" ; } else { echo \"Have a good night!\" ; } ?>","title":"if...elseif...else statement"},{"location":"PR/phpIF/#switch-statement","text":"<?php $favcolor = \"red\" ; switch ( $favcolor ) { case \"red\" : echo \"Your favorite color is red!\" ; break ; case \"blue\" : echo \"Your favorite color is blue!\" ; break ; case \"green\" : echo \"Your favorite color is green!\" ; break ; default : echo \"Your favorite color is neither red, blue, nor green!\" ; } ?>","title":"switch statement"},{"location":"PR/phpLoops/","text":"In PHP, we have the following loop types: while - loops through a block of code as long as the specified condition is true do...while - loops through a block of code once, and then repeats the loop as long as the specified condition is true for - loops through a block of code a specified number of times foreach - loops through a block of code for each element in an array To control further the flow of a loop, you can use the break and continue statements. while The while loop - Loops through a block of code as long as the specified condition is true. <?php $x = 1 ; while ( $x <= 5 ) { echo \"The number is: $x <br>\" ; $x ++ ; } ?> do...while The do...while loop - Loops through a block of code once, and then repeats the loop as long as the specified condition is true. In a do...while loop the condition is tested AFTER executing the statements within the loop. This means that the do...while loop will execute its statements at least once, even if the condition is false. See example below. <?php $x = 1 ; do { echo \"The number is: $x <br>\" ; $x ++ ; } while ( $x <= 5 ); ?> for The for loop - Loops through a block of code a specified number of times. <?php for ( $x = 0 ; $x <= 10 ; $x ++ ) { echo \"The number is: $x <br>\" ; } ?> foreach The foreach loop - Loops through a block of code for each element in an array. <?php $colors = array ( \"red\" , \"green\" , \"blue\" , \"yellow\" ); foreach ( $colors as $value ) { echo \" $value <br>\" ; } ?> <?php $age = array ( \"Peter\" => \"35\" , \"Ben\" => \"37\" , \"Joe\" => \"43\" ); foreach ( $age as $x => $val ) { echo \" $x = $val <br>\" ; } ?> Break and Continue PHP Break You have already seen the break statement used to \"jump out\" of a switch statement. The break statement can also be used to jump out of a loop. This example jumps out of the loop when x is equal to 4. <?php $x = 0 ; while ( $x < 10 ) { echo \"The number is: $x <br>\" ; $x ++ ; if ( $x == 4 ) { break ; } } ?> PHP Continue The continue statement breaks one iteration (in the loop), if a specified condition occurs, and continues with the next iteration in the loop. This example skips the value of 4. <?php for ( $x = 0 ; $x < 10 ; $x ++ ) { if ( $x == 4 ) { continue ; } echo \"The number is: $x <br>\" ; } ?>","title":"Loops"},{"location":"PR/phpLoops/#while","text":"The while loop - Loops through a block of code as long as the specified condition is true. <?php $x = 1 ; while ( $x <= 5 ) { echo \"The number is: $x <br>\" ; $x ++ ; } ?>","title":"while"},{"location":"PR/phpLoops/#dowhile","text":"The do...while loop - Loops through a block of code once, and then repeats the loop as long as the specified condition is true. In a do...while loop the condition is tested AFTER executing the statements within the loop. This means that the do...while loop will execute its statements at least once, even if the condition is false. See example below. <?php $x = 1 ; do { echo \"The number is: $x <br>\" ; $x ++ ; } while ( $x <= 5 ); ?>","title":"do...while"},{"location":"PR/phpLoops/#for","text":"The for loop - Loops through a block of code a specified number of times. <?php for ( $x = 0 ; $x <= 10 ; $x ++ ) { echo \"The number is: $x <br>\" ; } ?>","title":"for"},{"location":"PR/phpLoops/#foreach","text":"The foreach loop - Loops through a block of code for each element in an array. <?php $colors = array ( \"red\" , \"green\" , \"blue\" , \"yellow\" ); foreach ( $colors as $value ) { echo \" $value <br>\" ; } ?> <?php $age = array ( \"Peter\" => \"35\" , \"Ben\" => \"37\" , \"Joe\" => \"43\" ); foreach ( $age as $x => $val ) { echo \" $x = $val <br>\" ; } ?>","title":"foreach"},{"location":"PR/phpLoops/#break-and-continue","text":"","title":"Break and Continue"},{"location":"PR/phpLoops/#php-break","text":"You have already seen the break statement used to \"jump out\" of a switch statement. The break statement can also be used to jump out of a loop. This example jumps out of the loop when x is equal to 4. <?php $x = 0 ; while ( $x < 10 ) { echo \"The number is: $x <br>\" ; $x ++ ; if ( $x == 4 ) { break ; } } ?>","title":"PHP Break"},{"location":"PR/phpLoops/#php-continue","text":"The continue statement breaks one iteration (in the loop), if a specified condition occurs, and continues with the next iteration in the loop. This example skips the value of 4. <?php for ( $x = 0 ; $x < 10 ; $x ++ ) { if ( $x == 4 ) { continue ; } echo \"The number is: $x <br>\" ; } ?>","title":"PHP Continue"},{"location":"PR/phpMath1/","text":"PHP pi() Function The pi() function returns the value of PI. <?php echo ( pi ()); // returns 3.1415926535898 ?> PHP min() and max() Functions The min() and max() functions can be used to find the lowest or highest value in a list of arguments. <?php echo ( min ( 1 , 2 , 3 )); // returns 1 echo ( max ( 1 , 2 , 3 )); // returns 3 ?> PHP floor() and ceil() Functions The floor() and ceil() functions can be used to round a number down or up. <?php echo ( floor ( 3.7 )); // returns 3 echo ( ceil ( 3.1 )); // returns 4 ?> PHP abs() Function The abs() function returns the absolute value of a number. <?php echo ( abs ( - 3.7 )); // returns 3.7 ?> PHP sqrt() Function The sqrt() function returns the square root of a number. <?php echo ( sqrt ( 9 )); // returns 3 ?> PHP round() Function The round() function rounds a number to the nearest integer. <?php echo ( round ( 3.7 )); // returns 4 ?> PHP rand() Function The rand() function generates a random number. <?php echo ( rand ( 1 , 10 )); // returns a random number between 1 and 10 (inclusive) ?>","title":"Math"},{"location":"PR/phpMath1/#php-pi-function","text":"The pi() function returns the value of PI. <?php echo ( pi ()); // returns 3.1415926535898 ?>","title":"PHP pi() Function"},{"location":"PR/phpMath1/#php-min-and-max-functions","text":"The min() and max() functions can be used to find the lowest or highest value in a list of arguments. <?php echo ( min ( 1 , 2 , 3 )); // returns 1 echo ( max ( 1 , 2 , 3 )); // returns 3 ?>","title":"PHP min() and max() Functions"},{"location":"PR/phpMath1/#php-floor-and-ceil-functions","text":"The floor() and ceil() functions can be used to round a number down or up. <?php echo ( floor ( 3.7 )); // returns 3 echo ( ceil ( 3.1 )); // returns 4 ?>","title":"PHP floor() and ceil() Functions"},{"location":"PR/phpMath1/#php-abs-function","text":"The abs() function returns the absolute value of a number. <?php echo ( abs ( - 3.7 )); // returns 3.7 ?>","title":"PHP abs() Function"},{"location":"PR/phpMath1/#php-sqrt-function","text":"The sqrt() function returns the square root of a number. <?php echo ( sqrt ( 9 )); // returns 3 ?>","title":"PHP sqrt() Function"},{"location":"PR/phpMath1/#php-round-function","text":"The round() function rounds a number to the nearest integer. <?php echo ( round ( 3.7 )); // returns 4 ?>","title":"PHP round() Function"},{"location":"PR/phpMath1/#php-rand-function","text":"The rand() function generates a random number. <?php echo ( rand ( 1 , 10 )); // returns a random number between 1 and 10 (inclusive) ?>","title":"PHP rand() Function"},{"location":"PR/phpNum1/","text":"PHP Numbers One thing to notice about PHP is that it provides automatic data type conversion. So, if you assign an integer value to a variable, the type of that variable will automatically be an integer. Then, if you assign a string to the same variable, the type will change to a string. This automatic conversion can sometimes break your code. PHP Integers An integer data type is a non-decimal number between -2147483648 and 2147483647 in 32 bit systems, and between -9223372036854775808 and 9223372036854775807 in 64 bit systems. A value greater (or lower) than this, will be stored as float, because it exceeds the limit of an integer. Another important thing to know is that even if 4 * 2.5 is 10, the result is stored as float, because one of the operands is a float (2.5). Integers can be specified in three formats: decimal (10-based), hexadecimal (16-based - prefixed with 0x) or octal (8-based - prefixed with 0) PHP Integer Constants PHP has the following predefined constants for integers: PHP_INT_MAX - The largest integer supported PHP_INT_MIN - The smallest integer supported PHP_INT_SIZE - The size of an integer in bytes PHP Integer Functions PHP has the following functions to check if the type of a variable is integer: is_int() is_integer() - alias of is_int() is_long() - alias of is_int() PHP Floats The float data type can commonly store a value up to 1.7976931348623E+308 (platform dependent), and have a maximum precision of 14 digits. PHP Float Constants PHP has the following predefined constants for floats (from PHP 7.2): PHP_FLOAT_MAX - The largest representable floating point number PHP_FLOAT_MIN - The smallest representable positive floating point number PHP_FLOAT_DIG - The number of decimal digits that can be rounded into a float and back without precision loss PHP_FLOAT_EPSILON - The smallest representable positive number x, so that x + 1.0 != 1.0 PHP Float Functions PHP has the following functions to check if the type of a variable is float: is_float() is_double() - alias of is_float() PHP Infinity A numeric value that is larger than PHP_FLOAT_MAX is considered infinite. PHP has the following functions to check if a numeric value is finite or infinite: is_finite() is_infinite() <!DOCTYPE html> <html> <body> <?php // Check if a numeric value is finite or infinite $x = 1.9e411 ; var_dump ( $x ); ?> </body> </html> PHP NaN NaN stands for Not a Number. NaN is used for impossible mathematical operations. PHP has the following functions to check if a value is not a number: is_nan() <!DOCTYPE html> <html> <body> <?php // Invalid calculation will return a NaN value $x = acos ( 8 ); var_dump ( $x ); ?> </body> </html> PHP Numerical Strings The PHP is_numeric() function can be used to find whether a variable is numeric. The function returns true if the variable is a number or a numeric string, false otherwise. From PHP 7.0: The is_numeric() function will return FALSE for numeric strings in hexadecimal form (e.g. 0xf4c3b00c), as they are no longer considered as numeric strings. <!DOCTYPE html> <html> <body> <?php // Check if the variable is numeric $x = 5985 ; var_dump ( is_numeric ( $x )); echo \"<br>\" ; $x = \"5985\" ; var_dump ( is_numeric ( $x )); echo \"<br>\" ; $x = \"59.85\" + 100 ; var_dump ( is_numeric ( $x )); echo \"<br>\" ; $x = \"Hello\" ; var_dump ( is_numeric ( $x )); ?> </body> </html> PHP Casting to Integers Sometimes you need to cast a numerical value into another data type. The (int), (integer), or intval() function are often used to convert a value to an integer. <!DOCTYPE html> <html> <body> <?php // Cast float to int $x = 23465.768 ; $int_cast = ( int ) $x ; echo $int_cast ; echo \"<br>\" ; // Cast string to int $x = \"23465.768\" ; $int_cast = ( int ) $x ; echo $int_cast ; ?> </body> </html>","title":"Numerical"},{"location":"PR/phpNum1/#php-numbers","text":"One thing to notice about PHP is that it provides automatic data type conversion. So, if you assign an integer value to a variable, the type of that variable will automatically be an integer. Then, if you assign a string to the same variable, the type will change to a string. This automatic conversion can sometimes break your code.","title":"PHP Numbers"},{"location":"PR/phpNum1/#php-integers","text":"An integer data type is a non-decimal number between -2147483648 and 2147483647 in 32 bit systems, and between -9223372036854775808 and 9223372036854775807 in 64 bit systems. A value greater (or lower) than this, will be stored as float, because it exceeds the limit of an integer. Another important thing to know is that even if 4 * 2.5 is 10, the result is stored as float, because one of the operands is a float (2.5). Integers can be specified in three formats: decimal (10-based), hexadecimal (16-based - prefixed with 0x) or octal (8-based - prefixed with 0)","title":"PHP Integers"},{"location":"PR/phpNum1/#php-integer-constants","text":"PHP has the following predefined constants for integers: PHP_INT_MAX - The largest integer supported PHP_INT_MIN - The smallest integer supported PHP_INT_SIZE - The size of an integer in bytes","title":"PHP Integer Constants"},{"location":"PR/phpNum1/#php-integer-functions","text":"PHP has the following functions to check if the type of a variable is integer: is_int() is_integer() - alias of is_int() is_long() - alias of is_int()","title":"PHP Integer Functions"},{"location":"PR/phpNum1/#php-floats","text":"The float data type can commonly store a value up to 1.7976931348623E+308 (platform dependent), and have a maximum precision of 14 digits.","title":"PHP Floats"},{"location":"PR/phpNum1/#php-float-constants","text":"PHP has the following predefined constants for floats (from PHP 7.2): PHP_FLOAT_MAX - The largest representable floating point number PHP_FLOAT_MIN - The smallest representable positive floating point number PHP_FLOAT_DIG - The number of decimal digits that can be rounded into a float and back without precision loss PHP_FLOAT_EPSILON - The smallest representable positive number x, so that x + 1.0 != 1.0","title":"PHP Float Constants"},{"location":"PR/phpNum1/#php-float-functions","text":"PHP has the following functions to check if the type of a variable is float: is_float() is_double() - alias of is_float()","title":"PHP Float Functions"},{"location":"PR/phpNum1/#php-infinity","text":"A numeric value that is larger than PHP_FLOAT_MAX is considered infinite. PHP has the following functions to check if a numeric value is finite or infinite: is_finite() is_infinite() <!DOCTYPE html> <html> <body> <?php // Check if a numeric value is finite or infinite $x = 1.9e411 ; var_dump ( $x ); ?> </body> </html>","title":"PHP Infinity"},{"location":"PR/phpNum1/#php-nan","text":"NaN stands for Not a Number. NaN is used for impossible mathematical operations. PHP has the following functions to check if a value is not a number: is_nan() <!DOCTYPE html> <html> <body> <?php // Invalid calculation will return a NaN value $x = acos ( 8 ); var_dump ( $x ); ?> </body> </html>","title":"PHP NaN"},{"location":"PR/phpNum1/#php-numerical-strings","text":"The PHP is_numeric() function can be used to find whether a variable is numeric. The function returns true if the variable is a number or a numeric string, false otherwise. From PHP 7.0: The is_numeric() function will return FALSE for numeric strings in hexadecimal form (e.g. 0xf4c3b00c), as they are no longer considered as numeric strings. <!DOCTYPE html> <html> <body> <?php // Check if the variable is numeric $x = 5985 ; var_dump ( is_numeric ( $x )); echo \"<br>\" ; $x = \"5985\" ; var_dump ( is_numeric ( $x )); echo \"<br>\" ; $x = \"59.85\" + 100 ; var_dump ( is_numeric ( $x )); echo \"<br>\" ; $x = \"Hello\" ; var_dump ( is_numeric ( $x )); ?> </body> </html>","title":"PHP Numerical Strings"},{"location":"PR/phpNum1/#php-casting-to-integers","text":"Sometimes you need to cast a numerical value into another data type. The (int), (integer), or intval() function are often used to convert a value to an integer. <!DOCTYPE html> <html> <body> <?php // Cast float to int $x = 23465.768 ; $int_cast = ( int ) $x ; echo $int_cast ; echo \"<br>\" ; // Cast string to int $x = \"23465.768\" ; $int_cast = ( int ) $x ; echo $int_cast ; ?> </body> </html>","title":"PHP Casting to Integers"},{"location":"PR/phpOperators1/","text":"Operators are used to perform operations on variables and values. PHP divides the operators in the following groups: Arithmetic operators Assignment operators Comparison operators Increment/Decrement operators Logical operators String operators Array operators Conditional assignment operators PHP Arithmetic Operators The PHP arithmetic operators are used with numeric values to perform common arithmetical operations, such as addition, subtraction, multiplication etc. Operator Description Example Result + Addition $x + $y Sum of $x and $y - Subtraction $x - $y Difference of $x and $y * Multiplication $x * $y Product of $x and $y / Division $x / $y Quotient of $x and $y % Modulus $x % $y Remainder of $x divided by $y ** Exponentiation $x ** $y $x to the power of $y PHP Assignment Operators The PHP assignment operators are used with numeric values to write a value to a variable. The basic assignment operator in PHP is \"=\". It means that the left operand gets set to the value of the assignment expression on the right. Operator Description Example Result = Assignment $x = $y Assign $y to $x += Addition Assignment $x = $x + $y Add $y to $x and assign the result to $x -= Subtraction Assignment $x = $x - $y Subtract $y from $x and assign the result to $x *= Multiplication Assignment $x = $x * $y Multiply $x by $y and assign the result to $x /= Division Assignment $x = $x / $y Divide $x by $y and assign the result to $x %= Modulus Assignment $x = $x % $y Modulus of $x divided by $y and assign the result to $x PHP Comparison Operators The PHP comparison operators are used to compare two values (number or string): Operator Description Example Result == Equal to $x == $y Returns true if $x is equal to $y === Identical to $x === $y Returns true if $x is equal to $y, and they are of the same type != Not equal to $x != $y Returns true if $x is not equal to $y <> Not equal to $x <> $y Returns true if $x is not equal to $y !== Not identical to $x !== $y Returns true if $x is not equal to $y, or they are not of the same type < Less than $x < $y Returns true if $x is less than $y <= Less than or equal to $x <= $y Returns true if $x is less than or equal to $y > Greater than $x > $y Returns true if $x is greater than $y >= Greater than or equal to $x >= $y Returns true if $x is greater than or equal to $y <=> Spaceship operator $x <=> $y Returns an integer less than, equal to, or greater than zero, depending on if $x is less than, equal to, or greater than $y. Introduced in PHP 7. PHP Increment / Decrement Operators The PHP increment and decrement operators are used to increase or decrease the value of a variable. Operator Description Result ++$x Pre-increment Increments $x by one, then returns $x $x++ Post-increment Returns $x, then increments $x by one --$x Pre-decrement Decrements $x by one, then returns $x $x-- Post-decrement Returns $x, then decrements $x by one PHP Logical Operators The PHP logical operators are used to combine conditional statements. Operator Description Example Result && Logical AND $x && $y Returns true if both $x and $y are true || Logical OR $x || $y Returns true if either $x or $y is true ! Logical NOT ! $x Returns the opposite of $x and Logical AND $x and $y Returns true if both $x and $y are true or Logical OR $x or $y Returns true if either $x or $y is true xor Logical Xor $x xor $y True if either $x or $y is true, but not both PHP String Operators The PHP string operators are used to concatenate strings. Operator Description Example Result . Concatenation $x . $y Concatenates $x and $y .= Concatenation assignment $x .= $y Appends $y to $x PHP Array Operators The PHP array operators are used to perform operations on arrays. Operator Description Example Result + Union $x + $y Union of $x and $y == Equality $x == $y Returns true if $x and $y have the same key/value pairs === Identity $x === $y Returns true if $x and $y have the same key/value pairs in the same order and of the same types != Inequality $x != $y Returns true if $x is not equal to $y <> Inequality $x <> $y Returns true if $x is not equal to $y !== Non-identity $x !== $y Returns true if $x is not identical to $y Conditional Assignment Operators Operator Description Example Result ?: Ternary Operator $x = expr1 ? expr2 : expr3 Returns the value of $x. The value of $x is expr2 if expr1 = TRUE. The value of $x is expr3 if expr1 = FALSE ?? Null coalescing $x = expr1 ?? expr2 Returns the value of $x. The value of $x is expr1 if expr1 exists, and is not NULL. If expr1 does not exist, or is NULL, the value of $x is expr2. Introduced in PHP 7","title":"Operators"},{"location":"PR/phpOperators1/#php-arithmetic-operators","text":"The PHP arithmetic operators are used with numeric values to perform common arithmetical operations, such as addition, subtraction, multiplication etc. Operator Description Example Result + Addition $x + $y Sum of $x and $y - Subtraction $x - $y Difference of $x and $y * Multiplication $x * $y Product of $x and $y / Division $x / $y Quotient of $x and $y % Modulus $x % $y Remainder of $x divided by $y ** Exponentiation $x ** $y $x to the power of $y","title":"PHP Arithmetic Operators"},{"location":"PR/phpOperators1/#php-assignment-operators","text":"The PHP assignment operators are used with numeric values to write a value to a variable. The basic assignment operator in PHP is \"=\". It means that the left operand gets set to the value of the assignment expression on the right. Operator Description Example Result = Assignment $x = $y Assign $y to $x += Addition Assignment $x = $x + $y Add $y to $x and assign the result to $x -= Subtraction Assignment $x = $x - $y Subtract $y from $x and assign the result to $x *= Multiplication Assignment $x = $x * $y Multiply $x by $y and assign the result to $x /= Division Assignment $x = $x / $y Divide $x by $y and assign the result to $x %= Modulus Assignment $x = $x % $y Modulus of $x divided by $y and assign the result to $x","title":"PHP Assignment Operators"},{"location":"PR/phpOperators1/#php-comparison-operators","text":"The PHP comparison operators are used to compare two values (number or string): Operator Description Example Result == Equal to $x == $y Returns true if $x is equal to $y === Identical to $x === $y Returns true if $x is equal to $y, and they are of the same type != Not equal to $x != $y Returns true if $x is not equal to $y <> Not equal to $x <> $y Returns true if $x is not equal to $y !== Not identical to $x !== $y Returns true if $x is not equal to $y, or they are not of the same type < Less than $x < $y Returns true if $x is less than $y <= Less than or equal to $x <= $y Returns true if $x is less than or equal to $y > Greater than $x > $y Returns true if $x is greater than $y >= Greater than or equal to $x >= $y Returns true if $x is greater than or equal to $y <=> Spaceship operator $x <=> $y Returns an integer less than, equal to, or greater than zero, depending on if $x is less than, equal to, or greater than $y. Introduced in PHP 7.","title":"PHP Comparison Operators"},{"location":"PR/phpOperators1/#php-increment-decrement-operators","text":"The PHP increment and decrement operators are used to increase or decrease the value of a variable. Operator Description Result ++$x Pre-increment Increments $x by one, then returns $x $x++ Post-increment Returns $x, then increments $x by one --$x Pre-decrement Decrements $x by one, then returns $x $x-- Post-decrement Returns $x, then decrements $x by one","title":"PHP Increment / Decrement Operators"},{"location":"PR/phpOperators1/#php-logical-operators","text":"The PHP logical operators are used to combine conditional statements. Operator Description Example Result && Logical AND $x && $y Returns true if both $x and $y are true || Logical OR $x || $y Returns true if either $x or $y is true ! Logical NOT ! $x Returns the opposite of $x and Logical AND $x and $y Returns true if both $x and $y are true or Logical OR $x or $y Returns true if either $x or $y is true xor Logical Xor $x xor $y True if either $x or $y is true, but not both","title":"PHP Logical Operators"},{"location":"PR/phpOperators1/#php-string-operators","text":"The PHP string operators are used to concatenate strings. Operator Description Example Result . Concatenation $x . $y Concatenates $x and $y .= Concatenation assignment $x .= $y Appends $y to $x","title":"PHP String Operators"},{"location":"PR/phpOperators1/#php-array-operators","text":"The PHP array operators are used to perform operations on arrays. Operator Description Example Result + Union $x + $y Union of $x and $y == Equality $x == $y Returns true if $x and $y have the same key/value pairs === Identity $x === $y Returns true if $x and $y have the same key/value pairs in the same order and of the same types != Inequality $x != $y Returns true if $x is not equal to $y <> Inequality $x <> $y Returns true if $x is not equal to $y !== Non-identity $x !== $y Returns true if $x is not identical to $y","title":"PHP Array Operators"},{"location":"PR/phpOperators1/#conditional-assignment-operators","text":"Operator Description Example Result ?: Ternary Operator $x = expr1 ? expr2 : expr3 Returns the value of $x. The value of $x is expr2 if expr1 = TRUE. The value of $x is expr3 if expr1 = FALSE ?? Null coalescing $x = expr1 ?? expr2 Returns the value of $x. The value of $x is expr1 if expr1 exists, and is not NULL. If expr1 does not exist, or is NULL, the value of $x is expr2. Introduced in PHP 7","title":"Conditional Assignment Operators"},{"location":"PR/phpStr1/","text":"PHP contains many useful built-in functions and methods to accomplish common tasks. strlen() The PHP strlen() function returns the length of a string. <?php echo strlen ( \"Hello world!\" ); // outputs 12 ?> str_word_count() The PHP str_word_count() function counts the number of words in a string. <?php echo str_word_count ( \"Hello world!\" ); // outputs 2 ?> strrev() The PHP strrev() function reverses a string. <?php echo strrev ( \"Hello world!\" ); // outputs !dlrow olleH ?> strpos() The PHP strpos() function searches for a specific text within a string. If a match is found, the function returns the character position of the first match. If no match is found, it will return FALSE. <?php echo strpos ( \"Hello world!\" , \"world\" ); // outputs 6 ?> The first character position in a string is 0 (not 1). str_replace() The PHP str_replace() function replaces some characters with some other characters in a string. <?php echo str_replace ( \"world\" , \"Earth\" , \"Hello world!\" ); // outputs Hello Earth! ?> str_repeat() The str_repeat() function repeats a string a specified number of times. <?php echo str_repeat ( \"Hello \" , 3 ); // outputs Hello Hello Hello ?> str_split() The str_split() function splits a string into an array. <?php echo str_split ( \"Hello world!\" ); // outputs [\"H\", \"e\", \"l\", \"l\", \"o\", \" \", \"w\", \"o\", \"r\", \"l\", \"d\", \"!\"] ?> str_shuffle() The str_shuffle() function randomly shuffles all the characters of a string. <?php echo str_shuffle ( \"Hello world!\" ); // outputs !Wdroel loHl ?> For more information, see PHP String Functions","title":"Functions"},{"location":"PR/phpStr1/#strlen","text":"The PHP strlen() function returns the length of a string. <?php echo strlen ( \"Hello world!\" ); // outputs 12 ?>","title":"strlen()"},{"location":"PR/phpStr1/#str_word_count","text":"The PHP str_word_count() function counts the number of words in a string. <?php echo str_word_count ( \"Hello world!\" ); // outputs 2 ?>","title":"str_word_count()"},{"location":"PR/phpStr1/#strrev","text":"The PHP strrev() function reverses a string. <?php echo strrev ( \"Hello world!\" ); // outputs !dlrow olleH ?>","title":"strrev()"},{"location":"PR/phpStr1/#strpos","text":"The PHP strpos() function searches for a specific text within a string. If a match is found, the function returns the character position of the first match. If no match is found, it will return FALSE. <?php echo strpos ( \"Hello world!\" , \"world\" ); // outputs 6 ?> The first character position in a string is 0 (not 1).","title":"strpos()"},{"location":"PR/phpStr1/#str_replace","text":"The PHP str_replace() function replaces some characters with some other characters in a string. <?php echo str_replace ( \"world\" , \"Earth\" , \"Hello world!\" ); // outputs Hello Earth! ?>","title":"str_replace()"},{"location":"PR/phpStr1/#str_repeat","text":"The str_repeat() function repeats a string a specified number of times. <?php echo str_repeat ( \"Hello \" , 3 ); // outputs Hello Hello Hello ?>","title":"str_repeat()"},{"location":"PR/phpStr1/#str_split","text":"The str_split() function splits a string into an array. <?php echo str_split ( \"Hello world!\" ); // outputs [\"H\", \"e\", \"l\", \"l\", \"o\", \" \", \"w\", \"o\", \"r\", \"l\", \"d\", \"!\"] ?>","title":"str_split()"},{"location":"PR/phpStr1/#str_shuffle","text":"The str_shuffle() function randomly shuffles all the characters of a string. <?php echo str_shuffle ( \"Hello world!\" ); // outputs !Wdroel loHl ?> For more information, see PHP String Functions","title":"str_shuffle()"},{"location":"PR/phpSuperGlobals/","text":"Superglobals were introduced in PHP 4.1.0, and are built-in variables that are always available in all scopes. The PHP superglobal variables are: $GLOBALS $_SERVER $_REQUEST $_POST $_GET $_FILES $_ENV $_COOKIE $_SESSION $GLOBALS $GLOBALS is a PHP super global variable which is used to access global variables from anywhere in the PHP script (also from within functions or methods). PHP stores all global variables in an array called $GLOBALS[index]. The index holds the name of the variable. <?php $x = 75 ; $y = 25 ; function addition () { $GLOBALS [ 'z' ] = $GLOBALS [ 'x' ] + $GLOBALS [ 'y' ]; } addition (); echo $z ; ?> $_SERVER $_SERVER is a PHP super global variable which holds information about headers, paths, and script locations. <?php echo $_SERVER [ 'PHP_SELF' ]; echo \"<br>\" ; echo $_SERVER [ 'SERVER_NAME' ]; echo \"<br>\" ; echo $_SERVER [ 'HTTP_HOST' ]; echo \"<br>\" ; echo $_SERVER [ 'HTTP_REFERER' ]; echo \"<br>\" ; echo $_SERVER [ 'HTTP_USER_AGENT' ]; echo \"<br>\" ; echo $_SERVER [ 'SCRIPT_NAME' ]; ?> The following table lists the most important elements that can go inside $_SERVER. Element Description $_SERVER['PHP_SELF'] Returns the filename of the currently executing script $_SERVER['GATEWAY_INTERFACE'] Returns the version of the Common Gateway Interface (CGI) the server is using $_SERVER['SERVER_ADDR'] Returns the IP address of the host server $_SERVER['SERVER_NAME'] Returns the name of the host server (such as www.w3schools.com) $_SERVER['SERVER_SOFTWARE'] Returns the server identification string (such as Apache/2.2.24) $_SERVER['SERVER_PROTOCOL'] Returns the name and revision of the information protocol (such as HTTP/1.1) $_SERVER['REQUEST_METHOD'] Returns the request method used to access the page (such as POST) $_SERVER['REQUEST_TIME'] Returns the timestamp of the start of the request (such as 1377687496) $_SERVER['QUERY_STRING'] Returns the query string if the page is accessed via a query string $_SERVER['HTTP_ACCEPT'] Returns the Accept header from the current request $_SERVER['HTTP_ACCEPT_CHARSET'] Returns the Accept_Charset header from the current request (such as utf-8,ISO-8859-1) $_SERVER['HTTP_HOST'] Returns the Host header from the current request $_SERVER['HTTP_REFERER'] Returns the complete URL of the current page (not reliable because not all user-agents support it) $_SERVER['HTTPS'] Is the script queried through a secure HTTP protocol $_SERVER['REMOTE_ADDR'] Returns the IP address from where the user is viewing the current page $_SERVER['REMOTE_HOST'] Returns the Host name from where the user is viewing the current page $_SERVER['REMOTE_PORT'] Returns the port being used on the user's machine to communicate with the web server $_SERVER['SCRIPT_FILENAME'] Returns the absolute pathname of the currently executing script $_SERVER['SERVER_ADMIN'] Returns the value given to the SERVER_ADMIN directive in the web server $_SERVER['SERVER_PORT'] Returns the port on the server machine being used by the web server for communication (such as 80) $_SERVER['SERVER_SIGNATURE'] Returns the server version and virtual host name which are added to server-generated pages $_SERVER['PATH_TRANSLATED'] Returns the file system based path to the current script $_SERVER['SCRIPT_NAME'] Returns the path of the current script $_SERVER['SCRIPT_URI'] Returns the URI of the current page $_REQUEST PHP $_REQUEST is a PHP super global variable which is used to collect data after submitting an HTML form. < html > < body > < form method = \"post\" action = \"<?php echo $_SERVER['PHP_SELF'];?>\" > Name: < input type = \"text\" name = \"fname\" > < input type = \"submit\" > </ form > <?php if ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") { // collect value of input field $name = $_REQUEST['fname']; if (empty($name)) { echo \"Name is empty\"; } else { echo $name; } } ?> </ body > </ html > $_POST PHP $_POST is a PHP super global variable which is used to collect form data after submitting an HTML form with method=\"post\". $_POST is also widely used to pass variables. < html > < body > < form method = \"post\" action = \"<?php echo $_SERVER['PHP_SELF'];?>\" > Name: < input type = \"text\" name = \"fname\" > < input type = \"submit\" > </ form > <?php if ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") { // collect value of input field $name = $_POST['fname']; if (empty($name)) { echo \"Name is empty\"; } else { echo $name; } } ?> </ body > </ html > $_GET PHP $_GET is a PHP super global variable which is used to collect form data after submitting an HTML form with method=\"get\". < html > < body > <?php echo \"Study \" . $_GET['subject'] . \" at \" . $_GET['web']; ?> </ body > </ html >","title":"Globals"},{"location":"PR/phpSuperGlobals/#globals","text":"$GLOBALS is a PHP super global variable which is used to access global variables from anywhere in the PHP script (also from within functions or methods). PHP stores all global variables in an array called $GLOBALS[index]. The index holds the name of the variable. <?php $x = 75 ; $y = 25 ; function addition () { $GLOBALS [ 'z' ] = $GLOBALS [ 'x' ] + $GLOBALS [ 'y' ]; } addition (); echo $z ; ?>","title":"$GLOBALS"},{"location":"PR/phpSuperGlobals/#_server","text":"$_SERVER is a PHP super global variable which holds information about headers, paths, and script locations. <?php echo $_SERVER [ 'PHP_SELF' ]; echo \"<br>\" ; echo $_SERVER [ 'SERVER_NAME' ]; echo \"<br>\" ; echo $_SERVER [ 'HTTP_HOST' ]; echo \"<br>\" ; echo $_SERVER [ 'HTTP_REFERER' ]; echo \"<br>\" ; echo $_SERVER [ 'HTTP_USER_AGENT' ]; echo \"<br>\" ; echo $_SERVER [ 'SCRIPT_NAME' ]; ?> The following table lists the most important elements that can go inside $_SERVER. Element Description $_SERVER['PHP_SELF'] Returns the filename of the currently executing script $_SERVER['GATEWAY_INTERFACE'] Returns the version of the Common Gateway Interface (CGI) the server is using $_SERVER['SERVER_ADDR'] Returns the IP address of the host server $_SERVER['SERVER_NAME'] Returns the name of the host server (such as www.w3schools.com) $_SERVER['SERVER_SOFTWARE'] Returns the server identification string (such as Apache/2.2.24) $_SERVER['SERVER_PROTOCOL'] Returns the name and revision of the information protocol (such as HTTP/1.1) $_SERVER['REQUEST_METHOD'] Returns the request method used to access the page (such as POST) $_SERVER['REQUEST_TIME'] Returns the timestamp of the start of the request (such as 1377687496) $_SERVER['QUERY_STRING'] Returns the query string if the page is accessed via a query string $_SERVER['HTTP_ACCEPT'] Returns the Accept header from the current request $_SERVER['HTTP_ACCEPT_CHARSET'] Returns the Accept_Charset header from the current request (such as utf-8,ISO-8859-1) $_SERVER['HTTP_HOST'] Returns the Host header from the current request $_SERVER['HTTP_REFERER'] Returns the complete URL of the current page (not reliable because not all user-agents support it) $_SERVER['HTTPS'] Is the script queried through a secure HTTP protocol $_SERVER['REMOTE_ADDR'] Returns the IP address from where the user is viewing the current page $_SERVER['REMOTE_HOST'] Returns the Host name from where the user is viewing the current page $_SERVER['REMOTE_PORT'] Returns the port being used on the user's machine to communicate with the web server $_SERVER['SCRIPT_FILENAME'] Returns the absolute pathname of the currently executing script $_SERVER['SERVER_ADMIN'] Returns the value given to the SERVER_ADMIN directive in the web server $_SERVER['SERVER_PORT'] Returns the port on the server machine being used by the web server for communication (such as 80) $_SERVER['SERVER_SIGNATURE'] Returns the server version and virtual host name which are added to server-generated pages $_SERVER['PATH_TRANSLATED'] Returns the file system based path to the current script $_SERVER['SCRIPT_NAME'] Returns the path of the current script $_SERVER['SCRIPT_URI'] Returns the URI of the current page","title":"$_SERVER"},{"location":"PR/phpSuperGlobals/#_request","text":"PHP $_REQUEST is a PHP super global variable which is used to collect data after submitting an HTML form. < html > < body > < form method = \"post\" action = \"<?php echo $_SERVER['PHP_SELF'];?>\" > Name: < input type = \"text\" name = \"fname\" > < input type = \"submit\" > </ form > <?php if ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") { // collect value of input field $name = $_REQUEST['fname']; if (empty($name)) { echo \"Name is empty\"; } else { echo $name; } } ?> </ body > </ html >","title":"$_REQUEST"},{"location":"PR/phpSuperGlobals/#_post","text":"PHP $_POST is a PHP super global variable which is used to collect form data after submitting an HTML form with method=\"post\". $_POST is also widely used to pass variables. < html > < body > < form method = \"post\" action = \"<?php echo $_SERVER['PHP_SELF'];?>\" > Name: < input type = \"text\" name = \"fname\" > < input type = \"submit\" > </ form > <?php if ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") { // collect value of input field $name = $_POST['fname']; if (empty($name)) { echo \"Name is empty\"; } else { echo $name; } } ?> </ body > </ html >","title":"$_POST"},{"location":"PR/phpSuperGlobals/#_get","text":"PHP $_GET is a PHP super global variable which is used to collect form data after submitting an HTML form with method=\"get\". < html > < body > <?php echo \"Study \" . $_GET['subject'] . \" at \" . $_GET['web']; ?> </ body > </ html >","title":"$_GET"},{"location":"PR/phpVar1/","text":"In PHP, we store all pieces of data -- numbers, characters, strings, everything -- as objects, and we refer to these objects using variables. As a simple case, we can assign a variable a value using the assignment operator, which is the \"equals\" sign. Creating (Declaring) PHP Variables In PHP, a variable starts with the $ sign, followed by the name of the variable: Remember that variables are case-sensitive! <?php $txt = \"Hello world!\" ; //No difference between \"\" and '' $x = 5 ; $y = 10.5 ; ?> After the execution of the statements above, the variable $txt will hold the value Hello world!, the variable $x will hold the value 5, and the variable $y will hold the value 10.5. Note: When you assign a text value to a variable, put quotes around the value. Note: Unlike other programming languages, PHP has no command for declaring a variable. It is created the moment you first assign a value to it. Rules for PHP variables: A variable starts with the $ sign, followed by the name of the variable A variable name must start with a letter or the underscore character A variable name cannot start with a number A variable name can only contain alpha-numeric characters and underscores (A-z, 0-9, and _ ) Variable names are case-sensitive ($age and $AGE are two different variables) Output Variables The PHP echo statement is often used to output data to the screen. The following example will show how to output text and a variable: <?php $txt = \"phpTutorial\" ; echo \"I love $txt !\" ; ?> Tools for understanding strange objects var_dump() function var_dump() displays structured information about one or more expressions that includes its type and value. Arrays and objects are explored recursively with values indented to show structure. <!DOCTYPE html> <html> <body> <?php $x = 5985 ; var_dump ( $x ); ?> </body> </html> int(5985) print_r() function print_r() displays the value of a variable, in a human-readable format. <?php $a = array ( \"red\" , \"green\" , \"blue\" ); print_r ( $a ); echo \"<br>\" ; $b = array ( \"Peter\" => \"35\" , \"Ben\" => \"37\" , \"Joe\" => \"43\" ); print_r ( $b ); ?> Array ( [0] => red [1] => green [2] => blue ) Array ( [Peter] => 35 [Ben] => 37 [Joe] => 43 ) NULL The null type is PHP's unit type, i.e. it has only one value: null. Undefined, and unset() variables will resolve to the value null. There is only one value of type null, and that is the case-insensitive constant null. <?php $var = NULL ; ?>","title":"Variables"},{"location":"PR/phpVar1/#creating-declaring-php-variables","text":"In PHP, a variable starts with the $ sign, followed by the name of the variable: Remember that variables are case-sensitive! <?php $txt = \"Hello world!\" ; //No difference between \"\" and '' $x = 5 ; $y = 10.5 ; ?> After the execution of the statements above, the variable $txt will hold the value Hello world!, the variable $x will hold the value 5, and the variable $y will hold the value 10.5. Note: When you assign a text value to a variable, put quotes around the value. Note: Unlike other programming languages, PHP has no command for declaring a variable. It is created the moment you first assign a value to it.","title":"Creating (Declaring) PHP Variables"},{"location":"PR/phpVar1/#rules-for-php-variables","text":"A variable starts with the $ sign, followed by the name of the variable A variable name must start with a letter or the underscore character A variable name cannot start with a number A variable name can only contain alpha-numeric characters and underscores (A-z, 0-9, and _ ) Variable names are case-sensitive ($age and $AGE are two different variables)","title":"Rules for PHP variables:"},{"location":"PR/phpVar1/#output-variables","text":"The PHP echo statement is often used to output data to the screen. The following example will show how to output text and a variable: <?php $txt = \"phpTutorial\" ; echo \"I love $txt !\" ; ?>","title":"Output Variables"},{"location":"PR/phpVar1/#tools-for-understanding-strange-objects","text":"","title":"Tools for understanding strange objects"},{"location":"PR/phpVar1/#var_dump-function","text":"var_dump() displays structured information about one or more expressions that includes its type and value. Arrays and objects are explored recursively with values indented to show structure. <!DOCTYPE html> <html> <body> <?php $x = 5985 ; var_dump ( $x ); ?> </body> </html> int(5985)","title":"var_dump() function"},{"location":"PR/phpVar1/#print_r-function","text":"print_r() displays the value of a variable, in a human-readable format. <?php $a = array ( \"red\" , \"green\" , \"blue\" ); print_r ( $a ); echo \"<br>\" ; $b = array ( \"Peter\" => \"35\" , \"Ben\" => \"37\" , \"Joe\" => \"43\" ); print_r ( $b ); ?> Array ( [0] => red [1] => green [2] => blue ) Array ( [Peter] => 35 [Ben] => 37 [Joe] => 43 )","title":"print_r() function"},{"location":"PR/phpVar1/#null","text":"The null type is PHP's unit type, i.e. it has only one value: null. Undefined, and unset() variables will resolve to the value null. There is only one value of type null, and that is the case-insensitive constant null. <?php $var = NULL ; ?>","title":"NULL"},{"location":"PR/phpVar2/","text":"Data Types PHP supports the following data types: String Integer Float Boolean Array Object NULL Resource PHP String A string is a sequence of characters, like \"Hello world!\". A string can be any text inside quotes. You can use single or double quotes. $x = \"Hello world!\"; PHP Integer An integer data type is a non-decimal number between -2,147,483,648 and 2,147,483,647. Integers can be specified in: decimal (base 10), hexadecimal (base 16), octal (base 8), or binary (base 2) notation <?php $a = 1234 ; // decimal number $a = 0123 ; // octal number (equivalent to 83 decimal) $a = 0 o123 ; // octal number (as of PHP 8.1.0) $a = 0x1A ; // hexadecimal number (equivalent to 26 decimal) $a = 0 b11111111 ; // binary number (equivalent to 255 decimal) $a = 1 _234_567 ; // decimal number (as of PHP 7.4.0) ?> PHP Float A float (floating point number) is a number with a decimal point or a number in exponential form. $x = 10.365; PHP Boolean A Boolean represents two possible states: TRUE or FALSE. $x = true; $y = false; PHP Array An array stores multiple values in one single variable. $x = array(\"Volvo\", \"BMW\", \"Toyota\"); PHP Object Classes and objects are the two main aspects of object-oriented programming. A class is a template for objects, and an object is an instance of a class. When the individual objects are created, they inherit all the properties and behaviors from the class, but each object will have different values for the properties. Let's assume we have a class named Car. A Car can have properties like model, color, etc. We can define variables like $model, $color, and so on, to hold the values of these properties. When the individual objects (Volvo, BMW, Toyota, etc.) are created, they inherit all the properties and behaviors from the class, but each object will have different values for the properties. If you create a __construct() function, PHP will automatically call this function when you create an object from a class. <?php class Car { public $color ; public $model ; public function __construct ( $color , $model ) { $this -> color = $color ; $this -> model = $model ; } public function message () { return \"My car is a \" . $this -> color . \" \" . $this -> model . \"!\" ; } } $myCar = new Car ( \"black\" , \"Volvo\" ); echo $myCar -> message (); echo \"<br>\" ; $myCar = new Car ( \"red\" , \"Toyota\" ); echo $myCar -> message (); ?> PHP NULL Value Null is a special data type which can have only one value: NULL. A variable of data type NULL is a variable that has no value assigned to it. Tip: If a variable is created without a value, it is automatically assigned a value of NULL. Variables can also be emptied by setting the value to NULL PHP Resource The special resource type is not an actual data type. It is the storing of a reference to functions and resources external to PHP. A common example of using the resource data type is a database call. Type Casting PHP does not require explicit type definition in variable declaration. In this case, the type of a variable is determined by the value it stores. That is to say, if a string is assigned to variable $var, then $var is of type string. If afterwards an int value is assigned to $var, it will be of type int. Type casting converts the value to a chosen type by writing the type within parentheses before the value to convert. The casts allowed are: (int) - cast to int (bool) - cast to bool (float) - cast to float (string) - cast to string (array) - cast to array (object) - cast to object (unset) - cast to NULL <?php $bool_false = false ; $int_val = ( int ) $bool_false ; var_dump ( $int_val ); //Output will be 0 $bool_true = true ; $int_val = ( int ) $bool_true ; var_dump ( $int_val ); //Output will be 1 ?> Casting literal strings and variables to binary strings: <?php $binary = ( binary ) $string ; $binary = b \"binary string\" ; ?> Instead of casting a variable to a string, it is also possible to enclose the variable in double quotes. <?php $foo = 10 ; // $foo is an integer $str = \" $foo \" ; // $str is a string $fst = ( string ) $foo ; // $fst is also a string // This prints out that \"they are the same\" if ( $fst === $str ) { echo \"they are the same\" ; } ?>","title":"Data Types and Casting"},{"location":"PR/phpVar2/#data-types","text":"PHP supports the following data types: String Integer Float Boolean Array Object NULL Resource","title":"Data Types"},{"location":"PR/phpVar2/#php-string","text":"A string is a sequence of characters, like \"Hello world!\". A string can be any text inside quotes. You can use single or double quotes. $x = \"Hello world!\";","title":"PHP String"},{"location":"PR/phpVar2/#php-integer","text":"An integer data type is a non-decimal number between -2,147,483,648 and 2,147,483,647. Integers can be specified in: decimal (base 10), hexadecimal (base 16), octal (base 8), or binary (base 2) notation <?php $a = 1234 ; // decimal number $a = 0123 ; // octal number (equivalent to 83 decimal) $a = 0 o123 ; // octal number (as of PHP 8.1.0) $a = 0x1A ; // hexadecimal number (equivalent to 26 decimal) $a = 0 b11111111 ; // binary number (equivalent to 255 decimal) $a = 1 _234_567 ; // decimal number (as of PHP 7.4.0) ?>","title":"PHP Integer"},{"location":"PR/phpVar2/#php-float","text":"A float (floating point number) is a number with a decimal point or a number in exponential form. $x = 10.365;","title":"PHP Float"},{"location":"PR/phpVar2/#php-boolean","text":"A Boolean represents two possible states: TRUE or FALSE. $x = true; $y = false;","title":"PHP Boolean"},{"location":"PR/phpVar2/#php-array","text":"An array stores multiple values in one single variable. $x = array(\"Volvo\", \"BMW\", \"Toyota\");","title":"PHP Array"},{"location":"PR/phpVar2/#php-object","text":"Classes and objects are the two main aspects of object-oriented programming. A class is a template for objects, and an object is an instance of a class. When the individual objects are created, they inherit all the properties and behaviors from the class, but each object will have different values for the properties. Let's assume we have a class named Car. A Car can have properties like model, color, etc. We can define variables like $model, $color, and so on, to hold the values of these properties. When the individual objects (Volvo, BMW, Toyota, etc.) are created, they inherit all the properties and behaviors from the class, but each object will have different values for the properties. If you create a __construct() function, PHP will automatically call this function when you create an object from a class. <?php class Car { public $color ; public $model ; public function __construct ( $color , $model ) { $this -> color = $color ; $this -> model = $model ; } public function message () { return \"My car is a \" . $this -> color . \" \" . $this -> model . \"!\" ; } } $myCar = new Car ( \"black\" , \"Volvo\" ); echo $myCar -> message (); echo \"<br>\" ; $myCar = new Car ( \"red\" , \"Toyota\" ); echo $myCar -> message (); ?>","title":"PHP Object"},{"location":"PR/phpVar2/#php-null-value","text":"Null is a special data type which can have only one value: NULL. A variable of data type NULL is a variable that has no value assigned to it. Tip: If a variable is created without a value, it is automatically assigned a value of NULL. Variables can also be emptied by setting the value to NULL","title":"PHP NULL Value"},{"location":"PR/phpVar2/#php-resource","text":"The special resource type is not an actual data type. It is the storing of a reference to functions and resources external to PHP. A common example of using the resource data type is a database call.","title":"PHP Resource"},{"location":"PR/phpVar2/#type-casting","text":"PHP does not require explicit type definition in variable declaration. In this case, the type of a variable is determined by the value it stores. That is to say, if a string is assigned to variable $var, then $var is of type string. If afterwards an int value is assigned to $var, it will be of type int. Type casting converts the value to a chosen type by writing the type within parentheses before the value to convert. The casts allowed are: (int) - cast to int (bool) - cast to bool (float) - cast to float (string) - cast to string (array) - cast to array (object) - cast to object (unset) - cast to NULL <?php $bool_false = false ; $int_val = ( int ) $bool_false ; var_dump ( $int_val ); //Output will be 0 $bool_true = true ; $int_val = ( int ) $bool_true ; var_dump ( $int_val ); //Output will be 1 ?> Casting literal strings and variables to binary strings: <?php $binary = ( binary ) $string ; $binary = b \"binary string\" ; ?> Instead of casting a variable to a string, it is also possible to enclose the variable in double quotes. <?php $foo = 10 ; // $foo is an integer $str = \" $foo \" ; // $str is a string $fst = ( string ) $foo ; // $fst is also a string // This prints out that \"they are the same\" if ( $fst === $str ) { echo \"they are the same\" ; } ?>","title":"Type Casting"},{"location":"PR/phpVar3/","text":"In PHP, variables can be declared anywhere in the script. The scope of a variable is the part of the script where the variable can be referenced/used. PHP has three different variable scopes: Local Global Static Local Scope A variable declared within a function has a LOCAL SCOPE and can only be accessed within that function: <?php function myTest () { $x = 5 ; // local scope echo \"<p>Variable x inside function is: $x </p>\" ; } myTest (); // using x outside the function will generate an error echo \"<p>Variable x outside function is: $x </p>\" ; ?> You can have local variables with the same name in different functions, because local variables are only recognized by the function in which they are declared. Global Scope A variable declared outside a function has a GLOBAL SCOPE and can only be accessed outside a function: <?php $x = 5 ; // global scope function myTest () { // using x inside this function will generate an error echo \"<p>Variable x inside function is: $x </p>\" ; } myTest (); echo \"<p>Variable x outside function is: $x </p>\" ; ?> PHP The global Keyword The global keyword is used to access a global variable from within a function. To do this, use the global keyword before the variables (inside the function): <?php $x = 5 ; $y = 10 ; function myTest () { global $x , $y ; $y = $x + $y ; } myTest (); echo $y ; // outputs 15 ?> PHP also stores all global variables in an array called $GLOBALS[index]. The index holds the name of the variable. This array is also accessible from within functions and can be used to update global variables directly. The example above can be rewritten like this: <?php $x = 5 ; $y = 10 ; function myTest () { $GLOBALS [ 'y' ] = $GLOBALS [ 'x' ] + $GLOBALS [ 'y' ]; } myTest (); echo $y ; // outputs 15 ?> PHP The static Keyword Normally, when a function is completed/executed, all of its variables are deleted. However, sometimes we want a local variable NOT to be deleted. We need it for a further job. To do this, use the static keyword when you first declare the variable: <?php function myTest () { static $x = 0 ; echo $x ; $x ++ ; } myTest (); myTest (); myTest (); ?> Then, each time the function is called, that variable will still have the information it contained from the last time the function was called. Note: The variable is still local to the function.","title":"Variable Scope"},{"location":"PR/phpVar3/#local-scope","text":"A variable declared within a function has a LOCAL SCOPE and can only be accessed within that function: <?php function myTest () { $x = 5 ; // local scope echo \"<p>Variable x inside function is: $x </p>\" ; } myTest (); // using x outside the function will generate an error echo \"<p>Variable x outside function is: $x </p>\" ; ?> You can have local variables with the same name in different functions, because local variables are only recognized by the function in which they are declared.","title":"Local Scope"},{"location":"PR/phpVar3/#global-scope","text":"A variable declared outside a function has a GLOBAL SCOPE and can only be accessed outside a function: <?php $x = 5 ; // global scope function myTest () { // using x inside this function will generate an error echo \"<p>Variable x inside function is: $x </p>\" ; } myTest (); echo \"<p>Variable x outside function is: $x </p>\" ; ?>","title":"Global Scope"},{"location":"PR/phpVar3/#php-the-global-keyword","text":"The global keyword is used to access a global variable from within a function. To do this, use the global keyword before the variables (inside the function): <?php $x = 5 ; $y = 10 ; function myTest () { global $x , $y ; $y = $x + $y ; } myTest (); echo $y ; // outputs 15 ?> PHP also stores all global variables in an array called $GLOBALS[index]. The index holds the name of the variable. This array is also accessible from within functions and can be used to update global variables directly. The example above can be rewritten like this: <?php $x = 5 ; $y = 10 ; function myTest () { $GLOBALS [ 'y' ] = $GLOBALS [ 'x' ] + $GLOBALS [ 'y' ]; } myTest (); echo $y ; // outputs 15 ?>","title":"PHP The global Keyword"},{"location":"PR/phpVar3/#php-the-static-keyword","text":"Normally, when a function is completed/executed, all of its variables are deleted. However, sometimes we want a local variable NOT to be deleted. We need it for a further job. To do this, use the static keyword when you first declare the variable: <?php function myTest () { static $x = 0 ; echo $x ; $x ++ ; } myTest (); myTest (); myTest (); ?> Then, each time the function is called, that variable will still have the information it contained from the last time the function was called. Note: The variable is still local to the function.","title":"PHP The static Keyword"}]}