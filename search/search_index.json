{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to PHP Refresher Everyone can forget about grammar and vocabulary. What is most important is to know where to look. The key to becoming a proficient PHP developer is to keep learning and practicing regularly. With a strong foundation in the basics, a commitment to ongoing learning, and a willingness to experiment with new tools and technologies, you can refresh your PHP skills and take your programming career to the next level. Basic Topics Advanced Topics Basics File Management Functions MySql Data Structures XML Classes Ajax This material is a work in progress, so your feedback is welcome. The best way to provide that feedback is to click here and create an issue in this GitHub repository .","title":"Home"},{"location":"#welcome-to-php-refresher","text":"Everyone can forget about grammar and vocabulary. What is most important is to know where to look. The key to becoming a proficient PHP developer is to keep learning and practicing regularly. With a strong foundation in the basics, a commitment to ongoing learning, and a willingness to experiment with new tools and technologies, you can refresh your PHP skills and take your programming career to the next level. Basic Topics Advanced Topics Basics File Management Functions MySql Data Structures XML Classes Ajax This material is a work in progress, so your feedback is welcome. The best way to provide that feedback is to click here and create an issue in this GitHub repository .","title":"Welcome to PHP Refresher"},{"location":"phpRefresh/","text":"PHP (recursive acronym for PHP: Hypertext Preprocessor) is a widely-used open source general-purpose scripting language that is especially suited for web development and can be embedded into HTML. A PHP script is executed on the server, and the plain HTML result is sent back to the browser. <!DOCTYPE html> <html> <head> <title>Example</title> </head> <body> <?php echo \"Hi, I'm a PHP script!\" ; ?> </body> </html> PHP is lossly typed (i.e. types are not necessarily enforced), dynamically, implicitly typed (i.e. you don\u2019t have to declare variables), case sensitive (i.e. var and VAR are two different variables) and object-oriented (i.e. everything is an object, like C# and Java). PHP is a language like C that uses curly braces to contain code statements within loops or conditionals. PHP statements end with a semicolon (;) just like C. There are not dot notation in PHP. Everything is function based. \"name\".split(); //doesnt work split(\"name\"); //works PHP Resources The website http://www.php.net is the official website for the PHP language, and Docs The PHP cookbook Composer : Composer is a dependency manager for PHP that provides a structured way both to declare dependencies in your project and to install them. PHP: The Right Way : A quick reference that attempts to be a comprehensive source of PHP best practices. A great place to start if you\u2019re wondering about the idiomatic way to do something in PHP. PHP Syntax A PHP script can be placed anywhere in the document. A PHP script starts with <?php and ends with ?> The default file extension for PHP files is \".php\". A PHP file normally contains HTML tags, and some PHP scripting code. PHP Case Sensitivity In PHP, keywords (e.g. if, else, while, echo, etc.), classes, functions, and user-defined functions are not case-sensitive. Warning: However; all variable names are case-sensitive! PHP Comments A comment in PHP code is a line that is not executed as a part of the program. Its only purpose is to be read by someone who is looking at the code. Syntax for single-line comments: <!DOCTYPE html> <html> <body> <?php // This is a single-line comment # This is also a single-line comment ?> </body> </html> Syntax for multiple-line comments: <!DOCTYPE html> <html> <body> <?php /* This is a multiple-lines comment block that spans over multiple lines */ ?> </body> </html>","title":"General"},{"location":"phpRefresh/#php-resources","text":"The website http://www.php.net is the official website for the PHP language, and Docs The PHP cookbook Composer : Composer is a dependency manager for PHP that provides a structured way both to declare dependencies in your project and to install them. PHP: The Right Way : A quick reference that attempts to be a comprehensive source of PHP best practices. A great place to start if you\u2019re wondering about the idiomatic way to do something in PHP.","title":"PHP Resources"},{"location":"phpRefresh/#php-syntax","text":"A PHP script can be placed anywhere in the document. A PHP script starts with <?php and ends with ?> The default file extension for PHP files is \".php\". A PHP file normally contains HTML tags, and some PHP scripting code.","title":"PHP Syntax"},{"location":"phpRefresh/#php-case-sensitivity","text":"In PHP, keywords (e.g. if, else, while, echo, etc.), classes, functions, and user-defined functions are not case-sensitive. Warning: However; all variable names are case-sensitive!","title":"PHP Case Sensitivity"},{"location":"phpRefresh/#php-comments","text":"A comment in PHP code is a line that is not executed as a part of the program. Its only purpose is to be read by someone who is looking at the code.","title":"PHP Comments"},{"location":"phpRefresh/#syntax-for-single-line-comments","text":"<!DOCTYPE html> <html> <body> <?php // This is a single-line comment # This is also a single-line comment ?> </body> </html>","title":"Syntax for single-line comments:"},{"location":"phpRefresh/#syntax-for-multiple-line-comments","text":"<!DOCTYPE html> <html> <body> <?php /* This is a multiple-lines comment block that spans over multiple lines */ ?> </body> </html>","title":"Syntax for multiple-line comments:"},{"location":"Adv/phpAjax/","text":"AJAX is about updating parts of a web page, without reloading the whole page. What is AJAX? AJAX = Asynchronous JavaScript and XML. AJAX is a technique for creating fast and dynamic web pages. AJAX allows web pages to be updated asynchronously by exchanging small amounts of data with the server behind the scenes. This means that it is possible to update parts of a web page, without reloading the whole page. Classic web pages, (which do not use AJAX) must reload the entire page if the content should change. Examples of applications using AJAX: Google Maps, Gmail, Youtube, and Facebook tabs. AJAX is based on internet standards, and uses a combination of: XMLHttpRequest object (to exchange data asynchronously with a server) JavaScript/DOM (to display/interact with the information) CSS (to style the data) XML (often used as the format for transferring data) AJAX applications are browser- and platform-independent! AJAX and PHP < html > < head > < script > function showHint ( str ) { if ( str . length == 0 ) { document . getElementById ( \"txtHint\" ). innerHTML = \"\" ; return ; } else { var xmlhttp = new XMLHttpRequest (); xmlhttp . onreadystatechange = function () { if ( this . readyState == 4 && this . status == 200 ) { document . getElementById ( \"txtHint\" ). innerHTML = this . responseText ; } }; xmlhttp . open ( \"GET\" , \"gethint.php?q=\" + str , true ); xmlhttp . send (); } } </ script > </ head > < body > < p >< b > Start typing a name in the input field below: </ b ></ p > < form action = \"\" > < label for = \"fname\" > First name: </ label > < input type = \"text\" id = \"fname\" name = \"fname\" onkeyup = \"showHint(this.value)\" > </ form > < p > Suggestions: < span id = \"txtHint\" ></ span ></ p > </ body > </ html > The PHP File - \"gethint.php\" The PHP file checks an array of names, and returns the corresponding name(s) to the browser <?php // Array with names $a [] = \"Anna\" ; $a [] = \"Brittany\" ; $a [] = \"Cinderella\" ; $a [] = \"Diana\" ; $a [] = \"Eva\" ; $a [] = \"Fiona\" ; $a [] = \"Gunda\" ; $a [] = \"Hege\" ; $a [] = \"Inga\" ; $a [] = \"Johanna\" ; $a [] = \"Kitty\" ; $a [] = \"Linda\" ; $a [] = \"Nina\" ; $a [] = \"Ophelia\" ; $a [] = \"Petunia\" ; $a [] = \"Amanda\" ; $a [] = \"Raquel\" ; $a [] = \"Cindy\" ; $a [] = \"Doris\" ; $a [] = \"Eve\" ; $a [] = \"Evita\" ; $a [] = \"Sunniva\" ; $a [] = \"Tove\" ; $a [] = \"Unni\" ; $a [] = \"Violet\" ; $a [] = \"Liza\" ; $a [] = \"Elizabeth\" ; $a [] = \"Ellen\" ; $a [] = \"Wenche\" ; $a [] = \"Vicky\" ; // get the q parameter from URL $q = $_REQUEST [ \"q\" ]; $hint = \"\" ; // lookup all hints from array if $q is different from \"\" if ( $q !== \"\" ) { $q = strtolower ( $q ); $len = strlen ( $q ); foreach ( $a as $name ) { if ( stristr ( $q , substr ( $name , 0 , $len ))) { if ( $hint === \"\" ) { $hint = $name ; } else { $hint .= \", $name \" ; } } } } // Output \"no suggestion\" if no hint was found or output correct values echo $hint === \"\" ? \"no suggestion\" : $hint ; ?> AJAX and MySQL AJAX can be used for interactive communication with a database. The database table we use in the example above looks like this: id FirstName LastName Age Hometown Job 1 Peter Griffin 41 Quahog Brewery 2 Lois Griffin 40 Newport Piano Teacher 3 Joseph Swanson 39 Quahog Police Officer 4 Glenn Quagmire 41 Quahog Pilot < html > < head > < script > function showUser ( str ) { if ( str == \"\" ) { document . getElementById ( \"txtHint\" ). innerHTML = \"\" ; return ; } else { var xmlhttp = new XMLHttpRequest (); xmlhttp . onreadystatechange = function () { if ( this . readyState == 4 && this . status == 200 ) { document . getElementById ( \"txtHint\" ). innerHTML = this . responseText ; } }; xmlhttp . open ( \"GET\" , \"getuser.php?q=\" + str , true ); xmlhttp . send (); } } </ script > </ head > < body > < form > < select name = \"users\" onchange = \"showUser(this.value)\" > < option value = \"\" > Select a person: </ option > < option value = \"1\" > Peter Griffin </ option > < option value = \"2\" > Lois Griffin </ option > < option value = \"3\" > Joseph Swanson </ option > < option value = \"4\" > Glenn Quagmire </ option > </ select > </ form > < br > < div id = \"txtHint\" >< b > Person info will be listed here... </ b ></ div > </ body > </ html > The page on the server called by the JavaScript above is a PHP file called \"getuser.php\". The source code in \"getuser.php\" runs a query against a MySQL database, and returns the result in an HTML table. <!DOCTYPE html> <html> <head> <style> table { width: 100%; border-collapse: collapse; } table, td, th { border: 1px solid black; padding: 5px; } th {text-align: left;} </style> </head> <body> <?php $q = intval ( $_GET [ 'q' ]); $con = mysqli_connect ( 'localhost' , 'peter' , 'abc123' ); if ( ! $con ) { die ( 'Could not connect: ' . mysqli_error ( $con )); } mysqli_select_db ( $con , \"ajax_demo\" ); $sql = \"SELECT * FROM user WHERE id = '\" . $q . \"'\" ; $result = mysqli_query ( $con , $sql ); echo \"<table> <tr> <th>Firstname</th> <th>Lastname</th> <th>Age</th> <th>Hometown</th> <th>Job</th> </tr>\" ; while ( $row = mysqli_fetch_array ( $result )) { echo \"<tr>\" ; echo \"<td>\" . $row [ 'FirstName' ] . \"</td>\" ; echo \"<td>\" . $row [ 'LastName' ] . \"</td>\" ; echo \"<td>\" . $row [ 'Age' ] . \"</td>\" ; echo \"<td>\" . $row [ 'Hometown' ] . \"</td>\" ; echo \"<td>\" . $row [ 'Job' ] . \"</td>\" ; echo \"</tr>\" ; } echo \"</table>\" ; mysqli_close ( $con ); ?> </body> </html> AJAX and XML < html > < head > < script > function showCD ( str ) { if ( str == \"\" ) { document . getElementById ( \"txtHint\" ). innerHTML = \"\" ; return ; } var xmlhttp = new XMLHttpRequest (); xmlhttp . onreadystatechange = function () { if ( this . readyState == 4 && this . status == 200 ) { document . getElementById ( \"txtHint\" ). innerHTML = this . responseText ; } } xmlhttp . open ( \"GET\" , \"getcd.php?q=\" + str , true ); xmlhttp . send (); } </ script > </ head > < body > < form > Select a CD: < select name = \"cds\" onchange = \"showCD(this.value)\" > < option value = \"\" > Select a CD: </ option > < option value = \"Bob Dylan\" > Bob Dylan </ option > < option value = \"Bee Gees\" > Bee Gees </ option > < option value = \"Cat Stevens\" > Cat Stevens </ option > </ select > </ form > < div id = \"txtHint\" >< b > CD info will be listed here... </ b ></ div > </ body > </ html > <?php $q = $_GET [ \"q\" ]; $xmlDoc = new DOMDocument (); $xmlDoc -> load ( \"cd_catalog.xml\" ); $x = $xmlDoc -> getElementsByTagName ( 'ARTIST' ); for ( $i = 0 ; $i <= $x -> length - 1 ; $i ++ ) { //Process only element nodes if ( $x -> item ( $i ) -> nodeType == 1 ) { if ( $x -> item ( $i ) -> childNodes -> item ( 0 ) -> nodeValue == $q ) { $y = ( $x -> item ( $i ) -> parentNode ); } } } $cd = ( $y -> childNodes ); for ( $i = 0 ; $i < $cd -> length ; $i ++ ) { //Process only element nodes if ( $cd -> item ( $i ) -> nodeType == 1 ) { echo ( \"<b>\" . $cd -> item ( $i ) -> nodeName . \":</b> \" ); echo ( $cd -> item ( $i ) -> childNodes -> item ( 0 ) -> nodeValue ); echo ( \"<br>\" ); } } ?> AJAX Live Search Live search has many benefits compared to traditional searching: Results are shown as you type Results narrow as you continue typing If results become too narrow, remove characters to see a broader result < html > < head > < script > function showResult ( str ) { if ( str . length == 0 ) { document . getElementById ( \"livesearch\" ). innerHTML = \"\" ; document . getElementById ( \"livesearch\" ). style . border = \"0px\" ; return ; } var xmlhttp = new XMLHttpRequest (); xmlhttp . onreadystatechange = function () { if ( this . readyState == 4 && this . status == 200 ) { document . getElementById ( \"livesearch\" ). innerHTML = this . responseText ; document . getElementById ( \"livesearch\" ). style . border = \"1px solid #A5ACB2\" ; } } xmlhttp . open ( \"GET\" , \"livesearch.php?q=\" + str , true ); xmlhttp . send (); } </ script > </ head > < body > < form > < input type = \"text\" size = \"30\" onkeyup = \"showResult(this.value)\" > < div id = \"livesearch\" ></ div > </ form > </ body > </ html > <?php $xmlDoc = new DOMDocument (); $xmlDoc -> load ( \"links.xml\" ); $x = $xmlDoc -> getElementsByTagName ( 'link' ); //get the q parameter from URL $q = $_GET [ \"q\" ]; //lookup all links from the xml file if length of q>0 if ( strlen ( $q ) > 0 ) { $hint = \"\" ; for ( $i = 0 ; $i < ( $x -> length ); $i ++ ) { $y = $x -> item ( $i ) -> getElementsByTagName ( 'title' ); $z = $x -> item ( $i ) -> getElementsByTagName ( 'url' ); if ( $y -> item ( 0 ) -> nodeType == 1 ) { //find a link matching the search text if ( stristr ( $y -> item ( 0 ) -> childNodes -> item ( 0 ) -> nodeValue , $q )) { if ( $hint == \"\" ) { $hint = \"<a href='\" . $z -> item ( 0 ) -> childNodes -> item ( 0 ) -> nodeValue . \"' target='_blank'>\" . $y -> item ( 0 ) -> childNodes -> item ( 0 ) -> nodeValue . \"</a>\" ; } else { $hint = $hint . \"<br /><a href='\" . $z -> item ( 0 ) -> childNodes -> item ( 0 ) -> nodeValue . \"' target='_blank'>\" . $y -> item ( 0 ) -> childNodes -> item ( 0 ) -> nodeValue . \"</a>\" ; } } } } } // Set output to \"no suggestion\" if no hint was found // or to the correct values if ( $hint == \"\" ) { $response = \"no suggestion\" ; } else { $response = $hint ; } //output the response echo $response ; ?> AJAX Poll < html > < head > < script > function getVote ( int ) { var xmlhttp = new XMLHttpRequest (); xmlhttp . onreadystatechange = function () { if ( this . readyState == 4 && this . status == 200 ) { document . getElementById ( \"poll\" ). innerHTML = this . responseText ; } } xmlhttp . open ( \"GET\" , \"poll_vote.php?vote=\" + int , true ); xmlhttp . send (); } </ script > </ head > < body > < div id = \"poll\" > < h3 > Do you like PHP and AJAX so far? </ h3 > < form > Yes: < input type = \"radio\" name = \"vote\" value = \"0\" onclick = \"getVote(this.value)\" >< br > No: < input type = \"radio\" name = \"vote\" value = \"1\" onclick = \"getVote(this.value)\" > </ form > </ div > </ body > </ html > <?php $vote = $_REQUEST [ 'vote' ]; //get content of textfile $filename = \"poll_result.txt\" ; $content = file ( $filename ); //put content in array $array = explode ( \"||\" , $content [ 0 ]); $yes = $array [ 0 ]; $no = $array [ 1 ]; if ( $vote == 0 ) { $yes = $yes + 1 ; } if ( $vote == 1 ) { $no = $no + 1 ; } //insert votes to txt file $insertvote = $yes . \"||\" . $no ; $fp = fopen ( $filename , \"w\" ); fputs ( $fp , $insertvote ); fclose ( $fp ); ?> <h2>Result:</h2> <table> <tr> <td>Yes:</td> <td><img src=\"poll.gif\" width=' <?php echo ( 100 * round ( $yes / ( $no + $yes ), 2 )); ?> ' height='20'> <?php echo ( 100 * round ( $yes / ( $no + $yes ), 2 )); ?> % </td> </tr> <tr> <td>No:</td> <td><img src=\"poll.gif\" width=' <?php echo ( 100 * round ( $no / ( $no + $yes ), 2 )); ?> ' height='20'> <?php echo ( 100 * round ( $no / ( $no + $yes ), 2 )); ?> % </td> </tr> </table> Remember to allow your web server to edit the text file. Do NOT give everyone access, just the web server (PHP).","title":"Ajax"},{"location":"Adv/phpAjax/#what-is-ajax","text":"AJAX = Asynchronous JavaScript and XML. AJAX is a technique for creating fast and dynamic web pages. AJAX allows web pages to be updated asynchronously by exchanging small amounts of data with the server behind the scenes. This means that it is possible to update parts of a web page, without reloading the whole page. Classic web pages, (which do not use AJAX) must reload the entire page if the content should change. Examples of applications using AJAX: Google Maps, Gmail, Youtube, and Facebook tabs. AJAX is based on internet standards, and uses a combination of: XMLHttpRequest object (to exchange data asynchronously with a server) JavaScript/DOM (to display/interact with the information) CSS (to style the data) XML (often used as the format for transferring data) AJAX applications are browser- and platform-independent!","title":"What is AJAX?"},{"location":"Adv/phpAjax/#ajax-and-php","text":"< html > < head > < script > function showHint ( str ) { if ( str . length == 0 ) { document . getElementById ( \"txtHint\" ). innerHTML = \"\" ; return ; } else { var xmlhttp = new XMLHttpRequest (); xmlhttp . onreadystatechange = function () { if ( this . readyState == 4 && this . status == 200 ) { document . getElementById ( \"txtHint\" ). innerHTML = this . responseText ; } }; xmlhttp . open ( \"GET\" , \"gethint.php?q=\" + str , true ); xmlhttp . send (); } } </ script > </ head > < body > < p >< b > Start typing a name in the input field below: </ b ></ p > < form action = \"\" > < label for = \"fname\" > First name: </ label > < input type = \"text\" id = \"fname\" name = \"fname\" onkeyup = \"showHint(this.value)\" > </ form > < p > Suggestions: < span id = \"txtHint\" ></ span ></ p > </ body > </ html >","title":"AJAX and PHP"},{"location":"Adv/phpAjax/#the-php-file-gethintphp","text":"The PHP file checks an array of names, and returns the corresponding name(s) to the browser <?php // Array with names $a [] = \"Anna\" ; $a [] = \"Brittany\" ; $a [] = \"Cinderella\" ; $a [] = \"Diana\" ; $a [] = \"Eva\" ; $a [] = \"Fiona\" ; $a [] = \"Gunda\" ; $a [] = \"Hege\" ; $a [] = \"Inga\" ; $a [] = \"Johanna\" ; $a [] = \"Kitty\" ; $a [] = \"Linda\" ; $a [] = \"Nina\" ; $a [] = \"Ophelia\" ; $a [] = \"Petunia\" ; $a [] = \"Amanda\" ; $a [] = \"Raquel\" ; $a [] = \"Cindy\" ; $a [] = \"Doris\" ; $a [] = \"Eve\" ; $a [] = \"Evita\" ; $a [] = \"Sunniva\" ; $a [] = \"Tove\" ; $a [] = \"Unni\" ; $a [] = \"Violet\" ; $a [] = \"Liza\" ; $a [] = \"Elizabeth\" ; $a [] = \"Ellen\" ; $a [] = \"Wenche\" ; $a [] = \"Vicky\" ; // get the q parameter from URL $q = $_REQUEST [ \"q\" ]; $hint = \"\" ; // lookup all hints from array if $q is different from \"\" if ( $q !== \"\" ) { $q = strtolower ( $q ); $len = strlen ( $q ); foreach ( $a as $name ) { if ( stristr ( $q , substr ( $name , 0 , $len ))) { if ( $hint === \"\" ) { $hint = $name ; } else { $hint .= \", $name \" ; } } } } // Output \"no suggestion\" if no hint was found or output correct values echo $hint === \"\" ? \"no suggestion\" : $hint ; ?>","title":"The PHP File - \"gethint.php\""},{"location":"Adv/phpAjax/#ajax-and-mysql","text":"AJAX can be used for interactive communication with a database. The database table we use in the example above looks like this: id FirstName LastName Age Hometown Job 1 Peter Griffin 41 Quahog Brewery 2 Lois Griffin 40 Newport Piano Teacher 3 Joseph Swanson 39 Quahog Police Officer 4 Glenn Quagmire 41 Quahog Pilot < html > < head > < script > function showUser ( str ) { if ( str == \"\" ) { document . getElementById ( \"txtHint\" ). innerHTML = \"\" ; return ; } else { var xmlhttp = new XMLHttpRequest (); xmlhttp . onreadystatechange = function () { if ( this . readyState == 4 && this . status == 200 ) { document . getElementById ( \"txtHint\" ). innerHTML = this . responseText ; } }; xmlhttp . open ( \"GET\" , \"getuser.php?q=\" + str , true ); xmlhttp . send (); } } </ script > </ head > < body > < form > < select name = \"users\" onchange = \"showUser(this.value)\" > < option value = \"\" > Select a person: </ option > < option value = \"1\" > Peter Griffin </ option > < option value = \"2\" > Lois Griffin </ option > < option value = \"3\" > Joseph Swanson </ option > < option value = \"4\" > Glenn Quagmire </ option > </ select > </ form > < br > < div id = \"txtHint\" >< b > Person info will be listed here... </ b ></ div > </ body > </ html > The page on the server called by the JavaScript above is a PHP file called \"getuser.php\". The source code in \"getuser.php\" runs a query against a MySQL database, and returns the result in an HTML table. <!DOCTYPE html> <html> <head> <style> table { width: 100%; border-collapse: collapse; } table, td, th { border: 1px solid black; padding: 5px; } th {text-align: left;} </style> </head> <body> <?php $q = intval ( $_GET [ 'q' ]); $con = mysqli_connect ( 'localhost' , 'peter' , 'abc123' ); if ( ! $con ) { die ( 'Could not connect: ' . mysqli_error ( $con )); } mysqli_select_db ( $con , \"ajax_demo\" ); $sql = \"SELECT * FROM user WHERE id = '\" . $q . \"'\" ; $result = mysqli_query ( $con , $sql ); echo \"<table> <tr> <th>Firstname</th> <th>Lastname</th> <th>Age</th> <th>Hometown</th> <th>Job</th> </tr>\" ; while ( $row = mysqli_fetch_array ( $result )) { echo \"<tr>\" ; echo \"<td>\" . $row [ 'FirstName' ] . \"</td>\" ; echo \"<td>\" . $row [ 'LastName' ] . \"</td>\" ; echo \"<td>\" . $row [ 'Age' ] . \"</td>\" ; echo \"<td>\" . $row [ 'Hometown' ] . \"</td>\" ; echo \"<td>\" . $row [ 'Job' ] . \"</td>\" ; echo \"</tr>\" ; } echo \"</table>\" ; mysqli_close ( $con ); ?> </body> </html>","title":"AJAX and MySQL"},{"location":"Adv/phpAjax/#ajax-and-xml","text":"< html > < head > < script > function showCD ( str ) { if ( str == \"\" ) { document . getElementById ( \"txtHint\" ). innerHTML = \"\" ; return ; } var xmlhttp = new XMLHttpRequest (); xmlhttp . onreadystatechange = function () { if ( this . readyState == 4 && this . status == 200 ) { document . getElementById ( \"txtHint\" ). innerHTML = this . responseText ; } } xmlhttp . open ( \"GET\" , \"getcd.php?q=\" + str , true ); xmlhttp . send (); } </ script > </ head > < body > < form > Select a CD: < select name = \"cds\" onchange = \"showCD(this.value)\" > < option value = \"\" > Select a CD: </ option > < option value = \"Bob Dylan\" > Bob Dylan </ option > < option value = \"Bee Gees\" > Bee Gees </ option > < option value = \"Cat Stevens\" > Cat Stevens </ option > </ select > </ form > < div id = \"txtHint\" >< b > CD info will be listed here... </ b ></ div > </ body > </ html > <?php $q = $_GET [ \"q\" ]; $xmlDoc = new DOMDocument (); $xmlDoc -> load ( \"cd_catalog.xml\" ); $x = $xmlDoc -> getElementsByTagName ( 'ARTIST' ); for ( $i = 0 ; $i <= $x -> length - 1 ; $i ++ ) { //Process only element nodes if ( $x -> item ( $i ) -> nodeType == 1 ) { if ( $x -> item ( $i ) -> childNodes -> item ( 0 ) -> nodeValue == $q ) { $y = ( $x -> item ( $i ) -> parentNode ); } } } $cd = ( $y -> childNodes ); for ( $i = 0 ; $i < $cd -> length ; $i ++ ) { //Process only element nodes if ( $cd -> item ( $i ) -> nodeType == 1 ) { echo ( \"<b>\" . $cd -> item ( $i ) -> nodeName . \":</b> \" ); echo ( $cd -> item ( $i ) -> childNodes -> item ( 0 ) -> nodeValue ); echo ( \"<br>\" ); } } ?>","title":"AJAX and XML"},{"location":"Adv/phpAjax/#ajax-live-search","text":"Live search has many benefits compared to traditional searching: Results are shown as you type Results narrow as you continue typing If results become too narrow, remove characters to see a broader result < html > < head > < script > function showResult ( str ) { if ( str . length == 0 ) { document . getElementById ( \"livesearch\" ). innerHTML = \"\" ; document . getElementById ( \"livesearch\" ). style . border = \"0px\" ; return ; } var xmlhttp = new XMLHttpRequest (); xmlhttp . onreadystatechange = function () { if ( this . readyState == 4 && this . status == 200 ) { document . getElementById ( \"livesearch\" ). innerHTML = this . responseText ; document . getElementById ( \"livesearch\" ). style . border = \"1px solid #A5ACB2\" ; } } xmlhttp . open ( \"GET\" , \"livesearch.php?q=\" + str , true ); xmlhttp . send (); } </ script > </ head > < body > < form > < input type = \"text\" size = \"30\" onkeyup = \"showResult(this.value)\" > < div id = \"livesearch\" ></ div > </ form > </ body > </ html > <?php $xmlDoc = new DOMDocument (); $xmlDoc -> load ( \"links.xml\" ); $x = $xmlDoc -> getElementsByTagName ( 'link' ); //get the q parameter from URL $q = $_GET [ \"q\" ]; //lookup all links from the xml file if length of q>0 if ( strlen ( $q ) > 0 ) { $hint = \"\" ; for ( $i = 0 ; $i < ( $x -> length ); $i ++ ) { $y = $x -> item ( $i ) -> getElementsByTagName ( 'title' ); $z = $x -> item ( $i ) -> getElementsByTagName ( 'url' ); if ( $y -> item ( 0 ) -> nodeType == 1 ) { //find a link matching the search text if ( stristr ( $y -> item ( 0 ) -> childNodes -> item ( 0 ) -> nodeValue , $q )) { if ( $hint == \"\" ) { $hint = \"<a href='\" . $z -> item ( 0 ) -> childNodes -> item ( 0 ) -> nodeValue . \"' target='_blank'>\" . $y -> item ( 0 ) -> childNodes -> item ( 0 ) -> nodeValue . \"</a>\" ; } else { $hint = $hint . \"<br /><a href='\" . $z -> item ( 0 ) -> childNodes -> item ( 0 ) -> nodeValue . \"' target='_blank'>\" . $y -> item ( 0 ) -> childNodes -> item ( 0 ) -> nodeValue . \"</a>\" ; } } } } } // Set output to \"no suggestion\" if no hint was found // or to the correct values if ( $hint == \"\" ) { $response = \"no suggestion\" ; } else { $response = $hint ; } //output the response echo $response ; ?>","title":"AJAX Live Search"},{"location":"Adv/phpAjax/#ajax-poll","text":"< html > < head > < script > function getVote ( int ) { var xmlhttp = new XMLHttpRequest (); xmlhttp . onreadystatechange = function () { if ( this . readyState == 4 && this . status == 200 ) { document . getElementById ( \"poll\" ). innerHTML = this . responseText ; } } xmlhttp . open ( \"GET\" , \"poll_vote.php?vote=\" + int , true ); xmlhttp . send (); } </ script > </ head > < body > < div id = \"poll\" > < h3 > Do you like PHP and AJAX so far? </ h3 > < form > Yes: < input type = \"radio\" name = \"vote\" value = \"0\" onclick = \"getVote(this.value)\" >< br > No: < input type = \"radio\" name = \"vote\" value = \"1\" onclick = \"getVote(this.value)\" > </ form > </ div > </ body > </ html > <?php $vote = $_REQUEST [ 'vote' ]; //get content of textfile $filename = \"poll_result.txt\" ; $content = file ( $filename ); //put content in array $array = explode ( \"||\" , $content [ 0 ]); $yes = $array [ 0 ]; $no = $array [ 1 ]; if ( $vote == 0 ) { $yes = $yes + 1 ; } if ( $vote == 1 ) { $no = $no + 1 ; } //insert votes to txt file $insertvote = $yes . \"||\" . $no ; $fp = fopen ( $filename , \"w\" ); fputs ( $fp , $insertvote ); fclose ( $fp ); ?> <h2>Result:</h2> <table> <tr> <td>Yes:</td> <td><img src=\"poll.gif\" width=' <?php echo ( 100 * round ( $yes / ( $no + $yes ), 2 )); ?> ' height='20'> <?php echo ( 100 * round ( $yes / ( $no + $yes ), 2 )); ?> % </td> </tr> <tr> <td>No:</td> <td><img src=\"poll.gif\" width=' <?php echo ( 100 * round ( $no / ( $no + $yes ), 2 )); ?> ' height='20'> <?php echo ( 100 * round ( $no / ( $no + $yes ), 2 )); ?> % </td> </tr> </table> Remember to allow your web server to edit the text file. Do NOT give everyone access, just the web server (PHP).","title":"AJAX Poll"},{"location":"Adv/phpFile/","text":"PHP File Handling File handling is an important part of any web application. You often need to open and process a file for different tasks. PHP has several functions for creating, reading, uploading, and editing files. readfile() The readfile() function reads a file and writes it to the output buffer. Assume we have a text file called \"webdictionary.txt\", stored on the server, that looks like this: AJAX = Asynchronous JavaScript and XML CSS = Cascading Style Sheets HTML = Hyper Text Markup Language PHP = PHP Hypertext Preprocessor SQL = Structured Query Language SVG = Scalable Vector Graphics XML = EXtensible Markup Language The PHP code to read the file and write it to the output buffer is as follows (the readfile() function returns the number of bytes read on success): <?php echo readfile ( \"webdictionary.txt\" ); ?> The readfile() function is useful if all you want to do is open up a file and read its contents. fopen() A better method to open files is with the fopen() function. This function gives you more options than the readfile() function. <?php $myfile = fopen ( \"webdictionary.txt\" , \"r\" ) or die ( \"Unable to open file!\" ); echo fread ( $myfile , filesize ( \"webdictionary.txt\" )); fclose ( $myfile ); ?> The file may be opened in one of the following modes: Modes Description r Open a file for read only. File pointer starts at the beginning of the file w Open a file for write only. Erases the contents of the file or creates a new file if it doesn't exist. File pointer starts at the beginning of the file a Open a file for write only. The existing data in file is preserved. File pointer starts at the end of the file. Creates a new file if the file doesn't exist x Creates a new file for write only. Returns FALSE and an error if file already exists r+ Open a file for read/write. File pointer starts at the beginning of the file w+ Open a file for read/write. Erases the contents of the file or creates a new file if it doesn't exist. File pointer starts at the beginning of the file a+ Open a file for read/write. The existing data in file is preserved. File pointer starts at the end of the file. Creates a new file if the file doesn't exist x+ Creates a new file for read/write. Returns FALSE and an error if file already exists The fopen() function is also used to create a file. If you use fopen() on a file that does not exist, it will create it, given that the file is opened for writing (w) or appending (a). <?php $myfile = fopen ( \"webdictionary.txt\" , \"w\" ) or die ( \"Unable to open file!\" ); fwrite ( $myfile , \"Hello World!\" ); fclose ( $myfile ); ?> File Permissions If you are having errors when trying to get this code to run, check that you have granted your PHP file access to write information to the hard drive. fread() The fread() function reads from an open file. The first parameter of fread() contains the name of the file to read from and the second parameter specifies the maximum number of bytes to read. The following PHP code reads the \"webdictionary.txt\" file to the end: fread($myfile,filesize(\"webdictionary.txt\")); fwrite() The fwrite() function is used to write to a file. The first parameter of fwrite() contains the name of the file to write to and the second parameter is the string to be written. <?php $myfile = fopen ( \"newfile.txt\" , \"w\" ) or die ( \"Unable to open file!\" ); $txt = \"John Doe \\n \" ; fwrite ( $myfile , $txt ); $txt = \"Jane Doe \\n \" ; fwrite ( $myfile , $txt ); fclose ( $myfile ); ?> fclose() The fclose() function is used to close an open file. It's a good programming practice to close all files after you have finished with them. The fclose() requires the name of the file (or a variable that holds the filename) we want to close: <?php $myfile = fopen ( \"webdictionary.txt\" , \"r\" ); // some code to be executed.... fclose ( $myfile ); ?> fgets() The fgets() function is used to read a single line from a file. <?php $myfile = fopen ( \"webdictionary.txt\" , \"r\" ) or die ( \"Unable to open file!\" ); echo fgets ( $myfile ); fclose ( $myfile ); ?> After a call to the fgets() function, the file pointer has moved to the next line. feof() The feof() function checks if the \"end-of-file\" (EOF) has been reached. The feof() function is useful for looping through data of unknown length. <?php $myfile = fopen ( \"webdictionary.txt\" , \"r\" ) or die ( \"Unable to open file!\" ); // Output one line until end-of-file while ( ! feof ( $myfile )) { echo fgets ( $myfile ) . \"<br>\" ; } fclose ( $myfile ); ?> fgetc() The fgetc() function is used to read a single character from a file. <?php $myfile = fopen ( \"webdictionary.txt\" , \"r\" ) or die ( \"Unable to open file!\" ); // Output one character until end-of-file while ( ! feof ( $myfile )) { echo fgetc ( $myfile ); } fclose ( $myfile ); ?> After a call to the fgetc() function, the file pointer moves to the next character. PHP File Upload With PHP, it is easy to upload files to the server. Configure The \"php.ini\" File First, ensure that PHP is configured to allow file uploads. In your \"php.ini\" file, search for the file_uploads directive, and set it to On: file_uploads = On Create The HTML Form <!DOCTYPE html> < html > < body > < form action = \"upload.php\" method = \"post\" enctype = \"multipart/form-data\" > Select image to upload: < input type = \"file\" name = \"fileToUpload\" id = \"fileToUpload\" > < input type = \"submit\" value = \"Upload Image\" name = \"submit\" > </ form > </ body > </ html > Some rules to follow for the HTML form above: Make sure that the form uses method=\"post\" The form also needs the following attribute: enctype=\"multipart/form-data\". It specifies which content-type to use when submitting the form Without the requirements above, the file upload will not work. Other things to notice: The type=\"file\" attribute of the input tag shows the input field as a file-select control, with a \"Browse\" button next to the input control The form above sends data to a file called \"upload.php\", which we will create next. Create The Upload File PHP Script The \"upload.php\" file contains the code for uploading a file: <?php $target_dir = \"uploads/\" ; $target_file = $target_dir . basename ( $_FILES [ \"fileToUpload\" ][ \"name\" ]); $uploadOk = 1 ; $imageFileType = strtolower ( pathinfo ( $target_file , PATHINFO_EXTENSION )); // Check if image file is a actual image or fake image if ( isset ( $_POST [ \"submit\" ])) { $check = getimagesize ( $_FILES [ \"fileToUpload\" ][ \"tmp_name\" ]); if ( $check !== false ) { echo \"File is an image - \" . $check [ \"mime\" ] . \".\" ; $uploadOk = 1 ; } else { echo \"File is not an image.\" ; $uploadOk = 0 ; } } ?> PHP script explained: $target_dir = \"uploads/\" - specifies the directory where the file is going to be placed $target_file specifies the path of the file to be uploaded $uploadOk=1 is not used yet (will be used later) $imageFileType holds the file extension of the file (in lower case) Next, check if the image file is an actual image or a fake image You will need to create a new directory called \"uploads\" in the directory where \"upload.php\" file resides. The uploaded files will be saved there. Check if File Already Exists Now we can add some restrictions. First, we will check if the file already exists in the \"uploads\" folder. If it does, an error message is displayed, and $uploadOk is set to 0: // Check if file already exists if (file_exists($target_file)) { echo \"Sorry, file already exists.\"; $uploadOk = 0; } ?> Limit File Size The file input field in our HTML form above is named \"fileToUpload\". Now, we want to check the size of the file. If the file is larger than 500KB, an error message is displayed, and $uploadOk is set to 0: // Check file size if ($_FILES[\"fileToUpload\"][\"size\"] > 500000) { echo \"Sorry, your file is too large.\"; $uploadOk = 0; } ?> Limit File Type The code below only allows users to upload JPG, JPEG, PNG, and GIF files. All other file types gives an error message before setting $uploadOk to 0: // Allow certain file formats if($imageFileType != \"jpg\" && $imageFileType != \"png\" && $imageFileType != \"jpeg\" && $imageFileType != \"gif\" ) { echo \"Sorry, only JPG, JPEG, PNG & GIF files are allowed.\"; $uploadOk = 0; } ?> Complete Upload File PHP Script The complete \"upload.php\" file now looks like this: <?php $target_dir = \"uploads/\" ; $target_file = $target_dir . basename ( $_FILES [ \"fileToUpload\" ][ \"name\" ]); $uploadOk = 1 ; $imageFileType = strtolower ( pathinfo ( $target_file , PATHINFO_EXTENSION )); // Check if image file is a actual image or fake image if ( isset ( $_POST [ \"submit\" ])) { $check = getimagesize ( $_FILES [ \"fileToUpload\" ][ \"tmp_name\" ]); if ( $check !== false ) { echo \"File is an image - \" . $check [ \"mime\" ] . \".\" ; $uploadOk = 1 ; } else { echo \"File is not an image.\" ; $uploadOk = 0 ; } } // Check if file already exists if ( file_exists ( $target_file )) { echo \"Sorry, file already exists.\" ; $uploadOk = 0 ; } // Check file size if ( $_FILES [ \"fileToUpload\" ][ \"size\" ] > 500000 ) { echo \"Sorry, your file is too large.\" ; $uploadOk = 0 ; } // Allow certain file formats if ( $imageFileType != \"jpg\" && $imageFileType != \"png\" && $imageFileType != \"jpeg\" && $imageFileType != \"gif\" ) { echo \"Sorry, only JPG, JPEG, PNG & GIF files are allowed.\" ; $uploadOk = 0 ; } // Check if $uploadOk is set to 0 by an error if ( $uploadOk == 0 ) { echo \"Sorry, your file was not uploaded.\" ; // if everything is ok, try to upload file } else { if ( move_uploaded_file ( $_FILES [ \"fileToUpload\" ][ \"tmp_name\" ], $target_file )) { echo \"The file \" . htmlspecialchars ( basename ( $_FILES [ \"fileToUpload\" ][ \"name\" ])) . \" has been uploaded.\" ; } else { echo \"Sorry, there was an error uploading your file.\" ; } } ?> PHP Directory Functions Function Description chdir() Changes the current directory chroot() Changes the root directory closedir() Closes a directory handle dir() Returns an instance of the Directory class getcwd() Returns the current working directory opendir() Opens a directory handle readdir() Returns an entry from a directory handle rewinddir() Resets a directory handle scandir() Returns an array of files and directories of a specified directory chdir() The chdir() function changes the current working directory. <?php // Get current directory echo getcwd () . \"<br>\" ; // Change directory chdir ( \"images\" ); // Get current directory echo getcwd (); ?> chroot() The chroot() function changes the root directory. <?php // Change root directory chroot ( \"/path/to/chroot/\" ); // Get current directory echo getcwd (); ?> closedir() The closedir() function closes a directory handle. <?php $dir = \"/images/\" ; // Open a directory, and read its contents if ( is_dir ( $dir )){ if ( $dh = opendir ( $dir )){ while (( $file = readdir ( $dh )) !== false ){ echo \"filename:\" . $file . \"<br>\" ; } closedir ( $dh ); } } ?> dir() The dir() function returns an instance of the Directory class. <?php $d = dir ( getcwd ()); echo \"Handle: \" . $d -> handle . \"<br>\" ; echo \"Path: \" . $d -> path . \"<br>\" ; while (( $file = $d -> read ()) !== false ){ echo \"filename: \" . $file . \"<br>\" ; } $d -> close (); ?> Handle: Resource id #2 Path: /etc/php filename: . filename: .. filename: ajax.gif filename: books.xml filename: cdcatalog.xml filename: cd_catalog.xml filename: default.asp filename: demo_array.asp filename: demo_array.htm ... ... ... getcwd() The getcwd() function returns the current working directory. <?php echo getcwd (); ?> /home/username/public_html opendir() The opendir() function opens a directory handle. <?php $dir = \"/images/\" ; // Open a directory, and read its contents if ( is_dir ( $dir )){ if ( $dh = opendir ( $dir )){ while (( $file = readdir ( $dh )) !== false ){ echo \"filename:\" . $file . \"<br>\" ; } closedir ( $dh ); } } ?> readdir() The readdir() function returns an entry from a directory handle. <?php $dir = \"/images/\" ; // Open a directory, and read its contents if ( is_dir ( $dir )){ if ( $dh = opendir ( $dir )){ while (( $file = readdir ( $dh )) !== false ){ echo \"filename:\" . $file . \"<br>\" ; } closedir ( $dh ); } } ?> rewinddir() The rewinddir() function resets a directory handle. <?php $dir = \"/images/\" ; // Open a directory, and read its contents if ( is_dir ( $dir )){ if ( $dh = opendir ( $dir )){ // List files in images directory while (( $file = readdir ( $dh )) !== false ){ echo \"filename:\" . $file . \"<br>\" ; } rewinddir (); // List once again files in images directory while (( $file = readdir ( $dh )) !== false ){ echo \"filename:\" . $file . \"<br>\" ; } closedir ( $dh ); } } ?> scandir() The scandir() function returns an array of files and directories of a specified directory. <?php $dir = \"/images/\" ; // Sort in ascending order - this is default $a = scandir ( $dir ); // Sort in descending order $b = scandir ( $dir , 1 ); print_r ( $a ); print_r ( $b ); ?>","title":"Filesystem"},{"location":"Adv/phpFile/#php-file-handling","text":"File handling is an important part of any web application. You often need to open and process a file for different tasks. PHP has several functions for creating, reading, uploading, and editing files.","title":"PHP File Handling"},{"location":"Adv/phpFile/#readfile","text":"The readfile() function reads a file and writes it to the output buffer. Assume we have a text file called \"webdictionary.txt\", stored on the server, that looks like this: AJAX = Asynchronous JavaScript and XML CSS = Cascading Style Sheets HTML = Hyper Text Markup Language PHP = PHP Hypertext Preprocessor SQL = Structured Query Language SVG = Scalable Vector Graphics XML = EXtensible Markup Language The PHP code to read the file and write it to the output buffer is as follows (the readfile() function returns the number of bytes read on success): <?php echo readfile ( \"webdictionary.txt\" ); ?> The readfile() function is useful if all you want to do is open up a file and read its contents.","title":"readfile()"},{"location":"Adv/phpFile/#fopen","text":"A better method to open files is with the fopen() function. This function gives you more options than the readfile() function. <?php $myfile = fopen ( \"webdictionary.txt\" , \"r\" ) or die ( \"Unable to open file!\" ); echo fread ( $myfile , filesize ( \"webdictionary.txt\" )); fclose ( $myfile ); ?> The file may be opened in one of the following modes: Modes Description r Open a file for read only. File pointer starts at the beginning of the file w Open a file for write only. Erases the contents of the file or creates a new file if it doesn't exist. File pointer starts at the beginning of the file a Open a file for write only. The existing data in file is preserved. File pointer starts at the end of the file. Creates a new file if the file doesn't exist x Creates a new file for write only. Returns FALSE and an error if file already exists r+ Open a file for read/write. File pointer starts at the beginning of the file w+ Open a file for read/write. Erases the contents of the file or creates a new file if it doesn't exist. File pointer starts at the beginning of the file a+ Open a file for read/write. The existing data in file is preserved. File pointer starts at the end of the file. Creates a new file if the file doesn't exist x+ Creates a new file for read/write. Returns FALSE and an error if file already exists The fopen() function is also used to create a file. If you use fopen() on a file that does not exist, it will create it, given that the file is opened for writing (w) or appending (a). <?php $myfile = fopen ( \"webdictionary.txt\" , \"w\" ) or die ( \"Unable to open file!\" ); fwrite ( $myfile , \"Hello World!\" ); fclose ( $myfile ); ?>","title":"fopen()"},{"location":"Adv/phpFile/#file-permissions","text":"If you are having errors when trying to get this code to run, check that you have granted your PHP file access to write information to the hard drive.","title":"File Permissions"},{"location":"Adv/phpFile/#fread","text":"The fread() function reads from an open file. The first parameter of fread() contains the name of the file to read from and the second parameter specifies the maximum number of bytes to read. The following PHP code reads the \"webdictionary.txt\" file to the end: fread($myfile,filesize(\"webdictionary.txt\"));","title":"fread()"},{"location":"Adv/phpFile/#fwrite","text":"The fwrite() function is used to write to a file. The first parameter of fwrite() contains the name of the file to write to and the second parameter is the string to be written. <?php $myfile = fopen ( \"newfile.txt\" , \"w\" ) or die ( \"Unable to open file!\" ); $txt = \"John Doe \\n \" ; fwrite ( $myfile , $txt ); $txt = \"Jane Doe \\n \" ; fwrite ( $myfile , $txt ); fclose ( $myfile ); ?>","title":"fwrite()"},{"location":"Adv/phpFile/#fclose","text":"The fclose() function is used to close an open file. It's a good programming practice to close all files after you have finished with them. The fclose() requires the name of the file (or a variable that holds the filename) we want to close: <?php $myfile = fopen ( \"webdictionary.txt\" , \"r\" ); // some code to be executed.... fclose ( $myfile ); ?>","title":"fclose()"},{"location":"Adv/phpFile/#fgets","text":"The fgets() function is used to read a single line from a file. <?php $myfile = fopen ( \"webdictionary.txt\" , \"r\" ) or die ( \"Unable to open file!\" ); echo fgets ( $myfile ); fclose ( $myfile ); ?> After a call to the fgets() function, the file pointer has moved to the next line.","title":"fgets()"},{"location":"Adv/phpFile/#feof","text":"The feof() function checks if the \"end-of-file\" (EOF) has been reached. The feof() function is useful for looping through data of unknown length. <?php $myfile = fopen ( \"webdictionary.txt\" , \"r\" ) or die ( \"Unable to open file!\" ); // Output one line until end-of-file while ( ! feof ( $myfile )) { echo fgets ( $myfile ) . \"<br>\" ; } fclose ( $myfile ); ?>","title":"feof()"},{"location":"Adv/phpFile/#fgetc","text":"The fgetc() function is used to read a single character from a file. <?php $myfile = fopen ( \"webdictionary.txt\" , \"r\" ) or die ( \"Unable to open file!\" ); // Output one character until end-of-file while ( ! feof ( $myfile )) { echo fgetc ( $myfile ); } fclose ( $myfile ); ?> After a call to the fgetc() function, the file pointer moves to the next character.","title":"fgetc()"},{"location":"Adv/phpFile/#php-file-upload","text":"With PHP, it is easy to upload files to the server.","title":"PHP File Upload"},{"location":"Adv/phpFile/#configure-the-phpini-file","text":"First, ensure that PHP is configured to allow file uploads. In your \"php.ini\" file, search for the file_uploads directive, and set it to On: file_uploads = On","title":"Configure The \"php.ini\" File"},{"location":"Adv/phpFile/#create-the-html-form","text":"<!DOCTYPE html> < html > < body > < form action = \"upload.php\" method = \"post\" enctype = \"multipart/form-data\" > Select image to upload: < input type = \"file\" name = \"fileToUpload\" id = \"fileToUpload\" > < input type = \"submit\" value = \"Upload Image\" name = \"submit\" > </ form > </ body > </ html > Some rules to follow for the HTML form above: Make sure that the form uses method=\"post\" The form also needs the following attribute: enctype=\"multipart/form-data\". It specifies which content-type to use when submitting the form Without the requirements above, the file upload will not work. Other things to notice: The type=\"file\" attribute of the input tag shows the input field as a file-select control, with a \"Browse\" button next to the input control The form above sends data to a file called \"upload.php\", which we will create next.","title":"Create The HTML Form"},{"location":"Adv/phpFile/#create-the-upload-file-php-script","text":"The \"upload.php\" file contains the code for uploading a file: <?php $target_dir = \"uploads/\" ; $target_file = $target_dir . basename ( $_FILES [ \"fileToUpload\" ][ \"name\" ]); $uploadOk = 1 ; $imageFileType = strtolower ( pathinfo ( $target_file , PATHINFO_EXTENSION )); // Check if image file is a actual image or fake image if ( isset ( $_POST [ \"submit\" ])) { $check = getimagesize ( $_FILES [ \"fileToUpload\" ][ \"tmp_name\" ]); if ( $check !== false ) { echo \"File is an image - \" . $check [ \"mime\" ] . \".\" ; $uploadOk = 1 ; } else { echo \"File is not an image.\" ; $uploadOk = 0 ; } } ?> PHP script explained: $target_dir = \"uploads/\" - specifies the directory where the file is going to be placed $target_file specifies the path of the file to be uploaded $uploadOk=1 is not used yet (will be used later) $imageFileType holds the file extension of the file (in lower case) Next, check if the image file is an actual image or a fake image You will need to create a new directory called \"uploads\" in the directory where \"upload.php\" file resides. The uploaded files will be saved there.","title":"Create The Upload File PHP Script"},{"location":"Adv/phpFile/#check-if-file-already-exists","text":"Now we can add some restrictions. First, we will check if the file already exists in the \"uploads\" folder. If it does, an error message is displayed, and $uploadOk is set to 0: // Check if file already exists if (file_exists($target_file)) { echo \"Sorry, file already exists.\"; $uploadOk = 0; } ?>","title":"Check if File Already Exists"},{"location":"Adv/phpFile/#limit-file-size","text":"The file input field in our HTML form above is named \"fileToUpload\". Now, we want to check the size of the file. If the file is larger than 500KB, an error message is displayed, and $uploadOk is set to 0: // Check file size if ($_FILES[\"fileToUpload\"][\"size\"] > 500000) { echo \"Sorry, your file is too large.\"; $uploadOk = 0; } ?>","title":"Limit File Size"},{"location":"Adv/phpFile/#limit-file-type","text":"The code below only allows users to upload JPG, JPEG, PNG, and GIF files. All other file types gives an error message before setting $uploadOk to 0: // Allow certain file formats if($imageFileType != \"jpg\" && $imageFileType != \"png\" && $imageFileType != \"jpeg\" && $imageFileType != \"gif\" ) { echo \"Sorry, only JPG, JPEG, PNG & GIF files are allowed.\"; $uploadOk = 0; } ?>","title":"Limit File Type"},{"location":"Adv/phpFile/#complete-upload-file-php-script","text":"The complete \"upload.php\" file now looks like this: <?php $target_dir = \"uploads/\" ; $target_file = $target_dir . basename ( $_FILES [ \"fileToUpload\" ][ \"name\" ]); $uploadOk = 1 ; $imageFileType = strtolower ( pathinfo ( $target_file , PATHINFO_EXTENSION )); // Check if image file is a actual image or fake image if ( isset ( $_POST [ \"submit\" ])) { $check = getimagesize ( $_FILES [ \"fileToUpload\" ][ \"tmp_name\" ]); if ( $check !== false ) { echo \"File is an image - \" . $check [ \"mime\" ] . \".\" ; $uploadOk = 1 ; } else { echo \"File is not an image.\" ; $uploadOk = 0 ; } } // Check if file already exists if ( file_exists ( $target_file )) { echo \"Sorry, file already exists.\" ; $uploadOk = 0 ; } // Check file size if ( $_FILES [ \"fileToUpload\" ][ \"size\" ] > 500000 ) { echo \"Sorry, your file is too large.\" ; $uploadOk = 0 ; } // Allow certain file formats if ( $imageFileType != \"jpg\" && $imageFileType != \"png\" && $imageFileType != \"jpeg\" && $imageFileType != \"gif\" ) { echo \"Sorry, only JPG, JPEG, PNG & GIF files are allowed.\" ; $uploadOk = 0 ; } // Check if $uploadOk is set to 0 by an error if ( $uploadOk == 0 ) { echo \"Sorry, your file was not uploaded.\" ; // if everything is ok, try to upload file } else { if ( move_uploaded_file ( $_FILES [ \"fileToUpload\" ][ \"tmp_name\" ], $target_file )) { echo \"The file \" . htmlspecialchars ( basename ( $_FILES [ \"fileToUpload\" ][ \"name\" ])) . \" has been uploaded.\" ; } else { echo \"Sorry, there was an error uploading your file.\" ; } } ?>","title":"Complete Upload File PHP Script"},{"location":"Adv/phpFile/#php-directory-functions","text":"Function Description chdir() Changes the current directory chroot() Changes the root directory closedir() Closes a directory handle dir() Returns an instance of the Directory class getcwd() Returns the current working directory opendir() Opens a directory handle readdir() Returns an entry from a directory handle rewinddir() Resets a directory handle scandir() Returns an array of files and directories of a specified directory","title":"PHP Directory Functions"},{"location":"Adv/phpFile/#chdir","text":"The chdir() function changes the current working directory. <?php // Get current directory echo getcwd () . \"<br>\" ; // Change directory chdir ( \"images\" ); // Get current directory echo getcwd (); ?>","title":"chdir()"},{"location":"Adv/phpFile/#chroot","text":"The chroot() function changes the root directory. <?php // Change root directory chroot ( \"/path/to/chroot/\" ); // Get current directory echo getcwd (); ?>","title":"chroot()"},{"location":"Adv/phpFile/#closedir","text":"The closedir() function closes a directory handle. <?php $dir = \"/images/\" ; // Open a directory, and read its contents if ( is_dir ( $dir )){ if ( $dh = opendir ( $dir )){ while (( $file = readdir ( $dh )) !== false ){ echo \"filename:\" . $file . \"<br>\" ; } closedir ( $dh ); } } ?>","title":"closedir()"},{"location":"Adv/phpFile/#dir","text":"The dir() function returns an instance of the Directory class. <?php $d = dir ( getcwd ()); echo \"Handle: \" . $d -> handle . \"<br>\" ; echo \"Path: \" . $d -> path . \"<br>\" ; while (( $file = $d -> read ()) !== false ){ echo \"filename: \" . $file . \"<br>\" ; } $d -> close (); ?> Handle: Resource id #2 Path: /etc/php filename: . filename: .. filename: ajax.gif filename: books.xml filename: cdcatalog.xml filename: cd_catalog.xml filename: default.asp filename: demo_array.asp filename: demo_array.htm ... ... ...","title":"dir()"},{"location":"Adv/phpFile/#getcwd","text":"The getcwd() function returns the current working directory. <?php echo getcwd (); ?> /home/username/public_html","title":"getcwd()"},{"location":"Adv/phpFile/#opendir","text":"The opendir() function opens a directory handle. <?php $dir = \"/images/\" ; // Open a directory, and read its contents if ( is_dir ( $dir )){ if ( $dh = opendir ( $dir )){ while (( $file = readdir ( $dh )) !== false ){ echo \"filename:\" . $file . \"<br>\" ; } closedir ( $dh ); } } ?>","title":"opendir()"},{"location":"Adv/phpFile/#readdir","text":"The readdir() function returns an entry from a directory handle. <?php $dir = \"/images/\" ; // Open a directory, and read its contents if ( is_dir ( $dir )){ if ( $dh = opendir ( $dir )){ while (( $file = readdir ( $dh )) !== false ){ echo \"filename:\" . $file . \"<br>\" ; } closedir ( $dh ); } } ?>","title":"readdir()"},{"location":"Adv/phpFile/#rewinddir","text":"The rewinddir() function resets a directory handle. <?php $dir = \"/images/\" ; // Open a directory, and read its contents if ( is_dir ( $dir )){ if ( $dh = opendir ( $dir )){ // List files in images directory while (( $file = readdir ( $dh )) !== false ){ echo \"filename:\" . $file . \"<br>\" ; } rewinddir (); // List once again files in images directory while (( $file = readdir ( $dh )) !== false ){ echo \"filename:\" . $file . \"<br>\" ; } closedir ( $dh ); } } ?>","title":"rewinddir()"},{"location":"Adv/phpFile/#scandir","text":"The scandir() function returns an array of files and directories of a specified directory. <?php $dir = \"/images/\" ; // Sort in ascending order - this is default $a = scandir ( $dir ); // Sort in descending order $b = scandir ( $dir , 1 ); print_r ( $a ); print_r ( $b ); ?>","title":"scandir()"},{"location":"Adv/phpGoto/","text":"The goto operator can be used to jump to another section in the program. The target point is specified by a case-sensitive label followed by a colon, and the instruction is given as goto followed by the desired target label. This is not a full unrestricted goto. The target label must be within the same file and context, meaning that you cannot jump out of a function or method, nor can you jump into one. You also cannot jump into any sort of loop or switch structure. You may jump out of these, and a common use is to use a goto in place of a multi-level break. <?php goto label ; echo \"hello\" ; label : echo \"world\" ; ?> The above example will output: world","title":"Goto"},{"location":"Adv/phpInclude/","text":"The include (or require) statement takes all the text/code/markup that exists in the specified file and copies it into the file that uses the include statement. Including files is very useful when you want to include the same PHP, HTML, or text on multiple pages of a website. PHP include and require Statements It is possible to insert the content of one PHP file into another PHP file (before the server executes it), with the include or require statement. The include and require statements are identical, except upon failure: require will produce a fatal error (E_COMPILE_ERROR) and stop the script include will only produce a warning (E_WARNING) and the script will continue So, if you want the execution to go on and show users the output, even if the include file is missing, use the include statement. Otherwise, in case of FrameWork, CMS, or a complex PHP application coding, always use the require statement to include a key file to the flow of execution. This will help avoid compromising your application's security and integrity, just in-case one key file is accidentally missing. Including files saves a lot of work. This means that you can create a standard header, footer, or menu file for all your web pages. Then, when the header needs to be updated, you can only update the header include file. PHP include Examples Example 1 <html> <body> <h1>Welcome to my home page!</h1> <p>Some text.</p> <p>Some more text.</p> <?php include 'footer.php' ; ?> </body> </html> Example 2 Assume we have a standard menu file called \"menu.php\": <?php echo '<a href=\"/default.asp\">Home</a> - <a href=\"/html/default.asp\">HTML Tutorial</a> - <a href=\"/css/default.asp\">CSS Tutorial</a> - <a href=\"/js/default.asp\">JavaScript Tutorial</a> - <a href=\"default.asp\">PHP Tutorial</a>' ; ?> All pages in the Web site should use this menu file. Here is how it can be done (we are using a <'div> element so that the menu easily can be styled with CSS later): <html> <body> <div class=\"menu\"> <?php include 'menu.php' ; ?> </div> <h1>Welcome to my home page!</h1> <p>Some text.</p> <p>Some more text.</p> </body> </html> Example 3 Assume we have a file called \"vars.php\", with some variables defined: <?php $color = 'red' ; $car = 'BMW' ; ?> Then, if we include the \"vars.php\" file, the variables can be used in the calling file: <html> <body> <h1>Welcome to my home page!</h1> <?php include 'vars.php' ; echo \"I have a $color $car .\" ; ?> </body> </html> Include_once The include_once statement is similar to the include statement, except that it will only include the file once. If the file is already included, the include statement will not include it again. <!DOCTYPE html> <html> <body> <h1>Welcome to my home page!</h1> <p>Some text.</p> <p>Some more text.</p> <?php include_once 'footer.php' ; ?> </body> </html> PHP include vs. require The require statement is also used to include a file into the PHP code. However, there is one big difference between include and require; when a file is included with the include statement and PHP cannot find it, the script will continue to execute: <html> <body> <h1>Welcome to my home page!</h1> <?php include 'noFileExists.php' ; echo \"I have a $color $car .\" ; ?> </body> </html> If we do the same example using the require statement, the echo statement will not be executed because the script execution dies after the require statement returned a fatal error: <html> <body> <h1>Welcome to my home page!</h1> <?php require 'noFileExists.php' ; echo \"I have a $color $car .\" ; ?> </body> </html> require_once The require_once keyword is used to embed PHP code from another file. If the file is not found, a fatal error is thrown and the program stops. If the file was already included previously, this statement will not include it again. <!DOCTYPE html> <html> <body> <h1>Welcome to my home page!</h1> <p>Some text.</p> <p>Some more text.</p> <?php require_once 'footer.php' ; ?> </body> </html> Conclusion Use require when the file is required by the application. Use include when the file is not required and application should continue when file is not found.","title":"Include"},{"location":"Adv/phpInclude/#php-include-and-require-statements","text":"It is possible to insert the content of one PHP file into another PHP file (before the server executes it), with the include or require statement. The include and require statements are identical, except upon failure: require will produce a fatal error (E_COMPILE_ERROR) and stop the script include will only produce a warning (E_WARNING) and the script will continue So, if you want the execution to go on and show users the output, even if the include file is missing, use the include statement. Otherwise, in case of FrameWork, CMS, or a complex PHP application coding, always use the require statement to include a key file to the flow of execution. This will help avoid compromising your application's security and integrity, just in-case one key file is accidentally missing. Including files saves a lot of work. This means that you can create a standard header, footer, or menu file for all your web pages. Then, when the header needs to be updated, you can only update the header include file.","title":"PHP include and require Statements"},{"location":"Adv/phpInclude/#php-include-examples","text":"","title":"PHP include Examples"},{"location":"Adv/phpInclude/#example-1","text":"<html> <body> <h1>Welcome to my home page!</h1> <p>Some text.</p> <p>Some more text.</p> <?php include 'footer.php' ; ?> </body> </html>","title":"Example 1"},{"location":"Adv/phpInclude/#example-2","text":"Assume we have a standard menu file called \"menu.php\": <?php echo '<a href=\"/default.asp\">Home</a> - <a href=\"/html/default.asp\">HTML Tutorial</a> - <a href=\"/css/default.asp\">CSS Tutorial</a> - <a href=\"/js/default.asp\">JavaScript Tutorial</a> - <a href=\"default.asp\">PHP Tutorial</a>' ; ?> All pages in the Web site should use this menu file. Here is how it can be done (we are using a <'div> element so that the menu easily can be styled with CSS later): <html> <body> <div class=\"menu\"> <?php include 'menu.php' ; ?> </div> <h1>Welcome to my home page!</h1> <p>Some text.</p> <p>Some more text.</p> </body> </html>","title":"Example 2"},{"location":"Adv/phpInclude/#example-3","text":"Assume we have a file called \"vars.php\", with some variables defined: <?php $color = 'red' ; $car = 'BMW' ; ?> Then, if we include the \"vars.php\" file, the variables can be used in the calling file: <html> <body> <h1>Welcome to my home page!</h1> <?php include 'vars.php' ; echo \"I have a $color $car .\" ; ?> </body> </html>","title":"Example 3"},{"location":"Adv/phpInclude/#include_once","text":"The include_once statement is similar to the include statement, except that it will only include the file once. If the file is already included, the include statement will not include it again. <!DOCTYPE html> <html> <body> <h1>Welcome to my home page!</h1> <p>Some text.</p> <p>Some more text.</p> <?php include_once 'footer.php' ; ?> </body> </html>","title":"Include_once"},{"location":"Adv/phpInclude/#php-include-vs-require","text":"The require statement is also used to include a file into the PHP code. However, there is one big difference between include and require; when a file is included with the include statement and PHP cannot find it, the script will continue to execute: <html> <body> <h1>Welcome to my home page!</h1> <?php include 'noFileExists.php' ; echo \"I have a $color $car .\" ; ?> </body> </html> If we do the same example using the require statement, the echo statement will not be executed because the script execution dies after the require statement returned a fatal error: <html> <body> <h1>Welcome to my home page!</h1> <?php require 'noFileExists.php' ; echo \"I have a $color $car .\" ; ?> </body> </html>","title":"PHP include vs. require"},{"location":"Adv/phpInclude/#require_once","text":"The require_once keyword is used to embed PHP code from another file. If the file is not found, a fatal error is thrown and the program stops. If the file was already included previously, this statement will not include it again. <!DOCTYPE html> <html> <body> <h1>Welcome to my home page!</h1> <p>Some text.</p> <p>Some more text.</p> <?php require_once 'footer.php' ; ?> </body> </html>","title":"require_once"},{"location":"Adv/phpInclude/#conclusion","text":"Use require when the file is required by the application. Use include when the file is not required and application should continue when file is not found.","title":"Conclusion"},{"location":"Adv/phpMySql/","text":"MySQL is a database system used on the web MySQL is a database system that runs on a server MySQL is ideal for both small and large applications MySQL is very fast, reliable, and easy to use MySQL uses standard SQL MySQL compiles on a number of platforms MySQL is free to download and use MySQL is developed, distributed, and supported by Oracle Corporation MySQL is named after co-founder Monty Widenius's daughter: My The data in a MySQL database are stored in tables. A table is a collection of related data, and it consists of columns and rows. PHP + MySQL Database System PHP combined with MySQL are cross-platform (you can develop in Windows and serve on a Unix platform) PHP Connect to MySQL PHP 5 and later can work with a MySQL database using: MySQLi extension (the \"i\" stands for improved) PDO (PHP Data Objects) Earlier versions of PHP used the MySQL extension. However, this extension was deprecated in 2012. Should I Use MySQLi or PDO? If you need a short answer, it would be \"Whatever you like\". Both MySQLi and PDO have their advantages: PDO will work on 12 different database systems, whereas MySQLi will only work with MySQL databases. So, if you have to switch your project to use another database, PDO makes the process easy. You only have to change the connection string and a few queries. With MySQLi, you will need to rewrite the entire code - queries included. Both are object-oriented, but MySQLi also offers a procedural API. Both support Prepared Statements. Prepared Statements protect from SQL injection, and are very important for web application security. MySQLi Installation For Linux and Windows: The MySQLi extension is automatically installed in most cases, when php5 mysql package is installed. For installation details, go to: http://php.net/manual/en/mysqli.installation.php PDO Installation For installation details, go to: http://php.net/manual/en/pdo.installation.php Open a Connection to MySQL Before we can access data in the MySQL database, we need to be able to connect to the server: //Example (MySQLi Object-Oriented) <?php $servername = \"localhost\" ; $username = \"username\" ; $password = \"password\" ; // Create connection $conn = new mysqli ( $servername , $username , $password ); // Check connection if ( $conn -> connect_error ) { die ( \"Connection failed: \" . $conn -> connect_error ); } echo \"Connected successfully\" ; ?> Note on the object-oriented example above: $connect_error was broken until PHP 5.2.9 and 5.3.0. If you need to ensure compatibility with PHP versions prior to 5.2.9 and 5.3.0, use the following code instead: // Check connection if (mysqli_connect_error()) { die(\"Database connection failed: \" . mysqli_connect_error()); } //Example (MySQLi Procedural) <?php $servername = \"localhost\" ; $username = \"username\" ; $password = \"password\" ; // Create connection $conn = new mysqli ( $servername , $username , $password ); // Check connection if ( $conn -> connect_error ) { die ( \"Connection failed: \" . $conn -> connect_error ); } echo \"Connected successfully\" ; ?> //Example (PDO) <?php $servername = \"localhost\" ; $username = \"username\" ; $password = \"password\" ; try { $conn = new PDO ( \"mysql:host= $servername ;dbname=myDB\" , $username , $password ); // set the PDO error mode to exception $conn -> setAttribute ( PDO :: ATTR_ERRMODE , PDO :: ERRMODE_EXCEPTION ); echo \"Connected successfully\" ; } catch ( PDOException $e ) { echo \"Connection failed: \" . $e -> getMessage (); } ?> Note: In the PDO example above we have also specified a database (myDB). PDO require a valid database to connect to. If no database is specified, an exception is thrown. A great benefit of PDO is that it has an exception class to handle any problems that may occur in our database queries. If an exception is thrown within the try{ } block, the script stops executing and flows directly to the first catch(){ } block. Close Connection The connection will be closed automatically when the script ends. To close the connection before, use the following: //MySQLi Object-Oriented: <?php $conn -> close (); ?> //MySQLi Procedural: <?php mysqli_close ( $conn ); ?> //PDO: <?php $conn = null ; ?> MySQL Database Create Database //MySQLi Object-Oriented: <?php $servername = \"localhost\" ; $username = \"username\" ; $password = \"password\" ; // Create connection $conn = new mysqli ( $servername , $username , $password ); // Check connection if ( $conn -> connect_error ) { die ( \"Connection failed: \" . $conn -> connect_error ); } // Create database $sql = \"CREATE DATABASE myDB\" ; if ( $conn -> query ( $sql ) === TRUE ) { echo \"Database created successfully\" ; } else { echo \"Error creating database: \" . $conn -> error ; } $conn -> close (); ?> When you create a new database, you must only specify the first three arguments to the mysqli object (servername, username and password). If you have to use a specific port, add an empty string for the database-name argument, like this: new mysqli(\"localhost\", \"username\", \"password\", \"\", port). //MySQLi Procedural: <?php $servername = \"localhost\" ; $username = \"username\" ; $password = \"password\" ; // Create connection $conn = mysqli_connect ( $servername , $username , $password ); // Check connection if ( ! $conn ) { die ( \"Connection failed: \" . mysqli_connect_error ()); } // Create database $sql = \"CREATE DATABASE myDB\" ; if ( mysqli_query ( $conn , $sql )) { echo \"Database created successfully\" ; } else { echo \"Error creating database: \" . mysqli_error ( $conn ); } mysqli_close ( $conn ); ?> //PDO: <?php $servername = \"localhost\" ; $username = \"username\" ; $password = \"password\" ; try { $conn = new PDO ( \"mysql:host= $servername \" , $username , $password ); // set the PDO error mode to exception $conn -> setAttribute ( PDO :: ATTR_ERRMODE , PDO :: ERRMODE_EXCEPTION ); $sql = \"CREATE DATABASE myDBPDO\" ; // use exec() because no results are returned $conn -> exec ( $sql ); echo \"Database created successfully<br>\" ; } catch ( PDOException $e ) { echo $sql . \"<br>\" . $e -> getMessage (); } $conn = null ; ?> A great benefit of PDO is that it has exception class to handle any problems that may occur in our database queries. If an exception is thrown within the try{ } block, the script stops executing and flows directly to the first catch(){ } block. In the catch block above we echo the SQL statement and the generated error message. Create Table //MySQLi Object-Oriented: <?php $servername = \"localhost\" ; $username = \"username\" ; $password = \"password\" ; $dbname = \"myDB\" ; // Create connection $conn = new mysqli ( $servername , $username , $password , $dbname ); // Check connection if ( $conn -> connect_error ) { die ( \"Connection failed: \" . $conn -> connect_error ); } // sql to create table $sql = \"CREATE TABLE MyGuests ( id INT(6) UNSIGNED AUTO_INCREMENT PRIMARY KEY, firstname VARCHAR(30) NOT NULL, lastname VARCHAR(30) NOT NULL, email VARCHAR(50), reg_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP )\" ; if ( $conn -> query ( $sql ) === TRUE ) { echo \"Table MyGuests created successfully\" ; } else { echo \"Error creating table: \" . $conn -> error ; } $conn -> close (); ?> //MySQLi Procedural: <?php $servername = \"localhost\" ; $username = \"username\" ; $password = \"password\" ; $dbname = \"myDB\" ; // Create connection $conn = mysqli_connect ( $servername , $username , $password , $dbname ); // Check connection if ( ! $conn ) { die ( \"Connection failed: \" . mysqli_connect_error ()); } // sql to create table $sql = \"CREATE TABLE MyGuests ( id INT(6) UNSIGNED AUTO_INCREMENT PRIMARY KEY, firstname VARCHAR(30) NOT NULL, lastname VARCHAR(30) NOT NULL, email VARCHAR(50), reg_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP )\" ; if ( mysqli_query ( $conn , $sql )) { echo \"Table MyGuests created successfully\" ; } else { echo \"Error creating table: \" . mysqli_error ( $conn ); } mysqli_close ( $conn ); ?> //PDO: <?php $servername = \"localhost\" ; $username = \"username\" ; $password = \"password\" ; $dbname = \"myDBPDO\" ; try { $conn = new PDO ( \"mysql:host= $servername ;dbname= $dbname \" , $username , $password ); // set the PDO error mode to exception $conn -> setAttribute ( PDO :: ATTR_ERRMODE , PDO :: ERRMODE_EXCEPTION ); // sql to create table $sql = \"CREATE TABLE MyGuests ( id INT(6) UNSIGNED AUTO_INCREMENT PRIMARY KEY, firstname VARCHAR(30) NOT NULL, lastname VARCHAR(30) NOT NULL, email VARCHAR(50), reg_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP )\" ; // use exec() because no results are returned $conn -> exec ( $sql ); echo \"Table MyGuests created successfully\" ; } catch ( PDOException $e ) { echo $sql . \"<br>\" . $e -> getMessage (); } $conn = null ; ?> Insert Data //MySQLi Object-Oriented: <?php $servername = \"localhost\" ; $username = \"username\" ; $password = \"password\" ; $dbname = \"myDB\" ; // Create connection $conn = new mysqli ( $servername , $username , $password , $dbname ); // Check connection if ( $conn -> connect_error ) { die ( \"Connection failed: \" . $conn -> connect_error ); } $sql = \"INSERT INTO MyGuests (firstname, lastname, email) VALUES ('John', 'Doe', 'john@example.com')\" ; if ( $conn -> query ( $sql ) === TRUE ) { echo \"New record created successfully\" ; } else { echo \"Error: \" . $sql . \"<br>\" . $conn -> error ; } $conn -> close (); ?> //MySQLi Procedural: <?php $servername = \"localhost\" ; $username = \"username\" ; $password = \"password\" ; $dbname = \"myDB\" ; // Create connection $conn = mysqli_connect ( $servername , $username , $password , $dbname ); // Check connection if ( ! $conn ) { die ( \"Connection failed: \" . mysqli_connect_error ()); } $sql = \"INSERT INTO MyGuests (firstname, lastname, email) VALUES ('John', 'Doe', 'john@example.com')\" ; if ( mysqli_query ( $conn , $sql )) { echo \"New record created successfully\" ; } else { echo \"Error: \" . $sql . \"<br>\" . mysqli_error ( $conn ); } mysqli_close ( $conn ); ?> //PDO: <?php $servername = \"localhost\" ; $username = \"username\" ; $password = \"password\" ; $dbname = \"myDBPDO\" ; try { $conn = new PDO ( \"mysql:host= $servername ;dbname= $dbname \" , $username , $password ); // set the PDO error mode to exception $conn -> setAttribute ( PDO :: ATTR_ERRMODE , PDO :: ERRMODE_EXCEPTION ); $sql = \"INSERT INTO MyGuests (firstname, lastname, email) VALUES ('John', 'Doe', 'john@example.com')\" ; // use exec() because no results are returned $conn -> exec ( $sql ); echo \"New record created successfully\" ; } catch ( PDOException $e ) { echo $sql . \"<br>\" . $e -> getMessage (); } $conn = null ; ?> Get ID of The Last Inserted Record //MySQLi Object-Oriented: <?php $servername = \"localhost\" ; $username = \"username\" ; $password = \"password\" ; $dbname = \"myDB\" ; // Create connection $conn = new mysqli ( $servername , $username , $password , $dbname ); // Check connection if ( $conn -> connect_error ) { die ( \"Connection failed: \" . $conn -> connect_error ); } $sql = \"INSERT INTO MyGuests (firstname, lastname, email) VALUES ('John', 'Doe', 'john@example.com')\" ; if ( $conn -> query ( $sql ) === TRUE ) { $last_id = $conn -> insert_id ; echo \"New record created successfully. Last inserted ID is: \" . $last_id ; } else { echo \"Error: \" . $sql . \"<br>\" . $conn -> error ; } $conn -> close (); ?> //MySQLi Procedural: <?php $servername = \"localhost\" ; $username = \"username\" ; $password = \"password\" ; $dbname = \"myDB\" ; // Create connection $conn = mysqli_connect ( $servername , $username , $password , $dbname ); // Check connection if ( ! $conn ) { die ( \"Connection failed: \" . mysqli_connect_error ()); } $sql = \"INSERT INTO MyGuests (firstname, lastname, email) VALUES ('John', 'Doe', 'john@example.com')\" ; if ( mysqli_query ( $conn , $sql )) { $last_id = mysqli_insert_id ( $conn ); echo \"New record created successfully. Last inserted ID is: \" . $last_id ; } else { echo \"Error: \" . $sql . \"<br>\" . mysqli_error ( $conn ); } mysqli_close ( $conn ); ?> //PDO: <?php $servername = \"localhost\" ; $username = \"username\" ; $password = \"password\" ; $dbname = \"myDBPDO\" ; try { $conn = new PDO ( \"mysql:host= $servername ;dbname= $dbname \" , $username , $password ); // set the PDO error mode to exception $conn -> setAttribute ( PDO :: ATTR_ERRMODE , PDO :: ERRMODE_EXCEPTION ); $sql = \"INSERT INTO MyGuests (firstname, lastname, email) VALUES ('John', 'Doe', 'john@example.com')\" ; // use exec() because no results are returned $conn -> exec ( $sql ); $last_id = $conn -> lastInsertId (); echo \"New record created successfully. Last inserted ID is: \" . $last_id ; } catch ( PDOException $e ) { echo $sql . \"<br>\" . $e -> getMessage (); } $conn = null ; ?> Insert Multiple Records //MySQLi Object-Oriented: <?php $servername = \"localhost\" ; $username = \"username\" ; $password = \"password\" ; $dbname = \"myDB\" ; // Create connection $conn = new mysqli ( $servername , $username , $password , $dbname ); // Check connection if ( $conn -> connect_error ) { die ( \"Connection failed: \" . $conn -> connect_error ); } $sql = \"INSERT INTO MyGuests (firstname, lastname, email) VALUES ('John', 'Doe', 'john@example.com');\" ; $sql .= \"INSERT INTO MyGuests (firstname, lastname, email) VALUES ('Mary', 'Moe', 'mary@example.com');\" ; $sql .= \"INSERT INTO MyGuests (firstname, lastname, email) VALUES ('Julie', 'Dooley', 'julie@example.com')\" ; if ( $conn -> multi_query ( $sql ) === TRUE ) { echo \"New records created successfully\" ; } else { echo \"Error: \" . $sql . \"<br>\" . $conn -> error ; } $conn -> close (); ?> Note that each SQL statement must be separated by a semicolon. //MySQLi Procedural: <?php $servername = \"localhost\" ; $username = \"username\" ; $password = \"password\" ; $dbname = \"myDB\" ; // Create connection $conn = mysqli_connect ( $servername , $username , $password , $dbname ); // Check connection if ( ! $conn ) { die ( \"Connection failed: \" . mysqli_connect_error ()); } $sql = \"INSERT INTO MyGuests (firstname, lastname, email) VALUES ('John', 'Doe', 'john@example.com');\" ; $sql .= \"INSERT INTO MyGuests (firstname, lastname, email) VALUES ('Mary', 'Moe', 'mary@example.com');\" ; $sql .= \"INSERT INTO MyGuests (firstname, lastname, email) VALUES ('Julie', 'Dooley', 'julie@example.com')\" ; if ( mysqli_multi_query ( $conn , $sql )) { echo \"New records created successfully\" ; } else { echo \"Error: \" . $sql . \"<br>\" . mysqli_error ( $conn ); } mysqli_close ( $conn ); ?> //PDO: <?php $servername = \"localhost\" ; $username = \"username\" ; $password = \"password\" ; $dbname = \"myDBPDO\" ; try { $conn = new PDO ( \"mysql:host= $servername ;dbname= $dbname \" , $username , $password ); // set the PDO error mode to exception $conn -> setAttribute ( PDO :: ATTR_ERRMODE , PDO :: ERRMODE_EXCEPTION ); // begin the transaction $conn -> beginTransaction (); // our SQL statements $conn -> exec ( \"INSERT INTO MyGuests (firstname, lastname, email) VALUES ('John', 'Doe', 'john@example.com')\" ); $conn -> exec ( \"INSERT INTO MyGuests (firstname, lastname, email) VALUES ('Mary', 'Moe', 'mary@example.com')\" ); $conn -> exec ( \"INSERT INTO MyGuests (firstname, lastname, email) VALUES ('Julie', 'Dooley', 'julie@example.com')\" ); // commit the transaction $conn -> commit (); echo \"New records created successfully\" ; } catch ( PDOException $e ) { // roll back the transaction if something failed $conn -> rollback (); echo \"Error: \" . $e -> getMessage (); } $conn = null ; ?> Prepared Statements Prepared statements are very useful against SQL injections. A prepared statement is a feature used to execute the same (or similar) SQL statements repeatedly with high efficiency. Prepared statements basically work like this: Prepare: An SQL statement template is created and sent to the database. Certain values are left unspecified, called parameters (labeled \"?\"). Example: INSERT INTO MyGuests VALUES(?, ?, ?) The database parses, compiles, and performs query optimization on the SQL statement template, and stores the result without executing it Execute: At a later time, the application binds the values to the parameters, and the database executes the statement. The application may execute the statement as many times as it wants with different values Compared to executing SQL statements directly, prepared statements have three main advantages: Prepared statements reduce parsing time as the preparation on the query is done only once (although the statement is executed multiple times) Bound parameters minimize bandwidth to the server as you need send only the parameters each time, and not the whole query Prepared statements are very useful against SQL injections, because parameter values, which are transmitted later using a different protocol, need not be correctly escaped. If the original statement template is not derived from external input, SQL injection cannot occur. //MySQLi Object-Oriented: <?php $servername = \"localhost\" ; $username = \"username\" ; $password = \"password\" ; $dbname = \"myDB\" ; // Create connection $conn = new mysqli ( $servername , $username , $password , $dbname ); // Check connection if ( $conn -> connect_error ) { die ( \"Connection failed: \" . $conn -> connect_error ); } // prepare and bind $stmt = $conn -> prepare ( \"INSERT INTO MyGuests (firstname, lastname, email) VALUES (?, ?, ?)\" ); $stmt -> bind_param ( \"sss\" , $firstname , $lastname , $email ); // set parameters and execute $firstname = \"John\" ; $lastname = \"Doe\" ; $email = \"john@example.com\" ; $stmt -> execute (); $firstname = \"Mary\" ; $lastname = \"Moe\" ; $email = \"mary@example.com\" ; $stmt -> execute (); $firstname = \"Julie\" ; $lastname = \"Dooley\" ; $email = \"julie@example.com\" ; $stmt -> execute (); echo \"New records created successfully\" ; $stmt -> close (); $conn -> close (); ?> $stmt->bind_param(\"sss\", $firstname, $lastname, $email); This function binds the parameters to the SQL query and tells the database what the parameters are. The \"sss\" argument lists the types of data that the parameters are. The s character tells mysql that the parameter is a string. The argument may be one of four types: i - integer d - double s - string b - BLOB We must have one of these for each parameter. By telling mysql what type of data to expect, we minimize the risk of SQL injections. If we want to insert any data from external sources (like user input), it is very important that the data is sanitized and validated. //PDO: <?php $servername = \"localhost\" ; $username = \"username\" ; $password = \"password\" ; $dbname = \"myDBPDO\" ; try { $conn = new PDO ( \"mysql:host= $servername ;dbname= $dbname \" , $username , $password ); // set the PDO error mode to exception $conn -> setAttribute ( PDO :: ATTR_ERRMODE , PDO :: ERRMODE_EXCEPTION ); // prepare sql and bind parameters $stmt = $conn -> prepare ( \"INSERT INTO MyGuests (firstname, lastname, email) VALUES (:firstname, :lastname, :email)\" ); $stmt -> bindParam ( ':firstname' , $firstname ); $stmt -> bindParam ( ':lastname' , $lastname ); $stmt -> bindParam ( ':email' , $email ); // insert a row $firstname = \"John\" ; $lastname = \"Doe\" ; $email = \"john@example.com\" ; $stmt -> execute (); // insert another row $firstname = \"Mary\" ; $lastname = \"Moe\" ; $email = \"mary@example.com\" ; $stmt -> execute (); // insert another row $firstname = \"Julie\" ; $lastname = \"Dooley\" ; $email = \"julie@example.com\" ; $stmt -> execute (); echo \"New records created successfully\" ; } catch ( PDOException $e ) { echo \"Error: \" . $e -> getMessage (); } $conn = null ; ?> Select Data //MySQLi Object-Oriented: <?php $servername = \"localhost\" ; $username = \"username\" ; $password = \"password\" ; $dbname = \"myDB\" ; // Create connection $conn = new mysqli ( $servername , $username , $password , $dbname ); // Check connection if ( $conn -> connect_error ) { die ( \"Connection failed: \" . $conn -> connect_error ); } $sql = \"SELECT id, firstname, lastname FROM MyGuests\" ; $result = $conn -> query ( $sql ); if ( $result -> num_rows > 0 ) { // output data of each row while ( $row = $result -> fetch_assoc ()) { echo \"id: \" . $row [ \"id\" ] . \" - Name: \" . $row [ \"firstname\" ] . \" \" . $row [ \"lastname\" ] . \"<br>\" ; } } else { echo \"0 results\" ; } $conn -> close (); ?> //MySQLi Procedural: <?php $servername = \"localhost\" ; $username = \"username\" ; $password = \"password\" ; $dbname = \"myDB\" ; // Create connection $conn = mysqli_connect ( $servername , $username , $password , $dbname ); // Check connection if ( ! $conn ) { die ( \"Connection failed: \" . mysqli_connect_error ()); } $sql = \"SELECT id, firstname, lastname FROM MyGuests\" ; $result = mysqli_query ( $conn , $sql ); if ( mysqli_num_rows ( $result ) > 0 ) { // output data of each row while ( $row = mysqli_fetch_assoc ( $result )) { echo \"id: \" . $row [ \"id\" ] . \" - Name: \" . $row [ \"firstname\" ] . \" \" . $row [ \"lastname\" ] . \"<br>\" ; } } else { echo \"0 results\" ; } mysqli_close ( $conn ); ?> //PDO: <?php echo \"<table style='border: solid 1px black;'>\" ; echo \"<tr><th>Id</th><th>Firstname</th><th>Lastname</th></tr>\" ; class TableRows extends RecursiveIteratorIterator { function __construct ( $it ) { parent :: __construct ( $it , self :: LEAVES_ONLY ); } function current () { return \"<td style='width:150px;border:1px solid black;'>\" . parent :: current () . \"</td>\" ; } function beginChildren () { echo \"<tr>\" ; } function endChildren () { echo \"</tr>\" . \" \\n \" ; } } $servername = \"localhost\" ; $username = \"username\" ; $password = \"password\" ; $dbname = \"myDBPDO\" ; try { $conn = new PDO ( \"mysql:host= $servername ;dbname= $dbname \" , $username , $password ); $conn -> setAttribute ( PDO :: ATTR_ERRMODE , PDO :: ERRMODE_EXCEPTION ); $stmt = $conn -> prepare ( \"SELECT id, firstname, lastname FROM MyGuests\" ); $stmt -> execute (); // set the resulting array to associative $result = $stmt -> setFetchMode ( PDO :: FETCH_ASSOC ); foreach ( new TableRows ( new RecursiveArrayIterator ( $stmt -> fetchAll ())) as $k => $v ) { echo $v ; } } catch ( PDOException $e ) { echo \"Error: \" . $e -> getMessage (); } $conn = null ; echo \"</table>\" ; ?> Select and Filter Data //MySQLi Object-Oriented: <?php $servername = \"localhost\" ; $username = \"username\" ; $password = \"password\" ; $dbname = \"myDB\" ; // Create connection $conn = new mysqli ( $servername , $username , $password , $dbname ); // Check connection if ( $conn -> connect_error ) { die ( \"Connection failed: \" . $conn -> connect_error ); } $sql = \"SELECT id, firstname, lastname FROM MyGuests WHERE lastname='Doe'\" ; $result = $conn -> query ( $sql ); if ( $result -> num_rows > 0 ) { // output data of each row while ( $row = $result -> fetch_assoc ()) { echo \"id: \" . $row [ \"id\" ] . \" - Name: \" . $row [ \"firstname\" ] . \" \" . $row [ \"lastname\" ] . \"<br>\" ; } } else { echo \"0 results\" ; } $conn -> close (); ?> //MySQLi Procedural: <?php $servername = \"localhost\" ; $username = \"username\" ; $password = \"password\" ; $dbname = \"myDB\" ; // Create connection $conn = mysqli_connect ( $servername , $username , $password , $dbname ); // Check connection if ( ! $conn ) { die ( \"Connection failed: \" . mysqli_connect_error ()); } $sql = \"SELECT id, firstname, lastname FROM MyGuests WHERE lastname='Doe'\" ; $result = mysqli_query ( $conn , $sql ); if ( mysqli_num_rows ( $result ) > 0 ) { // output data of each row while ( $row = mysqli_fetch_assoc ( $result )) { echo \"id: \" . $row [ \"id\" ] . \" - Name: \" . $row [ \"firstname\" ] . \" \" . $row [ \"lastname\" ] . \"<br>\" ; } } else { echo \"0 results\" ; } mysqli_close ( $conn ); ?> //PDO: <?php echo \"<table style='border: solid 1px black;'>\" ; echo \"<tr><th>Id</th><th>Firstname</th><th>Lastname</th></tr>\" ; class TableRows extends RecursiveIteratorIterator { function __construct ( $it ) { parent :: __construct ( $it , self :: LEAVES_ONLY ); } function current () { return \"<td style='width:150px;border:1px solid black;'>\" . parent :: current () . \"</td>\" ; } function beginChildren () { echo \"<tr>\" ; } function endChildren () { echo \"</tr>\" . \" \\n \" ; } } $servername = \"localhost\" ; $username = \"username\" ; $password = \"password\" ; $dbname = \"myDBPDO\" ; try { $conn = new PDO ( \"mysql:host= $servername ;dbname= $dbname \" , $username , $password ); $conn -> setAttribute ( PDO :: ATTR_ERRMODE , PDO :: ERRMODE_EXCEPTION ); $stmt = $conn -> prepare ( \"SELECT id, firstname, lastname FROM MyGuests WHERE lastname='Doe'\" ); $stmt -> execute (); // set the resulting array to associative $result = $stmt -> setFetchMode ( PDO :: FETCH_ASSOC ); foreach ( new TableRows ( new RecursiveArrayIterator ( $stmt -> fetchAll ())) as $k => $v ) { echo $v ; } } catch ( PDOException $e ) { echo \"Error: \" . $e -> getMessage (); } $conn = null ; echo \"</table>\" ; ?> Select and Order Data //MySQLi Object-Oriented: <?php $servername = \"localhost\" ; $username = \"username\" ; $password = \"password\" ; $dbname = \"myDB\" ; // Create connection $conn = new mysqli ( $servername , $username , $password , $dbname ); // Check connection if ( $conn -> connect_error ) { die ( \"Connection failed: \" . $conn -> connect_error ); } $sql = \"SELECT id, firstname, lastname FROM MyGuests ORDER BY lastname\" ; $result = $conn -> query ( $sql ); if ( $result -> num_rows > 0 ) { // output data of each row while ( $row = $result -> fetch_assoc ()) { echo \"id: \" . $row [ \"id\" ] . \" - Name: \" . $row [ \"firstname\" ] . \" \" . $row [ \"lastname\" ] . \"<br>\" ; } } else { echo \"0 results\" ; } $conn -> close (); ?> //MySQLi Procedural: <?php $servername = \"localhost\" ; $username = \"username\" ; $password = \"password\" ; $dbname = \"myDB\" ; // Create connection $conn = mysqli_connect ( $servername , $username , $password , $dbname ); // Check connection if ( ! $conn ) { die ( \"Connection failed: \" . mysqli_connect_error ()); } $sql = \"SELECT id, firstname, lastname FROM MyGuests ORDER BY lastname\" ; $result = mysqli_query ( $conn , $sql ); if ( mysqli_num_rows ( $result ) > 0 ) { // output data of each row while ( $row = mysqli_fetch_assoc ( $result )) { echo \"id: \" . $row [ \"id\" ] . \" - Name: \" . $row [ \"firstname\" ] . \" \" . $row [ \"lastname\" ] . \"<br>\" ; } } else { echo \"0 results\" ; } mysqli_close ( $conn ); ?> //PDO: <?php echo \"<table style='border: solid 1px black;'>\" ; echo \"<tr><th>Id</th><th>Firstname</th><th>Lastname</th></tr>\" ; class TableRows extends RecursiveIteratorIterator { function __construct ( $it ) { parent :: __construct ( $it , self :: LEAVES_ONLY ); } function current () { return \"<td style='width:150px;border:1px solid black;'>\" . parent :: current () . \"</td>\" ; } function beginChildren () { echo \"<tr>\" ; } function endChildren () { echo \"</tr>\" . \" \\n \" ; } } $servername = \"localhost\" ; $username = \"username\" ; $password = \"password\" ; $dbname = \"myDBPDO\" ; try { $conn = new PDO ( \"mysql:host= $servername ;dbname= $dbname \" , $username , $password ); $conn -> setAttribute ( PDO :: ATTR_ERRMODE , PDO :: ERRMODE_EXCEPTION ); $stmt = $conn -> prepare ( \"SELECT id, firstname, lastname FROM MyGuests ORDER BY lastname\" ); $stmt -> execute (); // set the resulting array to associative $result = $stmt -> setFetchMode ( PDO :: FETCH_ASSOC ); foreach ( new TableRows ( new RecursiveArrayIterator ( $stmt -> fetchAll ())) as $k => $v ) { echo $v ; } } catch ( PDOException $e ) { echo \"Error: \" . $e -> getMessage (); } $conn = null ; echo \"</table>\" ; ?> Limit Data MySQL provides a LIMIT clause that is used to specify the number of records to return. The LIMIT clause makes it easy to code multi page results or pagination with SQL, and is very useful on large tables. Returning a large number of records can impact on performance. Assume we wish to select all records from 1 - 30 (inclusive) from a table called \"Orders\". The SQL query would then look like this: $sql = \"SELECT * FROM Orders LIMIT 30\"; When the SQL query above is run, it will return the first 30 records. What if we want to select records 16 - 25 (inclusive)? Mysql also provides a way to handle this: by using OFFSET. The SQL query below says \"return only 10 records, start on record 16 (OFFSET 15)\": $sql = \"SELECT * FROM Orders LIMIT 10 OFFSET 15\"; You could also use a shorter syntax to achieve the same result: $sql = \"SELECT * FROM Orders LIMIT 15, 10\"; Notice that the numbers are reversed when you use a comma. Delete Data //MySQLi Object-Oriented: <?php $servername = \"localhost\" ; $username = \"username\" ; $password = \"password\" ; $dbname = \"myDB\" ; // Create connection $conn = new mysqli ( $servername , $username , $password , $dbname ); // Check connection if ( $conn -> connect_error ) { die ( \"Connection failed: \" . $conn -> connect_error ); } // sql to delete a record $sql = \"DELETE FROM MyGuests WHERE id=3\" ; if ( $conn -> query ( $sql ) === TRUE ) { echo \"Record deleted successfully\" ; } else { echo \"Error deleting record: \" . $conn -> error ; } $conn -> close (); ?> //MySQLi Procedural: <?php $servername = \"localhost\" ; $username = \"username\" ; $password = \"password\" ; $dbname = \"myDB\" ; // Create connection $conn = mysqli_connect ( $servername , $username , $password , $dbname ); // Check connection if ( ! $conn ) { die ( \"Connection failed: \" . mysqli_connect_error ()); } // sql to delete a record $sql = \"DELETE FROM MyGuests WHERE id=3\" ; if ( mysqli_query ( $conn , $sql )) { echo \"Record deleted successfully\" ; } else { echo \"Error deleting record: \" . mysqli_error ( $conn ); } mysqli_close ( $conn ); ?> //PDO: <?php $servername = \"localhost\" ; $username = \"username\" ; $password = \"password\" ; $dbname = \"myDBPDO\" ; try { $conn = new PDO ( \"mysql:host= $servername ;dbname= $dbname \" , $username , $password ); // set the PDO error mode to exception $conn -> setAttribute ( PDO :: ATTR_ERRMODE , PDO :: ERRMODE_EXCEPTION ); // sql to delete a record $sql = \"DELETE FROM MyGuests WHERE id=3\" ; // use exec() because no results are returned $conn -> exec ( $sql ); echo \"Record deleted successfully\" ; } catch ( PDOException $e ) { echo $sql . \"<br>\" . $e -> getMessage (); } $conn = null ; ?> Update Data //MySQLi Object-Oriented: <?php $servername = \"localhost\" ; $username = \"username\" ; $password = \"password\" ; $dbname = \"myDB\" ; // Create connection $conn = new mysqli ( $servername , $username , $password , $dbname ); // Check connection if ( $conn -> connect_error ) { die ( \"Connection failed: \" . $conn -> connect_error ); } $sql = \"UPDATE MyGuests SET lastname='Doe' WHERE id=2\" ; if ( $conn -> query ( $sql ) === TRUE ) { echo \"Record updated successfully\" ; } else { echo \"Error updating record: \" . $conn -> error ; } $conn -> close (); ?> //MySQLi Procedural: <?php $servername = \"localhost\" ; $username = \"username\" ; $password = \"password\" ; $dbname = \"myDB\" ; // Create connection $conn = mysqli_connect ( $servername , $username , $password , $dbname ); // Check connection if ( ! $conn ) { die ( \"Connection failed: \" . mysqli_connect_error ()); } $sql = \"UPDATE MyGuests SET lastname='Doe' WHERE id=2\" ; if ( mysqli_query ( $conn , $sql )) { echo \"Record updated successfully\" ; } else { echo \"Error updating record: \" . mysqli_error ( $conn ); } mysqli_close ( $conn ); ?> //PDO: <?php $servername = \"localhost\" ; $username = \"username\" ; $password = \"password\" ; $dbname = \"myDBPDO\" ; try { $conn = new PDO ( \"mysql:host= $servername ;dbname= $dbname \" , $username , $password ); // set the PDO error mode to exception $conn -> setAttribute ( PDO :: ATTR_ERRMODE , PDO :: ERRMODE_EXCEPTION ); $sql = \"UPDATE MyGuests SET lastname='Doe' WHERE id=2\" ; // Prepare statement $stmt = $conn -> prepare ( $sql ); // execute the query $stmt -> execute (); // echo a message to say the UPDATE succeeded echo $stmt -> rowCount () . \" records UPDATED successfully\" ; } catch ( PDOException $e ) { echo $sql . \"<br>\" . $e -> getMessage (); } $conn = null ; ?>","title":"MySQL"},{"location":"Adv/phpMySql/#php-connect-to-mysql","text":"PHP 5 and later can work with a MySQL database using: MySQLi extension (the \"i\" stands for improved) PDO (PHP Data Objects) Earlier versions of PHP used the MySQL extension. However, this extension was deprecated in 2012.","title":"PHP Connect to MySQL"},{"location":"Adv/phpMySql/#should-i-use-mysqli-or-pdo","text":"If you need a short answer, it would be \"Whatever you like\". Both MySQLi and PDO have their advantages: PDO will work on 12 different database systems, whereas MySQLi will only work with MySQL databases. So, if you have to switch your project to use another database, PDO makes the process easy. You only have to change the connection string and a few queries. With MySQLi, you will need to rewrite the entire code - queries included. Both are object-oriented, but MySQLi also offers a procedural API. Both support Prepared Statements. Prepared Statements protect from SQL injection, and are very important for web application security.","title":"Should I Use MySQLi or PDO?"},{"location":"Adv/phpMySql/#mysqli-installation","text":"For Linux and Windows: The MySQLi extension is automatically installed in most cases, when php5 mysql package is installed. For installation details, go to: http://php.net/manual/en/mysqli.installation.php","title":"MySQLi Installation"},{"location":"Adv/phpMySql/#pdo-installation","text":"For installation details, go to: http://php.net/manual/en/pdo.installation.php","title":"PDO Installation"},{"location":"Adv/phpMySql/#open-a-connection-to-mysql","text":"Before we can access data in the MySQL database, we need to be able to connect to the server: //Example (MySQLi Object-Oriented) <?php $servername = \"localhost\" ; $username = \"username\" ; $password = \"password\" ; // Create connection $conn = new mysqli ( $servername , $username , $password ); // Check connection if ( $conn -> connect_error ) { die ( \"Connection failed: \" . $conn -> connect_error ); } echo \"Connected successfully\" ; ?> Note on the object-oriented example above: $connect_error was broken until PHP 5.2.9 and 5.3.0. If you need to ensure compatibility with PHP versions prior to 5.2.9 and 5.3.0, use the following code instead: // Check connection if (mysqli_connect_error()) { die(\"Database connection failed: \" . mysqli_connect_error()); } //Example (MySQLi Procedural) <?php $servername = \"localhost\" ; $username = \"username\" ; $password = \"password\" ; // Create connection $conn = new mysqli ( $servername , $username , $password ); // Check connection if ( $conn -> connect_error ) { die ( \"Connection failed: \" . $conn -> connect_error ); } echo \"Connected successfully\" ; ?> //Example (PDO) <?php $servername = \"localhost\" ; $username = \"username\" ; $password = \"password\" ; try { $conn = new PDO ( \"mysql:host= $servername ;dbname=myDB\" , $username , $password ); // set the PDO error mode to exception $conn -> setAttribute ( PDO :: ATTR_ERRMODE , PDO :: ERRMODE_EXCEPTION ); echo \"Connected successfully\" ; } catch ( PDOException $e ) { echo \"Connection failed: \" . $e -> getMessage (); } ?> Note: In the PDO example above we have also specified a database (myDB). PDO require a valid database to connect to. If no database is specified, an exception is thrown. A great benefit of PDO is that it has an exception class to handle any problems that may occur in our database queries. If an exception is thrown within the try{ } block, the script stops executing and flows directly to the first catch(){ } block.","title":"Open a Connection to MySQL"},{"location":"Adv/phpMySql/#close-connection","text":"The connection will be closed automatically when the script ends. To close the connection before, use the following: //MySQLi Object-Oriented: <?php $conn -> close (); ?> //MySQLi Procedural: <?php mysqli_close ( $conn ); ?> //PDO: <?php $conn = null ; ?>","title":"Close Connection"},{"location":"Adv/phpMySql/#mysql-database","text":"","title":"MySQL Database"},{"location":"Adv/phpMySql/#create-database","text":"//MySQLi Object-Oriented: <?php $servername = \"localhost\" ; $username = \"username\" ; $password = \"password\" ; // Create connection $conn = new mysqli ( $servername , $username , $password ); // Check connection if ( $conn -> connect_error ) { die ( \"Connection failed: \" . $conn -> connect_error ); } // Create database $sql = \"CREATE DATABASE myDB\" ; if ( $conn -> query ( $sql ) === TRUE ) { echo \"Database created successfully\" ; } else { echo \"Error creating database: \" . $conn -> error ; } $conn -> close (); ?> When you create a new database, you must only specify the first three arguments to the mysqli object (servername, username and password). If you have to use a specific port, add an empty string for the database-name argument, like this: new mysqli(\"localhost\", \"username\", \"password\", \"\", port). //MySQLi Procedural: <?php $servername = \"localhost\" ; $username = \"username\" ; $password = \"password\" ; // Create connection $conn = mysqli_connect ( $servername , $username , $password ); // Check connection if ( ! $conn ) { die ( \"Connection failed: \" . mysqli_connect_error ()); } // Create database $sql = \"CREATE DATABASE myDB\" ; if ( mysqli_query ( $conn , $sql )) { echo \"Database created successfully\" ; } else { echo \"Error creating database: \" . mysqli_error ( $conn ); } mysqli_close ( $conn ); ?> //PDO: <?php $servername = \"localhost\" ; $username = \"username\" ; $password = \"password\" ; try { $conn = new PDO ( \"mysql:host= $servername \" , $username , $password ); // set the PDO error mode to exception $conn -> setAttribute ( PDO :: ATTR_ERRMODE , PDO :: ERRMODE_EXCEPTION ); $sql = \"CREATE DATABASE myDBPDO\" ; // use exec() because no results are returned $conn -> exec ( $sql ); echo \"Database created successfully<br>\" ; } catch ( PDOException $e ) { echo $sql . \"<br>\" . $e -> getMessage (); } $conn = null ; ?> A great benefit of PDO is that it has exception class to handle any problems that may occur in our database queries. If an exception is thrown within the try{ } block, the script stops executing and flows directly to the first catch(){ } block. In the catch block above we echo the SQL statement and the generated error message.","title":"Create Database"},{"location":"Adv/phpMySql/#create-table","text":"//MySQLi Object-Oriented: <?php $servername = \"localhost\" ; $username = \"username\" ; $password = \"password\" ; $dbname = \"myDB\" ; // Create connection $conn = new mysqli ( $servername , $username , $password , $dbname ); // Check connection if ( $conn -> connect_error ) { die ( \"Connection failed: \" . $conn -> connect_error ); } // sql to create table $sql = \"CREATE TABLE MyGuests ( id INT(6) UNSIGNED AUTO_INCREMENT PRIMARY KEY, firstname VARCHAR(30) NOT NULL, lastname VARCHAR(30) NOT NULL, email VARCHAR(50), reg_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP )\" ; if ( $conn -> query ( $sql ) === TRUE ) { echo \"Table MyGuests created successfully\" ; } else { echo \"Error creating table: \" . $conn -> error ; } $conn -> close (); ?> //MySQLi Procedural: <?php $servername = \"localhost\" ; $username = \"username\" ; $password = \"password\" ; $dbname = \"myDB\" ; // Create connection $conn = mysqli_connect ( $servername , $username , $password , $dbname ); // Check connection if ( ! $conn ) { die ( \"Connection failed: \" . mysqli_connect_error ()); } // sql to create table $sql = \"CREATE TABLE MyGuests ( id INT(6) UNSIGNED AUTO_INCREMENT PRIMARY KEY, firstname VARCHAR(30) NOT NULL, lastname VARCHAR(30) NOT NULL, email VARCHAR(50), reg_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP )\" ; if ( mysqli_query ( $conn , $sql )) { echo \"Table MyGuests created successfully\" ; } else { echo \"Error creating table: \" . mysqli_error ( $conn ); } mysqli_close ( $conn ); ?> //PDO: <?php $servername = \"localhost\" ; $username = \"username\" ; $password = \"password\" ; $dbname = \"myDBPDO\" ; try { $conn = new PDO ( \"mysql:host= $servername ;dbname= $dbname \" , $username , $password ); // set the PDO error mode to exception $conn -> setAttribute ( PDO :: ATTR_ERRMODE , PDO :: ERRMODE_EXCEPTION ); // sql to create table $sql = \"CREATE TABLE MyGuests ( id INT(6) UNSIGNED AUTO_INCREMENT PRIMARY KEY, firstname VARCHAR(30) NOT NULL, lastname VARCHAR(30) NOT NULL, email VARCHAR(50), reg_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP )\" ; // use exec() because no results are returned $conn -> exec ( $sql ); echo \"Table MyGuests created successfully\" ; } catch ( PDOException $e ) { echo $sql . \"<br>\" . $e -> getMessage (); } $conn = null ; ?>","title":"Create Table"},{"location":"Adv/phpMySql/#insert-data","text":"//MySQLi Object-Oriented: <?php $servername = \"localhost\" ; $username = \"username\" ; $password = \"password\" ; $dbname = \"myDB\" ; // Create connection $conn = new mysqli ( $servername , $username , $password , $dbname ); // Check connection if ( $conn -> connect_error ) { die ( \"Connection failed: \" . $conn -> connect_error ); } $sql = \"INSERT INTO MyGuests (firstname, lastname, email) VALUES ('John', 'Doe', 'john@example.com')\" ; if ( $conn -> query ( $sql ) === TRUE ) { echo \"New record created successfully\" ; } else { echo \"Error: \" . $sql . \"<br>\" . $conn -> error ; } $conn -> close (); ?> //MySQLi Procedural: <?php $servername = \"localhost\" ; $username = \"username\" ; $password = \"password\" ; $dbname = \"myDB\" ; // Create connection $conn = mysqli_connect ( $servername , $username , $password , $dbname ); // Check connection if ( ! $conn ) { die ( \"Connection failed: \" . mysqli_connect_error ()); } $sql = \"INSERT INTO MyGuests (firstname, lastname, email) VALUES ('John', 'Doe', 'john@example.com')\" ; if ( mysqli_query ( $conn , $sql )) { echo \"New record created successfully\" ; } else { echo \"Error: \" . $sql . \"<br>\" . mysqli_error ( $conn ); } mysqli_close ( $conn ); ?> //PDO: <?php $servername = \"localhost\" ; $username = \"username\" ; $password = \"password\" ; $dbname = \"myDBPDO\" ; try { $conn = new PDO ( \"mysql:host= $servername ;dbname= $dbname \" , $username , $password ); // set the PDO error mode to exception $conn -> setAttribute ( PDO :: ATTR_ERRMODE , PDO :: ERRMODE_EXCEPTION ); $sql = \"INSERT INTO MyGuests (firstname, lastname, email) VALUES ('John', 'Doe', 'john@example.com')\" ; // use exec() because no results are returned $conn -> exec ( $sql ); echo \"New record created successfully\" ; } catch ( PDOException $e ) { echo $sql . \"<br>\" . $e -> getMessage (); } $conn = null ; ?>","title":"Insert Data"},{"location":"Adv/phpMySql/#get-id-of-the-last-inserted-record","text":"//MySQLi Object-Oriented: <?php $servername = \"localhost\" ; $username = \"username\" ; $password = \"password\" ; $dbname = \"myDB\" ; // Create connection $conn = new mysqli ( $servername , $username , $password , $dbname ); // Check connection if ( $conn -> connect_error ) { die ( \"Connection failed: \" . $conn -> connect_error ); } $sql = \"INSERT INTO MyGuests (firstname, lastname, email) VALUES ('John', 'Doe', 'john@example.com')\" ; if ( $conn -> query ( $sql ) === TRUE ) { $last_id = $conn -> insert_id ; echo \"New record created successfully. Last inserted ID is: \" . $last_id ; } else { echo \"Error: \" . $sql . \"<br>\" . $conn -> error ; } $conn -> close (); ?> //MySQLi Procedural: <?php $servername = \"localhost\" ; $username = \"username\" ; $password = \"password\" ; $dbname = \"myDB\" ; // Create connection $conn = mysqli_connect ( $servername , $username , $password , $dbname ); // Check connection if ( ! $conn ) { die ( \"Connection failed: \" . mysqli_connect_error ()); } $sql = \"INSERT INTO MyGuests (firstname, lastname, email) VALUES ('John', 'Doe', 'john@example.com')\" ; if ( mysqli_query ( $conn , $sql )) { $last_id = mysqli_insert_id ( $conn ); echo \"New record created successfully. Last inserted ID is: \" . $last_id ; } else { echo \"Error: \" . $sql . \"<br>\" . mysqli_error ( $conn ); } mysqli_close ( $conn ); ?> //PDO: <?php $servername = \"localhost\" ; $username = \"username\" ; $password = \"password\" ; $dbname = \"myDBPDO\" ; try { $conn = new PDO ( \"mysql:host= $servername ;dbname= $dbname \" , $username , $password ); // set the PDO error mode to exception $conn -> setAttribute ( PDO :: ATTR_ERRMODE , PDO :: ERRMODE_EXCEPTION ); $sql = \"INSERT INTO MyGuests (firstname, lastname, email) VALUES ('John', 'Doe', 'john@example.com')\" ; // use exec() because no results are returned $conn -> exec ( $sql ); $last_id = $conn -> lastInsertId (); echo \"New record created successfully. Last inserted ID is: \" . $last_id ; } catch ( PDOException $e ) { echo $sql . \"<br>\" . $e -> getMessage (); } $conn = null ; ?>","title":"Get ID of The Last Inserted Record"},{"location":"Adv/phpMySql/#insert-multiple-records","text":"//MySQLi Object-Oriented: <?php $servername = \"localhost\" ; $username = \"username\" ; $password = \"password\" ; $dbname = \"myDB\" ; // Create connection $conn = new mysqli ( $servername , $username , $password , $dbname ); // Check connection if ( $conn -> connect_error ) { die ( \"Connection failed: \" . $conn -> connect_error ); } $sql = \"INSERT INTO MyGuests (firstname, lastname, email) VALUES ('John', 'Doe', 'john@example.com');\" ; $sql .= \"INSERT INTO MyGuests (firstname, lastname, email) VALUES ('Mary', 'Moe', 'mary@example.com');\" ; $sql .= \"INSERT INTO MyGuests (firstname, lastname, email) VALUES ('Julie', 'Dooley', 'julie@example.com')\" ; if ( $conn -> multi_query ( $sql ) === TRUE ) { echo \"New records created successfully\" ; } else { echo \"Error: \" . $sql . \"<br>\" . $conn -> error ; } $conn -> close (); ?> Note that each SQL statement must be separated by a semicolon. //MySQLi Procedural: <?php $servername = \"localhost\" ; $username = \"username\" ; $password = \"password\" ; $dbname = \"myDB\" ; // Create connection $conn = mysqli_connect ( $servername , $username , $password , $dbname ); // Check connection if ( ! $conn ) { die ( \"Connection failed: \" . mysqli_connect_error ()); } $sql = \"INSERT INTO MyGuests (firstname, lastname, email) VALUES ('John', 'Doe', 'john@example.com');\" ; $sql .= \"INSERT INTO MyGuests (firstname, lastname, email) VALUES ('Mary', 'Moe', 'mary@example.com');\" ; $sql .= \"INSERT INTO MyGuests (firstname, lastname, email) VALUES ('Julie', 'Dooley', 'julie@example.com')\" ; if ( mysqli_multi_query ( $conn , $sql )) { echo \"New records created successfully\" ; } else { echo \"Error: \" . $sql . \"<br>\" . mysqli_error ( $conn ); } mysqli_close ( $conn ); ?> //PDO: <?php $servername = \"localhost\" ; $username = \"username\" ; $password = \"password\" ; $dbname = \"myDBPDO\" ; try { $conn = new PDO ( \"mysql:host= $servername ;dbname= $dbname \" , $username , $password ); // set the PDO error mode to exception $conn -> setAttribute ( PDO :: ATTR_ERRMODE , PDO :: ERRMODE_EXCEPTION ); // begin the transaction $conn -> beginTransaction (); // our SQL statements $conn -> exec ( \"INSERT INTO MyGuests (firstname, lastname, email) VALUES ('John', 'Doe', 'john@example.com')\" ); $conn -> exec ( \"INSERT INTO MyGuests (firstname, lastname, email) VALUES ('Mary', 'Moe', 'mary@example.com')\" ); $conn -> exec ( \"INSERT INTO MyGuests (firstname, lastname, email) VALUES ('Julie', 'Dooley', 'julie@example.com')\" ); // commit the transaction $conn -> commit (); echo \"New records created successfully\" ; } catch ( PDOException $e ) { // roll back the transaction if something failed $conn -> rollback (); echo \"Error: \" . $e -> getMessage (); } $conn = null ; ?>","title":"Insert Multiple Records"},{"location":"Adv/phpMySql/#prepared-statements","text":"Prepared statements are very useful against SQL injections. A prepared statement is a feature used to execute the same (or similar) SQL statements repeatedly with high efficiency. Prepared statements basically work like this: Prepare: An SQL statement template is created and sent to the database. Certain values are left unspecified, called parameters (labeled \"?\"). Example: INSERT INTO MyGuests VALUES(?, ?, ?) The database parses, compiles, and performs query optimization on the SQL statement template, and stores the result without executing it Execute: At a later time, the application binds the values to the parameters, and the database executes the statement. The application may execute the statement as many times as it wants with different values Compared to executing SQL statements directly, prepared statements have three main advantages: Prepared statements reduce parsing time as the preparation on the query is done only once (although the statement is executed multiple times) Bound parameters minimize bandwidth to the server as you need send only the parameters each time, and not the whole query Prepared statements are very useful against SQL injections, because parameter values, which are transmitted later using a different protocol, need not be correctly escaped. If the original statement template is not derived from external input, SQL injection cannot occur. //MySQLi Object-Oriented: <?php $servername = \"localhost\" ; $username = \"username\" ; $password = \"password\" ; $dbname = \"myDB\" ; // Create connection $conn = new mysqli ( $servername , $username , $password , $dbname ); // Check connection if ( $conn -> connect_error ) { die ( \"Connection failed: \" . $conn -> connect_error ); } // prepare and bind $stmt = $conn -> prepare ( \"INSERT INTO MyGuests (firstname, lastname, email) VALUES (?, ?, ?)\" ); $stmt -> bind_param ( \"sss\" , $firstname , $lastname , $email ); // set parameters and execute $firstname = \"John\" ; $lastname = \"Doe\" ; $email = \"john@example.com\" ; $stmt -> execute (); $firstname = \"Mary\" ; $lastname = \"Moe\" ; $email = \"mary@example.com\" ; $stmt -> execute (); $firstname = \"Julie\" ; $lastname = \"Dooley\" ; $email = \"julie@example.com\" ; $stmt -> execute (); echo \"New records created successfully\" ; $stmt -> close (); $conn -> close (); ?> $stmt->bind_param(\"sss\", $firstname, $lastname, $email); This function binds the parameters to the SQL query and tells the database what the parameters are. The \"sss\" argument lists the types of data that the parameters are. The s character tells mysql that the parameter is a string. The argument may be one of four types: i - integer d - double s - string b - BLOB We must have one of these for each parameter. By telling mysql what type of data to expect, we minimize the risk of SQL injections. If we want to insert any data from external sources (like user input), it is very important that the data is sanitized and validated. //PDO: <?php $servername = \"localhost\" ; $username = \"username\" ; $password = \"password\" ; $dbname = \"myDBPDO\" ; try { $conn = new PDO ( \"mysql:host= $servername ;dbname= $dbname \" , $username , $password ); // set the PDO error mode to exception $conn -> setAttribute ( PDO :: ATTR_ERRMODE , PDO :: ERRMODE_EXCEPTION ); // prepare sql and bind parameters $stmt = $conn -> prepare ( \"INSERT INTO MyGuests (firstname, lastname, email) VALUES (:firstname, :lastname, :email)\" ); $stmt -> bindParam ( ':firstname' , $firstname ); $stmt -> bindParam ( ':lastname' , $lastname ); $stmt -> bindParam ( ':email' , $email ); // insert a row $firstname = \"John\" ; $lastname = \"Doe\" ; $email = \"john@example.com\" ; $stmt -> execute (); // insert another row $firstname = \"Mary\" ; $lastname = \"Moe\" ; $email = \"mary@example.com\" ; $stmt -> execute (); // insert another row $firstname = \"Julie\" ; $lastname = \"Dooley\" ; $email = \"julie@example.com\" ; $stmt -> execute (); echo \"New records created successfully\" ; } catch ( PDOException $e ) { echo \"Error: \" . $e -> getMessage (); } $conn = null ; ?>","title":"Prepared Statements"},{"location":"Adv/phpMySql/#select-data","text":"//MySQLi Object-Oriented: <?php $servername = \"localhost\" ; $username = \"username\" ; $password = \"password\" ; $dbname = \"myDB\" ; // Create connection $conn = new mysqli ( $servername , $username , $password , $dbname ); // Check connection if ( $conn -> connect_error ) { die ( \"Connection failed: \" . $conn -> connect_error ); } $sql = \"SELECT id, firstname, lastname FROM MyGuests\" ; $result = $conn -> query ( $sql ); if ( $result -> num_rows > 0 ) { // output data of each row while ( $row = $result -> fetch_assoc ()) { echo \"id: \" . $row [ \"id\" ] . \" - Name: \" . $row [ \"firstname\" ] . \" \" . $row [ \"lastname\" ] . \"<br>\" ; } } else { echo \"0 results\" ; } $conn -> close (); ?> //MySQLi Procedural: <?php $servername = \"localhost\" ; $username = \"username\" ; $password = \"password\" ; $dbname = \"myDB\" ; // Create connection $conn = mysqli_connect ( $servername , $username , $password , $dbname ); // Check connection if ( ! $conn ) { die ( \"Connection failed: \" . mysqli_connect_error ()); } $sql = \"SELECT id, firstname, lastname FROM MyGuests\" ; $result = mysqli_query ( $conn , $sql ); if ( mysqli_num_rows ( $result ) > 0 ) { // output data of each row while ( $row = mysqli_fetch_assoc ( $result )) { echo \"id: \" . $row [ \"id\" ] . \" - Name: \" . $row [ \"firstname\" ] . \" \" . $row [ \"lastname\" ] . \"<br>\" ; } } else { echo \"0 results\" ; } mysqli_close ( $conn ); ?> //PDO: <?php echo \"<table style='border: solid 1px black;'>\" ; echo \"<tr><th>Id</th><th>Firstname</th><th>Lastname</th></tr>\" ; class TableRows extends RecursiveIteratorIterator { function __construct ( $it ) { parent :: __construct ( $it , self :: LEAVES_ONLY ); } function current () { return \"<td style='width:150px;border:1px solid black;'>\" . parent :: current () . \"</td>\" ; } function beginChildren () { echo \"<tr>\" ; } function endChildren () { echo \"</tr>\" . \" \\n \" ; } } $servername = \"localhost\" ; $username = \"username\" ; $password = \"password\" ; $dbname = \"myDBPDO\" ; try { $conn = new PDO ( \"mysql:host= $servername ;dbname= $dbname \" , $username , $password ); $conn -> setAttribute ( PDO :: ATTR_ERRMODE , PDO :: ERRMODE_EXCEPTION ); $stmt = $conn -> prepare ( \"SELECT id, firstname, lastname FROM MyGuests\" ); $stmt -> execute (); // set the resulting array to associative $result = $stmt -> setFetchMode ( PDO :: FETCH_ASSOC ); foreach ( new TableRows ( new RecursiveArrayIterator ( $stmt -> fetchAll ())) as $k => $v ) { echo $v ; } } catch ( PDOException $e ) { echo \"Error: \" . $e -> getMessage (); } $conn = null ; echo \"</table>\" ; ?>","title":"Select Data"},{"location":"Adv/phpMySql/#select-and-filter-data","text":"//MySQLi Object-Oriented: <?php $servername = \"localhost\" ; $username = \"username\" ; $password = \"password\" ; $dbname = \"myDB\" ; // Create connection $conn = new mysqli ( $servername , $username , $password , $dbname ); // Check connection if ( $conn -> connect_error ) { die ( \"Connection failed: \" . $conn -> connect_error ); } $sql = \"SELECT id, firstname, lastname FROM MyGuests WHERE lastname='Doe'\" ; $result = $conn -> query ( $sql ); if ( $result -> num_rows > 0 ) { // output data of each row while ( $row = $result -> fetch_assoc ()) { echo \"id: \" . $row [ \"id\" ] . \" - Name: \" . $row [ \"firstname\" ] . \" \" . $row [ \"lastname\" ] . \"<br>\" ; } } else { echo \"0 results\" ; } $conn -> close (); ?> //MySQLi Procedural: <?php $servername = \"localhost\" ; $username = \"username\" ; $password = \"password\" ; $dbname = \"myDB\" ; // Create connection $conn = mysqli_connect ( $servername , $username , $password , $dbname ); // Check connection if ( ! $conn ) { die ( \"Connection failed: \" . mysqli_connect_error ()); } $sql = \"SELECT id, firstname, lastname FROM MyGuests WHERE lastname='Doe'\" ; $result = mysqli_query ( $conn , $sql ); if ( mysqli_num_rows ( $result ) > 0 ) { // output data of each row while ( $row = mysqli_fetch_assoc ( $result )) { echo \"id: \" . $row [ \"id\" ] . \" - Name: \" . $row [ \"firstname\" ] . \" \" . $row [ \"lastname\" ] . \"<br>\" ; } } else { echo \"0 results\" ; } mysqli_close ( $conn ); ?> //PDO: <?php echo \"<table style='border: solid 1px black;'>\" ; echo \"<tr><th>Id</th><th>Firstname</th><th>Lastname</th></tr>\" ; class TableRows extends RecursiveIteratorIterator { function __construct ( $it ) { parent :: __construct ( $it , self :: LEAVES_ONLY ); } function current () { return \"<td style='width:150px;border:1px solid black;'>\" . parent :: current () . \"</td>\" ; } function beginChildren () { echo \"<tr>\" ; } function endChildren () { echo \"</tr>\" . \" \\n \" ; } } $servername = \"localhost\" ; $username = \"username\" ; $password = \"password\" ; $dbname = \"myDBPDO\" ; try { $conn = new PDO ( \"mysql:host= $servername ;dbname= $dbname \" , $username , $password ); $conn -> setAttribute ( PDO :: ATTR_ERRMODE , PDO :: ERRMODE_EXCEPTION ); $stmt = $conn -> prepare ( \"SELECT id, firstname, lastname FROM MyGuests WHERE lastname='Doe'\" ); $stmt -> execute (); // set the resulting array to associative $result = $stmt -> setFetchMode ( PDO :: FETCH_ASSOC ); foreach ( new TableRows ( new RecursiveArrayIterator ( $stmt -> fetchAll ())) as $k => $v ) { echo $v ; } } catch ( PDOException $e ) { echo \"Error: \" . $e -> getMessage (); } $conn = null ; echo \"</table>\" ; ?>","title":"Select and Filter Data"},{"location":"Adv/phpMySql/#select-and-order-data","text":"//MySQLi Object-Oriented: <?php $servername = \"localhost\" ; $username = \"username\" ; $password = \"password\" ; $dbname = \"myDB\" ; // Create connection $conn = new mysqli ( $servername , $username , $password , $dbname ); // Check connection if ( $conn -> connect_error ) { die ( \"Connection failed: \" . $conn -> connect_error ); } $sql = \"SELECT id, firstname, lastname FROM MyGuests ORDER BY lastname\" ; $result = $conn -> query ( $sql ); if ( $result -> num_rows > 0 ) { // output data of each row while ( $row = $result -> fetch_assoc ()) { echo \"id: \" . $row [ \"id\" ] . \" - Name: \" . $row [ \"firstname\" ] . \" \" . $row [ \"lastname\" ] . \"<br>\" ; } } else { echo \"0 results\" ; } $conn -> close (); ?> //MySQLi Procedural: <?php $servername = \"localhost\" ; $username = \"username\" ; $password = \"password\" ; $dbname = \"myDB\" ; // Create connection $conn = mysqli_connect ( $servername , $username , $password , $dbname ); // Check connection if ( ! $conn ) { die ( \"Connection failed: \" . mysqli_connect_error ()); } $sql = \"SELECT id, firstname, lastname FROM MyGuests ORDER BY lastname\" ; $result = mysqli_query ( $conn , $sql ); if ( mysqli_num_rows ( $result ) > 0 ) { // output data of each row while ( $row = mysqli_fetch_assoc ( $result )) { echo \"id: \" . $row [ \"id\" ] . \" - Name: \" . $row [ \"firstname\" ] . \" \" . $row [ \"lastname\" ] . \"<br>\" ; } } else { echo \"0 results\" ; } mysqli_close ( $conn ); ?> //PDO: <?php echo \"<table style='border: solid 1px black;'>\" ; echo \"<tr><th>Id</th><th>Firstname</th><th>Lastname</th></tr>\" ; class TableRows extends RecursiveIteratorIterator { function __construct ( $it ) { parent :: __construct ( $it , self :: LEAVES_ONLY ); } function current () { return \"<td style='width:150px;border:1px solid black;'>\" . parent :: current () . \"</td>\" ; } function beginChildren () { echo \"<tr>\" ; } function endChildren () { echo \"</tr>\" . \" \\n \" ; } } $servername = \"localhost\" ; $username = \"username\" ; $password = \"password\" ; $dbname = \"myDBPDO\" ; try { $conn = new PDO ( \"mysql:host= $servername ;dbname= $dbname \" , $username , $password ); $conn -> setAttribute ( PDO :: ATTR_ERRMODE , PDO :: ERRMODE_EXCEPTION ); $stmt = $conn -> prepare ( \"SELECT id, firstname, lastname FROM MyGuests ORDER BY lastname\" ); $stmt -> execute (); // set the resulting array to associative $result = $stmt -> setFetchMode ( PDO :: FETCH_ASSOC ); foreach ( new TableRows ( new RecursiveArrayIterator ( $stmt -> fetchAll ())) as $k => $v ) { echo $v ; } } catch ( PDOException $e ) { echo \"Error: \" . $e -> getMessage (); } $conn = null ; echo \"</table>\" ; ?>","title":"Select and Order Data"},{"location":"Adv/phpMySql/#limit-data","text":"MySQL provides a LIMIT clause that is used to specify the number of records to return. The LIMIT clause makes it easy to code multi page results or pagination with SQL, and is very useful on large tables. Returning a large number of records can impact on performance. Assume we wish to select all records from 1 - 30 (inclusive) from a table called \"Orders\". The SQL query would then look like this: $sql = \"SELECT * FROM Orders LIMIT 30\"; When the SQL query above is run, it will return the first 30 records. What if we want to select records 16 - 25 (inclusive)? Mysql also provides a way to handle this: by using OFFSET. The SQL query below says \"return only 10 records, start on record 16 (OFFSET 15)\": $sql = \"SELECT * FROM Orders LIMIT 10 OFFSET 15\"; You could also use a shorter syntax to achieve the same result: $sql = \"SELECT * FROM Orders LIMIT 15, 10\"; Notice that the numbers are reversed when you use a comma.","title":"Limit Data"},{"location":"Adv/phpMySql/#delete-data","text":"//MySQLi Object-Oriented: <?php $servername = \"localhost\" ; $username = \"username\" ; $password = \"password\" ; $dbname = \"myDB\" ; // Create connection $conn = new mysqli ( $servername , $username , $password , $dbname ); // Check connection if ( $conn -> connect_error ) { die ( \"Connection failed: \" . $conn -> connect_error ); } // sql to delete a record $sql = \"DELETE FROM MyGuests WHERE id=3\" ; if ( $conn -> query ( $sql ) === TRUE ) { echo \"Record deleted successfully\" ; } else { echo \"Error deleting record: \" . $conn -> error ; } $conn -> close (); ?> //MySQLi Procedural: <?php $servername = \"localhost\" ; $username = \"username\" ; $password = \"password\" ; $dbname = \"myDB\" ; // Create connection $conn = mysqli_connect ( $servername , $username , $password , $dbname ); // Check connection if ( ! $conn ) { die ( \"Connection failed: \" . mysqli_connect_error ()); } // sql to delete a record $sql = \"DELETE FROM MyGuests WHERE id=3\" ; if ( mysqli_query ( $conn , $sql )) { echo \"Record deleted successfully\" ; } else { echo \"Error deleting record: \" . mysqli_error ( $conn ); } mysqli_close ( $conn ); ?> //PDO: <?php $servername = \"localhost\" ; $username = \"username\" ; $password = \"password\" ; $dbname = \"myDBPDO\" ; try { $conn = new PDO ( \"mysql:host= $servername ;dbname= $dbname \" , $username , $password ); // set the PDO error mode to exception $conn -> setAttribute ( PDO :: ATTR_ERRMODE , PDO :: ERRMODE_EXCEPTION ); // sql to delete a record $sql = \"DELETE FROM MyGuests WHERE id=3\" ; // use exec() because no results are returned $conn -> exec ( $sql ); echo \"Record deleted successfully\" ; } catch ( PDOException $e ) { echo $sql . \"<br>\" . $e -> getMessage (); } $conn = null ; ?>","title":"Delete Data"},{"location":"Adv/phpMySql/#update-data","text":"//MySQLi Object-Oriented: <?php $servername = \"localhost\" ; $username = \"username\" ; $password = \"password\" ; $dbname = \"myDB\" ; // Create connection $conn = new mysqli ( $servername , $username , $password , $dbname ); // Check connection if ( $conn -> connect_error ) { die ( \"Connection failed: \" . $conn -> connect_error ); } $sql = \"UPDATE MyGuests SET lastname='Doe' WHERE id=2\" ; if ( $conn -> query ( $sql ) === TRUE ) { echo \"Record updated successfully\" ; } else { echo \"Error updating record: \" . $conn -> error ; } $conn -> close (); ?> //MySQLi Procedural: <?php $servername = \"localhost\" ; $username = \"username\" ; $password = \"password\" ; $dbname = \"myDB\" ; // Create connection $conn = mysqli_connect ( $servername , $username , $password , $dbname ); // Check connection if ( ! $conn ) { die ( \"Connection failed: \" . mysqli_connect_error ()); } $sql = \"UPDATE MyGuests SET lastname='Doe' WHERE id=2\" ; if ( mysqli_query ( $conn , $sql )) { echo \"Record updated successfully\" ; } else { echo \"Error updating record: \" . mysqli_error ( $conn ); } mysqli_close ( $conn ); ?> //PDO: <?php $servername = \"localhost\" ; $username = \"username\" ; $password = \"password\" ; $dbname = \"myDBPDO\" ; try { $conn = new PDO ( \"mysql:host= $servername ;dbname= $dbname \" , $username , $password ); // set the PDO error mode to exception $conn -> setAttribute ( PDO :: ATTR_ERRMODE , PDO :: ERRMODE_EXCEPTION ); $sql = \"UPDATE MyGuests SET lastname='Doe' WHERE id=2\" ; // Prepare statement $stmt = $conn -> prepare ( $sql ); // execute the query $stmt -> execute (); // echo a message to say the UPDATE succeeded echo $stmt -> rowCount () . \" records UPDATED successfully\" ; } catch ( PDOException $e ) { echo $sql . \"<br>\" . $e -> getMessage (); } $conn = null ; ?>","title":"Update Data"},{"location":"Adv/phpXML/","text":"The XML language is a way to structure data for sharing across websites. Several web technologies like RSS Feeds and Podcasts are written in XML. In PHP there are two major types of XML parsers: Tree-Based Parsers Event-Based Parsers Tree-Based Parsers Tree-based parsers holds the entire document in Memory and transforms the XML document into a Tree structure. It analyzes the whole document, and provides access to the Tree elements (DOM). This type of parser is a better option for smaller XML documents, but not for large XML document as it causes major performance issues. Example of tree-based parsers: SimpleXML DOM SimpleXML SimpleXML is a PHP extension that allows us to easily manipulate and get XML data. SimpleXML is a tree-based parser. SimpleXML provides an easy way of getting an element's name, attributes and textual content if you know the XML document's structure or layout. SimpleXML turns an XML document into a data structure you can iterate through like a collection of arrays and objects. Compared to DOM or the Expat parser, SimpleXML takes a fewer lines of code to read text data from an element. Read From String The PHP simplexml_load_string() function is used to read XML data from a string. <?php $myXMLData = \"<?xml version='1.0' encoding='UTF-8'?> <note> <to>Tove</to> <from>Jani</from> <heading>Reminder</heading> <body>Don't forget me this weekend!</body> </note>\" ; $xml = simplexml_load_string ( $myXMLData ) or die ( \"Error: Cannot create object\" ); print_r ( $xml ); ?> The output of the code above will be: SimpleXMLElement Object ( [to] => Tove [from] => Jani [heading] => Reminder [body] => Don't forget me this weekend! ) Error Handling Tip: Use the libxml functionality to retrieve all XML errors when loading the document and then iterate over the errors. The following example tries to load a broken XML string: <?php libxml_use_internal_errors ( true ); $myXMLData = \"<?xml version='1.0' encoding='UTF-8'?> <document> <user>John Doe</wronguser> <email>john@example.com</wrongemail> </document>\" ; $xml = simplexml_load_string ( $myXMLData ); if ( $xml === false ) { echo \"Failed loading XML: \" ; foreach ( libxml_get_errors () as $error ) { echo \"<br>\" , $error -> message ; } } else { print_r ( $xml ); } ?> The output of the code above will be: Failed loading XML: Opening and ending tag mismatch: user line 3 and wronguser Opening and ending tag mismatch: email line 4 and wrongemail Read From File The PHP simplexml_load_file() function is used to read XML data from a file. Assume we have an XML file called \"note.xml\". <?xml version=\"1.0\" encoding=\"UTF-8\"?> <note> <to> Tove </to> <from> Jani </from> <heading> Reminder </heading> <body> Don't forget me this weekend! </body> </note> The example below shows how to use the simplexml_load_file() function to read XML data from a file. <?php $xml = simplexml_load_file ( \"note.xml\" ) or die ( \"Error: Cannot create object\" ); print_r ( $xml ); ?> The output of the code above will be: SimpleXMLElement Object ( [to] => Tove [from] => Jani [heading] => Reminder [body] => Don't forget me this weekend! ) Get Node Values Get the node values from the \"note.xml\" file. <?php $xml = simplexml_load_file ( \"note.xml\" ) or die ( \"Error: Cannot create object\" ); echo $xml -> to . \"<br>\" ; echo $xml -> from . \"<br>\" ; echo $xml -> heading . \"<br>\" ; echo $xml -> body ; ?> The output of the code above will be: Tove Jani Reminder Don't forget me this weekend! Get Node Values of Specific Elements Assume we have an XML file called \"books.xml\", that looks like this: <?xml version=\"1.0\" encoding=\"utf-8\"?> <bookstore> <book category= \"COOKING\" > <title lang= \"en\" > Everyday Italian </title> <author> Giada De Laurentiis </author> <year> 2005 </year> <price> 30.00 </price> </book> <book category= \"CHILDREN\" > <title lang= \"en\" > Harry Potter </title> <author> J K. Rowling </author> <year> 2005 </year> <price> 29.99 </price> </book> <book category= \"WEB\" > <title lang= \"en-us\" > XQuery Kick Start </title> <author> James McGovern </author> <year> 2003 </year> <price> 49.99 </price> </book> <book category= \"WEB\" > <title lang= \"en-us\" > Learning XML </title> <author> Erik T. Ray </author> <year> 2003 </year> <price> 39.95 </price> </book> </bookstore> <?php $xml = simplexml_load_file ( \"books.xml\" ) or die ( \"Error: Cannot create object\" ); echo $xml -> book [ 0 ] -> title . \"<br>\" ; echo $xml -> book [ 1 ] -> title ; ?> The output of the code above will be: Everyday Italian Harry Potter Get Node Values - Loop The following example loops through all the book elements in the \"books.xml\" file, and gets the node values of the title, author, year, and price elements. <?php $xml = simplexml_load_file ( \"books.xml\" ) or die ( \"Error: Cannot create object\" ); foreach ( $xml -> children () as $books ) { echo $books -> title . \", \" ; echo $books -> author . \", \" ; echo $books -> year . \", \" ; echo $books -> price . \"<br>\" ; } ?> The output of the code above will be: Everyday Italian, Giada De Laurentiis, 2005, 30.00 Harry Potter, J K. Rowling, 2005, 29.99 XQuery Kick Start, James McGovern, 2003, 49.99 Learning XML, Erik T. Ray, 2003, 39.95 Get Attribute Values The following example gets the attribute value of the \"category\" attribute of the first book element and the attribute value of the \"lang\" attribute of the title element in the second book element. <?php $xml = simplexml_load_file ( \"books.xml\" ) or die ( \"Error: Cannot create object\" ); echo $xml -> book [ 0 ][ 'category' ] . \"<br>\" ; echo $xml -> book [ 1 ] -> title [ 'lang' ]; ?> The output of the code above will be: COOKING en Get Attribute Values - Loop The following example gets the attribute values of the title elements in the \"books.xml\" file. <?php $xml = simplexml_load_file ( \"books.xml\" ) or die ( \"Error: Cannot create object\" ); foreach ( $xml -> children () as $books ) { echo $books -> title [ 'lang' ]; echo \"<br>\" ; } ?> The output of the code above will be: en en en-us en-us XML DOM Parser The DOM parser is a tree-based parser. Look at the following XML document fraction: <?xml version=\"1.0\" encoding=\"UTF-8\"?> <from> Jani </from> The DOM sees the XML above as a tree structure: Level 1: XML Document Level 2: Root element: Level 3: Text element: \"Jani\" The XML file below (\"note.xml\") will be used in our example: <?xml version=\"1.0\" encoding=\"UTF-8\"?> <note> <to> Tove </to> <from> Jani </from> <heading> Reminder </heading> <body> Don't forget me this weekend! </body> </note> Load and Output XML We want to initialize the XML parser, load the xml, and output it: <?php $xmlDoc = new DOMDocument (); $xmlDoc -> load ( \"note.xml\" ); print $xmlDoc -> saveXML (); ?> The output of the code above will be: Tove Jani Reminder Don't forget me this weekend! If you select \"View source\" in the browser window, you will see the following HTML: <?xml version=\"1.0\" encoding=\"UTF-8\"?> <note> <to> Tove </to> <from> Jani </from> <heading> Reminder </heading> <body> Don't forget me this weekend! </body> </note> The example above creates a DOMDocument-Object and loads the XML from \"note.xml\" into it. Then the saveXML() function puts the internal XML document into a string, so we can output it. Looping through XML We want to initialize the XML parser, load the XML, and loop through all elements of the element: <?php $xmlDoc = new DOMDocument (); $xmlDoc -> load ( \"note.xml\" ); $x = $xmlDoc -> documentElement ; foreach ( $x -> childNodes AS $item ) { print $item -> nodeName . \" = \" . $item -> nodeValue . \"<br>\" ; } ?> The output of the code above will be: #text = to = Tove #text = from = Jani #text = heading = Reminder #text = body = Don't forget me this weekend! #text = In the example above you see that there are empty text nodes between each element. When XML generates, it often contains white-spaces between the nodes. The XML DOM parser treats these as ordinary elements, and if you are not aware of them, they sometimes cause problems. Event-Based Parsers Event-based parsers do not hold the entire document in Memory, instead, they read in one node at a time and allow you to interact with in real time. Once you move onto the next node, the old one is thrown away. This type of parser is well suited for large XML documents. It parses faster and consumes less memory. Example of event-based parsers: XMLReader XML Expat Parser XML Expat Parser The Expat parser is an event-based parser. Look at the following XML fraction: <from> Jani </from> An event-based parser reports the XML above as a series of three events: Start element: from Start CDATA section, value: Jani Close element: from The XML Expat Parser functions are part of the PHP core. There is no installation needed to use these functions. The XML file \"note.xml\" will be used in the example below: <?xml version=\"1.0\" encoding=\"UTF-8\"?> <note> <to> Tove </to> <from> Jani </from> <heading> Reminder </heading> <body> Don't forget me this weekend! </body> </note> Initializing the XML Expat Parser We want to initialize the XML Expat Parser in PHP, define some handlers for different XML events, and then parse the XML file. <?php // Initialize the XML parser $parser = xml_parser_create (); // Function to use at the start of an element function start ( $parser , $element_name , $element_attrs ) { switch ( $element_name ) { case \"NOTE\" : echo \"-- Note --<br>\" ; break ; case \"TO\" : echo \"To: \" ; break ; case \"FROM\" : echo \"From: \" ; break ; case \"HEADING\" : echo \"Heading: \" ; break ; case \"BODY\" : echo \"Message: \" ; } } // Function to use at the end of an element function stop ( $parser , $element_name ) { echo \"<br>\" ; } // Function to use when finding character data function char ( $parser , $data ) { echo $data ; } // Specify element handler xml_set_element_handler ( $parser , \"start\" , \"stop\" ); // Specify data handler xml_set_character_data_handler ( $parser , \"char\" ); // Open XML file $fp = fopen ( \"note.xml\" , \"r\" ); // Read data while ( $data = fread ( $fp , 4096 )) { xml_parse ( $parser , $data , feof ( $fp )) or die ( sprintf ( \"XML Error: %s at line %d\" , xml_error_string ( xml_get_error_code ( $parser )), xml_get_current_line_number ( $parser ))); } // Free the XML parser xml_parser_free ( $parser ); ?>","title":"XML"},{"location":"Adv/phpXML/#tree-based-parsers","text":"Tree-based parsers holds the entire document in Memory and transforms the XML document into a Tree structure. It analyzes the whole document, and provides access to the Tree elements (DOM). This type of parser is a better option for smaller XML documents, but not for large XML document as it causes major performance issues. Example of tree-based parsers: SimpleXML DOM","title":"Tree-Based Parsers"},{"location":"Adv/phpXML/#simplexml","text":"SimpleXML is a PHP extension that allows us to easily manipulate and get XML data. SimpleXML is a tree-based parser. SimpleXML provides an easy way of getting an element's name, attributes and textual content if you know the XML document's structure or layout. SimpleXML turns an XML document into a data structure you can iterate through like a collection of arrays and objects. Compared to DOM or the Expat parser, SimpleXML takes a fewer lines of code to read text data from an element.","title":"SimpleXML"},{"location":"Adv/phpXML/#read-from-string","text":"The PHP simplexml_load_string() function is used to read XML data from a string. <?php $myXMLData = \"<?xml version='1.0' encoding='UTF-8'?> <note> <to>Tove</to> <from>Jani</from> <heading>Reminder</heading> <body>Don't forget me this weekend!</body> </note>\" ; $xml = simplexml_load_string ( $myXMLData ) or die ( \"Error: Cannot create object\" ); print_r ( $xml ); ?> The output of the code above will be: SimpleXMLElement Object ( [to] => Tove [from] => Jani [heading] => Reminder [body] => Don't forget me this weekend! ) Error Handling Tip: Use the libxml functionality to retrieve all XML errors when loading the document and then iterate over the errors. The following example tries to load a broken XML string: <?php libxml_use_internal_errors ( true ); $myXMLData = \"<?xml version='1.0' encoding='UTF-8'?> <document> <user>John Doe</wronguser> <email>john@example.com</wrongemail> </document>\" ; $xml = simplexml_load_string ( $myXMLData ); if ( $xml === false ) { echo \"Failed loading XML: \" ; foreach ( libxml_get_errors () as $error ) { echo \"<br>\" , $error -> message ; } } else { print_r ( $xml ); } ?> The output of the code above will be: Failed loading XML: Opening and ending tag mismatch: user line 3 and wronguser Opening and ending tag mismatch: email line 4 and wrongemail","title":"Read From String"},{"location":"Adv/phpXML/#read-from-file","text":"The PHP simplexml_load_file() function is used to read XML data from a file. Assume we have an XML file called \"note.xml\". <?xml version=\"1.0\" encoding=\"UTF-8\"?> <note> <to> Tove </to> <from> Jani </from> <heading> Reminder </heading> <body> Don't forget me this weekend! </body> </note> The example below shows how to use the simplexml_load_file() function to read XML data from a file. <?php $xml = simplexml_load_file ( \"note.xml\" ) or die ( \"Error: Cannot create object\" ); print_r ( $xml ); ?> The output of the code above will be: SimpleXMLElement Object ( [to] => Tove [from] => Jani [heading] => Reminder [body] => Don't forget me this weekend! )","title":"Read From File"},{"location":"Adv/phpXML/#get-node-values","text":"Get the node values from the \"note.xml\" file. <?php $xml = simplexml_load_file ( \"note.xml\" ) or die ( \"Error: Cannot create object\" ); echo $xml -> to . \"<br>\" ; echo $xml -> from . \"<br>\" ; echo $xml -> heading . \"<br>\" ; echo $xml -> body ; ?> The output of the code above will be: Tove Jani Reminder Don't forget me this weekend!","title":"Get Node Values"},{"location":"Adv/phpXML/#get-node-values-of-specific-elements","text":"Assume we have an XML file called \"books.xml\", that looks like this: <?xml version=\"1.0\" encoding=\"utf-8\"?> <bookstore> <book category= \"COOKING\" > <title lang= \"en\" > Everyday Italian </title> <author> Giada De Laurentiis </author> <year> 2005 </year> <price> 30.00 </price> </book> <book category= \"CHILDREN\" > <title lang= \"en\" > Harry Potter </title> <author> J K. Rowling </author> <year> 2005 </year> <price> 29.99 </price> </book> <book category= \"WEB\" > <title lang= \"en-us\" > XQuery Kick Start </title> <author> James McGovern </author> <year> 2003 </year> <price> 49.99 </price> </book> <book category= \"WEB\" > <title lang= \"en-us\" > Learning XML </title> <author> Erik T. Ray </author> <year> 2003 </year> <price> 39.95 </price> </book> </bookstore> <?php $xml = simplexml_load_file ( \"books.xml\" ) or die ( \"Error: Cannot create object\" ); echo $xml -> book [ 0 ] -> title . \"<br>\" ; echo $xml -> book [ 1 ] -> title ; ?> The output of the code above will be: Everyday Italian Harry Potter","title":"Get Node Values of Specific Elements"},{"location":"Adv/phpXML/#get-node-values-loop","text":"The following example loops through all the book elements in the \"books.xml\" file, and gets the node values of the title, author, year, and price elements. <?php $xml = simplexml_load_file ( \"books.xml\" ) or die ( \"Error: Cannot create object\" ); foreach ( $xml -> children () as $books ) { echo $books -> title . \", \" ; echo $books -> author . \", \" ; echo $books -> year . \", \" ; echo $books -> price . \"<br>\" ; } ?> The output of the code above will be: Everyday Italian, Giada De Laurentiis, 2005, 30.00 Harry Potter, J K. Rowling, 2005, 29.99 XQuery Kick Start, James McGovern, 2003, 49.99 Learning XML, Erik T. Ray, 2003, 39.95","title":"Get Node Values - Loop"},{"location":"Adv/phpXML/#get-attribute-values","text":"The following example gets the attribute value of the \"category\" attribute of the first book element and the attribute value of the \"lang\" attribute of the title element in the second book element. <?php $xml = simplexml_load_file ( \"books.xml\" ) or die ( \"Error: Cannot create object\" ); echo $xml -> book [ 0 ][ 'category' ] . \"<br>\" ; echo $xml -> book [ 1 ] -> title [ 'lang' ]; ?> The output of the code above will be: COOKING en","title":"Get Attribute Values"},{"location":"Adv/phpXML/#get-attribute-values-loop","text":"The following example gets the attribute values of the title elements in the \"books.xml\" file. <?php $xml = simplexml_load_file ( \"books.xml\" ) or die ( \"Error: Cannot create object\" ); foreach ( $xml -> children () as $books ) { echo $books -> title [ 'lang' ]; echo \"<br>\" ; } ?> The output of the code above will be: en en en-us en-us","title":"Get Attribute Values - Loop"},{"location":"Adv/phpXML/#xml-dom-parser","text":"The DOM parser is a tree-based parser. Look at the following XML document fraction: <?xml version=\"1.0\" encoding=\"UTF-8\"?> <from> Jani </from> The DOM sees the XML above as a tree structure: Level 1: XML Document Level 2: Root element: Level 3: Text element: \"Jani\" The XML file below (\"note.xml\") will be used in our example: <?xml version=\"1.0\" encoding=\"UTF-8\"?> <note> <to> Tove </to> <from> Jani </from> <heading> Reminder </heading> <body> Don't forget me this weekend! </body> </note>","title":"XML DOM Parser"},{"location":"Adv/phpXML/#load-and-output-xml","text":"We want to initialize the XML parser, load the xml, and output it: <?php $xmlDoc = new DOMDocument (); $xmlDoc -> load ( \"note.xml\" ); print $xmlDoc -> saveXML (); ?> The output of the code above will be: Tove Jani Reminder Don't forget me this weekend! If you select \"View source\" in the browser window, you will see the following HTML: <?xml version=\"1.0\" encoding=\"UTF-8\"?> <note> <to> Tove </to> <from> Jani </from> <heading> Reminder </heading> <body> Don't forget me this weekend! </body> </note> The example above creates a DOMDocument-Object and loads the XML from \"note.xml\" into it. Then the saveXML() function puts the internal XML document into a string, so we can output it.","title":"Load and Output XML"},{"location":"Adv/phpXML/#looping-through-xml","text":"We want to initialize the XML parser, load the XML, and loop through all elements of the element: <?php $xmlDoc = new DOMDocument (); $xmlDoc -> load ( \"note.xml\" ); $x = $xmlDoc -> documentElement ; foreach ( $x -> childNodes AS $item ) { print $item -> nodeName . \" = \" . $item -> nodeValue . \"<br>\" ; } ?> The output of the code above will be: #text = to = Tove #text = from = Jani #text = heading = Reminder #text = body = Don't forget me this weekend! #text = In the example above you see that there are empty text nodes between each element. When XML generates, it often contains white-spaces between the nodes. The XML DOM parser treats these as ordinary elements, and if you are not aware of them, they sometimes cause problems.","title":"Looping through XML"},{"location":"Adv/phpXML/#event-based-parsers","text":"Event-based parsers do not hold the entire document in Memory, instead, they read in one node at a time and allow you to interact with in real time. Once you move onto the next node, the old one is thrown away. This type of parser is well suited for large XML documents. It parses faster and consumes less memory. Example of event-based parsers: XMLReader XML Expat Parser","title":"Event-Based Parsers"},{"location":"Adv/phpXML/#xml-expat-parser","text":"The Expat parser is an event-based parser. Look at the following XML fraction: <from> Jani </from> An event-based parser reports the XML above as a series of three events: Start element: from Start CDATA section, value: Jani Close element: from The XML Expat Parser functions are part of the PHP core. There is no installation needed to use these functions. The XML file \"note.xml\" will be used in the example below: <?xml version=\"1.0\" encoding=\"UTF-8\"?> <note> <to> Tove </to> <from> Jani </from> <heading> Reminder </heading> <body> Don't forget me this weekend! </body> </note>","title":"XML Expat Parser"},{"location":"Adv/phpXML/#initializing-the-xml-expat-parser","text":"We want to initialize the XML Expat Parser in PHP, define some handlers for different XML events, and then parse the XML file. <?php // Initialize the XML parser $parser = xml_parser_create (); // Function to use at the start of an element function start ( $parser , $element_name , $element_attrs ) { switch ( $element_name ) { case \"NOTE\" : echo \"-- Note --<br>\" ; break ; case \"TO\" : echo \"To: \" ; break ; case \"FROM\" : echo \"From: \" ; break ; case \"HEADING\" : echo \"Heading: \" ; break ; case \"BODY\" : echo \"Message: \" ; } } // Function to use at the end of an element function stop ( $parser , $element_name ) { echo \"<br>\" ; } // Function to use when finding character data function char ( $parser , $data ) { echo $data ; } // Specify element handler xml_set_element_handler ( $parser , \"start\" , \"stop\" ); // Specify data handler xml_set_character_data_handler ( $parser , \"char\" ); // Open XML file $fp = fopen ( \"note.xml\" , \"r\" ); // Read data while ( $data = fread ( $fp , 4096 )) { xml_parse ( $parser , $data , feof ( $fp )) or die ( sprintf ( \"XML Error: %s at line %d\" , xml_error_string ( xml_get_error_code ( $parser )), xml_get_current_line_number ( $parser ))); } // Free the XML parser xml_parser_free ( $parser ); ?>","title":"Initializing the XML Expat Parser"},{"location":"Adv/phpZip/","text":"Installation Linux Systems For these functions to work, you have to compile PHP with --enable-zip. PHP 5.6: Use the --with-libzip=DIR configure option to use a system libzip installation. libzip version 0.11 is required, with 0.11.2 or later recommended. PHP 7.3: Building against the bundled libzip is discouraged, but still possible by adding --without-libzip to the configuration. Windows Systems Before PHP 5.3: Users must enable \"php_zip.dll\" inside of \"php.ini\" for these functions to work. From PHP 5.3: The ZIP extension is built-in. PHP Zip Functions Function Description zip_close() Closes a ZIP file archive zip_entry_close() Closes a ZIP directory entry zip_entry_compressedsize() Returns the compressed file size of a ZIP directory entry zip_entry_compressionmethod() Returns the compression method of a ZIP directory entry zip_entry_filesize() Returns the actual file size of a ZIP directory entry zip_entry_name() Returns the name of a ZIP directory entry zip_entry_open() Opens a directory entry in a ZIP file for reading zip_entry_read() Reads from an open directory entry in the ZIP file zip_open() Opens a ZIP file archive zip_read() Reads the next file in a open ZIP file archive","title":"Zip"},{"location":"Adv/phpZip/#installation","text":"","title":"Installation"},{"location":"Adv/phpZip/#linux-systems","text":"For these functions to work, you have to compile PHP with --enable-zip. PHP 5.6: Use the --with-libzip=DIR configure option to use a system libzip installation. libzip version 0.11 is required, with 0.11.2 or later recommended. PHP 7.3: Building against the bundled libzip is discouraged, but still possible by adding --without-libzip to the configuration.","title":"Linux Systems"},{"location":"Adv/phpZip/#windows-systems","text":"Before PHP 5.3: Users must enable \"php_zip.dll\" inside of \"php.ini\" for these functions to work. From PHP 5.3: The ZIP extension is built-in.","title":"Windows Systems"},{"location":"Adv/phpZip/#php-zip-functions","text":"Function Description zip_close() Closes a ZIP file archive zip_entry_close() Closes a ZIP directory entry zip_entry_compressedsize() Returns the compressed file size of a ZIP directory entry zip_entry_compressionmethod() Returns the compression method of a ZIP directory entry zip_entry_filesize() Returns the actual file size of a ZIP directory entry zip_entry_name() Returns the name of a ZIP directory entry zip_entry_open() Opens a directory entry in a ZIP file for reading zip_entry_read() Reads from an open directory entry in the ZIP file zip_open() Opens a ZIP file archive zip_read() Reads the next file in a open ZIP file archive","title":"PHP Zip Functions"},{"location":"Classes/phpAbstract/","text":"Abstract classes and methods are when the parent class has a named method, but need its child class(es) to fill out the tasks. An abstract class is a class that contains at least one abstract method. An abstract method is a method that is declared, but not implemented in the code. An abstract class or method is defined with the abstract keyword. <?php abstract class ParentClass { abstract public function someMethod1 (); abstract public function someMethod2 ( $name , $color ); abstract public function someMethod3 () : string ; } ?> When inheriting from an abstract class, the child class method must be defined with the same name, and the same or a less restricted access modifier. So, if the abstract method is defined as protected, the child class method must be defined as either protected or public, but not private. Also, the type and number of required arguments must be the same. However, the child classes may have optional arguments in addition. So, when a child class is inherited from an abstract class, we have the following rules: The child class method must be defined with the same name and it redeclares the parent abstract method The child class method must be defined with the same or a less restricted access modifier The number of required arguments must be the same. However, the child class may have optional arguments in addition <?php // Parent class abstract class Car { public $name ; public function __construct ( $name ) { $this -> name = $name ; } abstract public function intro () : string ; } // Child classes class Audi extends Car { public function intro () : string { return \"Choose German quality! I'm an $this->name !\" ; } } class Volvo extends Car { public function intro () : string { return \"Proud to be Swedish! I'm a $this->name !\" ; } } class Citroen extends Car { public function intro () : string { return \"French extravagance! I'm a $this->name !\" ; } } // Create objects from the child classes $audi = new audi ( \"Audi\" ); echo $audi -> intro (); echo \"<br>\" ; $volvo = new volvo ( \"Volvo\" ); echo $volvo -> intro (); echo \"<br>\" ; $citroen = new citroen ( \"Citroen\" ); echo $citroen -> intro (); ?> <?php abstract class ParentClass { // Abstract method with an argument abstract protected function prefixName ( $name ); } class ChildClass extends ParentClass { public function prefixName ( $name ) { if ( $name == \"John Doe\" ) { $prefix = \"Mr.\" ; } elseif ( $name == \"Jane Doe\" ) { $prefix = \"Mrs.\" ; } else { $prefix = \"\" ; } return \" { $prefix } { $name } \" ; } } $class = new ChildClass ; echo $class -> prefixName ( \"John Doe\" ); echo \"<br>\" ; echo $class -> prefixName ( \"Jane Doe\" ); ?> <?php abstract class ParentClass { // Abstract method with an argument abstract protected function prefixName ( $name ); } class ChildClass extends ParentClass { // The child class may define optional arguments that are not in the parent's abstract method public function prefixName ( $name , $separator = \".\" , $greet = \"Dear\" ) { if ( $name == \"John Doe\" ) { $prefix = \"Mr\" ; } elseif ( $name == \"Jane Doe\" ) { $prefix = \"Mrs\" ; } else { $prefix = \"\" ; } return \" { $greet } { $prefix }{ $separator } { $name } \" ; } } $class = new ChildClass ; echo $class -> prefixName ( \"John Doe\" ); echo \"<br>\" ; echo $class -> prefixName ( \"Jane Doe\" ); ?>","title":"Abstract Classes"},{"location":"Classes/phpCls/","text":"Procedural programming is about writing procedures or functions that perform operations on the data, while object-oriented programming is about creating objects that contain both data and functions. Object-oriented programming has several advantages over procedural programming: OOP is faster and easier to execute OOP provides a clear structure for the programs OOP helps to keep the PHP code DRY \"Don't Repeat Yourself\", and makes the code easier to maintain, modify and debug OOP makes it possible to create full reusable applications with less code and shorter development time Classes A class is a template for objects, and an object is an instance of class. A class is defined by using the class keyword, followed by the name of the class and a pair of curly braces ({}). All its properties and methods go inside the braces. <?php class Person { // Properties public $name ; public $age ; // Methods public function __construct ( $name , $age ) { $this -> name = $name ; $this -> age = $age ; } public function greeting () { echo \"Hello, my name is \" . $this -> name ; } } ?> Objects We can create multiple objects from a class. Each object has all the properties and methods defined in the class, but they will have different property values. Objects of a class are created using the new keyword. $person1 = new Person(\"John\", 36); $person2 = new Person(\"Jane\", 30); $person1->greeting(); $person2->greeting(); $this keyword The $this keyword refers to the current object. <?php class Fruit { public $name ; function set_name ( $name ) { $this -> name = $name ; } } $apple = new Fruit (); $apple -> set_name ( \"Apple\" ); echo $apple -> name ; ?> <?php class Fruit { public $name ; } $apple = new Fruit (); $apple -> name = \"Apple\" ; echo $apple -> name ; ?> instanceof You can use the instanceof keyword to check if an object belongs to a specific class <?php class Fruit { public $name ; } $apple = new Fruit (); $apple -> name = \"Apple\" ; if ( $apple instanceof Fruit ) { echo \"Yes, $apple is an instance of Fruit\" ; } ?> PHP clone Keyword To clone an object, use the clone keyword. <?php class MyClass { public $color ; public $amount ; } $obj = new MyClass (); $obj -> color = \"red\" ; $obj -> amount = 5 ; $copy = clone $obj ; print_r ( $copy ); ?> If any of the properties was a reference to another variable or object, then only the reference is copied. Objects are always passed by reference, so if the original object has another object in its properties, the copy will point to the same object. This behavior can be changed by creating a __clone() method in the class. Create a copy of an object which has a reference: <?php class MyClass { public $amount ; } // Create an object with a reference $value = 5 ; $obj = new MyClass (); $obj -> amount = & $value ; // Clone the object $copy = clone $obj ; // Change the value in the original object $obj -> amount = 6 ; // The copy is changed print_r ( $copy ); ?>","title":"OOP"},{"location":"Classes/phpCls/#classes","text":"A class is a template for objects, and an object is an instance of class. A class is defined by using the class keyword, followed by the name of the class and a pair of curly braces ({}). All its properties and methods go inside the braces. <?php class Person { // Properties public $name ; public $age ; // Methods public function __construct ( $name , $age ) { $this -> name = $name ; $this -> age = $age ; } public function greeting () { echo \"Hello, my name is \" . $this -> name ; } } ?>","title":"Classes"},{"location":"Classes/phpCls/#objects","text":"We can create multiple objects from a class. Each object has all the properties and methods defined in the class, but they will have different property values. Objects of a class are created using the new keyword. $person1 = new Person(\"John\", 36); $person2 = new Person(\"Jane\", 30); $person1->greeting(); $person2->greeting();","title":"Objects"},{"location":"Classes/phpCls/#this-keyword","text":"The $this keyword refers to the current object. <?php class Fruit { public $name ; function set_name ( $name ) { $this -> name = $name ; } } $apple = new Fruit (); $apple -> set_name ( \"Apple\" ); echo $apple -> name ; ?> <?php class Fruit { public $name ; } $apple = new Fruit (); $apple -> name = \"Apple\" ; echo $apple -> name ; ?>","title":"$this keyword"},{"location":"Classes/phpCls/#instanceof","text":"You can use the instanceof keyword to check if an object belongs to a specific class <?php class Fruit { public $name ; } $apple = new Fruit (); $apple -> name = \"Apple\" ; if ( $apple instanceof Fruit ) { echo \"Yes, $apple is an instance of Fruit\" ; } ?>","title":"instanceof"},{"location":"Classes/phpCls/#php-clone-keyword","text":"To clone an object, use the clone keyword. <?php class MyClass { public $color ; public $amount ; } $obj = new MyClass (); $obj -> color = \"red\" ; $obj -> amount = 5 ; $copy = clone $obj ; print_r ( $copy ); ?> If any of the properties was a reference to another variable or object, then only the reference is copied. Objects are always passed by reference, so if the original object has another object in its properties, the copy will point to the same object. This behavior can be changed by creating a __clone() method in the class. Create a copy of an object which has a reference: <?php class MyClass { public $amount ; } // Create an object with a reference $value = 5 ; $obj = new MyClass (); $obj -> amount = & $value ; // Clone the object $copy = clone $obj ; // Change the value in the original object $obj -> amount = 6 ; // The copy is changed print_r ( $copy ); ?>","title":"PHP clone Keyword"},{"location":"Classes/phpConstants/","text":"Class constants can be useful if you need to define some constant data within a class. A class constant is declared inside a class with the const keyword. A constant cannot be changed once it is declared. Class constants are case-sensitive. However, it is recommended to name the constants in all uppercase letters. We can access a constant from outside the class by using the class name followed by the scope resolution operator (::) followed by the constant name. class MyClass { const MY_CONST = \"Hello\"; } echo MyClass::MY_CONST; Or, we can access a constant from inside the class by using the self keyword followed by the scope resolution operator (::) followed by the constant name. <?php class Goodbye { const LEAVING_MESSAGE = \"Thank you for visiting W3Schools.com!\" ; public function byebye () { echo self :: LEAVING_MESSAGE ; } } $goodbye = new Goodbye (); $goodbye -> byebye (); ?>","title":"Constants"},{"location":"Classes/phpConstructor/","text":"The __construct Function A constructor allows you to initialize an object's properties upon creation of the object. If you create a __construct() function, PHP will automatically call this function when you create an object from a class. <?php class Person { public $name ; public $age ; public function __construct ( $name , $age ) { $this -> name = $name ; $this -> age = $age ; } } ?> Calling the __construct Function <?php $person1 = new Person ( \"John\" , 36 ); $person2 = new Person ( \"Jane\" , 30 ); ?> The __destruct Function A destructor is called when the object is destructed or the script is stopped or exited. If you create a __destruct() function, PHP will automatically call this function at the end of the script. <?php class Person { public $name ; public $age ; public function __construct ( $name , $age ) { $this -> name = $name ; $this -> age = $age ; } public function __destruct () { echo \"The person named \" . $this -> name . \" is destructed.\" ; } } ?>","title":"Constructor"},{"location":"Classes/phpConstructor/#the-__construct-function","text":"A constructor allows you to initialize an object's properties upon creation of the object. If you create a __construct() function, PHP will automatically call this function when you create an object from a class. <?php class Person { public $name ; public $age ; public function __construct ( $name , $age ) { $this -> name = $name ; $this -> age = $age ; } } ?>","title":"The __construct Function"},{"location":"Classes/phpConstructor/#calling-the-__construct-function","text":"<?php $person1 = new Person ( \"John\" , 36 ); $person2 = new Person ( \"Jane\" , 30 ); ?>","title":"Calling the __construct Function"},{"location":"Classes/phpConstructor/#the-__destruct-function","text":"A destructor is called when the object is destructed or the script is stopped or exited. If you create a __destruct() function, PHP will automatically call this function at the end of the script. <?php class Person { public $name ; public $age ; public function __construct ( $name , $age ) { $this -> name = $name ; $this -> age = $age ; } public function __destruct () { echo \"The person named \" . $this -> name . \" is destructed.\" ; } } ?>","title":"The __destruct Function"},{"location":"Classes/phpInheritance/","text":"Inheritance in OOP = When a class derives from another class. The child class will inherit all the public and protected properties and methods from the parent class. In addition, it can have its own properties and methods. An inherited class is defined by using the extends keyword. <?php class Fruit { public $name ; public $color ; public function __construct ( $name , $color ) { $this -> name = $name ; $this -> color = $color ; } public function intro () { echo \"The fruit is { $this -> name } and the color is { $this -> color } .\" ; } } // Strawberry is inherited from Fruit class Strawberry extends Fruit { public function message () { echo \"Am I a fruit or a berry? \" ; } } $strawberry = new Strawberry ( \"Strawberry\" , \"red\" ); $strawberry -> message (); $strawberry -> intro (); ?> Protected Access Modifier <?php class Fruit { public $name ; public $color ; public function __construct ( $name , $color ) { $this -> name = $name ; $this -> color = $color ; } protected function intro () { echo \"The fruit is { $this -> name } and the color is { $this -> color } .\" ; } } class Strawberry extends Fruit { public function message () { echo \"Am I a fruit or a berry? \" ; // Call protected method from within derived class - OK $this -> intro (); } } $strawberry = new Strawberry ( \"Strawberry\" , \"red\" ); // OK. __construct() is public $strawberry -> message (); // OK. message() is public and it calls intro() (which is protected) from within the derived class ?> Overriding Inherited Methods Inherited methods can be overridden by redefining the methods (use the same name) in the child class. <?php class Fruit { public $name ; public $color ; public function __construct ( $name , $color ) { $this -> name = $name ; $this -> color = $color ; } public function intro () { echo \"The fruit is { $this -> name } and the color is { $this -> color } .\" ; } } class Strawberry extends Fruit { public $weight ; public function __construct ( $name , $color , $weight ) { $this -> name = $name ; $this -> color = $color ; $this -> weight = $weight ; } public function intro () { echo \"The fruit is { $this -> name } , the color is { $this -> color } , and the weight is { $this -> weight } gram.\" ; } } $strawberry = new Strawberry ( \"Strawberry\" , \"red\" , 50 ); $strawberry -> intro (); ?> The final Keyword The final keyword can be used to prevent class inheritance. <?php final class Fruit { // some code } // will result in error class Strawberry extends Fruit { // some code } ?> or to prevent method overriding. <?php class Fruit { final public function intro () { // some code } } class Strawberry extends Fruit { // will result in error public function intro () { // some code } } ?>","title":"Inheritance"},{"location":"Classes/phpInheritance/#protected-access-modifier","text":"<?php class Fruit { public $name ; public $color ; public function __construct ( $name , $color ) { $this -> name = $name ; $this -> color = $color ; } protected function intro () { echo \"The fruit is { $this -> name } and the color is { $this -> color } .\" ; } } class Strawberry extends Fruit { public function message () { echo \"Am I a fruit or a berry? \" ; // Call protected method from within derived class - OK $this -> intro (); } } $strawberry = new Strawberry ( \"Strawberry\" , \"red\" ); // OK. __construct() is public $strawberry -> message (); // OK. message() is public and it calls intro() (which is protected) from within the derived class ?>","title":"Protected Access Modifier"},{"location":"Classes/phpInheritance/#overriding-inherited-methods","text":"Inherited methods can be overridden by redefining the methods (use the same name) in the child class. <?php class Fruit { public $name ; public $color ; public function __construct ( $name , $color ) { $this -> name = $name ; $this -> color = $color ; } public function intro () { echo \"The fruit is { $this -> name } and the color is { $this -> color } .\" ; } } class Strawberry extends Fruit { public $weight ; public function __construct ( $name , $color , $weight ) { $this -> name = $name ; $this -> color = $color ; $this -> weight = $weight ; } public function intro () { echo \"The fruit is { $this -> name } , the color is { $this -> color } , and the weight is { $this -> weight } gram.\" ; } } $strawberry = new Strawberry ( \"Strawberry\" , \"red\" , 50 ); $strawberry -> intro (); ?>","title":"Overriding Inherited Methods"},{"location":"Classes/phpInheritance/#the-final-keyword","text":"The final keyword can be used to prevent class inheritance. <?php final class Fruit { // some code } // will result in error class Strawberry extends Fruit { // some code } ?> or to prevent method overriding. <?php class Fruit { final public function intro () { // some code } } class Strawberry extends Fruit { // will result in error public function intro () { // some code } } ?>","title":"The final Keyword"},{"location":"Classes/phpInterfaces/","text":"Interfaces allow you to specify what methods a class should implement. Interfaces make it easy to use a variety of different classes in the same way. When one or more classes use the same interface, it is referred to as \"polymorphism\". Interfaces are declared with the interface keyword. <?php interface InterfaceName { public function someMethod1 (); public function someMethod2 ( $name , $color ); public function someMethod3 () : string ; } ?> Interfaces vs. Abstract Classes Interface are similar to abstract classes. The difference between interfaces and abstract classes are: Interfaces cannot have properties, while abstract classes can All interface methods must be public, while abstract class methods is public or protected All methods in an interface are abstract, so they cannot be implemented in code and the abstract keyword is not necessary Classes can implement an interface while inheriting from another class at the same time Using Interfaces To implement an interface, a class must use the implements keyword. A class that implements an interface must implement all of the interface's methods. The implements keyword is used to declare that a class must have the methods described in the specified interface. This is called polymorphism. Polymorphism makes it easy to use a variety of different objects in the same way. <?php interface Animal { public function makeSound (); } class Cat implements Animal { public function makeSound () { echo \"Meow\" ; } } $animal = new Cat (); $animal -> makeSound (); ?> <?php // Interface definition interface Animal { public function makeSound (); } // Class definitions class Cat implements Animal { public function makeSound () { echo \" Meow \" ; } } class Dog implements Animal { public function makeSound () { echo \" Bark \" ; } } class Mouse implements Animal { public function makeSound () { echo \" Squeak \" ; } } // Create a list of animals $cat = new Cat (); $dog = new Dog (); $mouse = new Mouse (); $animals = array ( $cat , $dog , $mouse ); // Tell the animals to make a sound foreach ( $animals as $animal ) { $animal -> makeSound (); } ?>","title":"Interfaces"},{"location":"Classes/phpInterfaces/#interfaces-vs-abstract-classes","text":"Interface are similar to abstract classes. The difference between interfaces and abstract classes are: Interfaces cannot have properties, while abstract classes can All interface methods must be public, while abstract class methods is public or protected All methods in an interface are abstract, so they cannot be implemented in code and the abstract keyword is not necessary Classes can implement an interface while inheriting from another class at the same time","title":"Interfaces vs. Abstract Classes"},{"location":"Classes/phpInterfaces/#using-interfaces","text":"To implement an interface, a class must use the implements keyword. A class that implements an interface must implement all of the interface's methods. The implements keyword is used to declare that a class must have the methods described in the specified interface. This is called polymorphism. Polymorphism makes it easy to use a variety of different objects in the same way. <?php interface Animal { public function makeSound (); } class Cat implements Animal { public function makeSound () { echo \"Meow\" ; } } $animal = new Cat (); $animal -> makeSound (); ?> <?php // Interface definition interface Animal { public function makeSound (); } // Class definitions class Cat implements Animal { public function makeSound () { echo \" Meow \" ; } } class Dog implements Animal { public function makeSound () { echo \" Bark \" ; } } class Mouse implements Animal { public function makeSound () { echo \" Squeak \" ; } } // Create a list of animals $cat = new Cat (); $dog = new Dog (); $mouse = new Mouse (); $animals = array ( $cat , $dog , $mouse ); // Tell the animals to make a sound foreach ( $animals as $animal ) { $animal -> makeSound (); } ?>","title":"Using Interfaces"},{"location":"Classes/phpModifiers/","text":"There are three access modifiers: public - the property or method can be accessed from everywhere. This is default protected - the property or method can be accessed within the class and by classes derived from that class private - the property or method can ONLY be accessed within the class <?php class Fruit { public $name ; protected $color ; private $weight ; } $mango = new Fruit (); $mango -> name = 'Mango' ; // OK $mango -> color = 'Yellow' ; // ERROR $mango -> weight = '300' ; // ERROR ?> <?php class Fruit { public $name ; public $color ; public $weight ; function set_name ( $n ) { // a public function (default) $this -> name = $n ; } protected function set_color ( $n ) { // a protected function $this -> color = $n ; } private function set_weight ( $n ) { // a private function $this -> weight = $n ; } } $mango = new Fruit (); $mango -> set_name ( 'Mango' ); // OK $mango -> set_color ( 'Yellow' ); // ERROR $mango -> set_weight ( '300' ); // ERROR ?>","title":"Access Modifiers"},{"location":"Classes/phpNamespaces/","text":"Declaring a Namespace Namespaces are declared at the beginning of a file using the namespace keyword. <?php namespace Html ; ?> A namespace declaration must be the first thing in the PHP file. The following code would be invalid. Constants, classes and functions declared in this file will belong to the Html namespace: <?php namespace Html ; class Table { public $title = \"\" ; public $numRows = 0 ; public function message () { echo \"<p>Table ' { $this -> title } ' has { $this -> numRows } rows.</p>\" ; } } $table = new Table (); $table -> title = \"My table\" ; $table -> numRows = 5 ; ?> <!DOCTYPE html> <html> <body> <?php $table -> message (); ?> </body> </html> Nested Namespaces Namespaces can be nested. <?php namespace Code\\Html ; ?> Using Namespaces Any code that follows a namespace declaration is operating inside the namespace, so classes that belong to the namespace can be instantiated without any qualifiers. To access classes from outside a namespace, the class needs to have the namespace attached to it. <?php $table = new Html\\Table (); $row = new Html\\Row (); ?> When many classes from the same namespace are being used at the same time, it is easier to use the namespace keyword. <?php namespace Html ; $table = new Table (); $row = new Row (); ?> Namespace Alias It can be useful to give a namespace or class an alias to make it easier to write. This is done with the use keyword. <?php use Html as H ; $table = new H\\Table (); ?> <?php use Html\\Table as T ; $table = new T (); ?>","title":"Namespaces"},{"location":"Classes/phpNamespaces/#declaring-a-namespace","text":"Namespaces are declared at the beginning of a file using the namespace keyword. <?php namespace Html ; ?> A namespace declaration must be the first thing in the PHP file. The following code would be invalid. Constants, classes and functions declared in this file will belong to the Html namespace: <?php namespace Html ; class Table { public $title = \"\" ; public $numRows = 0 ; public function message () { echo \"<p>Table ' { $this -> title } ' has { $this -> numRows } rows.</p>\" ; } } $table = new Table (); $table -> title = \"My table\" ; $table -> numRows = 5 ; ?> <!DOCTYPE html> <html> <body> <?php $table -> message (); ?> </body> </html>","title":"Declaring a Namespace"},{"location":"Classes/phpNamespaces/#nested-namespaces","text":"Namespaces can be nested. <?php namespace Code\\Html ; ?>","title":"Nested Namespaces"},{"location":"Classes/phpNamespaces/#using-namespaces","text":"Any code that follows a namespace declaration is operating inside the namespace, so classes that belong to the namespace can be instantiated without any qualifiers. To access classes from outside a namespace, the class needs to have the namespace attached to it. <?php $table = new Html\\Table (); $row = new Html\\Row (); ?> When many classes from the same namespace are being used at the same time, it is easier to use the namespace keyword. <?php namespace Html ; $table = new Table (); $row = new Row (); ?>","title":"Using Namespaces"},{"location":"Classes/phpNamespaces/#namespace-alias","text":"It can be useful to give a namespace or class an alias to make it easier to write. This is done with the use keyword. <?php use Html as H ; $table = new H\\Table (); ?> <?php use Html\\Table as T ; $table = new T (); ?>","title":"Namespace Alias"},{"location":"Classes/phpStatic/","text":"Static Methods Static methods can be called directly - without creating an instance of the class first. Static methods are declared with the static keyword. <?php class greeting { public static function welcome () { echo \"Hello World!\" ; } } // Call static method greeting :: welcome (); ?> To access a static method use the class name, double colon (::), and the method name. A class can have both static and non-static methods. A static method can be accessed from a method in the same class using the self keyword and double colon (::). <?php class greeting { public static function welcome () { echo \"Hello World!\" ; } public function __construct () { self :: welcome (); } } new greeting (); ?> Static methods can also be called from methods in other classes. To do this, the static method should be public. <?php class A { public static function welcome () { echo \"Hello World!\" ; } } class B { public function message () { A :: welcome (); } } $obj = new B (); echo $obj -> message (); ?> To call a static method from a child class, use the parent keyword inside the child class. Here, the static method can be public or protected. <?php class domain { protected static function getWebsiteName () { return \"W3Schools.com\" ; } } class domainW3 extends domain { public $websiteName ; public function __construct () { $this -> websiteName = parent :: getWebsiteName (); } } $domainW3 = new domainW3 ; echo $domainW3 -> websiteName ; ?> Static Properties Static properties can be called directly - without creating an instance of a class. Static properties are declared with the static keyword. <?php class pi { public static $value = 3.14159 ; } // Get static property echo pi :: $value ; ?> A class can have both static and non-static properties. A static property can be accessed from a method in the same class using the self keyword and double colon (::). <?php class pi { public static $value = 3.14159 ; public function staticValue () { return self :: $value ; } } $pi = new pi (); echo $pi -> staticValue (); ?> To call a static property from a child class, use the parent keyword inside the child class. <?php class pi { public static $value = 3.14159 ; } class x extends pi { public function xStatic () { return parent :: $value ; } } // Get value of static property directly via child class echo x :: $value ; // or get value of static property via xStatic() method $x = new x (); echo $x -> xStatic (); ?>","title":"Static"},{"location":"Classes/phpStatic/#static-methods","text":"Static methods can be called directly - without creating an instance of the class first. Static methods are declared with the static keyword. <?php class greeting { public static function welcome () { echo \"Hello World!\" ; } } // Call static method greeting :: welcome (); ?> To access a static method use the class name, double colon (::), and the method name. A class can have both static and non-static methods. A static method can be accessed from a method in the same class using the self keyword and double colon (::). <?php class greeting { public static function welcome () { echo \"Hello World!\" ; } public function __construct () { self :: welcome (); } } new greeting (); ?> Static methods can also be called from methods in other classes. To do this, the static method should be public. <?php class A { public static function welcome () { echo \"Hello World!\" ; } } class B { public function message () { A :: welcome (); } } $obj = new B (); echo $obj -> message (); ?> To call a static method from a child class, use the parent keyword inside the child class. Here, the static method can be public or protected. <?php class domain { protected static function getWebsiteName () { return \"W3Schools.com\" ; } } class domainW3 extends domain { public $websiteName ; public function __construct () { $this -> websiteName = parent :: getWebsiteName (); } } $domainW3 = new domainW3 ; echo $domainW3 -> websiteName ; ?>","title":"Static Methods"},{"location":"Classes/phpStatic/#static-properties","text":"Static properties can be called directly - without creating an instance of a class. Static properties are declared with the static keyword. <?php class pi { public static $value = 3.14159 ; } // Get static property echo pi :: $value ; ?> A class can have both static and non-static properties. A static property can be accessed from a method in the same class using the self keyword and double colon (::). <?php class pi { public static $value = 3.14159 ; public function staticValue () { return self :: $value ; } } $pi = new pi (); echo $pi -> staticValue (); ?> To call a static property from a child class, use the parent keyword inside the child class. <?php class pi { public static $value = 3.14159 ; } class x extends pi { public function xStatic () { return parent :: $value ; } } // Get value of static property directly via child class echo x :: $value ; // or get value of static property via xStatic() method $x = new x (); echo $x -> xStatic (); ?>","title":"Static Properties"},{"location":"Classes/phpTraits/","text":"PHP only supports single inheritance: a child class can inherit only from one single parent. So, what if a class needs to inherit multiple behaviors? OOP traits solve this problem. Traits are used to declare methods that can be used in multiple classes. Traits can have methods and abstract methods that can be used in multiple classes, and the methods can have any access modifier (public, private, or protected). Traits are declared with the trait keyword. <?php trait message1 { public function msg1 () { echo \"OOP is fun! \" ; } } class Welcome { use message1 ; } $obj = new Welcome (); $obj -> msg1 (); ?> Using Multiple Traits <?php trait message1 { public function msg1 () { echo \"OOP is fun! \" ; } } trait message2 { public function msg2 () { echo \"OOP reduces code duplication!\" ; } } class Welcome { use message1 ; } class Welcome2 { use message1 , message2 ; } $obj = new Welcome (); $obj -> msg1 (); echo \"<br>\" ; $obj2 = new Welcome2 (); $obj2 -> msg1 (); $obj2 -> msg2 (); ?> Trait Alias <?php trait message1 { public function msg1 () { echo \"OOP is fun! \" ; } } class Welcome { use message1 { message1 :: msg1 as msg ; } } $obj = new Welcome (); $obj -> msg (); ?> The insteadof Keyword The insteadof keyword allows you to select from which trait a method should be taken if more than one trait has a method with the same name. <?php trait message1 { public function msgA () { echo \"My favorite color is red. \" ; } public function msgB () { echo \"My favorite number is 5. \" ; } } trait message2 { public function msgA () { echo \"My favorite color is blue. \" ; } public function msgB () { echo \"My favorite number is 7. \" ; } } class MyClass { use message1 , message2 { message1 :: msgA insteadof message2 ; message2 :: msgB insteadof message1 ; } } $obj = new MyClass (); $obj -> msgA (); $obj -> msgB (); ?>","title":"Traits"},{"location":"Classes/phpTraits/#using-multiple-traits","text":"<?php trait message1 { public function msg1 () { echo \"OOP is fun! \" ; } } trait message2 { public function msg2 () { echo \"OOP reduces code duplication!\" ; } } class Welcome { use message1 ; } class Welcome2 { use message1 , message2 ; } $obj = new Welcome (); $obj -> msg1 (); echo \"<br>\" ; $obj2 = new Welcome2 (); $obj2 -> msg1 (); $obj2 -> msg2 (); ?>","title":"Using Multiple Traits"},{"location":"Classes/phpTraits/#trait-alias","text":"<?php trait message1 { public function msg1 () { echo \"OOP is fun! \" ; } } class Welcome { use message1 { message1 :: msg1 as msg ; } } $obj = new Welcome (); $obj -> msg (); ?>","title":"Trait Alias"},{"location":"Classes/phpTraits/#the-insteadof-keyword","text":"The insteadof keyword allows you to select from which trait a method should be taken if more than one trait has a method with the same name. <?php trait message1 { public function msgA () { echo \"My favorite color is red. \" ; } public function msgB () { echo \"My favorite number is 5. \" ; } } trait message2 { public function msgA () { echo \"My favorite color is blue. \" ; } public function msgB () { echo \"My favorite number is 7. \" ; } } class MyClass { use message1 , message2 { message1 :: msgA insteadof message2 ; message2 :: msgB insteadof message1 ; } } $obj = new MyClass (); $obj -> msgA (); $obj -> msgB (); ?>","title":"The insteadof Keyword"},{"location":"DS/phpArray/","text":"An array stores multiple values in one single variable. <?php $cars = array ( \"Volvo\" , \"BMW\" , \"Toyota\" ); echo \"I like \" . $cars [ 0 ] . \", \" . $cars [ 1 ] . \" and \" . $cars [ 2 ] . \".\" ; ?> Create an Array in PHP In PHP, the array() function is used to create an array: array(); In PHP, there are three types of arrays: Indexed arrays - Arrays with a numeric index Associative arrays - Arrays with named keys Multidimensional arrays - Arrays containing one or more arrays PHP Indexed Arrays There are two ways to create indexed arrays: The index can be assigned automatically (index always starts at 0), like this: $cars = array(\"Volvo\", \"BMW\", \"Toyota\"); or the index can be assigned manually: $cars[0] = \"Volvo\"; $cars[1] = \"BMW\"; $cars[2] = \"Toyota\"; <?php $cars = array ( \"Volvo\" , \"BMW\" , \"Toyota\" ); echo \"I like \" . $cars [ 0 ] . \", \" . $cars [ 1 ] . \" and \" . $cars [ 2 ] . \".\" ; ?> <?php $cars = array ( \"Volvo\" , \"BMW\" , \"Toyota\" ); $arrlength = count ( $cars ); for ( $x = 0 ; $x < $arrlength ; $x ++ ) { echo $cars [ $x ]; echo \"<br>\" ; } ?> PHP Associative Arrays Associative arrays are arrays with named keys. There are two ways to create an associative array: $age = array(\"Peter\"=>\"35\", \"Ben\"=>\"37\", \"Joe\"=>\"43\"); or: $age['Peter'] = \"35\"; $age['Ben'] = \"37\"; $age['Joe'] = \"43\"; <?php $age = array ( \"Peter\" => \"35\" , \"Ben\" => \"37\" , \"Joe\" => \"43\" ); echo \"Peter is \" . $age [ 'Peter' ] . \" years old.\" ; ?> <?php $age = array ( \"Peter\" => \"35\" , \"Ben\" => \"37\" , \"Joe\" => \"43\" ); foreach ( $age as $x => $x_value ) { echo \"Key=\" . $x . \", Value=\" . $x_value ; echo \"<br>\" ; } ?> PHP Multidimensional Arrays Multidimensional arrays are arrays containing one or more arrays. <?php $cars = array ( array ( \"Volvo\" , 22 , 18 ), array ( \"BMW\" , 15 , 13 ), array ( \"Saab\" , 5 , 2 ), array ( \"Land Rover\" , 17 , 15 ) ); echo $cars [ 0 ][ 0 ] . \": In stock: \" . $cars [ 0 ][ 1 ] . \", sold: \" . $cars [ 0 ][ 2 ] . \".<br>\" ; echo $cars [ 1 ][ 0 ] . \": In stock: \" . $cars [ 1 ][ 1 ] . \", sold: \" . $cars [ 1 ][ 2 ] . \".<br>\" ; echo $cars [ 2 ][ 0 ] . \": In stock: \" . $cars [ 2 ][ 1 ] . \", sold: \" . $cars [ 2 ][ 2 ] . \".<br>\" ; echo $cars [ 3 ][ 0 ] . \": In stock: \" . $cars [ 3 ][ 1 ] . \", sold: \" . $cars [ 3 ][ 2 ] . \".<br>\" ; ?> <?php for ( $row = 0 ; $row < 4 ; $row ++ ) { echo \"<p><b>Row number $row </b></p>\" ; echo \"<ul>\" ; for ( $col = 0 ; $col < 3 ; $col ++ ) { echo \"<li>\" . $cars [ $row ][ $col ] . \"</li>\" ; } echo \"</ul>\" ; } ?> The Array Functions The PHP array functions are used to perform operations on arrays. Modifying Arrays Function Description array() Creates an array array_chunk() Splits an array into chunks of arrays array_combine() Creates an array by using the elements from one \"keys\" array and one \"values\" array array_merge() Merges one or more arrays into one array array_merge_recursive() Merges one or more arrays into one array recursively array_pad() Inserts a specified number of items, with a specified value, to an array array_pop() Deletes the last element of an array array_push() Inserts one or more elements to the end of an array array_shift() Removes the first element from an array, and returns the value of the removed element array_splice() Removes and replaces specified elements of an array array_unique() Removes duplicate values from an array array_unshift() Adds one or more elements to the beginning of an array compact() Create array containing variables and their values range() Creates an array containing a range of elements Update Information in Arrays Function Description array_change_key_case() Changes all keys in an array to lowercase or uppercase array_fill() Fills an array with values array_fill_keys() Fills an array with values, specifying keys array_flip() Flips/Exchanges all keys with their associated values in an array array_map() Sends each value of an array to a user-made function, which returns new values array_replace() Replaces the values of the first array with the values from following arrays array_replace_recursive() Replaces the values of the first array with the values from following arrays recursively array_walk() Applies a user function to every member of an array array_walk_recursive() Applies a user function recursively to every member of an array list() Assigns variables as if they were an array The list Function The list() function is used to create an array from a list of variables. If there are not enough elements in the array it will output a notice and assign null to the remaining variables. <?php list ( $a , $b , $c ) = [ 1 , 2 , 3 ]; echo \" $a is \" . $a . \"<br>\" ; echo \" $b is \" . $b . \"<br>\" ; echo \" $c is \" . $c . \"<br>\" ; ?> Since PHP 7.1.0, which elements are assigned to the variables can be selected using arrow => syntax. <?php list ( 2 => $a , 0 => $b , 1 => $c ) = [ 1 , 2 , 3 ]; echo \" $a is \" . $a . \"<br>\" ; echo \" $b is \" . $b . \"<br>\" ; echo \" $c is \" . $c . \"<br>\" ; ?> Extracting Information from Arrays Function Description array_column() Returns the values from a single column in the input array array_count_values() Counts all the values of an array array_filter() Filters the values of an array using a callback function array_key_exists() Checks if the specified key exists in the array array_keys() Returns all the keys of an array array_product() Calculates the product of the values in an array array_rand() Returns one or more random keys from an array array_reduce() Returns an array as a string, using a user-defined function array_search() Searches an array for a given value and returns the key array_slice() Returns selected parts of an array current() Returns the current element in an array key() Returns the current key in an array array_sum() Returns the sum of the values in an array array_values() Returns all the values of an array count() Returns the number of elements in an array sizeof() Alias of count() each() Deprecated from PHP 7.2. Returns the current key and value pair from an array extract() Imports variables into the current symbol table from an array in_array() Checks if a specified value exists in an array count() The count() function is used to return the length (the number of elements) of an array. <?php $cars = array ( \"Volvo\" , \"BMW\" , \"Toyota\" ); echo count ( $cars ); ?> Comparing Arrays Function Description array_diff() Compare arrays, and returns the differences (compare values only) array_diff_assoc() Compare arrays, and returns the differences (compare keys and values) array_diff_key() Compare arrays, and returns the differences (compare keys only) array_diff_uassoc() Compare arrays, and returns the differences (compare keys and values, using a user-defined key comparison function) array_diff_ukey() Compare arrays, and returns the differences (compare keys only, using a user-defined key comparison function) array_intersect() Compare arrays, and returns the matches (compare values only) array_intersect_assoc() Compare arrays and returns the matches (compare keys and values) array_intersect_key() Compare arrays, and returns the matches (compare keys only) array_intersect_uassoc() Compare arrays, and returns the matches (compare keys and values, using a user-defined key comparison function) array_intersect_ukey() Compare arrays, and returns the matches (compare keys only, using a user-defined key comparison function) array_udiff() Compare arrays, and returns the differences (compare values only, using a user-defined key comparison function) array_udiff_assoc() Compare arrays, and returns the differences (compare keys and values, using a built-in function to compare the keys and a user-defined function to compare the values) array_udiff_uassoc() Compare arrays, and returns the differences (compare keys and values, using two user-defined key comparison functions) array_uintersect() Compare arrays, and returns the matches (compare values only, using a user-defined key comparison function) array_uintersect_assoc() Compare arrays, and returns the matches (compare keys and values, using a built-in function to compare the keys and a user-defined function to compare the values) array_uintersect_uassoc() Compare arrays, and returns the matches (compare keys and values, using two user-defined key comparison functions) Pointer Functions Function Description current() Returns the current element in an array pos() Alias of current() key() Returns the current key in an array next() Advances the internal array pointer of an array prev() Rewinds the internal array pointer reset() Sets the internal pointer of an array to its first element end() Sets the internal pointer of an array to its last element Sorting Arrays Function Description array_multisort() Sorts multiple or multi-dimensional arrays array_reverse() Returns an array in the reverse order arsort() Sorts an associative array in descending order, according to the value asort() Sorts an associative array in ascending order, according to the value krsort() Sorts an associative array in descending order, according to the key ksort() Sorts an associative array in ascending order, according to the key natcasesort() Sorts an array using a case insensitive \"natural order\" algorithm natsort() Sorts an array using a \"natural order\" algorithm rsort() Sorts an indexed array in descending order shuffle() Shuffles an array sort() Sorts an indexed array in ascending order uasort() Sorts an array by values using a user-defined comparison function and maintains the index association uksort() Sorts an array by keys using a user-defined comparison function usort() Sorts an array by values using a user-defined comparison function sort() The sort() function sorts an array alphabetically. <?php $cars = array ( \"Volvo\" , \"BMW\" , \"Toyota\" ); sort ( $cars ); echo $cars [ 0 ]; ?> rsort() The rsort() function sorts an array in descending order. <?php $cars = array ( \"Volvo\" , \"BMW\" , \"Toyota\" ); rsort ( $cars ); echo $cars [ 0 ]; ?> asort() The asort() function sorts an associative array in ascending order, according to the value. <?php $age = array ( \"Peter\" => \"35\" , \"Ben\" => \"37\" , \"Joe\" => \"43\" ); asort ( $age ); foreach ( $age as $x => $x_value ) { echo \"Key=\" . $x . \", Value=\" . $x_value ; echo \"<br>\" ; } ?> ksort() The ksort() function sorts an associative array in ascending order, according to the key. <?php $age = array ( \"Peter\" => \"35\" , \"Ben\" => \"37\" , \"Joe\" => \"43\" ); ksort ( $age ); foreach ( $age as $x => $x_value ) { echo \"Key=\" . $x . \", Value=\" . $x_value ; echo \"<br>\" ; } ?> arsort() The arsort() function sorts an associative array in descending order, according to the value. <?php $age = array ( \"Peter\" => \"35\" , \"Ben\" => \"37\" , \"Joe\" => \"43\" ); arsort ( $age ); foreach ( $age as $x => $x_value ) { echo \"Key=\" . $x . \", Value=\" . $x_value ; echo \"<br>\" ; } ?> krsort() The krsort() function sorts an associative array in descending order, according to the key. <?php $age = array ( \"Peter\" => \"35\" , \"Ben\" => \"37\" , \"Joe\" => \"43\" ); krsort ( $age ); foreach ( $age as $x => $x_value ) { echo \"Key=\" . $x . \", Value=\" . $x_value ; echo \"<br>\" ; } ?>","title":"Array"},{"location":"DS/phpArray/#create-an-array-in-php","text":"In PHP, the array() function is used to create an array: array(); In PHP, there are three types of arrays: Indexed arrays - Arrays with a numeric index Associative arrays - Arrays with named keys Multidimensional arrays - Arrays containing one or more arrays","title":"Create an Array in PHP"},{"location":"DS/phpArray/#php-indexed-arrays","text":"There are two ways to create indexed arrays: The index can be assigned automatically (index always starts at 0), like this: $cars = array(\"Volvo\", \"BMW\", \"Toyota\"); or the index can be assigned manually: $cars[0] = \"Volvo\"; $cars[1] = \"BMW\"; $cars[2] = \"Toyota\"; <?php $cars = array ( \"Volvo\" , \"BMW\" , \"Toyota\" ); echo \"I like \" . $cars [ 0 ] . \", \" . $cars [ 1 ] . \" and \" . $cars [ 2 ] . \".\" ; ?> <?php $cars = array ( \"Volvo\" , \"BMW\" , \"Toyota\" ); $arrlength = count ( $cars ); for ( $x = 0 ; $x < $arrlength ; $x ++ ) { echo $cars [ $x ]; echo \"<br>\" ; } ?>","title":"PHP Indexed Arrays"},{"location":"DS/phpArray/#php-associative-arrays","text":"Associative arrays are arrays with named keys. There are two ways to create an associative array: $age = array(\"Peter\"=>\"35\", \"Ben\"=>\"37\", \"Joe\"=>\"43\"); or: $age['Peter'] = \"35\"; $age['Ben'] = \"37\"; $age['Joe'] = \"43\"; <?php $age = array ( \"Peter\" => \"35\" , \"Ben\" => \"37\" , \"Joe\" => \"43\" ); echo \"Peter is \" . $age [ 'Peter' ] . \" years old.\" ; ?> <?php $age = array ( \"Peter\" => \"35\" , \"Ben\" => \"37\" , \"Joe\" => \"43\" ); foreach ( $age as $x => $x_value ) { echo \"Key=\" . $x . \", Value=\" . $x_value ; echo \"<br>\" ; } ?>","title":"PHP Associative Arrays"},{"location":"DS/phpArray/#php-multidimensional-arrays","text":"Multidimensional arrays are arrays containing one or more arrays. <?php $cars = array ( array ( \"Volvo\" , 22 , 18 ), array ( \"BMW\" , 15 , 13 ), array ( \"Saab\" , 5 , 2 ), array ( \"Land Rover\" , 17 , 15 ) ); echo $cars [ 0 ][ 0 ] . \": In stock: \" . $cars [ 0 ][ 1 ] . \", sold: \" . $cars [ 0 ][ 2 ] . \".<br>\" ; echo $cars [ 1 ][ 0 ] . \": In stock: \" . $cars [ 1 ][ 1 ] . \", sold: \" . $cars [ 1 ][ 2 ] . \".<br>\" ; echo $cars [ 2 ][ 0 ] . \": In stock: \" . $cars [ 2 ][ 1 ] . \", sold: \" . $cars [ 2 ][ 2 ] . \".<br>\" ; echo $cars [ 3 ][ 0 ] . \": In stock: \" . $cars [ 3 ][ 1 ] . \", sold: \" . $cars [ 3 ][ 2 ] . \".<br>\" ; ?> <?php for ( $row = 0 ; $row < 4 ; $row ++ ) { echo \"<p><b>Row number $row </b></p>\" ; echo \"<ul>\" ; for ( $col = 0 ; $col < 3 ; $col ++ ) { echo \"<li>\" . $cars [ $row ][ $col ] . \"</li>\" ; } echo \"</ul>\" ; } ?>","title":"PHP Multidimensional Arrays"},{"location":"DS/phpArray/#the-array-functions","text":"The PHP array functions are used to perform operations on arrays.","title":"The Array Functions"},{"location":"DS/phpArray/#modifying-arrays","text":"Function Description array() Creates an array array_chunk() Splits an array into chunks of arrays array_combine() Creates an array by using the elements from one \"keys\" array and one \"values\" array array_merge() Merges one or more arrays into one array array_merge_recursive() Merges one or more arrays into one array recursively array_pad() Inserts a specified number of items, with a specified value, to an array array_pop() Deletes the last element of an array array_push() Inserts one or more elements to the end of an array array_shift() Removes the first element from an array, and returns the value of the removed element array_splice() Removes and replaces specified elements of an array array_unique() Removes duplicate values from an array array_unshift() Adds one or more elements to the beginning of an array compact() Create array containing variables and their values range() Creates an array containing a range of elements","title":"Modifying Arrays"},{"location":"DS/phpArray/#update-information-in-arrays","text":"Function Description array_change_key_case() Changes all keys in an array to lowercase or uppercase array_fill() Fills an array with values array_fill_keys() Fills an array with values, specifying keys array_flip() Flips/Exchanges all keys with their associated values in an array array_map() Sends each value of an array to a user-made function, which returns new values array_replace() Replaces the values of the first array with the values from following arrays array_replace_recursive() Replaces the values of the first array with the values from following arrays recursively array_walk() Applies a user function to every member of an array array_walk_recursive() Applies a user function recursively to every member of an array list() Assigns variables as if they were an array","title":"Update Information in Arrays"},{"location":"DS/phpArray/#the-list-function","text":"The list() function is used to create an array from a list of variables. If there are not enough elements in the array it will output a notice and assign null to the remaining variables. <?php list ( $a , $b , $c ) = [ 1 , 2 , 3 ]; echo \" $a is \" . $a . \"<br>\" ; echo \" $b is \" . $b . \"<br>\" ; echo \" $c is \" . $c . \"<br>\" ; ?> Since PHP 7.1.0, which elements are assigned to the variables can be selected using arrow => syntax. <?php list ( 2 => $a , 0 => $b , 1 => $c ) = [ 1 , 2 , 3 ]; echo \" $a is \" . $a . \"<br>\" ; echo \" $b is \" . $b . \"<br>\" ; echo \" $c is \" . $c . \"<br>\" ; ?>","title":"The list Function"},{"location":"DS/phpArray/#extracting-information-from-arrays","text":"Function Description array_column() Returns the values from a single column in the input array array_count_values() Counts all the values of an array array_filter() Filters the values of an array using a callback function array_key_exists() Checks if the specified key exists in the array array_keys() Returns all the keys of an array array_product() Calculates the product of the values in an array array_rand() Returns one or more random keys from an array array_reduce() Returns an array as a string, using a user-defined function array_search() Searches an array for a given value and returns the key array_slice() Returns selected parts of an array current() Returns the current element in an array key() Returns the current key in an array array_sum() Returns the sum of the values in an array array_values() Returns all the values of an array count() Returns the number of elements in an array sizeof() Alias of count() each() Deprecated from PHP 7.2. Returns the current key and value pair from an array extract() Imports variables into the current symbol table from an array in_array() Checks if a specified value exists in an array","title":"Extracting Information from Arrays"},{"location":"DS/phpArray/#count","text":"The count() function is used to return the length (the number of elements) of an array. <?php $cars = array ( \"Volvo\" , \"BMW\" , \"Toyota\" ); echo count ( $cars ); ?>","title":"count()"},{"location":"DS/phpArray/#comparing-arrays","text":"Function Description array_diff() Compare arrays, and returns the differences (compare values only) array_diff_assoc() Compare arrays, and returns the differences (compare keys and values) array_diff_key() Compare arrays, and returns the differences (compare keys only) array_diff_uassoc() Compare arrays, and returns the differences (compare keys and values, using a user-defined key comparison function) array_diff_ukey() Compare arrays, and returns the differences (compare keys only, using a user-defined key comparison function) array_intersect() Compare arrays, and returns the matches (compare values only) array_intersect_assoc() Compare arrays and returns the matches (compare keys and values) array_intersect_key() Compare arrays, and returns the matches (compare keys only) array_intersect_uassoc() Compare arrays, and returns the matches (compare keys and values, using a user-defined key comparison function) array_intersect_ukey() Compare arrays, and returns the matches (compare keys only, using a user-defined key comparison function) array_udiff() Compare arrays, and returns the differences (compare values only, using a user-defined key comparison function) array_udiff_assoc() Compare arrays, and returns the differences (compare keys and values, using a built-in function to compare the keys and a user-defined function to compare the values) array_udiff_uassoc() Compare arrays, and returns the differences (compare keys and values, using two user-defined key comparison functions) array_uintersect() Compare arrays, and returns the matches (compare values only, using a user-defined key comparison function) array_uintersect_assoc() Compare arrays, and returns the matches (compare keys and values, using a built-in function to compare the keys and a user-defined function to compare the values) array_uintersect_uassoc() Compare arrays, and returns the matches (compare keys and values, using two user-defined key comparison functions)","title":"Comparing Arrays"},{"location":"DS/phpArray/#pointer-functions","text":"Function Description current() Returns the current element in an array pos() Alias of current() key() Returns the current key in an array next() Advances the internal array pointer of an array prev() Rewinds the internal array pointer reset() Sets the internal pointer of an array to its first element end() Sets the internal pointer of an array to its last element","title":"Pointer Functions"},{"location":"DS/phpArray/#sorting-arrays","text":"Function Description array_multisort() Sorts multiple or multi-dimensional arrays array_reverse() Returns an array in the reverse order arsort() Sorts an associative array in descending order, according to the value asort() Sorts an associative array in ascending order, according to the value krsort() Sorts an associative array in descending order, according to the key ksort() Sorts an associative array in ascending order, according to the key natcasesort() Sorts an array using a case insensitive \"natural order\" algorithm natsort() Sorts an array using a \"natural order\" algorithm rsort() Sorts an indexed array in descending order shuffle() Shuffles an array sort() Sorts an indexed array in ascending order uasort() Sorts an array by values using a user-defined comparison function and maintains the index association uksort() Sorts an array by keys using a user-defined comparison function usort() Sorts an array by values using a user-defined comparison function","title":"Sorting Arrays"},{"location":"DS/phpArray/#sort","text":"The sort() function sorts an array alphabetically. <?php $cars = array ( \"Volvo\" , \"BMW\" , \"Toyota\" ); sort ( $cars ); echo $cars [ 0 ]; ?>","title":"sort()"},{"location":"DS/phpArray/#rsort","text":"The rsort() function sorts an array in descending order. <?php $cars = array ( \"Volvo\" , \"BMW\" , \"Toyota\" ); rsort ( $cars ); echo $cars [ 0 ]; ?>","title":"rsort()"},{"location":"DS/phpArray/#asort","text":"The asort() function sorts an associative array in ascending order, according to the value. <?php $age = array ( \"Peter\" => \"35\" , \"Ben\" => \"37\" , \"Joe\" => \"43\" ); asort ( $age ); foreach ( $age as $x => $x_value ) { echo \"Key=\" . $x . \", Value=\" . $x_value ; echo \"<br>\" ; } ?>","title":"asort()"},{"location":"DS/phpArray/#ksort","text":"The ksort() function sorts an associative array in ascending order, according to the key. <?php $age = array ( \"Peter\" => \"35\" , \"Ben\" => \"37\" , \"Joe\" => \"43\" ); ksort ( $age ); foreach ( $age as $x => $x_value ) { echo \"Key=\" . $x . \", Value=\" . $x_value ; echo \"<br>\" ; } ?>","title":"ksort()"},{"location":"DS/phpArray/#arsort","text":"The arsort() function sorts an associative array in descending order, according to the value. <?php $age = array ( \"Peter\" => \"35\" , \"Ben\" => \"37\" , \"Joe\" => \"43\" ); arsort ( $age ); foreach ( $age as $x => $x_value ) { echo \"Key=\" . $x . \", Value=\" . $x_value ; echo \"<br>\" ; } ?>","title":"arsort()"},{"location":"DS/phpArray/#krsort","text":"The krsort() function sorts an associative array in descending order, according to the key. <?php $age = array ( \"Peter\" => \"35\" , \"Ben\" => \"37\" , \"Joe\" => \"43\" ); krsort ( $age ); foreach ( $age as $x => $x_value ) { echo \"Key=\" . $x . \", Value=\" . $x_value ; echo \"<br>\" ; } ?>","title":"krsort()"},{"location":"DS/phpIterables/","text":"An iterable is any value which can be looped through with a foreach() loop. The iterable pseudo-type was introduced in PHP 7.1, and it can be used as a data type for function arguments and function return values. Using Iterables The iterable keyword can be used as a data type of a function argument or as the return type of a function. <?php function printIterable ( iterable $myIterable ) { foreach ( $myIterable as $item ) { echo $item ; } } $arr = [ \"a\" , \"b\" , \"c\" ]; printIterable ( $arr ); ?> <?php function getIterable () : iterable { return [ \"a\" , \"b\" , \"c\" ]; } $myIterable = getIterable (); foreach ( $myIterable as $item ) { echo $item ; } ?> Creating Iterables Arrays All arrays are iterables, so any array can be used as an argument of a function that requires an iterable. Iterators Any object that implements the Iterator interface can be used as an argument of a function that requires an iterable. An iterator contains a list of items and provides methods to loop through them. It keeps a pointer to one of the elements in the list. Each item in the list should have a key which can be used to find the item. An iterator must have these methods: current() - Returns the element that the pointer is currently pointing to. It can be any data type key() Returns the key associated with the current element in the list. It can only be an integer, float, boolean or string next() Moves the pointer to the next element in the list rewind() Moves the pointer to the first element in the list valid() If the internal pointer is not pointing to any element (for example, if next() was called at the end of the list), this should return false. It returns true in any other case <?php // Create an Iterator class MyIterator implements Iterator { private $items = []; private $pointer = 0 ; public function __construct ( $items ) { // array_values() makes sure that the keys are numbers $this -> items = array_values ( $items ); } public function current () { return $this -> items [ $this -> pointer ]; } public function key () { return $this -> pointer ; } public function next () { $this -> pointer ++ ; } public function rewind () { $this -> pointer = 0 ; } public function valid () { // count() indicates how many items are in the list return $this -> pointer < count ( $this -> items ); } } // A function that uses iterables function printIterable ( iterable $myIterable ) { foreach ( $myIterable as $item ) { echo $item ; } } // Use the iterator as an iterable $iterator = new MyIterator ([ \"a\" , \"b\" , \"c\" ]); printIterable ( $iterator ); ?>","title":"Iterables"},{"location":"DS/phpIterables/#using-iterables","text":"The iterable keyword can be used as a data type of a function argument or as the return type of a function. <?php function printIterable ( iterable $myIterable ) { foreach ( $myIterable as $item ) { echo $item ; } } $arr = [ \"a\" , \"b\" , \"c\" ]; printIterable ( $arr ); ?> <?php function getIterable () : iterable { return [ \"a\" , \"b\" , \"c\" ]; } $myIterable = getIterable (); foreach ( $myIterable as $item ) { echo $item ; } ?>","title":"Using Iterables"},{"location":"DS/phpIterables/#creating-iterables","text":"","title":"Creating Iterables"},{"location":"DS/phpIterables/#arrays","text":"All arrays are iterables, so any array can be used as an argument of a function that requires an iterable.","title":"Arrays"},{"location":"DS/phpIterables/#iterators","text":"Any object that implements the Iterator interface can be used as an argument of a function that requires an iterable. An iterator contains a list of items and provides methods to loop through them. It keeps a pointer to one of the elements in the list. Each item in the list should have a key which can be used to find the item. An iterator must have these methods: current() - Returns the element that the pointer is currently pointing to. It can be any data type key() Returns the key associated with the current element in the list. It can only be an integer, float, boolean or string next() Moves the pointer to the next element in the list rewind() Moves the pointer to the first element in the list valid() If the internal pointer is not pointing to any element (for example, if next() was called at the end of the list), this should return false. It returns true in any other case <?php // Create an Iterator class MyIterator implements Iterator { private $items = []; private $pointer = 0 ; public function __construct ( $items ) { // array_values() makes sure that the keys are numbers $this -> items = array_values ( $items ); } public function current () { return $this -> items [ $this -> pointer ]; } public function key () { return $this -> pointer ; } public function next () { $this -> pointer ++ ; } public function rewind () { $this -> pointer = 0 ; } public function valid () { // count() indicates how many items are in the list return $this -> pointer < count ( $this -> items ); } } // A function that uses iterables function printIterable ( iterable $myIterable ) { foreach ( $myIterable as $item ) { echo $item ; } } // Use the iterator as an iterable $iterator = new MyIterator ([ \"a\" , \"b\" , \"c\" ]); printIterable ( $iterator ); ?>","title":"Iterators"},{"location":"Func/phpAll/","text":"PHP has over 1000 built-in functions that can be called directly, from within a script, to perform a specific task. Category Libraries Time and Date * Date Calendar File Management * Filesystem Directory Zip Error and Exception Handling * Error Exception Output Control Network * FTP Mail Network Text Processing * String RegEx Filter Text Formats * JSON XML Parser SimpleXML Database * MySQLi Other * Math Var Handling Misc","title":"All"},{"location":"Func/phpArrowFunc/","text":"The fn keyword is used to create arrow functions. Arrow functions are only available in PHP versions 7.4 and up. Arrow functions have access to all variables from the scope in which they were created. The general syntax of an arrow function is: fn(arguments) => expression to be returned; <?php // This only works in PHP 7.4 and above $str = \"Hello World\" ; $my_function = fn ( $a ) => $str . $a ; echo $my_function ( \"!\" ); ?>","title":"Arrow Function"},{"location":"Func/phpCalendar/","text":"The calendar extension contains functions that simplifies converting between different calendar formats. It is based on the Julian Day Count, which is a count of days starting from January 1st, 4713 B.C. Note: To convert between calendar formats, you must first convert to Julian Day Count, then to the calendar of your choice. Note: The Julian Day Count is not the same as the Julian Calendar! PHP Calendar Functions Function Description cal_days_in_month() Returns the number of days in a month for a specified year and calendar cal_from_jd() Converts a Julian Day Count into a date of a specified calendar cal_info() Returns information about a specified calendar cal_to_jd() Converts a date in a specified calendar to Julian Day Count easter_date() Returns the Unix timestamp for midnight on Easter of a specified year easter_days() Returns the number of days after March 21, that the Easter Day is in a specified year frenchtojd() Converts a French Republican date to a Julian Day Count gregoriantojd() Converts a Gregorian date to a Julian Day Count jddayofweek() Returns the day of the week jdmonthname() Returns a month name jdtofrench() Converts a Julian Day Count to a French Republican date jdtogregorian() Converts a Julian Day Count to a Gregorian date jdtojewish() Converts a Julian Day Count to a Jewish date jdtojulian() Converts a Julian Day Count to a Julian date jdtounix() Converts Julian Day Count to Unix timestamp jewishtojd() Converts a Jewish date to a Julian Day Count juliantojd() Converts a Julian date to a Julian Day Count unixtojd() Converts Unix timestamp to Julian Day Count PHP Predefined Calendar Constants Constant Type PHP Version CAL_GREGORIAN Integer PHP 4 CAL_JULIAN Integer PHP 4 CAL_JEWISH Integer PHP 4 CAL_FRENCH Integer PHP 4 CAL_NUM_CALS Integer PHP 4 CAL_DOW_DAYNO Integer PHP 4 CAL_DOW_SHORT Integer PHP 4 CAL_DOW_LONG Integer PHP 4 CAL_MONTH_GREGORIAN_SHORT Integer PHP 4 CAL_MONTH_GREGORIAN_LONG Integer PHP 4 CAL_MONTH_JULIAN_SHORT Integer PHP 4 CAL_MONTH_JULIAN_LONG Integer PHP 4 CAL_MONTH_JEWISH Integer PHP 4 CAL_MONTH_FRENCH Integer PHP 4 CAL_EASTER_DEFAULT Integer PHP 4.3 CAL_EASTER_ROMAN Integer PHP 4.3 CAL_EASTER_ALWAYS_GREGORIAN Integer PHP 4.3 CAL_EASTER_ALWAYS_JULIAN Integer PHP 4.3 CAL_JEWISH_ADD_ALAFIM_GERESH Integer PHP 5.0 CAL_JEWISH_ADD_ALAFIM Integer PHP 5.0 CAL_JEWISH_ADD_GERESHAYIM Integer PHP 5.0","title":"Calendar"},{"location":"Func/phpCalendar/#php-calendar-functions","text":"Function Description cal_days_in_month() Returns the number of days in a month for a specified year and calendar cal_from_jd() Converts a Julian Day Count into a date of a specified calendar cal_info() Returns information about a specified calendar cal_to_jd() Converts a date in a specified calendar to Julian Day Count easter_date() Returns the Unix timestamp for midnight on Easter of a specified year easter_days() Returns the number of days after March 21, that the Easter Day is in a specified year frenchtojd() Converts a French Republican date to a Julian Day Count gregoriantojd() Converts a Gregorian date to a Julian Day Count jddayofweek() Returns the day of the week jdmonthname() Returns a month name jdtofrench() Converts a Julian Day Count to a French Republican date jdtogregorian() Converts a Julian Day Count to a Gregorian date jdtojewish() Converts a Julian Day Count to a Jewish date jdtojulian() Converts a Julian Day Count to a Julian date jdtounix() Converts Julian Day Count to Unix timestamp jewishtojd() Converts a Jewish date to a Julian Day Count juliantojd() Converts a Julian date to a Julian Day Count unixtojd() Converts Unix timestamp to Julian Day Count","title":"PHP Calendar Functions"},{"location":"Func/phpCalendar/#php-predefined-calendar-constants","text":"Constant Type PHP Version CAL_GREGORIAN Integer PHP 4 CAL_JULIAN Integer PHP 4 CAL_JEWISH Integer PHP 4 CAL_FRENCH Integer PHP 4 CAL_NUM_CALS Integer PHP 4 CAL_DOW_DAYNO Integer PHP 4 CAL_DOW_SHORT Integer PHP 4 CAL_DOW_LONG Integer PHP 4 CAL_MONTH_GREGORIAN_SHORT Integer PHP 4 CAL_MONTH_GREGORIAN_LONG Integer PHP 4 CAL_MONTH_JULIAN_SHORT Integer PHP 4 CAL_MONTH_JULIAN_LONG Integer PHP 4 CAL_MONTH_JEWISH Integer PHP 4 CAL_MONTH_FRENCH Integer PHP 4 CAL_EASTER_DEFAULT Integer PHP 4.3 CAL_EASTER_ROMAN Integer PHP 4.3 CAL_EASTER_ALWAYS_GREGORIAN Integer PHP 4.3 CAL_EASTER_ALWAYS_JULIAN Integer PHP 4.3 CAL_JEWISH_ADD_ALAFIM_GERESH Integer PHP 5.0 CAL_JEWISH_ADD_ALAFIM Integer PHP 5.0 CAL_JEWISH_ADD_GERESHAYIM Integer PHP 5.0","title":"PHP Predefined Calendar Constants"},{"location":"Func/phpCallback/","text":"A callback function (often referred to as just \"callback\") is a function which is passed as an argument into another function. Any existing function can be used as a callback function. To use a function as a callback function, pass a string containing the name of the function as the argument of another function: <?php function my_callback ( $item ) { return strlen ( $item ); } $strings = [ \"apple\" , \"orange\" , \"banana\" , \"coconut\" ]; $lengths = array_map ( \"my_callback\" , $strings ); print_r ( $lengths ); ?> Starting with version 7, PHP can pass anonymous functions as callback functions: <?php $strings = [ \"apple\" , \"orange\" , \"banana\" , \"coconut\" ]; $lengths = array_map ( function ( $item ) { return strlen ( $item ); } , $strings ); print_r ( $lengths ); ?> Callbacks in User Defined Functions User-defined functions and methods can also take callback functions as arguments. To use callback functions inside a user-defined function or method, call it by adding parentheses to the variable and pass arguments as with normal functions: <?php function exclaim ( $str ) { return $str . \"! \" ; } function ask ( $str ) { return $str . \"? \" ; } function printFormatted ( $str , $format ) { // Calling the $format callback function echo $format ( $str ); } // Pass \"exclaim\" and \"ask\" as callback functions to printFormatted() printFormatted ( \"Hello world\" , \"exclaim\" ); printFormatted ( \"Hello world\" , \"ask\" ); ?> PHP callable Keyword Use callable to require a callback function as an argument. The callable keyword is used to force a function argument to be a reference to a function. A callable can be one of the following: An anonymous function A string containing the name of a function An array describing a static class method An array describing an object method <?php function printFormatted ( callable $format , $str ) { echo $format ( $str ); echo \"<br>\" ; } function exclaim ( $str ) { return $str . \"!\" ; } printFormatted ( \"exclaim\" , \"Hello World\" ); ?> <?php function printFormatted ( callable $format , $str ) { echo $format ( $str ); echo \"<br>\" ; } class MyClass { public static function ask ( $str ) { return $str . \"?\" ; } public function brackets ( $str ) { return \"[ $str ]\" ; } } // An anonymous function $func = function ( $str ) { return substr ( $str , 0 , 5 ); }; printFormatted ( $func , \"Hello World\" ); // A string containing the name of a function printFormatted ( \"strtoupper\" , \"Hello World\" ); // An array describing a static class method printFormatted ([ \"MyClass\" , \"ask\" ], \"Hello World\" ); // An array describing an object method $obj = new MyClass (); printFormatted ([ $obj , \"brackets\" ], \"Hello World\" ); ?>","title":"Callback"},{"location":"Func/phpCallback/#callbacks-in-user-defined-functions","text":"User-defined functions and methods can also take callback functions as arguments. To use callback functions inside a user-defined function or method, call it by adding parentheses to the variable and pass arguments as with normal functions: <?php function exclaim ( $str ) { return $str . \"! \" ; } function ask ( $str ) { return $str . \"? \" ; } function printFormatted ( $str , $format ) { // Calling the $format callback function echo $format ( $str ); } // Pass \"exclaim\" and \"ask\" as callback functions to printFormatted() printFormatted ( \"Hello world\" , \"exclaim\" ); printFormatted ( \"Hello world\" , \"ask\" ); ?>","title":"Callbacks in User Defined Functions"},{"location":"Func/phpCallback/#php-callable-keyword","text":"Use callable to require a callback function as an argument. The callable keyword is used to force a function argument to be a reference to a function. A callable can be one of the following: An anonymous function A string containing the name of a function An array describing a static class method An array describing an object method <?php function printFormatted ( callable $format , $str ) { echo $format ( $str ); echo \"<br>\" ; } function exclaim ( $str ) { return $str . \"!\" ; } printFormatted ( \"exclaim\" , \"Hello World\" ); ?> <?php function printFormatted ( callable $format , $str ) { echo $format ( $str ); echo \"<br>\" ; } class MyClass { public static function ask ( $str ) { return $str . \"?\" ; } public function brackets ( $str ) { return \"[ $str ]\" ; } } // An anonymous function $func = function ( $str ) { return substr ( $str , 0 , 5 ); }; printFormatted ( $func , \"Hello World\" ); // A string containing the name of a function printFormatted ( \"strtoupper\" , \"Hello World\" ); // An array describing a static class method printFormatted ([ \"MyClass\" , \"ask\" ], \"Hello World\" ); // An array describing an object method $obj = new MyClass (); printFormatted ([ $obj , \"brackets\" ], \"Hello World\" ); ?>","title":"PHP callable Keyword"},{"location":"Func/phpCookie/","text":"A cookie is often used to identify a user. A cookie is a small file that the server embeds on the user's computer. Each time the same computer requests a page with a browser, it will send the cookie too. With PHP, you can both create and retrieve cookie values. setcookie() setcookie($name, $value = \"\", $expire = \"\", $path = \"\", $domain = \"\", $secure = \"\", $httponly = \"\"); Only the name parameter is required. All other parameters are optional. Create/Retrieve a Cookie The following example creates a cookie named \"user\" with the value \"John Doe\". The cookie will expire after 30 days (86400 * 30). The \"/\" means that the cookie is available in entire website (otherwise, select the directory you prefer). We then retrieve the value of the cookie \"user\" (using the global variable $_COOKIE). We also use the isset() function to find out if the cookie is set: <?php $cookie_name = \"user\" ; $cookie_value = \"John Doe\" ; setcookie ( $cookie_name , $cookie_value , time () + ( 86400 * 30 ), \"/\" ); // 86400 = 1 day ?> <html> <body> <?php if ( ! isset ( $_COOKIE [ $cookie_name ])) { echo \"Cookie named '\" . $cookie_name . \"' is not set!\" ; } else { echo \"Cookie '\" . $cookie_name . \"' is set!<br>\" ; echo \"Value is: \" . $_COOKIE [ $cookie_name ]; } ?> </body> </html> The setcookie() function must appear BEFORE the html tag. The value of the cookie is automatically URLencoded when sending the cookie, and automatically decoded when received (to prevent URLencoding, use setrawcookie() instead). Modify a Cookie Value To modify a cookie, just set (again) the cookie using the setcookie() function: <?php $cookie_name = \"user\" ; $cookie_value = \"Alex Porter\" ; setcookie ( $cookie_name , $cookie_value , time () + ( 86400 * 30 ), \"/\" ); ?> <html> <body> <?php if ( ! isset ( $_COOKIE [ $cookie_name ])) { echo \"Cookie named '\" . $cookie_name . \"' is not set!\" ; } else { echo \"Cookie '\" . $cookie_name . \"' is set!<br>\" ; echo \"Value is: \" . $_COOKIE [ $cookie_name ]; } ?> </body> </html> Delete a Cookie To delete a cookie, use the setcookie() function with an expiration date in the past: <?php // set the expiration date to one hour ago setcookie ( \"user\" , \"\" , time () - 3600 ); ?> <html> <body> <?php echo \"Cookie 'user' is deleted.\" ; ?> </body> </html> Check if Cookies are Enabled The following example creates a small script that checks whether cookies are enabled. First, try to create a test cookie with the setcookie() function, then count the $_COOKIE array variable: <?php setcookie ( \"test_cookie\" , \"test\" , time () + 3600 , '/' ); ?> <html> <body> <?php if ( count ( $_COOKIE ) > 0 ) { echo \"Cookies are enabled.\" ; } else { echo \"Cookies are disabled.\" ; } ?> </body> </html>","title":"Cookies"},{"location":"Func/phpCookie/#setcookie","text":"setcookie($name, $value = \"\", $expire = \"\", $path = \"\", $domain = \"\", $secure = \"\", $httponly = \"\"); Only the name parameter is required. All other parameters are optional.","title":"setcookie()"},{"location":"Func/phpCookie/#createretrieve-a-cookie","text":"The following example creates a cookie named \"user\" with the value \"John Doe\". The cookie will expire after 30 days (86400 * 30). The \"/\" means that the cookie is available in entire website (otherwise, select the directory you prefer). We then retrieve the value of the cookie \"user\" (using the global variable $_COOKIE). We also use the isset() function to find out if the cookie is set: <?php $cookie_name = \"user\" ; $cookie_value = \"John Doe\" ; setcookie ( $cookie_name , $cookie_value , time () + ( 86400 * 30 ), \"/\" ); // 86400 = 1 day ?> <html> <body> <?php if ( ! isset ( $_COOKIE [ $cookie_name ])) { echo \"Cookie named '\" . $cookie_name . \"' is not set!\" ; } else { echo \"Cookie '\" . $cookie_name . \"' is set!<br>\" ; echo \"Value is: \" . $_COOKIE [ $cookie_name ]; } ?> </body> </html> The setcookie() function must appear BEFORE the html tag. The value of the cookie is automatically URLencoded when sending the cookie, and automatically decoded when received (to prevent URLencoding, use setrawcookie() instead).","title":"Create/Retrieve a Cookie"},{"location":"Func/phpCookie/#modify-a-cookie-value","text":"To modify a cookie, just set (again) the cookie using the setcookie() function: <?php $cookie_name = \"user\" ; $cookie_value = \"Alex Porter\" ; setcookie ( $cookie_name , $cookie_value , time () + ( 86400 * 30 ), \"/\" ); ?> <html> <body> <?php if ( ! isset ( $_COOKIE [ $cookie_name ])) { echo \"Cookie named '\" . $cookie_name . \"' is not set!\" ; } else { echo \"Cookie '\" . $cookie_name . \"' is set!<br>\" ; echo \"Value is: \" . $_COOKIE [ $cookie_name ]; } ?> </body> </html>","title":"Modify a Cookie Value"},{"location":"Func/phpCookie/#delete-a-cookie","text":"To delete a cookie, use the setcookie() function with an expiration date in the past: <?php // set the expiration date to one hour ago setcookie ( \"user\" , \"\" , time () - 3600 ); ?> <html> <body> <?php echo \"Cookie 'user' is deleted.\" ; ?> </body> </html>","title":"Delete a Cookie"},{"location":"Func/phpCookie/#check-if-cookies-are-enabled","text":"The following example creates a small script that checks whether cookies are enabled. First, try to create a test cookie with the setcookie() function, then count the $_COOKIE array variable: <?php setcookie ( \"test_cookie\" , \"test\" , time () + 3600 , '/' ); ?> <html> <body> <?php if ( count ( $_COOKIE ) > 0 ) { echo \"Cookies are enabled.\" ; } else { echo \"Cookies are disabled.\" ; } ?> </body> </html>","title":"Check if Cookies are Enabled"},{"location":"Func/phpDate/","text":"The PHP date() function is used to format a date and/or a time. Date() Function The PHP date() function formats a timestamp to a more readable date and time. date(format,timestamp) Parameter Description format Required. Specifies the format of the timestamp timestamp Optional. Specifies a timestamp. Default is the current date and time. A timestamp is a sequence of characters, denoting the date and/or time at which a certain event occurred. Get a Date The required format parameter of the date() function specifies how to format the date (or time). Here are some characters that are commonly used for dates: d - Represents the day of the month (01 to 31) m - Represents a month (01 to 12) Y - Represents a year (in four digits) l (lowercase 'L') - Represents the day of the week Other characters, like\"/\", \".\", or \"-\" can also be inserted between the characters to add additional formatting. <?php echo \"Today is \" . date ( \"Y/m/d\" ) . \"<br>\" ; echo \"Today is \" . date ( \"Y.m.d\" ) . \"<br>\" ; echo \"Today is \" . date ( \"Y-m-d\" ) . \"<br>\" ; echo \"Today is \" . date ( \"l\" ); & copy ; 2010 -<? php echo date ( \"Y\" ); ?> #Automatic Copyright Year ?> Get a Time Here are some characters that are commonly used for times: H - 24-hour format of an hour (00 to 23) h - 12-hour format of an hour with leading zeros (01 to 12) i - Minutes with leading zeros (00 to 59) s - Seconds with leading zeros (00 to 59) a - Lowercase Ante meridiem and Post meridiem (am or pm) <?php echo \"The time is \" . date ( \"h:i:sa\" ); ?> PHP date() function will return the current date/time of the server. Get Your Time Zone If the time you got back from the code is not correct, it's probably because your server is in another country or set up for a different timezone. So, if you need the time to be correct according to a specific location, you can set the timezone you want to use. <?php date_default_timezone_set ( 'America/New_York' ); echo \"The time is \" . date ( \"h:i:sa\" ); ?> Create a Date With mktime() The optional timestamp parameter in the date() function specifies a timestamp. If omitted, the current date and time will be used (as in the examples above). The PHP mktime() function returns the Unix timestamp for a date. The Unix timestamp contains the number of seconds between the Unix Epoch (January 1 1970 00:00:00 GMT) and the time specified. Syntax mktime(hour, minute, second, month, day, year) <?php $d = mktime ( 11 , 14 , 54 , 8 , 12 , 2014 ); echo \"Created date is \" . date ( \"Y-m-d h:i:sa\" , $d ); ?> Create a Date From a String With strtotime() The PHP strtotime() function is used to convert a human readable date string into a Unix timestamp (the number of seconds since January 1 1970 00:00:00 GMT). Syntax strtotime(time, now) <?php $d = strtotime ( \"10:30pm April 15 2014\" ); echo \"Created date is \" . date ( \"Y-m-d h:i:sa\" , $d ); ?> <?php $d = strtotime ( \"tomorrow\" ); echo date ( \"Y-m-d h:i:sa\" , $d ) . \"<br>\" ; $d = strtotime ( \"next Saturday\" ); echo date ( \"Y-m-d h:i:sa\" , $d ) . \"<br>\" ; $d = strtotime ( \"+3 Months\" ); echo date ( \"Y-m-d h:i:sa\" , $d ) . \"<br>\" ; ?> <?php $d = strtotime ( \"last Sunday\" ); echo date ( \"Y-m-d h:i:sa\" , $d ) . \"<br>\" ; $startdate = strtotime ( \"Saturday\" ); $enddate = strtotime ( \"+6 weeks\" , $startdate ); while ( $startdate < $enddate ) { echo date ( \"M d\" , $startdate ) . \"<br>\" ; $startdate = strtotime ( \"+1 week\" , $startdate ); } ?> <?php $d1 = strtotime ( \"July 04\" ); $d2 = ceil (( $d1 - time ()) / 60 / 60 / 24 ); echo \"There are \" . $d2 . \" days until 4th of July.\" ; ?>","title":"Date/Time"},{"location":"Func/phpDate/#date-function","text":"The PHP date() function formats a timestamp to a more readable date and time. date(format,timestamp) Parameter Description format Required. Specifies the format of the timestamp timestamp Optional. Specifies a timestamp. Default is the current date and time. A timestamp is a sequence of characters, denoting the date and/or time at which a certain event occurred.","title":"Date() Function"},{"location":"Func/phpDate/#get-a-date","text":"The required format parameter of the date() function specifies how to format the date (or time). Here are some characters that are commonly used for dates: d - Represents the day of the month (01 to 31) m - Represents a month (01 to 12) Y - Represents a year (in four digits) l (lowercase 'L') - Represents the day of the week Other characters, like\"/\", \".\", or \"-\" can also be inserted between the characters to add additional formatting. <?php echo \"Today is \" . date ( \"Y/m/d\" ) . \"<br>\" ; echo \"Today is \" . date ( \"Y.m.d\" ) . \"<br>\" ; echo \"Today is \" . date ( \"Y-m-d\" ) . \"<br>\" ; echo \"Today is \" . date ( \"l\" ); & copy ; 2010 -<? php echo date ( \"Y\" ); ?> #Automatic Copyright Year ?>","title":"Get a Date"},{"location":"Func/phpDate/#get-a-time","text":"Here are some characters that are commonly used for times: H - 24-hour format of an hour (00 to 23) h - 12-hour format of an hour with leading zeros (01 to 12) i - Minutes with leading zeros (00 to 59) s - Seconds with leading zeros (00 to 59) a - Lowercase Ante meridiem and Post meridiem (am or pm) <?php echo \"The time is \" . date ( \"h:i:sa\" ); ?> PHP date() function will return the current date/time of the server.","title":"Get a Time"},{"location":"Func/phpDate/#get-your-time-zone","text":"If the time you got back from the code is not correct, it's probably because your server is in another country or set up for a different timezone. So, if you need the time to be correct according to a specific location, you can set the timezone you want to use. <?php date_default_timezone_set ( 'America/New_York' ); echo \"The time is \" . date ( \"h:i:sa\" ); ?>","title":"Get Your Time Zone"},{"location":"Func/phpDate/#create-a-date-with-mktime","text":"The optional timestamp parameter in the date() function specifies a timestamp. If omitted, the current date and time will be used (as in the examples above). The PHP mktime() function returns the Unix timestamp for a date. The Unix timestamp contains the number of seconds between the Unix Epoch (January 1 1970 00:00:00 GMT) and the time specified. Syntax mktime(hour, minute, second, month, day, year) <?php $d = mktime ( 11 , 14 , 54 , 8 , 12 , 2014 ); echo \"Created date is \" . date ( \"Y-m-d h:i:sa\" , $d ); ?>","title":"Create a Date With mktime()"},{"location":"Func/phpDate/#create-a-date-from-a-string-with-strtotime","text":"The PHP strtotime() function is used to convert a human readable date string into a Unix timestamp (the number of seconds since January 1 1970 00:00:00 GMT). Syntax strtotime(time, now) <?php $d = strtotime ( \"10:30pm April 15 2014\" ); echo \"Created date is \" . date ( \"Y-m-d h:i:sa\" , $d ); ?> <?php $d = strtotime ( \"tomorrow\" ); echo date ( \"Y-m-d h:i:sa\" , $d ) . \"<br>\" ; $d = strtotime ( \"next Saturday\" ); echo date ( \"Y-m-d h:i:sa\" , $d ) . \"<br>\" ; $d = strtotime ( \"+3 Months\" ); echo date ( \"Y-m-d h:i:sa\" , $d ) . \"<br>\" ; ?> <?php $d = strtotime ( \"last Sunday\" ); echo date ( \"Y-m-d h:i:sa\" , $d ) . \"<br>\" ; $startdate = strtotime ( \"Saturday\" ); $enddate = strtotime ( \"+6 weeks\" , $startdate ); while ( $startdate < $enddate ) { echo date ( \"M d\" , $startdate ) . \"<br>\" ; $startdate = strtotime ( \"+1 week\" , $startdate ); } ?> <?php $d1 = strtotime ( \"July 04\" ); $d2 = ceil (( $d1 - time ()) / 60 / 60 / 24 ); echo \"There are \" . $d2 . \" days until 4th of July.\" ; ?>","title":"Create a Date From a String With strtotime()"},{"location":"Func/phpDeclare/","text":"The declare keyword sets an execution directive for a block of code. If the declare statement is not followed by a block then the directive applies to the rest of the code in the file. There are three directives which can be declared: ticks, encoding and strict_types. The ticks directive will send a tick event each time a specified number of instructions have been executed. A tick function can be registered which will run each time a tick event fires. The encoding directive is used to indicate what character encoding the file is using. It cannot be used on a block, it has to apply to the whole file. When the strict_types directive is set, values of the wrong type passed into function arguments with type hints will throw a fatal error instead of being cast to the correct type. //Run a function after each instruction <?php $count = 0 ; function example () { global $count ; $count ++ ; echo \" $count instructions executed<br>\" ; } register_tick_function ( 'example' ); declare ( ticks = 1 ) { $cars = [ \"Ford\" , \"Volvo\" , \"BMW\" ]; foreach ( $cars as $car ) { echo \" $car <br>\" ; } } ?> //Run a function after each instruction <?php declare ( strict_types = 1 ); function sum ( int $a , int $b ) { return $a + $b ; } // Throws a fatal error because '5' is a string instead of a number sum ( \"5\" , 1 ); ?> enddeclare The enddeclare keyword is used to close a declare block which was started using the declare(...): syntax. <?php $count = 0 ; function example () { global $count ; $count ++ ; echo \" $count instructions executed<br>\" ; } register_tick_function ( 'example' ); declare ( ticks = 1 ) : $cars = [ \"Ford\" , \"Volvo\" , \"BMW\" ]; foreach ( $cars as $car ) { echo \" $car <br>\" ; } enddeclare ; ?>","title":"Declare"},{"location":"Func/phpDeclare/#enddeclare","text":"The enddeclare keyword is used to close a declare block which was started using the declare(...): syntax. <?php $count = 0 ; function example () { global $count ; $count ++ ; echo \" $count instructions executed<br>\" ; } register_tick_function ( 'example' ); declare ( ticks = 1 ) : $cars = [ \"Ford\" , \"Volvo\" , \"BMW\" ]; foreach ( $cars as $car ) { echo \" $car <br>\" ; } enddeclare ; ?>","title":"enddeclare"},{"location":"Func/phpEmpty/","text":"The empty keyword acts as a function which returns true if a variable does not exist, or if its value is considered empty. The empty keyword also evaluates expressions which are not in a variable. A value is considered empty if its value is any of the following: An empty string An empty array The integer 0 The floating point number 0.0 The string \"0\" Boolean false null <?php // A variable that does not exist if ( empty ( $x )) { echo '$x does not exist<br>' ; } // An empty integer if ( empty ( 0 )) { echo '0 is empty<br>' ; } // An empty float if ( empty ( 0.0 )) { echo '0.0 is empty<br>' ; } // An empty string if ( empty ( \"\" )) { echo '\"\" is an empty string<br>' ; } // null if ( empty ( null )) { echo 'null is empty<br>' ; } // A value that is not empty if ( empty ( 'A' )) { echo '\"A\" is empty<br>' ; } else { echo '\"A\" is not empty<br>' ; } ?> isset() function The isset() function checks whether a variable is set, which means that it has to be declared and is not NULL. This function returns true if the variable exists and is not NULL, otherwise it returns false. Note: If multiple variables are supplied, then this function will return true only if all of the variables are set. Tip: A variable can be unset with the unset() function. <?php $a = 0 ; // True because $a is set if ( isset ( $a )) { echo \"Variable 'a' is set.<br>\" ; } $b = null ; // False because $b is NULL if ( isset ( $b )) { echo \"Variable 'b' is set.\" ; } ?>","title":"Empty"},{"location":"Func/phpEmpty/#isset-function","text":"The isset() function checks whether a variable is set, which means that it has to be declared and is not NULL. This function returns true if the variable exists and is not NULL, otherwise it returns false. Note: If multiple variables are supplied, then this function will return true only if all of the variables are set. Tip: A variable can be unset with the unset() function. <?php $a = 0 ; // True because $a is set if ( isset ( $a )) { echo \"Variable 'a' is set.<br>\" ; } $b = null ; // False because $b is NULL if ( isset ( $b )) { echo \"Variable 'b' is set.\" ; } ?>","title":"isset() function"},{"location":"Func/phpError/","text":"The error functions are used to deal with error handling and logging. The error functions allow us to define own error handling rules, and modify the way the errors can be logged. The logging functions allow us to send messages directly to other machines, emails, or system logs. The error reporting functions allow us to customize what level and kind of error feedback is given. Runtime Configuration The behavior of the error functions is affected by settings in php.ini. Errors and logging configuration options: Name Default Description Changeable error_reporting NULL Sets the error reporting level (either an integer or named constants) PHP_INI_ALL display_errors \"1\" Specifies whether errors should be printed to the screen, or if they should be hidden from the user. Note: This feature should never be used on production systems (only to support your development) PHP_INI_ALL display_startup_errors \"0\" Even when display_errors is on, errors that occur during PHP's startup sequence are not displayed Note: It is strongly recommended to keep display_startup_errors off, except for debugging PHP_INI_ALL log_errors \"0\" Defines whether script error messages should be logged to the server's error log or error_log. Note: It is strongly advised to use error logging instead of error displaying on production web sites PHP_INI_ALL log_errors_max_len \"1024\" Sets the maximum length of log_errors in bytes. The value \"0\" can be used to not apply any maximum length at all. This length is applied to logged errors, displayed errors, and also to $php_errormsg (available since PHP 4.3) PHP_INI_ALL ignore_repeated_errors \"0\" Specifies whether to log repeated error messages. When set to \"1\" it will not log errors with repeated errors from the same file on the same line (available since PHP 4.3) PHP_INI_ALL ignore_repeated_source \"0\" Specifies whether to log repeated error messages. When set to \"1\" it will not log errors with repeated errors from different files or source lines (available since PHP 4.3) PHP_INI_ALL report_memleaks \"1\" If set to \"1\" (the default), this parameter will show a report of memory leaks detected by the Zend memory manager (available since PHP 4.3) PHP_INI_ALL track_errors \"0\" If set to \"1\", the last error message will always be present in the variable $php_errormsg PHP_INI_ALL html_errors \"1\" Turns off HTML tags in error messages PHP_INI_ALL PHP_INI_SYSTEM in PHP <= 4.2.3. xmlrpc_errors \"0\" Turns off normal error reporting and formats errors as XML-RPC error message (available since PHP 4.1) PHP_INI_SYSTEM xmlrpc_error_number \"0\" Used as the value of the XML-RPC faultCode element (available since PHP 4.1) PHP_INI_ALL docref_root \"\" (available since PHP 4.3) PHP_INI_ALL docref_ext \"\" (available since PHP 4.3.2) PHP_INI_ALL error_prepend_string NULL Specifies a string to output before an error message PHP_INI_ALL error_append_string NULL Specifies a string to output after an error message PHP_INI_ALL error_log NULL Specifies the name of the file where script errors should be logged. The file should be writable by the web server's user. If the special value syslog is used, the errors are sent to the system logger instead PHP_INI_ALL PHP Error and Logging Functions Function Description debug_backtrace() Generates a backtrace debug_print_backtrace() Prints a backtrace error_clear_last() Clears the last error error_get_last() Returns the last error that occurred error_log() Sends an error message to a log, to a file, or to a mail account error_reporting() Specifies which errors are reported restore_error_handler() Restores the previous error handler restore_exception_handler() Restores the previous exception handler set_error_handler() Sets a user-defined error handler function set_exception_handler() Sets a user-defined exception handler function trigger_error() Creates a user-level error message user_error() Alias of trigger_error() PHP Predefined Error and Logging Constants Value Constant Description 1 E_ERROR Fatal run-time errors. Errors that cannot be recovered from. Execution of the script is halted 2 E_WARNING Run-time warnings (non-fatal errors). Execution of the script is not halted 4 E_PARSE Compile-time parse errors. Parse errors should only be generated by the parser 8 E_NOTICE Run-time notices. The script found something that might be an error, but could also happen when running a script normally 16 E_CORE_ERROR Fatal errors at PHP startup. This is like E_ERROR, except it is generated by the core of PHP 32 E_CORE_WARNING Non-fatal errors at PHP startup. This is like E_WARNING, except it is generated by the core of PHP 64 E_COMPILE_ERROR Fatal compile-time errors. This is like E_ERROR, except it is generated by the Zend Scripting Engine 128 E_COMPILE_WARNING Non-fatal compile-time errors. This is like E_WARNING, except it is generated by the Zend Scripting Engine 256 E_USER_ERROR Fatal user-generated error. This is like E_ERROR, except it is generated in PHP code by using the PHP function trigger_error() 512 E_USER_WARNING Non-fatal user-generated warning. This is like E_WARNING, except it is generated in PHP code by using the PHP function trigger_error() 1024 E_USER_NOTICE User-generated notice. This is like E_NOTICE, except it is generated in PHP code by using the PHP function trigger_error() 2048 E_STRICT Enable to have PHP suggest changes to your code which will ensure the best interoperability and forward compatibility of your code (Since PHP 5 but not included in E_ALL until PHP 5.4) 4096 E_RECOVERABLE_ERROR Catchable fatal error. Indicates that a probably dangerous error occurred, but did not leave the Engine in an unstable state. If the error is not caught by a user defined handle, the application aborts as it was an E_ERROR (Since PHP 5.2) 8192 E_DEPRECATED Run-time notices. Enable this to receive warnings about code that will not work in future versions (Since PHP 5.3) 16384 E_USER_DEPRECATED User-generated warning message. This is like E_DEPRECATED, except it is generated in PHP code by using the PHP function trigger_error() (Since PHP 5.3) 32767 E_ALL Enable all PHP errors and warnings (except E_STRICT in versions < 5.4)","title":"Errors"},{"location":"Func/phpError/#runtime-configuration","text":"The behavior of the error functions is affected by settings in php.ini. Errors and logging configuration options: Name Default Description Changeable error_reporting NULL Sets the error reporting level (either an integer or named constants) PHP_INI_ALL display_errors \"1\" Specifies whether errors should be printed to the screen, or if they should be hidden from the user. Note: This feature should never be used on production systems (only to support your development) PHP_INI_ALL display_startup_errors \"0\" Even when display_errors is on, errors that occur during PHP's startup sequence are not displayed Note: It is strongly recommended to keep display_startup_errors off, except for debugging PHP_INI_ALL log_errors \"0\" Defines whether script error messages should be logged to the server's error log or error_log. Note: It is strongly advised to use error logging instead of error displaying on production web sites PHP_INI_ALL log_errors_max_len \"1024\" Sets the maximum length of log_errors in bytes. The value \"0\" can be used to not apply any maximum length at all. This length is applied to logged errors, displayed errors, and also to $php_errormsg (available since PHP 4.3) PHP_INI_ALL ignore_repeated_errors \"0\" Specifies whether to log repeated error messages. When set to \"1\" it will not log errors with repeated errors from the same file on the same line (available since PHP 4.3) PHP_INI_ALL ignore_repeated_source \"0\" Specifies whether to log repeated error messages. When set to \"1\" it will not log errors with repeated errors from different files or source lines (available since PHP 4.3) PHP_INI_ALL report_memleaks \"1\" If set to \"1\" (the default), this parameter will show a report of memory leaks detected by the Zend memory manager (available since PHP 4.3) PHP_INI_ALL track_errors \"0\" If set to \"1\", the last error message will always be present in the variable $php_errormsg PHP_INI_ALL html_errors \"1\" Turns off HTML tags in error messages PHP_INI_ALL PHP_INI_SYSTEM in PHP <= 4.2.3. xmlrpc_errors \"0\" Turns off normal error reporting and formats errors as XML-RPC error message (available since PHP 4.1) PHP_INI_SYSTEM xmlrpc_error_number \"0\" Used as the value of the XML-RPC faultCode element (available since PHP 4.1) PHP_INI_ALL docref_root \"\" (available since PHP 4.3) PHP_INI_ALL docref_ext \"\" (available since PHP 4.3.2) PHP_INI_ALL error_prepend_string NULL Specifies a string to output before an error message PHP_INI_ALL error_append_string NULL Specifies a string to output after an error message PHP_INI_ALL error_log NULL Specifies the name of the file where script errors should be logged. The file should be writable by the web server's user. If the special value syslog is used, the errors are sent to the system logger instead PHP_INI_ALL","title":"Runtime Configuration"},{"location":"Func/phpError/#php-error-and-logging-functions","text":"Function Description debug_backtrace() Generates a backtrace debug_print_backtrace() Prints a backtrace error_clear_last() Clears the last error error_get_last() Returns the last error that occurred error_log() Sends an error message to a log, to a file, or to a mail account error_reporting() Specifies which errors are reported restore_error_handler() Restores the previous error handler restore_exception_handler() Restores the previous exception handler set_error_handler() Sets a user-defined error handler function set_exception_handler() Sets a user-defined exception handler function trigger_error() Creates a user-level error message user_error() Alias of trigger_error()","title":"PHP Error and Logging Functions"},{"location":"Func/phpError/#php-predefined-error-and-logging-constants","text":"Value Constant Description 1 E_ERROR Fatal run-time errors. Errors that cannot be recovered from. Execution of the script is halted 2 E_WARNING Run-time warnings (non-fatal errors). Execution of the script is not halted 4 E_PARSE Compile-time parse errors. Parse errors should only be generated by the parser 8 E_NOTICE Run-time notices. The script found something that might be an error, but could also happen when running a script normally 16 E_CORE_ERROR Fatal errors at PHP startup. This is like E_ERROR, except it is generated by the core of PHP 32 E_CORE_WARNING Non-fatal errors at PHP startup. This is like E_WARNING, except it is generated by the core of PHP 64 E_COMPILE_ERROR Fatal compile-time errors. This is like E_ERROR, except it is generated by the Zend Scripting Engine 128 E_COMPILE_WARNING Non-fatal compile-time errors. This is like E_WARNING, except it is generated by the Zend Scripting Engine 256 E_USER_ERROR Fatal user-generated error. This is like E_ERROR, except it is generated in PHP code by using the PHP function trigger_error() 512 E_USER_WARNING Non-fatal user-generated warning. This is like E_WARNING, except it is generated in PHP code by using the PHP function trigger_error() 1024 E_USER_NOTICE User-generated notice. This is like E_NOTICE, except it is generated in PHP code by using the PHP function trigger_error() 2048 E_STRICT Enable to have PHP suggest changes to your code which will ensure the best interoperability and forward compatibility of your code (Since PHP 5 but not included in E_ALL until PHP 5.4) 4096 E_RECOVERABLE_ERROR Catchable fatal error. Indicates that a probably dangerous error occurred, but did not leave the Engine in an unstable state. If the error is not caught by a user defined handle, the application aborts as it was an E_ERROR (Since PHP 5.2) 8192 E_DEPRECATED Run-time notices. Enable this to receive warnings about code that will not work in future versions (Since PHP 5.3) 16384 E_USER_DEPRECATED User-generated warning message. This is like E_DEPRECATED, except it is generated in PHP code by using the PHP function trigger_error() (Since PHP 5.3) 32767 E_ALL Enable all PHP errors and warnings (except E_STRICT in versions < 5.4)","title":"PHP Predefined Error and Logging Constants"},{"location":"Func/phpExceptions/","text":"An exception is an object that describes an error or unexpected behaviour of a PHP script. Exceptions are thrown by many PHP functions and classes. User defined functions and classes can also throw exceptions. Exceptions are a good way to stop a function when it comes across data that it cannot use. Throwing an Exception The throw statement allows a user defined function or method to throw an exception. When an exception is thrown, the code following it will not be executed. If an exception is not caught, a fatal error will occur with an \"Uncaught Exception\" message. <?php function divide ( $dividend , $divisor ) { if ( $divisor == 0 ) { throw new Exception ( \"Division by zero\" ); } return $dividend / $divisor ; } echo divide ( 5 , 0 ); ?> The result will look something like this: Fatal error: Uncaught Exception: Division by zero in C:\\webfolder\\test.php:4 Stack trace: #0 C:\\webfolder\\test.php(9): divide(5, 0) #1 {main} thrown in C:\\webfolder\\test.php on line 4 The try...catch Statement To avoid the error from the example above, we can use the try...catch statement to catch exceptions and continue the process. <?php function divide ( $dividend , $divisor ) { if ( $divisor == 0 ) { throw new Exception ( \"Division by zero\" ); } return $dividend / $divisor ; } try { echo divide ( 5 , 0 ); } catch ( Exception $e ) { echo \"Unable to divide.\" ; } ?> <?php try { $rand = rand ( 0 , 2 ); switch ( $rand ) { case 0 : throw new Exception (); case 1 : throw new OutOfBoundsException (); case 2 : throw new LogicException (); } } catch ( OutOfBoundsException $e ) { echo \"Caught an out of bounds exception\" ; } catch ( LogicException $e ) { echo \"Caught a logic exception\" ; } catch ( Exception $e ) { echo \"Caught an ordinary exception\" ; } ?> The catch block indicates what type of exception should be caught and the name of the variable which can be used to access the exception. In the example above, the type of exception is Exception and the variable name is $e. The try...catch...finally Statement The try...catch...finally statement can be used to catch exceptions. Code in the finally block will always run regardless of whether an exception was caught. If finally is present, the catch block is optional. <?php function divide ( $dividend , $divisor ) { if ( $divisor == 0 ) { throw new Exception ( \"Division by zero\" ); } return $dividend / $divisor ; } try { echo divide ( 5 , 0 ); } catch ( Exception $e ) { echo \"Unable to divide. \" ; } finally { echo \"Process complete.\" ; } ?> <?php function divide ( $dividend , $divisor ) { if ( $divisor == 0 ) { throw new Exception ( \"Division by zero\" ); } return $dividend / $divisor ; } try { echo divide ( 5 , 0 ); } finally { echo \"Process complete.\" ; } ?> The Exception Object The Exception Object contains information about the error or unexpected behaviour that the function encountered. Syntax new Exception(message, code, previous) Parameter Values Parameter Description message Optional. A string describing why the exception was thrown code Optional. An integer that can be used to easily distinguish this exception from others of the same type previous Optional. If this exception was thrown in a catch block of another exception, it is recommended to pass that exception into this parameter Methods When catching an exception, the following table shows some of the methods that can be used to get information about the exception: Method Description getMessage() Returns a string describing why the exception was thrown getPrevious() If this exception was triggered by another one, this method returns the previous exception. If not, then it returns null getCode() Returns the exception code getFile() Returns the full path of the file in which the exception was thrown getLine() Returns the line number of the line of code which threw the exception <?php function divide ( $dividend , $divisor ) { if ( $divisor == 0 ) { throw new Exception ( \"Division by zero\" , 1 ); } return $dividend / $divisor ; } try { echo divide ( 5 , 0 ); } catch ( Exception $ex ) { $code = $ex -> getCode (); $message = $ex -> getMessage (); $file = $ex -> getFile (); $line = $ex -> getLine (); echo \"Exception thrown in $file on line $line : [Code $code ] $message \" ; } ?>","title":"Exceptions"},{"location":"Func/phpExceptions/#throwing-an-exception","text":"The throw statement allows a user defined function or method to throw an exception. When an exception is thrown, the code following it will not be executed. If an exception is not caught, a fatal error will occur with an \"Uncaught Exception\" message. <?php function divide ( $dividend , $divisor ) { if ( $divisor == 0 ) { throw new Exception ( \"Division by zero\" ); } return $dividend / $divisor ; } echo divide ( 5 , 0 ); ?> The result will look something like this: Fatal error: Uncaught Exception: Division by zero in C:\\webfolder\\test.php:4 Stack trace: #0 C:\\webfolder\\test.php(9): divide(5, 0) #1 {main} thrown in C:\\webfolder\\test.php on line 4","title":"Throwing an Exception"},{"location":"Func/phpExceptions/#the-trycatch-statement","text":"To avoid the error from the example above, we can use the try...catch statement to catch exceptions and continue the process. <?php function divide ( $dividend , $divisor ) { if ( $divisor == 0 ) { throw new Exception ( \"Division by zero\" ); } return $dividend / $divisor ; } try { echo divide ( 5 , 0 ); } catch ( Exception $e ) { echo \"Unable to divide.\" ; } ?> <?php try { $rand = rand ( 0 , 2 ); switch ( $rand ) { case 0 : throw new Exception (); case 1 : throw new OutOfBoundsException (); case 2 : throw new LogicException (); } } catch ( OutOfBoundsException $e ) { echo \"Caught an out of bounds exception\" ; } catch ( LogicException $e ) { echo \"Caught a logic exception\" ; } catch ( Exception $e ) { echo \"Caught an ordinary exception\" ; } ?> The catch block indicates what type of exception should be caught and the name of the variable which can be used to access the exception. In the example above, the type of exception is Exception and the variable name is $e.","title":"The try...catch Statement"},{"location":"Func/phpExceptions/#the-trycatchfinally-statement","text":"The try...catch...finally statement can be used to catch exceptions. Code in the finally block will always run regardless of whether an exception was caught. If finally is present, the catch block is optional. <?php function divide ( $dividend , $divisor ) { if ( $divisor == 0 ) { throw new Exception ( \"Division by zero\" ); } return $dividend / $divisor ; } try { echo divide ( 5 , 0 ); } catch ( Exception $e ) { echo \"Unable to divide. \" ; } finally { echo \"Process complete.\" ; } ?> <?php function divide ( $dividend , $divisor ) { if ( $divisor == 0 ) { throw new Exception ( \"Division by zero\" ); } return $dividend / $divisor ; } try { echo divide ( 5 , 0 ); } finally { echo \"Process complete.\" ; } ?>","title":"The try...catch...finally Statement"},{"location":"Func/phpExceptions/#the-exception-object","text":"The Exception Object contains information about the error or unexpected behaviour that the function encountered.","title":"The Exception Object"},{"location":"Func/phpExceptions/#syntax","text":"new Exception(message, code, previous)","title":"Syntax"},{"location":"Func/phpExceptions/#parameter-values","text":"Parameter Description message Optional. A string describing why the exception was thrown code Optional. An integer that can be used to easily distinguish this exception from others of the same type previous Optional. If this exception was thrown in a catch block of another exception, it is recommended to pass that exception into this parameter","title":"Parameter Values"},{"location":"Func/phpExceptions/#methods","text":"When catching an exception, the following table shows some of the methods that can be used to get information about the exception: Method Description getMessage() Returns a string describing why the exception was thrown getPrevious() If this exception was triggered by another one, this method returns the previous exception. If not, then it returns null getCode() Returns the exception code getFile() Returns the full path of the file in which the exception was thrown getLine() Returns the line number of the line of code which threw the exception <?php function divide ( $dividend , $divisor ) { if ( $divisor == 0 ) { throw new Exception ( \"Division by zero\" , 1 ); } return $dividend / $divisor ; } try { echo divide ( 5 , 0 ); } catch ( Exception $ex ) { $code = $ex -> getCode (); $message = $ex -> getMessage (); $file = $ex -> getFile (); $line = $ex -> getLine (); echo \"Exception thrown in $file on line $line : [Code $code ] $message \" ; } ?>","title":"Methods"},{"location":"Func/phpFTP/","text":"The FTP functions give client access to file servers through the File Transfer Protocol (FTP). The FTP functions are used to open, login and close connections, as well as upload, download, rename, delete, and get information on files from file servers. Not all of the FTP functions will work with every server or return the same results. The FTP functions became available with PHP 3. If you only wish to read from or write to a file on an FTP server, consider using the ftp:// wrapper with the Filesystem functions which provide a simpler and more intuitive interface. FTP Functions Function Description ftp_alloc() Allocates space for a file to be uploaded to the FTP server ftp_cdup() Changes to the parent directory on the FTP server ftp_chdir() Changes the current directory on the FTP server ftp_chmod() Sets permissions on a file via FTP ftp_close() Closes an FTP connection ftp_connect() Opens an FTP connection ftp_delete() Deletes a file on the FTP server ftp_exec() Executes a command on the FTP server ftp_fget() Downloads a file from the FTP server and saves it into an open local file ftp_fput() Uploads from an open file and saves it to a file on the FTP server ftp_get() Downloads a file from the FTP server ftp_get_option() Returns runtime options of the FTP connection ftp_login() Logs in to the FTP connection ftp_mdtm() Returns the last modified time of a specified file ftp_mkdir() Creates a new directory on the FTP server ftp_mlsd() Returns the list of files in the specified directory ftp_nb_continue() Continues retrieving/sending a file (non-blocking) ftp_nb_fget() Downloads a file from the FTP server and saves it into an open file (non-blocking) ftp_nb_fput() Uploads from an open file and saves it to a file on the FTP server (non-blocking) ftp_nb_get() Downloads a file from the FTP server (non-blocking) ftp_nb_put() Uploads a file to the FTP server (non-blocking) ftp_nlist() Returns a list of files in the specified directory on the FTP server ftp_pasv() Turns passive mode on or off ftp_put() Uploads a file to the FTP server ftp_pwd() Returns the current directory name ftp_quit() Alias of ftp_close() ftp_raw() Sends a raw command to the FTP server ftp_rawlist() Returns a list of files with file information from a specified directory ftp_rename() Renames a file or directory on the FTP server ftp_rmdir() Deletes an empty directory on the FTP server ftp_set_option() Sets runtime options for the FTP connection ftp_site() Sends an FTP SITE command to the FTP server ftp_size() Returns the size of the specified file ftp_ssl_connect() Opens a secure SSL-FTP connection ftp_systype() Returns the system type identifier of the FTP server Predefined FTP Constants Constant Type Description FTP_ASCII Integer FTP_AUTOSEEK Integer FTP_AUTORESUME Integer FTP_BINARY Integer FTP_FAILED Integer Asynchronous transfer has failed FTP_FINISHED Integer Asynchronous transfer is completed FTP_IMAGE Integer Alias of FTP_BINARY FTP_MOREDATA Integer Asynchronous transfer is in progress FTP_TEXT Integer Alias of FTP_ASCII FTP_TIMEOUT_SEC Integer The timeout used for network operations FTP_USEPASVADDRESS Boolean","title":"FTP"},{"location":"Func/phpFTP/#ftp-functions","text":"Function Description ftp_alloc() Allocates space for a file to be uploaded to the FTP server ftp_cdup() Changes to the parent directory on the FTP server ftp_chdir() Changes the current directory on the FTP server ftp_chmod() Sets permissions on a file via FTP ftp_close() Closes an FTP connection ftp_connect() Opens an FTP connection ftp_delete() Deletes a file on the FTP server ftp_exec() Executes a command on the FTP server ftp_fget() Downloads a file from the FTP server and saves it into an open local file ftp_fput() Uploads from an open file and saves it to a file on the FTP server ftp_get() Downloads a file from the FTP server ftp_get_option() Returns runtime options of the FTP connection ftp_login() Logs in to the FTP connection ftp_mdtm() Returns the last modified time of a specified file ftp_mkdir() Creates a new directory on the FTP server ftp_mlsd() Returns the list of files in the specified directory ftp_nb_continue() Continues retrieving/sending a file (non-blocking) ftp_nb_fget() Downloads a file from the FTP server and saves it into an open file (non-blocking) ftp_nb_fput() Uploads from an open file and saves it to a file on the FTP server (non-blocking) ftp_nb_get() Downloads a file from the FTP server (non-blocking) ftp_nb_put() Uploads a file to the FTP server (non-blocking) ftp_nlist() Returns a list of files in the specified directory on the FTP server ftp_pasv() Turns passive mode on or off ftp_put() Uploads a file to the FTP server ftp_pwd() Returns the current directory name ftp_quit() Alias of ftp_close() ftp_raw() Sends a raw command to the FTP server ftp_rawlist() Returns a list of files with file information from a specified directory ftp_rename() Renames a file or directory on the FTP server ftp_rmdir() Deletes an empty directory on the FTP server ftp_set_option() Sets runtime options for the FTP connection ftp_site() Sends an FTP SITE command to the FTP server ftp_size() Returns the size of the specified file ftp_ssl_connect() Opens a secure SSL-FTP connection ftp_systype() Returns the system type identifier of the FTP server","title":"FTP Functions"},{"location":"Func/phpFTP/#predefined-ftp-constants","text":"Constant Type Description FTP_ASCII Integer FTP_AUTOSEEK Integer FTP_AUTORESUME Integer FTP_BINARY Integer FTP_FAILED Integer Asynchronous transfer has failed FTP_FINISHED Integer Asynchronous transfer is completed FTP_IMAGE Integer Alias of FTP_BINARY FTP_MOREDATA Integer Asynchronous transfer is in progress FTP_TEXT Integer Alias of FTP_ASCII FTP_TIMEOUT_SEC Integer The timeout used for network operations FTP_USEPASVADDRESS Boolean","title":"Predefined FTP Constants"},{"location":"Func/phpFilters/","text":"Validating data = Determine if the data is in proper form. Sanitizing data = Remove any illegal character from the data. PHP filters are used to validate and sanitize external input. The PHP filter extension has many of the functions needed for checking user input, and is designed to make data validation easier and quicker. The filter_list() function can be used to list what the PHP filter extension offers: <table> <tr> <td>Filter Name</td> <td>Filter ID</td> </tr> <?php foreach ( filter_list () as $id => $filter ) { echo '<tr><td>' . $filter . '</td><td>' . filter_id ( $filter ) . '</td></tr>' ; } ?> </table> Filter Name Filter ID int 257 boolean 258 float 259 validate_regexp 272 validate_domain 277 validate_url 273 validate_email 274 validate_ip 275 validate_mac 276 string 513 stripped 513 encoded 514 special_chars 515 full_special_chars 522 unsafe_raw 516 email 517 url 518 number_int 519 number_float 520 magic_quotes 521 callback 1024 Why Use Filters? Many web applications receive external input. External input/data can be: User input from a form Cookies Web services data Server variables Database query results Invalid submitted data can lead to security problems and break your webpage! By using PHP filters you can be sure your application gets the correct input! filter_var() The filter_var() function both validate and sanitize data. The filter_var() function filters a single variable with a specified filter. It takes two pieces of data: The variable you want to check The type of check to use Sanitize a String The following example uses the filter_var() function to remove all HTML tags from a string: <?php $input = \"<b>Hello!</b>\" ; $output = filter_var ( $input , FILTER_SANITIZE_STRING ); echo $output ; ?> Validate an Integer The following example uses the filter_var() function to check if the variable $int is an integer. If $int is an integer, the output of the code below will be: \"Integer is valid\". If $int is not an integer, the output will be: \"Integer is not valid\": <?php $int = 100 ; if ( ! filter_var ( $int , FILTER_VALIDATE_INT ) === false ) { echo ( \"Integer is valid\" ); } else { echo ( \"Integer is not valid\" ); } ?> filter_var() and Problem With 0 In the example above, if $int was set to 0, the function above will return \"Integer is not valid\". To solve this problem, use the code below: <?php $int = 0 ; if ( filter_var ( $int , FILTER_VALIDATE_INT ) === 0 || ! filter_var ( $int , FILTER_VALIDATE_INT ) === false ) { echo ( \"Integer is valid\" ); } else { echo ( \"Integer is not valid\" ); } ?> Validate an IP Address The following example uses the filter_var() function to check if the variable $ip is a valid IP address: <?php $ip = \"127.0.0.1\" ; if ( ! filter_var ( $ip , FILTER_VALIDATE_IP ) === false ) { echo ( \" $ip is a valid IP address\" ); } else { echo ( \" $ip is not a valid IP address\" ); } ?> Sanitize and Validate an Email Address The following example uses the filter_var() function to first remove all illegal characters from the $email variable, then check if it is a valid email address: <?php $email = \"john.doe@example.com\" ; // Remove all illegal characters from email $email = filter_var ( $email , FILTER_SANITIZE_EMAIL ); // Validate e-mail if ( ! filter_var ( $email , FILTER_VALIDATE_EMAIL ) === false ) { echo ( \" $email is a valid email address\" ); } else { echo ( \" $email is not a valid email address\" ); } ?> Sanitize and Validate a URL The following example uses the filter_var() function to first remove all illegal characters from a URL, then check if $url is a valid URL: <?php $url = \"https://www.example.com\" ; // Remove all illegal characters from a url $url = filter_var ( $url , FILTER_SANITIZE_URL ); // Validate url if ( ! filter_var ( $url , FILTER_VALIDATE_URL ) === false ) { echo ( \" $url is a valid URL\" ); } else { echo ( \" $url is not a valid URL\" ); } ?> Validate an Integer Within a Range The following example uses the filter_var() function to check if a variable is both of type INT, and between 1 and 200: <?php $int = 122 ; $min = 1 ; $max = 200 ; if ( filter_var ( $int , FILTER_VALIDATE_INT , array ( \"options\" => array ( \"min_range\" => $min , \"max_range\" => $max ))) === false ) { echo ( \"Variable value is not within the legal range\" ); } else { echo ( \"Variable value is within the legal range\" ); } ?> Validate IPv6 Address The following example uses the filter_var() function to check if the variable $ip is a valid IPv6 address: <?php $ip = \"2001:0db8:85a3:08d3:1319:8a2e:0370:7334\" ; if ( ! filter_var ( $ip , FILTER_VALIDATE_IP , FILTER_FLAG_IPV6 ) === false ) { echo ( \" $ip is a valid IPv6 address\" ); } else { echo ( \" $ip is not a valid IPv6 address\" ); } ?> Validate URL - Must Contain QueryString The following example uses the filter_var() function to check if the variable $url is a URL with a querystring: <?php $url = \"https://www.example.com?name=Alex\" ; if ( ! filter_var ( $url , FILTER_VALIDATE_URL , FILTER_FLAG_QUERY_REQUIRED ) === false ) { echo ( \" $url is a valid URL with a query string\" ); } else { echo ( \" $url is not a valid URL with a query string\" ); } ?> Remove Characters With ASCII Value > 127 The following example uses the filter_var() function to sanitize a string. It will both remove all HTML tags, and all characters with ASCII value > 127, from the string: <?php $str = \"<h1>Hello World\u00c6\u00d8\u00c5!</h1>\" ; $newstr = filter_var ( $str , FILTER_SANITIZE_STRING , FILTER_FLAG_STRIP_HIGH ); echo $newstr ; ?>","title":"Filters"},{"location":"Func/phpFilters/#why-use-filters","text":"Many web applications receive external input. External input/data can be: User input from a form Cookies Web services data Server variables Database query results Invalid submitted data can lead to security problems and break your webpage! By using PHP filters you can be sure your application gets the correct input!","title":"Why Use Filters?"},{"location":"Func/phpFilters/#filter_var","text":"The filter_var() function both validate and sanitize data. The filter_var() function filters a single variable with a specified filter. It takes two pieces of data: The variable you want to check The type of check to use","title":"filter_var()"},{"location":"Func/phpFilters/#sanitize-a-string","text":"The following example uses the filter_var() function to remove all HTML tags from a string: <?php $input = \"<b>Hello!</b>\" ; $output = filter_var ( $input , FILTER_SANITIZE_STRING ); echo $output ; ?>","title":"Sanitize a String"},{"location":"Func/phpFilters/#validate-an-integer","text":"The following example uses the filter_var() function to check if the variable $int is an integer. If $int is an integer, the output of the code below will be: \"Integer is valid\". If $int is not an integer, the output will be: \"Integer is not valid\": <?php $int = 100 ; if ( ! filter_var ( $int , FILTER_VALIDATE_INT ) === false ) { echo ( \"Integer is valid\" ); } else { echo ( \"Integer is not valid\" ); } ?> filter_var() and Problem With 0 In the example above, if $int was set to 0, the function above will return \"Integer is not valid\". To solve this problem, use the code below: <?php $int = 0 ; if ( filter_var ( $int , FILTER_VALIDATE_INT ) === 0 || ! filter_var ( $int , FILTER_VALIDATE_INT ) === false ) { echo ( \"Integer is valid\" ); } else { echo ( \"Integer is not valid\" ); } ?>","title":"Validate an Integer"},{"location":"Func/phpFilters/#validate-an-ip-address","text":"The following example uses the filter_var() function to check if the variable $ip is a valid IP address: <?php $ip = \"127.0.0.1\" ; if ( ! filter_var ( $ip , FILTER_VALIDATE_IP ) === false ) { echo ( \" $ip is a valid IP address\" ); } else { echo ( \" $ip is not a valid IP address\" ); } ?>","title":"Validate an IP Address"},{"location":"Func/phpFilters/#sanitize-and-validate-an-email-address","text":"The following example uses the filter_var() function to first remove all illegal characters from the $email variable, then check if it is a valid email address: <?php $email = \"john.doe@example.com\" ; // Remove all illegal characters from email $email = filter_var ( $email , FILTER_SANITIZE_EMAIL ); // Validate e-mail if ( ! filter_var ( $email , FILTER_VALIDATE_EMAIL ) === false ) { echo ( \" $email is a valid email address\" ); } else { echo ( \" $email is not a valid email address\" ); } ?>","title":"Sanitize and Validate an Email Address"},{"location":"Func/phpFilters/#sanitize-and-validate-a-url","text":"The following example uses the filter_var() function to first remove all illegal characters from a URL, then check if $url is a valid URL: <?php $url = \"https://www.example.com\" ; // Remove all illegal characters from a url $url = filter_var ( $url , FILTER_SANITIZE_URL ); // Validate url if ( ! filter_var ( $url , FILTER_VALIDATE_URL ) === false ) { echo ( \" $url is a valid URL\" ); } else { echo ( \" $url is not a valid URL\" ); } ?>","title":"Sanitize and Validate a URL"},{"location":"Func/phpFilters/#validate-an-integer-within-a-range","text":"The following example uses the filter_var() function to check if a variable is both of type INT, and between 1 and 200: <?php $int = 122 ; $min = 1 ; $max = 200 ; if ( filter_var ( $int , FILTER_VALIDATE_INT , array ( \"options\" => array ( \"min_range\" => $min , \"max_range\" => $max ))) === false ) { echo ( \"Variable value is not within the legal range\" ); } else { echo ( \"Variable value is within the legal range\" ); } ?>","title":"Validate an Integer Within a Range"},{"location":"Func/phpFilters/#validate-ipv6-address","text":"The following example uses the filter_var() function to check if the variable $ip is a valid IPv6 address: <?php $ip = \"2001:0db8:85a3:08d3:1319:8a2e:0370:7334\" ; if ( ! filter_var ( $ip , FILTER_VALIDATE_IP , FILTER_FLAG_IPV6 ) === false ) { echo ( \" $ip is a valid IPv6 address\" ); } else { echo ( \" $ip is not a valid IPv6 address\" ); } ?>","title":"Validate IPv6 Address"},{"location":"Func/phpFilters/#validate-url-must-contain-querystring","text":"The following example uses the filter_var() function to check if the variable $url is a URL with a querystring: <?php $url = \"https://www.example.com?name=Alex\" ; if ( ! filter_var ( $url , FILTER_VALIDATE_URL , FILTER_FLAG_QUERY_REQUIRED ) === false ) { echo ( \" $url is a valid URL with a query string\" ); } else { echo ( \" $url is not a valid URL with a query string\" ); } ?>","title":"Validate URL - Must Contain QueryString"},{"location":"Func/phpFilters/#remove-characters-with-ascii-value-127","text":"The following example uses the filter_var() function to sanitize a string. It will both remove all HTML tags, and all characters with ASCII value > 127, from the string: <?php $str = \"<h1>Hello World\u00c6\u00d8\u00c5!</h1>\" ; $newstr = filter_var ( $str , FILTER_SANITIZE_STRING , FILTER_FLAG_STRIP_HIGH ); echo $newstr ; ?>","title":"Remove Characters With ASCII Value &gt; 127"},{"location":"Func/phpGenerators/","text":"Generators provide an easy way to implement simple iterators without the overhead or complexity of implementing a class that implements the Iterator interface. A generator allows you to write code that uses foreach to iterate over a set of data without needing to build an array in memory, which may cause you to exceed a memory limit, or require a considerable amount of processing time to generate. Instead, you can write a generator function, which is the same as a normal function, except that instead of returning once, a generator can yield as many times as it needs to in order to provide the values to be iterated over. <?php function xrange ( $start , $limit , $step = 1 ) { if ( $start <= $limit ) { if ( $step <= 0 ) { throw new LogicException ( 'Step must be positive' ); } for ( $i = $start ; $i <= $limit ; $i += $step ) { yield $i ; } } else { if ( $step >= 0 ) { throw new LogicException ( 'Step must be negative' ); } for ( $i = $start ; $i >= $limit ; $i += $step ) { yield $i ; } } } /* * Note that both range() and xrange() result in the same * output below. */ echo 'Single digit odd numbers from range(): ' ; foreach ( range ( 1 , 9 , 2 ) as $number ) { echo \" $number \" ; } echo \" \\n \" ; echo 'Single digit odd numbers from xrange(): ' ; foreach ( xrange ( 1 , 9 , 2 ) as $number ) { echo \" $number \" ; } ?> Generator object When a generator function is called, a new object of the internal Generator class is returned. This object implements the Iterator interface in much the same way as a forward-only iterator object would, and provides methods that can be called to manipulate the state of the generator, including sending values to and returning values from it. The yield keyword The yield keyword is used to create a generator function. Generator functions act as iterators which can be looped through with a foreach loop. The value given by the yield keyword is used as a value in one of the iterations of the loop. <?php function countTo3 () { yield \"1\" ; yield \"2\" ; yield \"3\" ; } foreach ( countTo3 () as $number ) { echo $number ; echo \"<br>\" ; } ?> Yielding values with keys PHP also supports associative arrays, and generators are no different. In addition to yielding simple values, as shown above, you can also yield a key at the same time. <?php /* * The input is semi-colon separated fields, with the first * field being an ID to use as a key. */ $input = <<<' EOF ' 1;PHP;Likes dollar signs 2;Python;Likes whitespace 3;Ruby;Likes blocks EOF ; function input_parser ( $input ) { foreach ( explode ( \" \\n \" , $input ) as $line ) { $fields = explode ( ';' , $line ); $id = array_shift ( $fields ); yield $id => $fields ; } } foreach ( input_parser ( $input ) as $id => $fields ) { echo \" $id : \\n \" ; echo \" $fields[0] \\n \" ; echo \" $fields[1] \\n \" ; } ?> 1: PHP Likes dollar signs 2: Python Likes whitespace 3: Ruby Likes blocks Yielding null values Yield can be called without an argument to yield a null value with an automatic key. < <?php function gen_three_nulls () { foreach ( range ( 1 , 3 ) as $i ) { yield ; } } var_dump ( iterator_to_array ( gen_three_nulls ())); ?> array(3) { [0]=> NULL [1]=> NULL [2]=> NULL } function countTo2() { yield; yield; } Yielding by reference Generator functions are able to yield values by reference as well as by value. This is done in the same way as returning references from functions: by prepending an ampersand to the function name. <?php function & gen_reference () { $value = 3 ; while ( $value > 0 ) { yield $value ; } } /* * Note that we can change $number within the loop, and * because the generator is yielding references, $value * within gen_reference() changes. */ foreach ( gen_reference () as & $number ) { echo ( -- $number ) . '... ' ; } ?> 2... 1... 0... The yield from keyword The yield from keyword provides the values from an iterator one by one each time the generator function is called until there are no items left in the iterator, then the generator will move on to the next yield keyword. Generator delegation allows you to yield values from another generator, Traversable object, or array by using the yield from keyword. The outer generator will then yield all values from the inner generator, object, or array until that is no longer valid, after which execution will continue in the outer generator. If a generator is used with yield from, the yield from expression will also return any value returned by the inner generator. <?php function countTo4 () { yield from [ 1 , 2 , 3 ]; yield 4 ; } foreach ( countTo4 () as $number ) { echo $number ; echo \"<br>\" ; } ?> Comparing generators with Iterator objects The primary advantage of generators is their simplicity. Much less boilerplate code has to be written compared to implementing an Iterator class, and the code is generally much more readable. For example, the following function and class are equivalent: <?php function getLinesFromFile ( $fileName ) { if ( ! $fileHandle = fopen ( $fileName , 'r' )) { return ; } while ( false !== $line = fgets ( $fileHandle )) { yield $line ; } fclose ( $fileHandle ); } // versus... class LineIterator implements Iterator { protected $fileHandle ; protected $line ; protected $i ; public function __construct ( $fileName ) { if ( ! $this -> fileHandle = fopen ( $fileName , 'r' )) { throw new RuntimeException ( 'Couldn\\'t open file \"' . $fileName . '\"' ); } } public function rewind () { fseek ( $this -> fileHandle , 0 ); $this -> line = fgets ( $this -> fileHandle ); $this -> i = 0 ; } public function valid () { return false !== $this -> line ; } public function current () { return $this -> line ; } public function key () { return $this -> i ; } public function next () { if ( false !== $this -> line ) { $this -> line = fgets ( $this -> fileHandle ); $this -> i ++ ; } } public function __destruct () { fclose ( $this -> fileHandle ); } } ?> This flexibility does come at a cost, however: generators are forward-only iterators, and cannot be rewound once iteration has started. This also means that the same generator can't be iterated over multiple times: the generator will need to be rebuilt by calling the generator function again.","title":"Generators"},{"location":"Func/phpGenerators/#generator-object","text":"When a generator function is called, a new object of the internal Generator class is returned. This object implements the Iterator interface in much the same way as a forward-only iterator object would, and provides methods that can be called to manipulate the state of the generator, including sending values to and returning values from it.","title":"Generator object"},{"location":"Func/phpGenerators/#the-yield-keyword","text":"The yield keyword is used to create a generator function. Generator functions act as iterators which can be looped through with a foreach loop. The value given by the yield keyword is used as a value in one of the iterations of the loop. <?php function countTo3 () { yield \"1\" ; yield \"2\" ; yield \"3\" ; } foreach ( countTo3 () as $number ) { echo $number ; echo \"<br>\" ; } ?>","title":"The yield keyword"},{"location":"Func/phpGenerators/#yielding-values-with-keys","text":"PHP also supports associative arrays, and generators are no different. In addition to yielding simple values, as shown above, you can also yield a key at the same time. <?php /* * The input is semi-colon separated fields, with the first * field being an ID to use as a key. */ $input = <<<' EOF ' 1;PHP;Likes dollar signs 2;Python;Likes whitespace 3;Ruby;Likes blocks EOF ; function input_parser ( $input ) { foreach ( explode ( \" \\n \" , $input ) as $line ) { $fields = explode ( ';' , $line ); $id = array_shift ( $fields ); yield $id => $fields ; } } foreach ( input_parser ( $input ) as $id => $fields ) { echo \" $id : \\n \" ; echo \" $fields[0] \\n \" ; echo \" $fields[1] \\n \" ; } ?> 1: PHP Likes dollar signs 2: Python Likes whitespace 3: Ruby Likes blocks","title":"Yielding values with keys"},{"location":"Func/phpGenerators/#yielding-null-values","text":"Yield can be called without an argument to yield a null value with an automatic key. < <?php function gen_three_nulls () { foreach ( range ( 1 , 3 ) as $i ) { yield ; } } var_dump ( iterator_to_array ( gen_three_nulls ())); ?> array(3) { [0]=> NULL [1]=> NULL [2]=> NULL } function countTo2() { yield; yield; }","title":"Yielding null values"},{"location":"Func/phpGenerators/#yielding-by-reference","text":"Generator functions are able to yield values by reference as well as by value. This is done in the same way as returning references from functions: by prepending an ampersand to the function name. <?php function & gen_reference () { $value = 3 ; while ( $value > 0 ) { yield $value ; } } /* * Note that we can change $number within the loop, and * because the generator is yielding references, $value * within gen_reference() changes. */ foreach ( gen_reference () as & $number ) { echo ( -- $number ) . '... ' ; } ?> 2... 1... 0...","title":"Yielding by reference"},{"location":"Func/phpGenerators/#the-yield-from-keyword","text":"The yield from keyword provides the values from an iterator one by one each time the generator function is called until there are no items left in the iterator, then the generator will move on to the next yield keyword. Generator delegation allows you to yield values from another generator, Traversable object, or array by using the yield from keyword. The outer generator will then yield all values from the inner generator, object, or array until that is no longer valid, after which execution will continue in the outer generator. If a generator is used with yield from, the yield from expression will also return any value returned by the inner generator. <?php function countTo4 () { yield from [ 1 , 2 , 3 ]; yield 4 ; } foreach ( countTo4 () as $number ) { echo $number ; echo \"<br>\" ; } ?>","title":"The yield from keyword"},{"location":"Func/phpGenerators/#comparing-generators-with-iterator-objects","text":"The primary advantage of generators is their simplicity. Much less boilerplate code has to be written compared to implementing an Iterator class, and the code is generally much more readable. For example, the following function and class are equivalent: <?php function getLinesFromFile ( $fileName ) { if ( ! $fileHandle = fopen ( $fileName , 'r' )) { return ; } while ( false !== $line = fgets ( $fileHandle )) { yield $line ; } fclose ( $fileHandle ); } // versus... class LineIterator implements Iterator { protected $fileHandle ; protected $line ; protected $i ; public function __construct ( $fileName ) { if ( ! $this -> fileHandle = fopen ( $fileName , 'r' )) { throw new RuntimeException ( 'Couldn\\'t open file \"' . $fileName . '\"' ); } } public function rewind () { fseek ( $this -> fileHandle , 0 ); $this -> line = fgets ( $this -> fileHandle ); $this -> i = 0 ; } public function valid () { return false !== $this -> line ; } public function current () { return $this -> line ; } public function key () { return $this -> i ; } public function next () { if ( false !== $this -> line ) { $this -> line = fgets ( $this -> fileHandle ); $this -> i ++ ; } } public function __destruct () { fclose ( $this -> fileHandle ); } } ?> This flexibility does come at a cost, however: generators are forward-only iterators, and cannot be rewound once iteration has started. This also means that the same generator can't be iterated over multiple times: the generator will need to be rebuilt by calling the generator function again.","title":"Comparing generators with Iterator objects"},{"location":"Func/phpJSON/","text":"JSON stands for JavaScript Object Notation, and is a syntax for storing and exchanging data. Since the JSON format is a text-based format, it can easily be sent to and from a server, and used as a data format by any programming language. json_encode() The json_encode() function is used to encode a value to JSON format. <?php $age = array ( \"Peter\" => 35 , \"Ben\" => 37 , \"Joe\" => 43 ); echo json_encode ( $age ); ?> <?php $cars = array ( \"Volvo\" , \"BMW\" , \"Toyota\" ); echo json_encode ( $cars ); ?> json_decode() The json_decode() function is used to decode a JSON object into a PHP object or an associative array. <?php $jsonobj = '{\"Peter\":35,\"Ben\":37,\"Joe\":43}' ; var_dump ( json_decode ( $jsonobj )); ?> The json_decode() function returns an object by default. The json_decode() function has a second parameter, and when set to true, JSON objects are decoded into associative arrays. <?php $jsonobj = '{\"Peter\":35,\"Ben\":37,\"Joe\":43}' ; var_dump ( json_decode ( $jsonobj , true )); ?> Accessing the Decoded Values <?php $jsonobj = '{\"Peter\":35,\"Ben\":37,\"Joe\":43}' ; $obj = json_decode ( $jsonobj ); echo $obj -> Peter ; echo $obj -> Ben ; echo $obj -> Joe ; ?> <?php $jsonobj = '{\"Peter\":35,\"Ben\":37,\"Joe\":43}' ; $arr = json_decode ( $jsonobj , true ); echo $arr [ \"Peter\" ]; echo $arr [ \"Ben\" ]; echo $arr [ \"Joe\" ]; ?> Looping Through the Values You can also loop through the values with a foreach() loop: <?php $jsonobj = '{\"Peter\":35,\"Ben\":37,\"Joe\":43}' ; $obj = json_decode ( $jsonobj ); foreach ( $obj as $key => $value ) { echo $key . \" => \" . $value . \"<br>\" ; } ?> <?php $jsonobj = '{\"Peter\":35,\"Ben\":37,\"Joe\":43}' ; $arr = json_decode ( $jsonobj , true ); foreach ( $arr as $key => $value ) { echo $key . \" => \" . $value . \"<br>\" ; } ?>","title":"JSON"},{"location":"Func/phpJSON/#json_encode","text":"The json_encode() function is used to encode a value to JSON format. <?php $age = array ( \"Peter\" => 35 , \"Ben\" => 37 , \"Joe\" => 43 ); echo json_encode ( $age ); ?> <?php $cars = array ( \"Volvo\" , \"BMW\" , \"Toyota\" ); echo json_encode ( $cars ); ?>","title":"json_encode()"},{"location":"Func/phpJSON/#json_decode","text":"The json_decode() function is used to decode a JSON object into a PHP object or an associative array. <?php $jsonobj = '{\"Peter\":35,\"Ben\":37,\"Joe\":43}' ; var_dump ( json_decode ( $jsonobj )); ?> The json_decode() function returns an object by default. The json_decode() function has a second parameter, and when set to true, JSON objects are decoded into associative arrays. <?php $jsonobj = '{\"Peter\":35,\"Ben\":37,\"Joe\":43}' ; var_dump ( json_decode ( $jsonobj , true )); ?>","title":"json_decode()"},{"location":"Func/phpJSON/#accessing-the-decoded-values","text":"<?php $jsonobj = '{\"Peter\":35,\"Ben\":37,\"Joe\":43}' ; $obj = json_decode ( $jsonobj ); echo $obj -> Peter ; echo $obj -> Ben ; echo $obj -> Joe ; ?> <?php $jsonobj = '{\"Peter\":35,\"Ben\":37,\"Joe\":43}' ; $arr = json_decode ( $jsonobj , true ); echo $arr [ \"Peter\" ]; echo $arr [ \"Ben\" ]; echo $arr [ \"Joe\" ]; ?>","title":"Accessing the Decoded Values"},{"location":"Func/phpJSON/#looping-through-the-values","text":"You can also loop through the values with a foreach() loop: <?php $jsonobj = '{\"Peter\":35,\"Ben\":37,\"Joe\":43}' ; $obj = json_decode ( $jsonobj ); foreach ( $obj as $key => $value ) { echo $key . \" => \" . $value . \"<br>\" ; } ?> <?php $jsonobj = '{\"Peter\":35,\"Ben\":37,\"Joe\":43}' ; $arr = json_decode ( $jsonobj , true ); foreach ( $arr as $key => $value ) { echo $key . \" => \" . $value . \"<br>\" ; } ?>","title":"Looping Through the Values"},{"location":"Func/phpMail/","text":"The mail() function allows you to send emails directly from a script. The behavior of the mail functions is affected by settings in php.ini: Name Default Description Changeable mail.add_x_header \"0\" Add X-PHP-Originating-Script that will include UID of the script followed by the filename. For PHP 5.3.0 and above PHP_INI_PERDIR mail.log NULL The path to a log file that will log all mail() calls. Log include full path of script, line number, To address and headers. For PHP 5.3.0 and above PHP_INI_PERDIR SMTP \"localhost\" Windows only: The DNS name or IP address of the SMTP server PHP_INI_ALL smtp_port \"25\" Windows only: The SMTP port number. For PHP 4.3.0 and above PHP_INI_ALL sendmail_from NULL Windows only: Specifies the \"from\" address to be used when sending mail from mail() PHP_INI_ALL sendmail_path \"/usr/sbin/sendmail -t -i\" Specifies where the sendmail program can be found. This directive works also under Windows. If set, SMTP, smtp_port and sendmail_from are ignored PHP_INI_SYSTEM Mail Functions Function Description ezmlm_hash() Calculates the hash value needed by EZMLM mail() Allows you to send emails directly from a script ezmlm_hash() Calculate the hash value for an email address. The ezmlm_hash() function calculates the hash value needed when keeping EZMLM mailing lists in a MySQL database. This function accepts an email address, for which it calculates an integer hash value. This value is compatible with the EZMLM mailing list manager, and can then be used with the EZMLM database for user management. <?php $user = \"someone@example.com\" ; $hash = ezmlm_hash ( $user ); echo \"The hash value for $user is: $hash .\" ; ?> mail() Allows you to send emails directly from a script. // Send an email: <?php // the message $msg = \"First line of text \\n Second line of text\" ; // use wordwrap() if lines are longer than 70 characters $msg = wordwrap ( $msg , 70 ); // send email mail ( \"someone@example.com\" , \"My subject\" , $msg ); ?> Parameter Description to Required. Specifies the receiver / receivers of the email subject Required. Specifies the subject of the email. Note: This parameter cannot contain any newline characters message Required. Defines the message to be sent. Each line should be separated with a LF (\\n). Lines should not exceed 70 characters. Windows note: If a full stop is found on the beginning of a line in the message, it might be removed. To solve this problem, replace the full stop with a double dot: headers Optional. Specifies additional headers, like From, Cc, and Bcc. The additional headers should be separated with a CRLF (\\r\\n). Note: When sending an email, it must contain a From header. This can be set with this parameter or in the php.ini file. parameters Optional. Specifies an additional parameter to the sendmail program (the one defined in the sendmail_path configuration setting). (i.e. this can be used to set the envelope sender address when using sendmail with the -f sendmail option) // Send an email with extra headers: <?php $to = \"somebody@example.com\" ; $subject = \"My subject\" ; $txt = \"Hello world!\" ; $headers = \"From: webmaster@example.com\" . \" \\r\\n \" . \"CC: somebodyelse@example.com\" ; mail ( $to , $subject , $txt , $headers ); ?> Send an HTML email: <?php $to = \"somebody@example.com, somebodyelse@example.com\" ; $subject = \"HTML email\" ; $message = \" <html> <head> <title>HTML email</title> </head> <body> <p>This email contains HTML Tags!</p> <table> <tr> <th>Firstname</th> <th>Lastname</th> </tr> <tr> <td>John</td> <td>Doe</td> </tr> </table> </body> </html> \" ; // Always set content-type when sending HTML email $headers = \"MIME-Version: 1.0\" . \" \\r\\n \" ; $headers .= \"Content-type:text/html;charset=UTF-8\" . \" \\r\\n \" ; // More headers $headers .= 'From: <webmaster@example.com>' . \" \\r\\n \" ; $headers .= 'Cc: myboss@example.com' . \" \\r\\n \" ; mail ( $to , $subject , $message , $headers ); ?>","title":"Mail"},{"location":"Func/phpMail/#mail-functions","text":"Function Description ezmlm_hash() Calculates the hash value needed by EZMLM mail() Allows you to send emails directly from a script","title":"Mail Functions"},{"location":"Func/phpMail/#ezmlm_hash","text":"Calculate the hash value for an email address. The ezmlm_hash() function calculates the hash value needed when keeping EZMLM mailing lists in a MySQL database. This function accepts an email address, for which it calculates an integer hash value. This value is compatible with the EZMLM mailing list manager, and can then be used with the EZMLM database for user management. <?php $user = \"someone@example.com\" ; $hash = ezmlm_hash ( $user ); echo \"The hash value for $user is: $hash .\" ; ?>","title":"ezmlm_hash()"},{"location":"Func/phpMail/#mail","text":"Allows you to send emails directly from a script. // Send an email: <?php // the message $msg = \"First line of text \\n Second line of text\" ; // use wordwrap() if lines are longer than 70 characters $msg = wordwrap ( $msg , 70 ); // send email mail ( \"someone@example.com\" , \"My subject\" , $msg ); ?> Parameter Description to Required. Specifies the receiver / receivers of the email subject Required. Specifies the subject of the email. Note: This parameter cannot contain any newline characters message Required. Defines the message to be sent. Each line should be separated with a LF (\\n). Lines should not exceed 70 characters. Windows note: If a full stop is found on the beginning of a line in the message, it might be removed. To solve this problem, replace the full stop with a double dot: headers Optional. Specifies additional headers, like From, Cc, and Bcc. The additional headers should be separated with a CRLF (\\r\\n). Note: When sending an email, it must contain a From header. This can be set with this parameter or in the php.ini file. parameters Optional. Specifies an additional parameter to the sendmail program (the one defined in the sendmail_path configuration setting). (i.e. this can be used to set the envelope sender address when using sendmail with the -f sendmail option) // Send an email with extra headers: <?php $to = \"somebody@example.com\" ; $subject = \"My subject\" ; $txt = \"Hello world!\" ; $headers = \"From: webmaster@example.com\" . \" \\r\\n \" . \"CC: somebodyelse@example.com\" ; mail ( $to , $subject , $txt , $headers ); ?> Send an HTML email: <?php $to = \"somebody@example.com, somebodyelse@example.com\" ; $subject = \"HTML email\" ; $message = \" <html> <head> <title>HTML email</title> </head> <body> <p>This email contains HTML Tags!</p> <table> <tr> <th>Firstname</th> <th>Lastname</th> </tr> <tr> <td>John</td> <td>Doe</td> </tr> </table> </body> </html> \" ; // Always set content-type when sending HTML email $headers = \"MIME-Version: 1.0\" . \" \\r\\n \" ; $headers .= \"Content-type:text/html;charset=UTF-8\" . \" \\r\\n \" ; // More headers $headers .= 'From: <webmaster@example.com>' . \" \\r\\n \" ; $headers .= 'Cc: myboss@example.com' . \" \\r\\n \" ; mail ( $to , $subject , $message , $headers ); ?>","title":"mail()"},{"location":"Func/phpMisc/","text":"The behavior of the misc. functions is affected by settings in the php.ini file. Misc. configuration options: Name Description Default Changeable ignore_user_abort FALSE indicates that scripts will be terminated as soon as they try to output something after a client has aborted their connection \"0\" PHP_INI_ALL highlight.string Color for highlighting a string in PHP syntax \"#DD0000\" PHP_INI_ALL highlight.comment Color for highlighting PHP comments \"#FF8000\" PHP_INI_ALL highlight.keyword Color for syntax highlighting PHP keywords (e.g. parenthesis and semicolon) \"#007700\" highlight.default Default color for PHP syntax \"#0000BB\" PHP_INI_ALL highlight.html Color for HTML code \"#000000\" PHP_INI_ALL browscap Name and location of browser-capabilities file (e.g. browscap.ini) NULL PHP_INI_SYSTEM Miscellaneous Functions Function Description connection_aborted() Checks whether the client has disconnected connection_status() Returns the current connection status connection_timeout() Deprecated from PHP 4.0.5. Checks whether the script has timed out constant() Returns the value of a constant define() Defines a constant defined() Checks whether a constant exists die() Alias of exit() eval() Evaluates a string as PHP code exit() Prints a message and exits the current script get_browser() Returns the capabilities of the user's browser __halt_compiler() Halts the compiler execution highlight_file() Outputs a file with the PHP syntax highlighted highlight_string() Outputs a string with the PHP syntax highlighted hrtime() Returns the system's high resolution time ignore_user_abort() Sets whether a remote client can abort the running of a script pack() Packs data into a binary string php_strip_whitespace() Returns the source code of a file with PHP comments and whitespace removed show_source() Alias of highlight_file() sleep() Delays code execution for a number of seconds sys_getloadavg() Returns the system load average time_nanosleep() Delays code execution for a number of seconds and nanoseconds time_sleep_until() Makes a script sleep until the specified time uniqid() Generates a unique ID unpack() Unpacks data from a binary string usleep() Delays code execution for a number of microseconds Predefined Misc. Constants Constant Description CONNECTION_ABORTED Connection is aborted by user or network error CONNECTION_NORMAL Connection is running normally CONNECTION_TIMEOUT Connection timed out __COMPILER_HALT_OFFSET__","title":"Misc"},{"location":"Func/phpMisc/#miscellaneous-functions","text":"Function Description connection_aborted() Checks whether the client has disconnected connection_status() Returns the current connection status connection_timeout() Deprecated from PHP 4.0.5. Checks whether the script has timed out constant() Returns the value of a constant define() Defines a constant defined() Checks whether a constant exists die() Alias of exit() eval() Evaluates a string as PHP code exit() Prints a message and exits the current script get_browser() Returns the capabilities of the user's browser __halt_compiler() Halts the compiler execution highlight_file() Outputs a file with the PHP syntax highlighted highlight_string() Outputs a string with the PHP syntax highlighted hrtime() Returns the system's high resolution time ignore_user_abort() Sets whether a remote client can abort the running of a script pack() Packs data into a binary string php_strip_whitespace() Returns the source code of a file with PHP comments and whitespace removed show_source() Alias of highlight_file() sleep() Delays code execution for a number of seconds sys_getloadavg() Returns the system load average time_nanosleep() Delays code execution for a number of seconds and nanoseconds time_sleep_until() Makes a script sleep until the specified time uniqid() Generates a unique ID unpack() Unpacks data from a binary string usleep() Delays code execution for a number of microseconds","title":"Miscellaneous Functions"},{"location":"Func/phpMisc/#predefined-misc-constants","text":"Constant Description CONNECTION_ABORTED Connection is aborted by user or network error CONNECTION_NORMAL Connection is running normally CONNECTION_TIMEOUT Connection timed out __COMPILER_HALT_OFFSET__","title":"Predefined Misc. Constants"},{"location":"Func/phpOutput/","text":"PHP provides a set of functions that control what content is sent to the browser and when. This is referred to as output control. Output can come from any of the following sources: echo , print , printf, print_r... and other similar functions and statements Notices, warnings and errors from PHP Any content outside of the <?php ?> tags echo The echo statement sends output to the browser. <?php echo \"Hello, World!\" ; ?> //Use echo to output multiple strings: <?php echo \"Hello, World!\" , \"<br>\" ; echo \"I'm about to learn PHP\" ; ?> print The print keyword is used to output text. Unlike echo, print can only output one string at a time. Unlike echo, print has a return value, which is always 1. <?php print \"Hello, World!\" ; ?> PHP and the backend on which it is running may hold the output in a buffer before sending it to the user. The output control functions can create any number of output buffers. Output buffers catch output given by the program. Each new output buffer is placed on the top of a stack of output buffers, and any output it provides will be caught by the buffer below it. The output control functions handle only the topmost buffer, so the topmost buffer must be removed in order to control the buffers below it. The behavior of output control functions is affected by settings in php.ini: Name Default Description Version output_buffering \"0\" Enables output buffering for all PHP files by default 4 output_handler NULL Set the name of the default function which handles the output of all output buffers 4 implicit_flush \"0\" Enables implicit flush, which causes output to be sent directly to the browser on each output statement 4 url_rewriter.tags \"a=href,area=href, frame=src,form=,fieldset=\" Indicates which HTML tags and attributes can be modified by the URL rewriter (the output_add_rewrite_var() function.) 4.3 url_rewriter.hosts The current value of $_SERVER['HTTP_HOST'] URL rewriting is only done on the server's own URLs by default. To allow for rewriting URLs of other websites, set the hostnames of the other websites here. 7.1 PHP Output Control Functions Method Function flush() Attempts to send content from the system's output buffer to the browser ob_clean() Deletes all of the content from the topmost output buffer ob_end_clean() Deletes the topmost output buffer and all of its contents ob_end_flush() Deletes the topmost output buffer and outputs its contents ob_flush() Outputs the contents of the topmost output buffer and clears the buffer ob_get_clean() Returns all of the contents of the topmost output buffer and clears the buffer ob_get_contents() Returns the contents of the topmost output buffer ob_get_flush() Outputs and returns the contents of the topmost output buffer and then deletes the buffer ob_get_length() Returns the number of bytes of data that are in the topmost output buffer ob_get_level() Returns a number indicating how many output buffers are on the stack ob_get_status() Returns information about the output buffers ob_gzhandler() Used as a callback function for ob_start() to compress the contents of the buffer when sending it to the browser ob_implicit_flush() Turns implicit flushing on or off ob_list_handlers() Returns an array of callback function names that are being used by the topmost output buffer ob_start() Creates a new output buffer and adds it to the top of the stack output_add_rewrite_var() Used to append query string parameters to any URL in the output output_reset_rewrite_vars() Removes all variables added by output_add_rewrite_var() flush() Output a string to the browser before the script has finished running: <?php // Some browsers will not display the content if it is too short // We use str_pad() to make the output long enough echo str_pad ( \"Hello World!\" , 4096 ); // Use flush() to send the string to the browser flush (); // Display the rest of the content three seconds later sleep ( 3 ); echo \"<br>\" ; echo \"Hello World!\" ; ?> ob_clean() The ob_clean() function deletes all of the contents of the topmost output buffer, preventing them from getting sent to the browser. <?php ob_start (); echo \"This output will not be sent to the browser\" ; ob_clean (); echo \"This output will be sent to the browser\" ; ob_end_flush (); ?>","title":"Output Control"},{"location":"Func/phpOutput/#echo","text":"The echo statement sends output to the browser. <?php echo \"Hello, World!\" ; ?> //Use echo to output multiple strings: <?php echo \"Hello, World!\" , \"<br>\" ; echo \"I'm about to learn PHP\" ; ?>","title":"echo"},{"location":"Func/phpOutput/#print","text":"The print keyword is used to output text. Unlike echo, print can only output one string at a time. Unlike echo, print has a return value, which is always 1. <?php print \"Hello, World!\" ; ?> PHP and the backend on which it is running may hold the output in a buffer before sending it to the user. The output control functions can create any number of output buffers. Output buffers catch output given by the program. Each new output buffer is placed on the top of a stack of output buffers, and any output it provides will be caught by the buffer below it. The output control functions handle only the topmost buffer, so the topmost buffer must be removed in order to control the buffers below it. The behavior of output control functions is affected by settings in php.ini: Name Default Description Version output_buffering \"0\" Enables output buffering for all PHP files by default 4 output_handler NULL Set the name of the default function which handles the output of all output buffers 4 implicit_flush \"0\" Enables implicit flush, which causes output to be sent directly to the browser on each output statement 4 url_rewriter.tags \"a=href,area=href, frame=src,form=,fieldset=\" Indicates which HTML tags and attributes can be modified by the URL rewriter (the output_add_rewrite_var() function.) 4.3 url_rewriter.hosts The current value of $_SERVER['HTTP_HOST'] URL rewriting is only done on the server's own URLs by default. To allow for rewriting URLs of other websites, set the hostnames of the other websites here. 7.1","title":"print"},{"location":"Func/phpOutput/#php-output-control-functions","text":"Method Function flush() Attempts to send content from the system's output buffer to the browser ob_clean() Deletes all of the content from the topmost output buffer ob_end_clean() Deletes the topmost output buffer and all of its contents ob_end_flush() Deletes the topmost output buffer and outputs its contents ob_flush() Outputs the contents of the topmost output buffer and clears the buffer ob_get_clean() Returns all of the contents of the topmost output buffer and clears the buffer ob_get_contents() Returns the contents of the topmost output buffer ob_get_flush() Outputs and returns the contents of the topmost output buffer and then deletes the buffer ob_get_length() Returns the number of bytes of data that are in the topmost output buffer ob_get_level() Returns a number indicating how many output buffers are on the stack ob_get_status() Returns information about the output buffers ob_gzhandler() Used as a callback function for ob_start() to compress the contents of the buffer when sending it to the browser ob_implicit_flush() Turns implicit flushing on or off ob_list_handlers() Returns an array of callback function names that are being used by the topmost output buffer ob_start() Creates a new output buffer and adds it to the top of the stack output_add_rewrite_var() Used to append query string parameters to any URL in the output output_reset_rewrite_vars() Removes all variables added by output_add_rewrite_var()","title":"PHP Output Control Functions"},{"location":"Func/phpOutput/#flush","text":"Output a string to the browser before the script has finished running: <?php // Some browsers will not display the content if it is too short // We use str_pad() to make the output long enough echo str_pad ( \"Hello World!\" , 4096 ); // Use flush() to send the string to the browser flush (); // Display the rest of the content three seconds later sleep ( 3 ); echo \"<br>\" ; echo \"Hello World!\" ; ?>","title":"flush()"},{"location":"Func/phpOutput/#ob_clean","text":"The ob_clean() function deletes all of the contents of the topmost output buffer, preventing them from getting sent to the browser. <?php ob_start (); echo \"This output will not be sent to the browser\" ; ob_clean (); echo \"This output will be sent to the browser\" ; ob_end_flush (); ?>","title":"ob_clean()"},{"location":"Func/phpRegex/","text":"A regular expression is a sequence of characters that forms a search pattern. When you search for data in a text, you can use this search pattern to describe what you are searching for. Regular Expressions Functions Function Description preg_filter() Returns a string or an array with pattern matches replaced, but only if matches were found preg_grep() Returns an array consisting only of elements from the input array which matched the pattern preg_last_error() Returns an error code indicating the reason that the most recent regular expression call failed preg_match() Returns 1 if the pattern was found in the string and 0 if not preg_match_all() Returns the number of times the pattern was found in the string, which may also be 0 preg_replace() Returns a new string where matched patterns have been replaced with another string preg_replace_callback() Given an expression and a callback, returns a string where all matches of the expression are replaced with the substring returned by the callback preg_replace_callback_array() Given an array associating expressions with callbacks, returns a string where all matches of each expression are replaced with the substring returned by the callback preg_split() Breaks a string into an array using matches of a regular expression as separators preg_quote() Escapes characters that have a special meaning in regular expressions by putting a backslash in front of them preg_match() <?php $str = \"Visit arcelopera.github.io\" ; $pattern = \"/arce/i\" ; echo preg_match ( $pattern , $str ); // Outputs 1 ?> preg_match_all() <?php $str = \"The rain in SPAIN falls mainly on the plains.\" ; $pattern = \"/ain/i\" ; echo preg_match_all ( $pattern , $str ); // Outputs 4 ?> preg_replace() <?php $str = \"Visit Microsoft!\" ; $pattern = \"/microsoft/i\" ; echo preg_replace ( $pattern , \"ME\" , $str ); // Outputs \"Visit ME!\" ?> preg_split() <?php $str = \"Hello World!\" ; $pattern = \"/ /\" ; echo preg_split ( $pattern , $str ); // Outputs array(\"Hello\", \"World!\") ?> Regular Expression Modifiers Modifier Description i Performs a case-insensitive search m Performs a multiline search (patterns that search for the beginning or end of a string will match the beginning or end of each line) u Enables correct matching of UTF-8 encoded patterns Regular Expression Patterns Brackets are used to find a range of characters: Expression Description [abc] Find one character from the options between the brackets [^abc] Find any character NOT between the brackets [0-9] Find one character from the range 0 to 9 Metacharacters Metacharacters are characters with a special meaning. Metacharacter Description | Find a match for any one of the patterns separated by | as in: cat|dog|fish . Find just one instance of any character ^ Finds a match as the beginning of a string as in: ^Hello $ Finds a match at the end of the string as in: World$ \\d Find a digit \\s Find a whitespace character \\b Find a match at the beginning of a word like this: \\bWORD, or at the end of a word like this: WORD\\b \\uxxxx Find the Unicode character specified by the hexadecimal number xxxx Quantifiers Quantifiers define quantities Quantifier Description n+ Find one or more n n* Find zero or more n n? Find zero or one n n{x} Matches any string that contains a sequence of X n's n{x,} Matches any string that contains a sequence of at least X n's n{,y} Matches any string that contains a sequence of up to Y n's n{x,y} Matches any string that contains a sequence of X to Y n's If your expression needs to search for one of the special characters you can use a backslash ( \\ ) to escape them. For example, to search for one or more question marks you can use the following expression: $pattern = '/\\?+/'; Grouping You can use parentheses ( ) to apply quantifiers to entire patterns. They also can be used to select parts of the pattern to be used as a match. <?php $str = \"Apples and bananas.\" ; $pattern = \"/ba(na){2}/i\" ; echo preg_match ( $pattern , $str ); // Outputs 1 ?>","title":"Regex"},{"location":"Func/phpRegex/#regular-expressions-functions","text":"Function Description preg_filter() Returns a string or an array with pattern matches replaced, but only if matches were found preg_grep() Returns an array consisting only of elements from the input array which matched the pattern preg_last_error() Returns an error code indicating the reason that the most recent regular expression call failed preg_match() Returns 1 if the pattern was found in the string and 0 if not preg_match_all() Returns the number of times the pattern was found in the string, which may also be 0 preg_replace() Returns a new string where matched patterns have been replaced with another string preg_replace_callback() Given an expression and a callback, returns a string where all matches of the expression are replaced with the substring returned by the callback preg_replace_callback_array() Given an array associating expressions with callbacks, returns a string where all matches of each expression are replaced with the substring returned by the callback preg_split() Breaks a string into an array using matches of a regular expression as separators preg_quote() Escapes characters that have a special meaning in regular expressions by putting a backslash in front of them","title":"Regular Expressions Functions"},{"location":"Func/phpRegex/#preg_match","text":"<?php $str = \"Visit arcelopera.github.io\" ; $pattern = \"/arce/i\" ; echo preg_match ( $pattern , $str ); // Outputs 1 ?>","title":"preg_match()"},{"location":"Func/phpRegex/#preg_match_all","text":"<?php $str = \"The rain in SPAIN falls mainly on the plains.\" ; $pattern = \"/ain/i\" ; echo preg_match_all ( $pattern , $str ); // Outputs 4 ?>","title":"preg_match_all()"},{"location":"Func/phpRegex/#preg_replace","text":"<?php $str = \"Visit Microsoft!\" ; $pattern = \"/microsoft/i\" ; echo preg_replace ( $pattern , \"ME\" , $str ); // Outputs \"Visit ME!\" ?>","title":"preg_replace()"},{"location":"Func/phpRegex/#preg_split","text":"<?php $str = \"Hello World!\" ; $pattern = \"/ /\" ; echo preg_split ( $pattern , $str ); // Outputs array(\"Hello\", \"World!\") ?>","title":"preg_split()"},{"location":"Func/phpRegex/#regular-expression-modifiers","text":"Modifier Description i Performs a case-insensitive search m Performs a multiline search (patterns that search for the beginning or end of a string will match the beginning or end of each line) u Enables correct matching of UTF-8 encoded patterns","title":"Regular Expression Modifiers"},{"location":"Func/phpRegex/#regular-expression-patterns","text":"Brackets are used to find a range of characters: Expression Description [abc] Find one character from the options between the brackets [^abc] Find any character NOT between the brackets [0-9] Find one character from the range 0 to 9","title":"Regular Expression Patterns"},{"location":"Func/phpRegex/#metacharacters","text":"Metacharacters are characters with a special meaning. Metacharacter Description | Find a match for any one of the patterns separated by | as in: cat|dog|fish . Find just one instance of any character ^ Finds a match as the beginning of a string as in: ^Hello $ Finds a match at the end of the string as in: World$ \\d Find a digit \\s Find a whitespace character \\b Find a match at the beginning of a word like this: \\bWORD, or at the end of a word like this: WORD\\b \\uxxxx Find the Unicode character specified by the hexadecimal number xxxx","title":"Metacharacters"},{"location":"Func/phpRegex/#quantifiers","text":"Quantifiers define quantities Quantifier Description n+ Find one or more n n* Find zero or more n n? Find zero or one n n{x} Matches any string that contains a sequence of X n's n{x,} Matches any string that contains a sequence of at least X n's n{,y} Matches any string that contains a sequence of up to Y n's n{x,y} Matches any string that contains a sequence of X to Y n's If your expression needs to search for one of the special characters you can use a backslash ( \\ ) to escape them. For example, to search for one or more question marks you can use the following expression: $pattern = '/\\?+/';","title":"Quantifiers"},{"location":"Func/phpRegex/#grouping","text":"You can use parentheses ( ) to apply quantifiers to entire patterns. They also can be used to select parts of the pattern to be used as a match. <?php $str = \"Apples and bananas.\" ; $pattern = \"/ba(na){2}/i\" ; echo preg_match ( $pattern , $str ); // Outputs 1 ?>","title":"Grouping"},{"location":"Func/phpSessions/","text":"A session is a way to store information (in variables) to be used across multiple pages. Unlike a cookie, the information is not stored on the users computer. What is a PHP Session? When you work with an application, you open it, do some changes, and then you close it. This is much like a Session. The computer knows who you are. It knows when you start the application and when you end. But on the internet there is one problem: the web server does not know who you are or what you do, because the HTTP address doesn't maintain state. Session variables solve this problem by storing user information to be used across multiple pages (e.g. username, favorite color, etc). By default, session variables last until the user closes the browser. So; Session variables hold information about one single user, and are available to all pages in one application. If you need a permanent storage, you may want to store the data in a database. Start a PHP Session A session is started with the session_start() function. Session variables are set with the PHP global variable: $_SESSION. <?php // Start the session session_start (); ?> <!DOCTYPE html> <html> <body> <?php // Set session variables $_SESSION [ \"favcolor\" ] = \"green\" ; $_SESSION [ \"favanimal\" ] = \"cat\" ; echo \"Session variables are set.\" ; ?> </body> </html> The session_start() function must be the very first thing in your document. Before any HTML tags. Get PHP Session Variable Values Next, we create another page called \"demo_session2.php\". From this page, we will access the session information we set on the first page (\"demo_session1.php\"). Notice that session variables are not passed individually to each new page, instead they are retrieved from the session we open at the beginning of each page (session_start()). Also notice that all session variable values are stored in the global $_SESSION variable: <?php session_start (); ?> <!DOCTYPE html> <html> <body> <?php // Echo session variables that were set on previous page echo \"Favorite color is \" . $_SESSION [ \"favcolor\" ] . \".<br>\" ; echo \"Favorite animal is \" . $_SESSION [ \"favanimal\" ] . \".\" ; ?> </body> </html> Another way to show all the session variable values for a user session is to run the following code: <?php session_start (); ?> <!DOCTYPE html> <html> <body> <?php print_r ( $_SESSION ); ?> </body> </html> Most sessions set a user-key on the user's computer that looks something like this: 765487cf34ert8dede5a562e4f3a7e12. Then, when a session is opened on another page, it scans the computer for a user-key. If there is a match, it accesses that session, if not, it starts a new session. Modify a PHP Session Variable To change a session variable, just overwrite it: <?php session_start (); ?> <!DOCTYPE html> <html> <body> <?php // to change a session variable, just overwrite it $_SESSION [ \"favcolor\" ] = \"yellow\" ; print_r ( $_SESSION ); ?> </body> </html> Destroy a PHP Session To remove all global session variables and destroy the session, use session_unset() and session_destroy(): <?php session_start (); ?> <!DOCTYPE html> <html> <body> <?php // remove all session variables session_unset (); // destroy the session session_destroy (); ?> </body> </html>","title":"Sessions"},{"location":"Func/phpSessions/#what-is-a-php-session","text":"When you work with an application, you open it, do some changes, and then you close it. This is much like a Session. The computer knows who you are. It knows when you start the application and when you end. But on the internet there is one problem: the web server does not know who you are or what you do, because the HTTP address doesn't maintain state. Session variables solve this problem by storing user information to be used across multiple pages (e.g. username, favorite color, etc). By default, session variables last until the user closes the browser. So; Session variables hold information about one single user, and are available to all pages in one application. If you need a permanent storage, you may want to store the data in a database.","title":"What is a PHP Session?"},{"location":"Func/phpSessions/#start-a-php-session","text":"A session is started with the session_start() function. Session variables are set with the PHP global variable: $_SESSION. <?php // Start the session session_start (); ?> <!DOCTYPE html> <html> <body> <?php // Set session variables $_SESSION [ \"favcolor\" ] = \"green\" ; $_SESSION [ \"favanimal\" ] = \"cat\" ; echo \"Session variables are set.\" ; ?> </body> </html> The session_start() function must be the very first thing in your document. Before any HTML tags.","title":"Start a PHP Session"},{"location":"Func/phpSessions/#get-php-session-variable-values","text":"Next, we create another page called \"demo_session2.php\". From this page, we will access the session information we set on the first page (\"demo_session1.php\"). Notice that session variables are not passed individually to each new page, instead they are retrieved from the session we open at the beginning of each page (session_start()). Also notice that all session variable values are stored in the global $_SESSION variable: <?php session_start (); ?> <!DOCTYPE html> <html> <body> <?php // Echo session variables that were set on previous page echo \"Favorite color is \" . $_SESSION [ \"favcolor\" ] . \".<br>\" ; echo \"Favorite animal is \" . $_SESSION [ \"favanimal\" ] . \".\" ; ?> </body> </html> Another way to show all the session variable values for a user session is to run the following code: <?php session_start (); ?> <!DOCTYPE html> <html> <body> <?php print_r ( $_SESSION ); ?> </body> </html> Most sessions set a user-key on the user's computer that looks something like this: 765487cf34ert8dede5a562e4f3a7e12. Then, when a session is opened on another page, it scans the computer for a user-key. If there is a match, it accesses that session, if not, it starts a new session.","title":"Get PHP Session Variable Values"},{"location":"Func/phpSessions/#modify-a-php-session-variable","text":"To change a session variable, just overwrite it: <?php session_start (); ?> <!DOCTYPE html> <html> <body> <?php // to change a session variable, just overwrite it $_SESSION [ \"favcolor\" ] = \"yellow\" ; print_r ( $_SESSION ); ?> </body> </html>","title":"Modify a PHP Session Variable"},{"location":"Func/phpSessions/#destroy-a-php-session","text":"To remove all global session variables and destroy the session, use session_unset() and session_destroy(): <?php session_start (); ?> <!DOCTYPE html> <html> <body> <?php // remove all session variables session_unset (); // destroy the session session_destroy (); ?> </body> </html>","title":"Destroy a PHP Session"},{"location":"Func/phpUserFunc/","text":"A function is a block of statements that can be used repeatedly in a program. A function will not execute automatically when a page loads. A function will be executed by a call to the function. Create a User Defined Function <?php function writeMsg () { echo \"Hello world!\" ; } writeMsg (); // call the function ?> Arguments Information can be passed to functions through arguments. Arguments are specified after the function name, inside the parentheses. You can add as many arguments as you want, just separate them with a comma. <?php function familyName ( $fname ) { echo \" $fname Refsnes.<br>\" ; } familyName ( \"Jani\" ); familyName ( \"Hege\" ); familyName ( \"Stale\" ); familyName ( \"Kai Jim\" ); familyName ( \"Borge\" ); ?> <?php function familyName ( $fname , $year ) { echo \" $fname Refsnes. Born in $year <br>\" ; } familyName ( \"Hege\" , \"1975\" ); familyName ( \"Stale\" , \"1978\" ); familyName ( \"Kai Jim\" , \"1983\" ); ?> PHP is a Loosely Typed Language In the example above, notice that we did not have to tell PHP which data type the variable is. PHP automatically associates a data type to the variable, depending on its value. Since the data types are not set in a strict sense, you can do things like adding a string to an integer without causing an error. In PHP 7, type declarations were added. This gives us an option to specify the expected data type when declaring a function, and by adding the strict declaration, it will throw a \"Fatal Error\" if the data type mismatches. <?php function addNumbers ( int $a , int $b ) { return $a + $b ; } echo addNumbers ( 5 , \"5 days\" ); // since strict is NOT enabled \"5 days\" is changed to int(5), and it will return 10 ?> To specify strict we need to set declare(strict_types=1);. This must be on the very first line of the PHP file. <?php declare ( strict_types = 1 ); // strict requirement function addNumbers ( int $a , int $b ) { return $a + $b ; } echo addNumbers ( 5 , \"5 days\" ); // since strict is enabled and \"5 days\" is not an integer, an error will be thrown ?> Default Parameter Values <?php declare ( strict_types = 1 ); // strict requirement function setHeight ( int $minheight = 50 ) { echo \"The height is : $minheight <br>\" ; } setHeight ( 350 ); setHeight (); // will use the default value of 50 setHeight ( 135 ); setHeight ( 80 ); ?> Returning values To let a function return a value, use the return statement <?php function sum ( int $x , int $y ) { return $x + $y ; } echo sum ( 5 , 5 ); ?> PHP Return Type Declarations PHP 7 also supports Type Declarations for the return statement. Like with the type declaration for function arguments, by enabling the strict requirement, it will throw a \"Fatal Error\" on a type mismatch. To declare a type for the function return, add a colon ( : ) and the type right before the opening curly ( /{ )bracket when declaring the function. <?php declare ( strict_types = 1 ); // strict requirement function addNumbers ( float $a , float $b ) : float { return $a + $b ; } echo addNumbers ( 1.2 , 5.2 ); ?> <?php declare ( strict_types = 1 ); // strict requirement function addNumbers ( float $a , float $b ) : int { return ( int )( $a + $b ); } echo addNumbers ( 1.2 , 5.2 ); ?> Passing Arguments by Reference In PHP, arguments are usually passed by value, which means that a copy of the value is used in the function and the variable that was passed into the function cannot be changed. When a function argument is passed by reference, changes to the argument also change the variable that was passed in. To turn a function argument into a reference, the & operator is used <?php function add_five ( & $value ) { $value += 5 ; } $num = 2 ; add_five ( $num ); echo $num ; ?> PHP callable Keyword Use callable to require a callback function as an argument. The callable keyword is used to force a function argument to be a reference to a function. A callable can be one of the following: An anonymous function A string containing the name of a function An array describing a static class method An array describing an object method <?php function printFormatted ( callable $format , $str ) { echo $format ( $str ); echo \"<br>\" ; } function exclaim ( $str ) { return $str . \"!\" ; } printFormatted ( \"exclaim\" , \"Hello World\" ); ?>","title":"General"},{"location":"Func/phpUserFunc/#create-a-user-defined-function","text":"<?php function writeMsg () { echo \"Hello world!\" ; } writeMsg (); // call the function ?>","title":"Create a User Defined Function"},{"location":"Func/phpUserFunc/#arguments","text":"Information can be passed to functions through arguments. Arguments are specified after the function name, inside the parentheses. You can add as many arguments as you want, just separate them with a comma. <?php function familyName ( $fname ) { echo \" $fname Refsnes.<br>\" ; } familyName ( \"Jani\" ); familyName ( \"Hege\" ); familyName ( \"Stale\" ); familyName ( \"Kai Jim\" ); familyName ( \"Borge\" ); ?> <?php function familyName ( $fname , $year ) { echo \" $fname Refsnes. Born in $year <br>\" ; } familyName ( \"Hege\" , \"1975\" ); familyName ( \"Stale\" , \"1978\" ); familyName ( \"Kai Jim\" , \"1983\" ); ?>","title":"Arguments"},{"location":"Func/phpUserFunc/#php-is-a-loosely-typed-language","text":"In the example above, notice that we did not have to tell PHP which data type the variable is. PHP automatically associates a data type to the variable, depending on its value. Since the data types are not set in a strict sense, you can do things like adding a string to an integer without causing an error. In PHP 7, type declarations were added. This gives us an option to specify the expected data type when declaring a function, and by adding the strict declaration, it will throw a \"Fatal Error\" if the data type mismatches. <?php function addNumbers ( int $a , int $b ) { return $a + $b ; } echo addNumbers ( 5 , \"5 days\" ); // since strict is NOT enabled \"5 days\" is changed to int(5), and it will return 10 ?> To specify strict we need to set declare(strict_types=1);. This must be on the very first line of the PHP file. <?php declare ( strict_types = 1 ); // strict requirement function addNumbers ( int $a , int $b ) { return $a + $b ; } echo addNumbers ( 5 , \"5 days\" ); // since strict is enabled and \"5 days\" is not an integer, an error will be thrown ?>","title":"PHP is a Loosely Typed Language"},{"location":"Func/phpUserFunc/#default-parameter-values","text":"<?php declare ( strict_types = 1 ); // strict requirement function setHeight ( int $minheight = 50 ) { echo \"The height is : $minheight <br>\" ; } setHeight ( 350 ); setHeight (); // will use the default value of 50 setHeight ( 135 ); setHeight ( 80 ); ?>","title":"Default Parameter Values"},{"location":"Func/phpUserFunc/#returning-values","text":"To let a function return a value, use the return statement <?php function sum ( int $x , int $y ) { return $x + $y ; } echo sum ( 5 , 5 ); ?>","title":"Returning values"},{"location":"Func/phpUserFunc/#php-return-type-declarations","text":"PHP 7 also supports Type Declarations for the return statement. Like with the type declaration for function arguments, by enabling the strict requirement, it will throw a \"Fatal Error\" on a type mismatch. To declare a type for the function return, add a colon ( : ) and the type right before the opening curly ( /{ )bracket when declaring the function. <?php declare ( strict_types = 1 ); // strict requirement function addNumbers ( float $a , float $b ) : float { return $a + $b ; } echo addNumbers ( 1.2 , 5.2 ); ?> <?php declare ( strict_types = 1 ); // strict requirement function addNumbers ( float $a , float $b ) : int { return ( int )( $a + $b ); } echo addNumbers ( 1.2 , 5.2 ); ?>","title":"PHP Return Type Declarations"},{"location":"Func/phpUserFunc/#passing-arguments-by-reference","text":"In PHP, arguments are usually passed by value, which means that a copy of the value is used in the function and the variable that was passed into the function cannot be changed. When a function argument is passed by reference, changes to the argument also change the variable that was passed in. To turn a function argument into a reference, the & operator is used <?php function add_five ( & $value ) { $value += 5 ; } $num = 2 ; add_five ( $num ); echo $num ; ?>","title":"Passing Arguments by Reference"},{"location":"Func/phpUserFunc/#php-callable-keyword","text":"Use callable to require a callback function as an argument. The callable keyword is used to force a function argument to be a reference to a function. A callable can be one of the following: An anonymous function A string containing the name of a function An array describing a static class method An array describing an object method <?php function printFormatted ( callable $format , $str ) { echo $format ( $str ); echo \"<br>\" ; } function exclaim ( $str ) { return $str . \"!\" ; } printFormatted ( \"exclaim\" , \"Hello World\" ); ?>","title":"PHP callable Keyword"},{"location":"PR/phpConst/","text":"A valid constant name starts with a letter or underscore (no $ sign before the constant name). Unlike variables, constants are automatically global across the entire script. Create a PHP Constant There are 2 ways to create a constant: 1. Using the define() function 2. Using the const keyword const vs. define() const are always case-sensitive define() has has a case-insensitive option. const cannot be created inside another block scope, like inside a function or inside an if statement. define can be created inside another block scope. Using the define() function. Syntax define(name, value, case-insensitive) Parameters: name: Specifies the name of the constant value: Specifies the value of the constant case-insensitive: Specifies whether the constant name should be case-insensitive. Default is false. Note: Defining case-insensitive constants was deprecated in PHP 7.3. PHP 8.0 accepts only false, the value true will produce a warning. <?php define ( \"GREETING\" , \"Hello World!\" ); // Create a constant with a case-sensitive name define ( \"GREETING\" , \"Welcome to W3Schools.com!\" , true ); // Create a constant with a case-insensitive name echo GREETING ; ?> PHP Constant Arrays In PHP7, you can create an Array constant using the define() function. <?php define ( \"cars\" , [ \"Alfa Romeo\" , \"BMW\" , \"Toyota\" ]); echo cars [ 0 ]; ?> PHP const Keyword You can also create a constant by using the const keyword. <?php const MYCAR = \"Volvo\" ; echo MYCAR ; ?>","title":"Constant"},{"location":"PR/phpConst/#create-a-php-constant","text":"There are 2 ways to create a constant: 1. Using the define() function 2. Using the const keyword","title":"Create a PHP Constant"},{"location":"PR/phpConst/#const-vs-define","text":"const are always case-sensitive define() has has a case-insensitive option. const cannot be created inside another block scope, like inside a function or inside an if statement. define can be created inside another block scope.","title":"const vs. define()"},{"location":"PR/phpConst/#using-the-define-function","text":"Syntax define(name, value, case-insensitive) Parameters: name: Specifies the name of the constant value: Specifies the value of the constant case-insensitive: Specifies whether the constant name should be case-insensitive. Default is false. Note: Defining case-insensitive constants was deprecated in PHP 7.3. PHP 8.0 accepts only false, the value true will produce a warning. <?php define ( \"GREETING\" , \"Hello World!\" ); // Create a constant with a case-sensitive name define ( \"GREETING\" , \"Welcome to W3Schools.com!\" , true ); // Create a constant with a case-insensitive name echo GREETING ; ?>","title":"Using the define() function."},{"location":"PR/phpConst/#php-constant-arrays","text":"In PHP7, you can create an Array constant using the define() function. <?php define ( \"cars\" , [ \"Alfa Romeo\" , \"BMW\" , \"Toyota\" ]); echo cars [ 0 ]; ?>","title":"PHP Constant Arrays"},{"location":"PR/phpConst/#php-const-keyword","text":"You can also create a constant by using the const keyword. <?php const MYCAR = \"Volvo\" ; echo MYCAR ; ?>","title":"PHP const Keyword"},{"location":"PR/phpForms/","text":"Forms Handling PHP - A Simple HTML Form The example below displays a simple HTML form with two input fields and a submit button. < html > < body > < form action = \"welcome.php\" method = \"post\" > Name: < input type = \"text\" name = \"name\" >< br > E-mail: < input type = \"text\" name = \"email\" >< br > < input type = \"submit\" > </ form > </ body > </ html > When the user fills out the form above and clicks the submit button, the form data is sent for processing to a PHP file named \"welcome.php\". The form data is sent with the HTTP POST method. To display the submitted data you could simply echo all the variables. The \"welcome.php\" looks like this: <html> <body> Welcome <?php echo $_POST [ \"name\" ]; ?> <br> Your email address is: <?php echo $_POST [ \"email\" ]; ?> </body> </html> The output could be something like this: Welcome John Your email address is john.doe@example.com The same result could also be achieved using the HTTP GET method: < html > < body > < form action = \"welcome_get.php\" method = \"get\" > Name: < input type = \"text\" name = \"name\" >< br > E-mail: < input type = \"text\" name = \"email\" >< br > < input type = \"submit\" > </ form > </ body > </ html > and \"welcome_get.php\" looks like this: < html > < body > Welcome <?php echo $_GET[\"name\"]; ?> < br > Your email address is: <?php echo $_GET[\"email\"]; ?> </ body > </ html > The code above is quite simple. However, the most important thing is missing. You need to validate form data to protect your script from malicious code. GET vs. POST Both GET and POST create an array (e.g. array( key1 => value1, key2 => value2, key3 => value3, ...)). This array holds key/value pairs, where keys are the names of the form controls and values are the input data from the user. Both GET and POST are treated as $_GET and $_POST. These are superglobals, which means that they are always accessible, regardless of scope - and you can access them from any function, class or file without having to do anything special. $_GET is an array of variables passed to the current script via the URL parameters. $_POST is an array of variables passed to the current script via the HTTP POST method. When to use GET? Information sent from a form with the GET method is visible to everyone (all variable names and values are displayed in the URL). GET also has limits on the amount of information to send. The limitation is about 2000 characters. However, because the variables are displayed in the URL, it is possible to bookmark the page. This can be useful in some cases. GET may be used for sending non-sensitive data. GET should NEVER be used for sending passwords or other sensitive information! When to use POST? Information sent from a form with the POST method is invisible to others (all names/values are embedded within the body of the HTTP request) and has no limits on the amount of information to send. Moreover POST supports advanced functionality such as support for multi-part binary input while uploading files to server. However, because the variables are not displayed in the URL, it is not possible to bookmark the page. Developers prefer POST for sending form data. Forms Validation Text Fields The name, email, and website fields are text input elements, and the comment field is a textarea. The HTML code looks like this: Name: < input type = \"text\" name = \"name\" > E-mail: < input type = \"text\" name = \"email\" > Website: < input type = \"text\" name = \"website\" > Comment: < textarea name = \"comment\" rows = \"5\" cols = \"40\" ></ textarea > Radio Buttons The gender fields are radio buttons and the HTML code looks like this: Gender: < input type = \"radio\" name = \"gender\" value = \"female\" > Female < input type = \"radio\" name = \"gender\" value = \"male\" > Male < input type = \"radio\" name = \"gender\" value = \"other\" > Other The Form Element The HTML code of the form looks like this: < form method = \"post\" action = \"<?php echo htmlspecialchars($_SERVER[\" PHP_SELF \"]);? > \"> When the form is submitted, the form data is sent with method=\"post\". The $_SERVER[\"PHP_SELF\"] is a super global variable that returns the filename of the currently executing script. The $_SERVER[\"PHP_SELF\"] sends the submitted form data to the page itself, instead of jumping to a different page. This way, the user will get error messages on the same page as the form. The htmlspecialchars() function converts special characters to HTML entities. This means that it will replace HTML characters like < and > with & lt; and & gt;. This prevents attackers from exploiting the code by injecting HTML or Javascript code (Cross-site Scripting attacks) in forms. PHP Form Security The $_SERVER[\"PHP_SELF\"] variable can be used by hackers! If PHP_SELF is used in your page then a user can enter a slash (/) and then some Cross Site Scripting (XSS) commands to execute. Cross-site scripting (XSS) is a type of computer security vulnerability typically found in Web applications. XSS enables attackers to inject client-side script into Web pages viewed by other users. Assume we have the following form in a page named \"test_form.php\": < form method = \"post\" action = \"<?php echo $_SERVER[\" PHP_SELF \"];? > \"> Now, if a user enters the normal URL in the address bar like \"http://www.example.com/test_form.php\", the above code will be translated to: < form method = \"post\" action = \"test_form.php\" > So far, so good. However, consider that a user enters the following URL in the address bar: http://www.example.com/test_form.php/%22%3E%3Cscript%3Ealert('hacked')%3C/script%3E In this case, the above code will be translated to: < form method = \"post\" action = \"test_form.php/\" >< script > alert ( 'hacked' )</ script > This code adds a script tag and an alert command. And when the page loads, the JavaScript code will be executed (the user will see an alert box). This is just a simple and harmless example how the PHP_SELF variable can be exploited. Be aware of that any JavaScript code can be added inside the <'script> tag! A hacker can redirect the user to a file on another server, and that file can hold malicious code that can alter the global variables or submit the form to another address to save the user data, for example. How To Avoid $_SERVER[\"PHP_SELF\"] Exploits? $_SERVER[\"PHP_SELF\"] exploits can be avoided by using the htmlspecialchars() function. The form code should look like this: <form method=\"post\" action=\" <?php echo htmlspecialchars ( $_SERVER [ \"PHP_SELF\" ]); ?> \"> The htmlspecialchars() function converts special characters to HTML entities. Now if the user tries to exploit the PHP_SELF variable, it will result in the following output: < form method = \"post\" action = \"test_form.php/&quot;&gt;&lt;script&gt;alert('hacked')&lt;/script&gt;\" > The exploit attempt fails, and no harm is done! Validate Form Data With PHP The first thing we will do is to pass all variables through PHP's htmlspecialchars() function. When we use the htmlspecialchars() function; then if a user tries to submit the following in a text field: < script > location . href ( 'http://www.hacked.com' )</ script > This would not be executed, because it would be saved as HTML escaped code, like this: &lt; script &gt; location.href('http://www.hacked.com') &lt; /script &gt; The code is now safe to be displayed on a page or inside an e-mail. We will also do two more things when the user submits the form: Strip unnecessary characters (extra space, tab, newline) from the user input data (with the PHP trim() function) Remove backslashes (\\) from the user input data (with the PHP stripslashes() function) The next step is to create a function that will do all the checking for us (which is much more convenient than writing the same code over and over again). We will name the function test_input(). Now, we can check each $_POST variable with the test_input() function, and the script looks like this: <?php // define variables and set to empty values $name = $email = $gender = $comment = $website = \"\" ; if ( $_SERVER [ \"REQUEST_METHOD\" ] == \"POST\" ) { $name = test_input ( $_POST [ \"name\" ]); $email = test_input ( $_POST [ \"email\" ]); $website = test_input ( $_POST [ \"website\" ]); $comment = test_input ( $_POST [ \"comment\" ]); $gender = test_input ( $_POST [ \"gender\" ]); } function test_input ( $data ) { $data = trim ( $data ); $data = stripslashes ( $data ); $data = htmlspecialchars ( $data ); return $data ; } ?> Notice that at the start of the script, we check whether the form has been submitted using $_SERVER[\"REQUEST_METHOD\"]. If the REQUEST_METHOD is POST, then the form has been submitted - and it should be validated. If it has not been submitted, skip the validation and display a blank form. However, in the example above, all input fields are optional. The script works fine even if the user does not enter any data. Required Fields In the following code we have added some new variables: $nameErr, $emailErr, $genderErr, and $websiteErr. These error variables will hold error messages for the required fields. We have also added an if else statement for each $_POST variable. This checks if the $_POST variable is empty (with the PHP empty() function). If it is empty, an error message is stored in the different error variables, and if it is not empty, it sends the user input data through the test_input() function. <?php // define variables and set to empty values $nameErr = $emailErr = $genderErr = $websiteErr = \"\" ; $name = $email = $gender = $comment = $website = \"\" ; if ( $_SERVER [ \"REQUEST_METHOD\" ] == \"POST\" ) { if ( empty ( $_POST [ \"name\" ])) { $nameErr = \"Name is required\" ; } else { $name = test_input ( $_POST [ \"name\" ]); } if ( empty ( $_POST [ \"email\" ])) { $emailErr = \"Email is required\" ; } else { $email = test_input ( $_POST [ \"email\" ]); } if ( empty ( $_POST [ \"website\" ])) { $website = \"\" ; } else { $website = test_input ( $_POST [ \"website\" ]); } if ( empty ( $_POST [ \"comment\" ])) { $comment = \"\" ; } else { $comment = test_input ( $_POST [ \"comment\" ]); } if ( empty ( $_POST [ \"gender\" ])) { $genderErr = \"Gender is required\" ; } else { $gender = test_input ( $_POST [ \"gender\" ]); } } ?> Display The Error Messages Then in the HTML form, we add a little script after each required field, which generates the correct error message if needed (that is if the user tries to submit the form without filling out the required fields). <!-- HTML form --> < form method = \"post\" action = \"<?php echo htmlspecialchars($_SERVER[\" PHP_SELF \"]);? > \"> Name: < input type = \"text\" name = \"name\" > < span class = \"error\" > * <?php echo $nameErr;?> </ span > < br >< br > E-mail: < input type = \"text\" name = \"email\" > < span class = \"error\" > * <?php echo $emailErr;?> </ span > < br >< br > Website: < input type = \"text\" name = \"website\" > < span class = \"error\" > <?php echo $websiteErr;?> </ span > < br >< br > Comment: < textarea name = \"comment\" rows = \"5\" cols = \"40\" ></ textarea > < br >< br > Gender: < input type = \"radio\" name = \"gender\" value = \"female\" > Female < input type = \"radio\" name = \"gender\" value = \"male\" > Male < input type = \"radio\" name = \"gender\" value = \"other\" > Other < span class = \"error\" > * <?php echo $genderErr;?> </ span > < br >< br > < input type = \"submit\" name = \"submit\" value = \"Submit\" > </ form > Validate Name The code below shows a simple way to check if the name field only contains letters, dashes, apostrophes and whitespaces. If the value of the name field is not valid, then store an error message: $name = test_input($_POST[\"name\"]); if (!preg_match(\"/^[a-zA-Z-' ]*$/\",$name)) { $nameErr = \"Only letters and white space allowed\"; } Validate E-mail The easiest and safest way to check whether an email address is well-formed is to use PHP's filter_var() function. In the code below, if the e-mail address is not well-formed, then store an error message: $email = test_input($_POST[\"email\"]); if (!filter_var($email, FILTER_VALIDATE_EMAIL)) { $emailErr = \"Invalid email format\"; } Validate URL The code below shows a way to check if a URL address syntax is valid (this regular expression also allows dashes in the URL). If the URL address syntax is not valid, then store an error message: $website = test_input($_POST[\"website\"]); if (!preg_match(\"/\\b(?:(?:https?|ftp):\\/\\/|www\\.)[-a-z0-9+&@#\\/%?=~_|!:,.;]*[-a-z0-9+&@#\\/%=~_|]/i\",$website)) { $websiteErr = \"Invalid URL\"; } Validate Name, E-mail, and URL Now, the script looks like this. <?php // define variables and set to empty values $nameErr = $emailErr = $genderErr = $websiteErr = \"\" ; $name = $email = $gender = $comment = $website = \"\" ; if ( $_SERVER [ \"REQUEST_METHOD\" ] == \"POST\" ) { if ( empty ( $_POST [ \"name\" ])) { $nameErr = \"Name is required\" ; } else { $name = test_input ( $_POST [ \"name\" ]); // check if name only contains letters and whitespace if ( ! preg_match ( \"/^[a-zA-Z-' ]*$/\" , $name )) { $nameErr = \"Only letters and white space allowed\" ; } } if ( empty ( $_POST [ \"email\" ])) { $emailErr = \"Email is required\" ; } else { $email = test_input ( $_POST [ \"email\" ]); // check if e-mail address is well-formed if ( ! filter_var ( $email , FILTER_VALIDATE_EMAIL )) { $emailErr = \"Invalid email format\" ; } } if ( empty ( $_POST [ \"website\" ])) { $website = \"\" ; } else { $website = test_input ( $_POST [ \"website\" ]); // check if URL address syntax is valid (this regular expression also allows dashes in the URL) if ( ! preg_match ( \"/\\b(?:(?:https?|ftp):\\/\\/|www\\.)[-a-z0-9+&@#\\/%?=~_|!:,.;]*[-a-z0-9+&@#\\/%=~_|]/i\" , $website )) { $websiteErr = \"Invalid URL\" ; } } if ( empty ( $_POST [ \"comment\" ])) { $comment = \"\" ; } else { $comment = test_input ( $_POST [ \"comment\" ]); } if ( empty ( $_POST [ \"gender\" ])) { $genderErr = \"Gender is required\" ; } else { $gender = test_input ( $_POST [ \"gender\" ]); } } ?> Keep The Values in The Form To show the values in the input fields after the user hits the submit button, we add a little PHP script inside the value attribute of the following input fields: name, email, and website. In the comment textarea field, we put the script between the <'textarea> and <'/textarea> tags. The little script outputs the value of the $name, $email, $website, and $comment variables. Then, we also need to show which radio button that was checked. For this, we must manipulate the checked attribute (not the value attribute for radio buttons): Name: <input type=\"text\" name=\"name\" value=\" <?php echo $name ; ?> \"> E-mail: <input type=\"text\" name=\"email\" value=\" <?php echo $email ; ?> \"> Website: <input type=\"text\" name=\"website\" value=\" <?php echo $website ; ?> \"> Comment: <textarea name=\"comment\" rows=\"5\" cols=\"40\"> <?php echo $comment ; ?> </textarea> Gender: <input type=\"radio\" name=\"gender\" <?php if ( isset ( $gender ) && $gender == \"female\" ) echo \"checked\" ; ?> value=\"female\">Female <input type=\"radio\" name=\"gender\" <?php if ( isset ( $gender ) && $gender == \"male\" ) echo \"checked\" ; ?> value=\"male\">Male <input type=\"radio\" name=\"gender\" <?php if ( isset ( $gender ) && $gender == \"other\" ) echo \"checked\" ; ?> value=\"other\">Other Complete <!DOCTYPE HTML> <html> <head> <style> .error {color: #FF0000;} </style> </head> <body> <?php // define variables and set to empty values $nameErr = $emailErr = $genderErr = $websiteErr = \"\" ; $name = $email = $gender = $comment = $website = \"\" ; if ( $_SERVER [ \"REQUEST_METHOD\" ] == \"POST\" ) { if ( empty ( $_POST [ \"name\" ])) { $nameErr = \"Name is required\" ; } else { $name = test_input ( $_POST [ \"name\" ]); // check if name only contains letters and whitespace if ( ! preg_match ( \"/^[a-zA-Z-' ]*$/\" , $name )) { $nameErr = \"Only letters and white space allowed\" ; } } if ( empty ( $_POST [ \"email\" ])) { $emailErr = \"Email is required\" ; } else { $email = test_input ( $_POST [ \"email\" ]); // check if e-mail address is well-formed if ( ! filter_var ( $email , FILTER_VALIDATE_EMAIL )) { $emailErr = \"Invalid email format\" ; } } if ( empty ( $_POST [ \"website\" ])) { $website = \"\" ; } else { $website = test_input ( $_POST [ \"website\" ]); // check if URL address syntax is valid (this regular expression also allows dashes in the URL) if ( ! preg_match ( \"/\\b(?:(?:https?|ftp):\\/\\/|www\\.)[-a-z0-9+&@#\\/%?=~_|!:,.;]*[-a-z0-9+&@#\\/%=~_|]/i\" , $website )) { $websiteErr = \"Invalid URL\" ; } } if ( empty ( $_POST [ \"comment\" ])) { $comment = \"\" ; } else { $comment = test_input ( $_POST [ \"comment\" ]); } if ( empty ( $_POST [ \"gender\" ])) { $genderErr = \"Gender is required\" ; } else { $gender = test_input ( $_POST [ \"gender\" ]); } } function test_input ( $data ) { $data = trim ( $data ); $data = stripslashes ( $data ); $data = htmlspecialchars ( $data ); return $data ; } ?> <h2>PHP Form Validation Example</h2> <p><span class=\"error\">* required field</span></p> <form method=\"post\" action=\" <?php echo htmlspecialchars ( $_SERVER [ \"PHP_SELF\" ]); ?> \"> Name: <input type=\"text\" name=\"name\" value=\" <?php echo $name ; ?> \"> <span class=\"error\">* <?php echo $nameErr ; ?> </span> <br><br> E-mail: <input type=\"text\" name=\"email\" value=\" <?php echo $email ; ?> \"> <span class=\"error\">* <?php echo $emailErr ; ?> </span> <br><br> Website: <input type=\"text\" name=\"website\" value=\" <?php echo $website ; ?> \"> <span class=\"error\"> <?php echo $websiteErr ; ?> </span> <br><br> Comment: <textarea name=\"comment\" rows=\"5\" cols=\"40\"> <?php echo $comment ; ?> </textarea> <br><br> Gender: <input type=\"radio\" name=\"gender\" <?php if ( isset ( $gender ) && $gender == \"female\" ) echo \"checked\" ; ?> value=\"female\">Female <input type=\"radio\" name=\"gender\" <?php if ( isset ( $gender ) && $gender == \"male\" ) echo \"checked\" ; ?> value=\"male\">Male <input type=\"radio\" name=\"gender\" <?php if ( isset ( $gender ) && $gender == \"other\" ) echo \"checked\" ; ?> value=\"other\">Other <span class=\"error\">* <?php echo $genderErr ; ?> </span> <br><br> <input type=\"submit\" name=\"submit\" value=\"Submit\"> </form> <?php echo \"<h2>Your Input:</h2>\" ; echo $name ; echo \"<br>\" ; echo $email ; echo \"<br>\" ; echo $website ; echo \"<br>\" ; echo $comment ; echo \"<br>\" ; echo $gender ; ?> </body> </html>","title":"Forms"},{"location":"PR/phpForms/#forms-handling","text":"PHP - A Simple HTML Form The example below displays a simple HTML form with two input fields and a submit button. < html > < body > < form action = \"welcome.php\" method = \"post\" > Name: < input type = \"text\" name = \"name\" >< br > E-mail: < input type = \"text\" name = \"email\" >< br > < input type = \"submit\" > </ form > </ body > </ html > When the user fills out the form above and clicks the submit button, the form data is sent for processing to a PHP file named \"welcome.php\". The form data is sent with the HTTP POST method. To display the submitted data you could simply echo all the variables. The \"welcome.php\" looks like this: <html> <body> Welcome <?php echo $_POST [ \"name\" ]; ?> <br> Your email address is: <?php echo $_POST [ \"email\" ]; ?> </body> </html> The output could be something like this: Welcome John Your email address is john.doe@example.com The same result could also be achieved using the HTTP GET method: < html > < body > < form action = \"welcome_get.php\" method = \"get\" > Name: < input type = \"text\" name = \"name\" >< br > E-mail: < input type = \"text\" name = \"email\" >< br > < input type = \"submit\" > </ form > </ body > </ html > and \"welcome_get.php\" looks like this: < html > < body > Welcome <?php echo $_GET[\"name\"]; ?> < br > Your email address is: <?php echo $_GET[\"email\"]; ?> </ body > </ html > The code above is quite simple. However, the most important thing is missing. You need to validate form data to protect your script from malicious code.","title":"Forms Handling"},{"location":"PR/phpForms/#get-vs-post","text":"Both GET and POST create an array (e.g. array( key1 => value1, key2 => value2, key3 => value3, ...)). This array holds key/value pairs, where keys are the names of the form controls and values are the input data from the user. Both GET and POST are treated as $_GET and $_POST. These are superglobals, which means that they are always accessible, regardless of scope - and you can access them from any function, class or file without having to do anything special. $_GET is an array of variables passed to the current script via the URL parameters. $_POST is an array of variables passed to the current script via the HTTP POST method.","title":"GET vs. POST"},{"location":"PR/phpForms/#when-to-use-get","text":"Information sent from a form with the GET method is visible to everyone (all variable names and values are displayed in the URL). GET also has limits on the amount of information to send. The limitation is about 2000 characters. However, because the variables are displayed in the URL, it is possible to bookmark the page. This can be useful in some cases. GET may be used for sending non-sensitive data. GET should NEVER be used for sending passwords or other sensitive information!","title":"When to use GET?"},{"location":"PR/phpForms/#when-to-use-post","text":"Information sent from a form with the POST method is invisible to others (all names/values are embedded within the body of the HTTP request) and has no limits on the amount of information to send. Moreover POST supports advanced functionality such as support for multi-part binary input while uploading files to server. However, because the variables are not displayed in the URL, it is not possible to bookmark the page. Developers prefer POST for sending form data.","title":"When to use POST?"},{"location":"PR/phpForms/#forms-validation","text":"","title":"Forms Validation"},{"location":"PR/phpForms/#text-fields","text":"The name, email, and website fields are text input elements, and the comment field is a textarea. The HTML code looks like this: Name: < input type = \"text\" name = \"name\" > E-mail: < input type = \"text\" name = \"email\" > Website: < input type = \"text\" name = \"website\" > Comment: < textarea name = \"comment\" rows = \"5\" cols = \"40\" ></ textarea >","title":"Text Fields"},{"location":"PR/phpForms/#radio-buttons","text":"The gender fields are radio buttons and the HTML code looks like this: Gender: < input type = \"radio\" name = \"gender\" value = \"female\" > Female < input type = \"radio\" name = \"gender\" value = \"male\" > Male < input type = \"radio\" name = \"gender\" value = \"other\" > Other","title":"Radio Buttons"},{"location":"PR/phpForms/#the-form-element","text":"The HTML code of the form looks like this: < form method = \"post\" action = \"<?php echo htmlspecialchars($_SERVER[\" PHP_SELF \"]);? > \"> When the form is submitted, the form data is sent with method=\"post\". The $_SERVER[\"PHP_SELF\"] is a super global variable that returns the filename of the currently executing script. The $_SERVER[\"PHP_SELF\"] sends the submitted form data to the page itself, instead of jumping to a different page. This way, the user will get error messages on the same page as the form. The htmlspecialchars() function converts special characters to HTML entities. This means that it will replace HTML characters like < and > with & lt; and & gt;. This prevents attackers from exploiting the code by injecting HTML or Javascript code (Cross-site Scripting attacks) in forms.","title":"The Form Element"},{"location":"PR/phpForms/#php-form-security","text":"The $_SERVER[\"PHP_SELF\"] variable can be used by hackers! If PHP_SELF is used in your page then a user can enter a slash (/) and then some Cross Site Scripting (XSS) commands to execute. Cross-site scripting (XSS) is a type of computer security vulnerability typically found in Web applications. XSS enables attackers to inject client-side script into Web pages viewed by other users. Assume we have the following form in a page named \"test_form.php\": < form method = \"post\" action = \"<?php echo $_SERVER[\" PHP_SELF \"];? > \"> Now, if a user enters the normal URL in the address bar like \"http://www.example.com/test_form.php\", the above code will be translated to: < form method = \"post\" action = \"test_form.php\" > So far, so good. However, consider that a user enters the following URL in the address bar: http://www.example.com/test_form.php/%22%3E%3Cscript%3Ealert('hacked')%3C/script%3E In this case, the above code will be translated to: < form method = \"post\" action = \"test_form.php/\" >< script > alert ( 'hacked' )</ script > This code adds a script tag and an alert command. And when the page loads, the JavaScript code will be executed (the user will see an alert box). This is just a simple and harmless example how the PHP_SELF variable can be exploited. Be aware of that any JavaScript code can be added inside the <'script> tag! A hacker can redirect the user to a file on another server, and that file can hold malicious code that can alter the global variables or submit the form to another address to save the user data, for example.","title":"PHP Form Security"},{"location":"PR/phpForms/#how-to-avoid-_serverphp_self-exploits","text":"$_SERVER[\"PHP_SELF\"] exploits can be avoided by using the htmlspecialchars() function. The form code should look like this: <form method=\"post\" action=\" <?php echo htmlspecialchars ( $_SERVER [ \"PHP_SELF\" ]); ?> \"> The htmlspecialchars() function converts special characters to HTML entities. Now if the user tries to exploit the PHP_SELF variable, it will result in the following output: < form method = \"post\" action = \"test_form.php/&quot;&gt;&lt;script&gt;alert('hacked')&lt;/script&gt;\" > The exploit attempt fails, and no harm is done!","title":"How To Avoid $_SERVER[\"PHP_SELF\"] Exploits?"},{"location":"PR/phpForms/#validate-form-data-with-php","text":"The first thing we will do is to pass all variables through PHP's htmlspecialchars() function. When we use the htmlspecialchars() function; then if a user tries to submit the following in a text field: < script > location . href ( 'http://www.hacked.com' )</ script > This would not be executed, because it would be saved as HTML escaped code, like this: &lt; script &gt; location.href('http://www.hacked.com') &lt; /script &gt; The code is now safe to be displayed on a page or inside an e-mail. We will also do two more things when the user submits the form: Strip unnecessary characters (extra space, tab, newline) from the user input data (with the PHP trim() function) Remove backslashes (\\) from the user input data (with the PHP stripslashes() function) The next step is to create a function that will do all the checking for us (which is much more convenient than writing the same code over and over again). We will name the function test_input(). Now, we can check each $_POST variable with the test_input() function, and the script looks like this: <?php // define variables and set to empty values $name = $email = $gender = $comment = $website = \"\" ; if ( $_SERVER [ \"REQUEST_METHOD\" ] == \"POST\" ) { $name = test_input ( $_POST [ \"name\" ]); $email = test_input ( $_POST [ \"email\" ]); $website = test_input ( $_POST [ \"website\" ]); $comment = test_input ( $_POST [ \"comment\" ]); $gender = test_input ( $_POST [ \"gender\" ]); } function test_input ( $data ) { $data = trim ( $data ); $data = stripslashes ( $data ); $data = htmlspecialchars ( $data ); return $data ; } ?> Notice that at the start of the script, we check whether the form has been submitted using $_SERVER[\"REQUEST_METHOD\"]. If the REQUEST_METHOD is POST, then the form has been submitted - and it should be validated. If it has not been submitted, skip the validation and display a blank form. However, in the example above, all input fields are optional. The script works fine even if the user does not enter any data.","title":"Validate Form Data With PHP"},{"location":"PR/phpForms/#required-fields","text":"In the following code we have added some new variables: $nameErr, $emailErr, $genderErr, and $websiteErr. These error variables will hold error messages for the required fields. We have also added an if else statement for each $_POST variable. This checks if the $_POST variable is empty (with the PHP empty() function). If it is empty, an error message is stored in the different error variables, and if it is not empty, it sends the user input data through the test_input() function. <?php // define variables and set to empty values $nameErr = $emailErr = $genderErr = $websiteErr = \"\" ; $name = $email = $gender = $comment = $website = \"\" ; if ( $_SERVER [ \"REQUEST_METHOD\" ] == \"POST\" ) { if ( empty ( $_POST [ \"name\" ])) { $nameErr = \"Name is required\" ; } else { $name = test_input ( $_POST [ \"name\" ]); } if ( empty ( $_POST [ \"email\" ])) { $emailErr = \"Email is required\" ; } else { $email = test_input ( $_POST [ \"email\" ]); } if ( empty ( $_POST [ \"website\" ])) { $website = \"\" ; } else { $website = test_input ( $_POST [ \"website\" ]); } if ( empty ( $_POST [ \"comment\" ])) { $comment = \"\" ; } else { $comment = test_input ( $_POST [ \"comment\" ]); } if ( empty ( $_POST [ \"gender\" ])) { $genderErr = \"Gender is required\" ; } else { $gender = test_input ( $_POST [ \"gender\" ]); } } ?>","title":"Required Fields"},{"location":"PR/phpForms/#display-the-error-messages","text":"Then in the HTML form, we add a little script after each required field, which generates the correct error message if needed (that is if the user tries to submit the form without filling out the required fields). <!-- HTML form --> < form method = \"post\" action = \"<?php echo htmlspecialchars($_SERVER[\" PHP_SELF \"]);? > \"> Name: < input type = \"text\" name = \"name\" > < span class = \"error\" > * <?php echo $nameErr;?> </ span > < br >< br > E-mail: < input type = \"text\" name = \"email\" > < span class = \"error\" > * <?php echo $emailErr;?> </ span > < br >< br > Website: < input type = \"text\" name = \"website\" > < span class = \"error\" > <?php echo $websiteErr;?> </ span > < br >< br > Comment: < textarea name = \"comment\" rows = \"5\" cols = \"40\" ></ textarea > < br >< br > Gender: < input type = \"radio\" name = \"gender\" value = \"female\" > Female < input type = \"radio\" name = \"gender\" value = \"male\" > Male < input type = \"radio\" name = \"gender\" value = \"other\" > Other < span class = \"error\" > * <?php echo $genderErr;?> </ span > < br >< br > < input type = \"submit\" name = \"submit\" value = \"Submit\" > </ form >","title":"Display The Error Messages"},{"location":"PR/phpForms/#validate-name","text":"The code below shows a simple way to check if the name field only contains letters, dashes, apostrophes and whitespaces. If the value of the name field is not valid, then store an error message: $name = test_input($_POST[\"name\"]); if (!preg_match(\"/^[a-zA-Z-' ]*$/\",$name)) { $nameErr = \"Only letters and white space allowed\"; }","title":"Validate Name"},{"location":"PR/phpForms/#validate-e-mail","text":"The easiest and safest way to check whether an email address is well-formed is to use PHP's filter_var() function. In the code below, if the e-mail address is not well-formed, then store an error message: $email = test_input($_POST[\"email\"]); if (!filter_var($email, FILTER_VALIDATE_EMAIL)) { $emailErr = \"Invalid email format\"; }","title":"Validate E-mail"},{"location":"PR/phpForms/#validate-url","text":"The code below shows a way to check if a URL address syntax is valid (this regular expression also allows dashes in the URL). If the URL address syntax is not valid, then store an error message: $website = test_input($_POST[\"website\"]); if (!preg_match(\"/\\b(?:(?:https?|ftp):\\/\\/|www\\.)[-a-z0-9+&@#\\/%?=~_|!:,.;]*[-a-z0-9+&@#\\/%=~_|]/i\",$website)) { $websiteErr = \"Invalid URL\"; }","title":"Validate URL"},{"location":"PR/phpForms/#validate-name-e-mail-and-url","text":"Now, the script looks like this. <?php // define variables and set to empty values $nameErr = $emailErr = $genderErr = $websiteErr = \"\" ; $name = $email = $gender = $comment = $website = \"\" ; if ( $_SERVER [ \"REQUEST_METHOD\" ] == \"POST\" ) { if ( empty ( $_POST [ \"name\" ])) { $nameErr = \"Name is required\" ; } else { $name = test_input ( $_POST [ \"name\" ]); // check if name only contains letters and whitespace if ( ! preg_match ( \"/^[a-zA-Z-' ]*$/\" , $name )) { $nameErr = \"Only letters and white space allowed\" ; } } if ( empty ( $_POST [ \"email\" ])) { $emailErr = \"Email is required\" ; } else { $email = test_input ( $_POST [ \"email\" ]); // check if e-mail address is well-formed if ( ! filter_var ( $email , FILTER_VALIDATE_EMAIL )) { $emailErr = \"Invalid email format\" ; } } if ( empty ( $_POST [ \"website\" ])) { $website = \"\" ; } else { $website = test_input ( $_POST [ \"website\" ]); // check if URL address syntax is valid (this regular expression also allows dashes in the URL) if ( ! preg_match ( \"/\\b(?:(?:https?|ftp):\\/\\/|www\\.)[-a-z0-9+&@#\\/%?=~_|!:,.;]*[-a-z0-9+&@#\\/%=~_|]/i\" , $website )) { $websiteErr = \"Invalid URL\" ; } } if ( empty ( $_POST [ \"comment\" ])) { $comment = \"\" ; } else { $comment = test_input ( $_POST [ \"comment\" ]); } if ( empty ( $_POST [ \"gender\" ])) { $genderErr = \"Gender is required\" ; } else { $gender = test_input ( $_POST [ \"gender\" ]); } } ?>","title":"Validate Name, E-mail, and URL"},{"location":"PR/phpForms/#keep-the-values-in-the-form","text":"To show the values in the input fields after the user hits the submit button, we add a little PHP script inside the value attribute of the following input fields: name, email, and website. In the comment textarea field, we put the script between the <'textarea> and <'/textarea> tags. The little script outputs the value of the $name, $email, $website, and $comment variables. Then, we also need to show which radio button that was checked. For this, we must manipulate the checked attribute (not the value attribute for radio buttons): Name: <input type=\"text\" name=\"name\" value=\" <?php echo $name ; ?> \"> E-mail: <input type=\"text\" name=\"email\" value=\" <?php echo $email ; ?> \"> Website: <input type=\"text\" name=\"website\" value=\" <?php echo $website ; ?> \"> Comment: <textarea name=\"comment\" rows=\"5\" cols=\"40\"> <?php echo $comment ; ?> </textarea> Gender: <input type=\"radio\" name=\"gender\" <?php if ( isset ( $gender ) && $gender == \"female\" ) echo \"checked\" ; ?> value=\"female\">Female <input type=\"radio\" name=\"gender\" <?php if ( isset ( $gender ) && $gender == \"male\" ) echo \"checked\" ; ?> value=\"male\">Male <input type=\"radio\" name=\"gender\" <?php if ( isset ( $gender ) && $gender == \"other\" ) echo \"checked\" ; ?> value=\"other\">Other","title":"Keep The Values in The Form"},{"location":"PR/phpForms/#complete","text":"<!DOCTYPE HTML> <html> <head> <style> .error {color: #FF0000;} </style> </head> <body> <?php // define variables and set to empty values $nameErr = $emailErr = $genderErr = $websiteErr = \"\" ; $name = $email = $gender = $comment = $website = \"\" ; if ( $_SERVER [ \"REQUEST_METHOD\" ] == \"POST\" ) { if ( empty ( $_POST [ \"name\" ])) { $nameErr = \"Name is required\" ; } else { $name = test_input ( $_POST [ \"name\" ]); // check if name only contains letters and whitespace if ( ! preg_match ( \"/^[a-zA-Z-' ]*$/\" , $name )) { $nameErr = \"Only letters and white space allowed\" ; } } if ( empty ( $_POST [ \"email\" ])) { $emailErr = \"Email is required\" ; } else { $email = test_input ( $_POST [ \"email\" ]); // check if e-mail address is well-formed if ( ! filter_var ( $email , FILTER_VALIDATE_EMAIL )) { $emailErr = \"Invalid email format\" ; } } if ( empty ( $_POST [ \"website\" ])) { $website = \"\" ; } else { $website = test_input ( $_POST [ \"website\" ]); // check if URL address syntax is valid (this regular expression also allows dashes in the URL) if ( ! preg_match ( \"/\\b(?:(?:https?|ftp):\\/\\/|www\\.)[-a-z0-9+&@#\\/%?=~_|!:,.;]*[-a-z0-9+&@#\\/%=~_|]/i\" , $website )) { $websiteErr = \"Invalid URL\" ; } } if ( empty ( $_POST [ \"comment\" ])) { $comment = \"\" ; } else { $comment = test_input ( $_POST [ \"comment\" ]); } if ( empty ( $_POST [ \"gender\" ])) { $genderErr = \"Gender is required\" ; } else { $gender = test_input ( $_POST [ \"gender\" ]); } } function test_input ( $data ) { $data = trim ( $data ); $data = stripslashes ( $data ); $data = htmlspecialchars ( $data ); return $data ; } ?> <h2>PHP Form Validation Example</h2> <p><span class=\"error\">* required field</span></p> <form method=\"post\" action=\" <?php echo htmlspecialchars ( $_SERVER [ \"PHP_SELF\" ]); ?> \"> Name: <input type=\"text\" name=\"name\" value=\" <?php echo $name ; ?> \"> <span class=\"error\">* <?php echo $nameErr ; ?> </span> <br><br> E-mail: <input type=\"text\" name=\"email\" value=\" <?php echo $email ; ?> \"> <span class=\"error\">* <?php echo $emailErr ; ?> </span> <br><br> Website: <input type=\"text\" name=\"website\" value=\" <?php echo $website ; ?> \"> <span class=\"error\"> <?php echo $websiteErr ; ?> </span> <br><br> Comment: <textarea name=\"comment\" rows=\"5\" cols=\"40\"> <?php echo $comment ; ?> </textarea> <br><br> Gender: <input type=\"radio\" name=\"gender\" <?php if ( isset ( $gender ) && $gender == \"female\" ) echo \"checked\" ; ?> value=\"female\">Female <input type=\"radio\" name=\"gender\" <?php if ( isset ( $gender ) && $gender == \"male\" ) echo \"checked\" ; ?> value=\"male\">Male <input type=\"radio\" name=\"gender\" <?php if ( isset ( $gender ) && $gender == \"other\" ) echo \"checked\" ; ?> value=\"other\">Other <span class=\"error\">* <?php echo $genderErr ; ?> </span> <br><br> <input type=\"submit\" name=\"submit\" value=\"Submit\"> </form> <?php echo \"<h2>Your Input:</h2>\" ; echo $name ; echo \"<br>\" ; echo $email ; echo \"<br>\" ; echo $website ; echo \"<br>\" ; echo $comment ; echo \"<br>\" ; echo $gender ; ?> </body> </html>","title":"Complete"},{"location":"PR/phpIF/","text":"Conditional statements are used to perform different actions based on different conditions. PHP Conditional Statements In PHP we have the following conditional statements: if statement - executes some code if one condition is true if...else statement - executes some code if a condition is true and another code if that condition is false if...elseif...else statement - executes different codes for more than two conditions switch statement - selects one of many blocks of code to be executed if statement <?php $t = date ( \"H\" ); if ( $t < \"20\" ) { echo \"Have a good day!\" ; } ?> if...else statement <?php $t = date ( \"H\" ); if ( $t < \"20\" ) { echo \"Have a good day!\" ; } else { echo \"Have a good night!\" ; } ?> if...elseif...else statement <?php $t = date ( \"H\" ); if ( $t < \"10\" ) { echo \"Have a good morning!\" ; } elseif ( $t < \"20\" ) { echo \"Have a good day!\" ; } else { echo \"Have a good night!\" ; } ?> endif The endif keyword is used to mark the end of an if conditional which was started with the if(...): syntax. It also applies to any variation of the if conditional, such as if...elseif and if...else. <?php $a = 4 ; if ( $a < 5 ) : echo \"Less than five\" ; endif ; ?> <?php $a = 4 ; if ( $a < 5 ) : echo \"Less than five\" ; elseif ( $a < 10 ) : echo \"More than five but less than ten\" ; else : echo \"Greater than ten\" ; endif ; ?> switch statement <?php $favcolor = \"red\" ; switch ( $favcolor ) { case \"red\" : echo \"Your favorite color is red!\" ; break ; case \"blue\" : echo \"Your favorite color is blue!\" ; break ; case \"green\" : echo \"Your favorite color is green!\" ; break ; //Use default to handle unspecified cases in a switch block default : echo \"Your favorite color is neither red, blue, nor green!\" ; } ?> endswitch The endswitch keyword is used to mark the end of a switch conditional which was started with the switch(...): syntax. <?php $a = 4 ; switch ( $a ) : case 1 : echo \"One\" ; break ; case 2 : echo \"Two\" ; break ; case 3 : echo \"Three\" ; break ; default : echo \"Many\" ; break ; endswitch ; ?>","title":"Conditionals"},{"location":"PR/phpIF/#php-conditional-statements","text":"In PHP we have the following conditional statements: if statement - executes some code if one condition is true if...else statement - executes some code if a condition is true and another code if that condition is false if...elseif...else statement - executes different codes for more than two conditions switch statement - selects one of many blocks of code to be executed","title":"PHP Conditional Statements"},{"location":"PR/phpIF/#if-statement","text":"<?php $t = date ( \"H\" ); if ( $t < \"20\" ) { echo \"Have a good day!\" ; } ?>","title":"if statement"},{"location":"PR/phpIF/#ifelse-statement","text":"<?php $t = date ( \"H\" ); if ( $t < \"20\" ) { echo \"Have a good day!\" ; } else { echo \"Have a good night!\" ; } ?>","title":"if...else statement"},{"location":"PR/phpIF/#ifelseifelse-statement","text":"<?php $t = date ( \"H\" ); if ( $t < \"10\" ) { echo \"Have a good morning!\" ; } elseif ( $t < \"20\" ) { echo \"Have a good day!\" ; } else { echo \"Have a good night!\" ; } ?>","title":"if...elseif...else statement"},{"location":"PR/phpIF/#endif","text":"The endif keyword is used to mark the end of an if conditional which was started with the if(...): syntax. It also applies to any variation of the if conditional, such as if...elseif and if...else. <?php $a = 4 ; if ( $a < 5 ) : echo \"Less than five\" ; endif ; ?> <?php $a = 4 ; if ( $a < 5 ) : echo \"Less than five\" ; elseif ( $a < 10 ) : echo \"More than five but less than ten\" ; else : echo \"Greater than ten\" ; endif ; ?>","title":"endif"},{"location":"PR/phpIF/#switch-statement","text":"<?php $favcolor = \"red\" ; switch ( $favcolor ) { case \"red\" : echo \"Your favorite color is red!\" ; break ; case \"blue\" : echo \"Your favorite color is blue!\" ; break ; case \"green\" : echo \"Your favorite color is green!\" ; break ; //Use default to handle unspecified cases in a switch block default : echo \"Your favorite color is neither red, blue, nor green!\" ; } ?>","title":"switch statement"},{"location":"PR/phpIF/#endswitch","text":"The endswitch keyword is used to mark the end of a switch conditional which was started with the switch(...): syntax. <?php $a = 4 ; switch ( $a ) : case 1 : echo \"One\" ; break ; case 2 : echo \"Two\" ; break ; case 3 : echo \"Three\" ; break ; default : echo \"Many\" ; break ; endswitch ; ?>","title":"endswitch"},{"location":"PR/phpKeywords/","text":"PHP has a set of keywords that are reserved words which cannot be used as function names, class names or method names. Prior to PHP 7, these keywords could not be used as class property names either: Logical OPs Keywords Keyword Description and A logical operator or A logical operator xor A logical operator Conditional Keywords Keyword Description switch Create a switch block case Used in the switch conditional default Used in the switch statement break Break out of loops and switch statements continue Jump to the next iteration of a loop endswitch End a switch block if Create a conditional statement else Used in conditional statements elseif Used in conditional statements endif End an if or elseif block empty Check if an expression is empty isset Check if a variable exists and is not null Loop Keywords Keyword Description do Create a do...while loop while Create a while loop or end a do...while loop endwhile End a while block for Create a for loop endfor End a for block foreach Create a foreach loop as Used in the foreach loop to traverse an associative array To give an alias to the method of a trait , or To give an alias to a namespace endforeach End a foreach block break Break out of loops and switch statements continue Jump to the next iteration of a loop I/O Keywords Keyword Description echo Output text print Output text Exception Keywords Keyword Description try Create a try...catch structure catch Used in the try..catch statement finally Used in the try...catch statement throw Throw an exception Functions Keywords Keyword Description fn Declare an arrow function function Create a function return Exit a function and return a value yield Used in generator functions yield from Used in generator functions callable A data type which can be executed as a function OOP Keywords Keyword Description abstract Declare a class as abstract class Declare a class clone Create a copy of an object const Define a class constant extends Extends a class or interface final Declare a class, property or method as final global Import variables from the global scope private Declare a property, method or constant as private protected Declare a property, method or constant as protected public Declare a property, method or constant as public static Declare a property or method as static implements Implement an interface instanceof Test an object's class insteadof Resolve conflicts with traits interface Declare an interface namespace Declares a namespace new Creates an object trait Declare a trait use Tells a class to inherit a trait and it gives an alias to a namespace Code Keywords Keyword Description declare Set directives for a block of code enddeclare End a declare block goto Jump to a line of code include Embed code from another file include_once Embed code from another file require Embed code from another file require_once Embed code from another file unset Delete a variable or array element var Declare a variable list Assigns array elements into variables","title":"Keywords"},{"location":"PR/phpKeywords/#logical-ops-keywords","text":"Keyword Description and A logical operator or A logical operator xor A logical operator","title":"Logical OPs Keywords"},{"location":"PR/phpKeywords/#conditional-keywords","text":"Keyword Description switch Create a switch block case Used in the switch conditional default Used in the switch statement break Break out of loops and switch statements continue Jump to the next iteration of a loop endswitch End a switch block if Create a conditional statement else Used in conditional statements elseif Used in conditional statements endif End an if or elseif block empty Check if an expression is empty isset Check if a variable exists and is not null","title":"Conditional Keywords"},{"location":"PR/phpKeywords/#loop-keywords","text":"Keyword Description do Create a do...while loop while Create a while loop or end a do...while loop endwhile End a while block for Create a for loop endfor End a for block foreach Create a foreach loop as Used in the foreach loop to traverse an associative array To give an alias to the method of a trait , or To give an alias to a namespace endforeach End a foreach block break Break out of loops and switch statements continue Jump to the next iteration of a loop","title":"Loop Keywords"},{"location":"PR/phpKeywords/#io-keywords","text":"Keyword Description echo Output text print Output text","title":"I/O Keywords"},{"location":"PR/phpKeywords/#exception-keywords","text":"Keyword Description try Create a try...catch structure catch Used in the try..catch statement finally Used in the try...catch statement throw Throw an exception","title":"Exception Keywords"},{"location":"PR/phpKeywords/#functions-keywords","text":"Keyword Description fn Declare an arrow function function Create a function return Exit a function and return a value yield Used in generator functions yield from Used in generator functions callable A data type which can be executed as a function","title":"Functions Keywords"},{"location":"PR/phpKeywords/#oop-keywords","text":"Keyword Description abstract Declare a class as abstract class Declare a class clone Create a copy of an object const Define a class constant extends Extends a class or interface final Declare a class, property or method as final global Import variables from the global scope private Declare a property, method or constant as private protected Declare a property, method or constant as protected public Declare a property, method or constant as public static Declare a property or method as static implements Implement an interface instanceof Test an object's class insteadof Resolve conflicts with traits interface Declare an interface namespace Declares a namespace new Creates an object trait Declare a trait use Tells a class to inherit a trait and it gives an alias to a namespace","title":"OOP Keywords"},{"location":"PR/phpKeywords/#code-keywords","text":"Keyword Description declare Set directives for a block of code enddeclare End a declare block goto Jump to a line of code include Embed code from another file include_once Embed code from another file require Embed code from another file require_once Embed code from another file unset Delete a variable or array element var Declare a variable list Assigns array elements into variables","title":"Code Keywords"},{"location":"PR/phpLoops/","text":"In PHP, we have the following loop types: while - loops through a block of code as long as the specified condition is true do...while - loops through a block of code once, and then repeats the loop as long as the specified condition is true for - loops through a block of code a specified number of times foreach - loops through a block of code for each element in an array To control further the flow of a loop, you can use the break and continue statements. while The while loop - Loops through a block of code as long as the specified condition is true. <?php $x = 1 ; while ( $x <= 5 ) { echo \"The number is: $x <br>\" ; $x ++ ; } ?> endwhile The endwhile keyword is used to close the code block of a while loop which was started using the while(...): syntax. <?php $x = 1 ; while ( $x <= 5 ) : echo \"The number is: $x <br>\" ; $x ++ ; endwhile ; ?> do...while The do...while loop - Loops through a block of code once, and then repeats the loop as long as the specified condition is true. In a do...while loop the condition is tested AFTER executing the statements within the loop. This means that the do...while loop will execute its statements at least once, even if the condition is false. See example below. <?php $x = 1 ; do { echo \"The number is: $x <br>\" ; $x ++ ; } while ( $x <= 5 ); ?> for The for loop - Loops through a block of code a specified number of times. <?php for ( $x = 0 ; $x <= 10 ; $x ++ ) { echo \"The number is: $x <br>\" ; } ?> endfor The endfor keyword is used to close the code block of a for loop which was started using the for(...): syntax. <?php for ( $i = 0 ; $i < 10 ; $i += 2 ) : echo \" $i <br>\" ; endfor ; ?> foreach The foreach loop - Loops through a block of code for each element in an array. <?php $colors = array ( \"red\" , \"green\" , \"blue\" , \"yellow\" ); foreach ( $colors as $value ) { echo \" $value <br>\" ; } ?> <?php $age = array ( \"Peter\" => \"35\" , \"Ben\" => \"37\" , \"Joe\" => \"43\" ); foreach ( $age as $x => $val ) { echo \" $x = $val <br>\" ; } ?> endforeach The endforeach keyword is used to close the code block of a foreach loop which was started using the foreach(...): syntax. <?php $cars = [ \"Ford\" , \"Volvo\" , \"BMW\" ]; foreach ( $cars as $car ) : echo \" $car <br>\" ; endforeach ; ?> Break and Continue PHP Break You have already seen the break statement used to \"jump out\" of a switch statement. The break statement can also be used to jump out of a loop. This example jumps out of the loop when x is equal to 4. <?php $x = 0 ; while ( $x < 10 ) { echo \"The number is: $x <br>\" ; $x ++ ; if ( $x == 4 ) { break ; } } ?> PHP Continue The continue statement breaks one iteration (in the loop), if a specified condition occurs, and continues with the next iteration in the loop. This example skips the value of 4. <?php for ( $x = 0 ; $x < 10 ; $x ++ ) { if ( $x == 4 ) { continue ; } echo \"The number is: $x <br>\" ; } ?>","title":"Loops"},{"location":"PR/phpLoops/#while","text":"The while loop - Loops through a block of code as long as the specified condition is true. <?php $x = 1 ; while ( $x <= 5 ) { echo \"The number is: $x <br>\" ; $x ++ ; } ?>","title":"while"},{"location":"PR/phpLoops/#endwhile","text":"The endwhile keyword is used to close the code block of a while loop which was started using the while(...): syntax. <?php $x = 1 ; while ( $x <= 5 ) : echo \"The number is: $x <br>\" ; $x ++ ; endwhile ; ?>","title":"endwhile"},{"location":"PR/phpLoops/#dowhile","text":"The do...while loop - Loops through a block of code once, and then repeats the loop as long as the specified condition is true. In a do...while loop the condition is tested AFTER executing the statements within the loop. This means that the do...while loop will execute its statements at least once, even if the condition is false. See example below. <?php $x = 1 ; do { echo \"The number is: $x <br>\" ; $x ++ ; } while ( $x <= 5 ); ?>","title":"do...while"},{"location":"PR/phpLoops/#for","text":"The for loop - Loops through a block of code a specified number of times. <?php for ( $x = 0 ; $x <= 10 ; $x ++ ) { echo \"The number is: $x <br>\" ; } ?>","title":"for"},{"location":"PR/phpLoops/#endfor","text":"The endfor keyword is used to close the code block of a for loop which was started using the for(...): syntax. <?php for ( $i = 0 ; $i < 10 ; $i += 2 ) : echo \" $i <br>\" ; endfor ; ?>","title":"endfor"},{"location":"PR/phpLoops/#foreach","text":"The foreach loop - Loops through a block of code for each element in an array. <?php $colors = array ( \"red\" , \"green\" , \"blue\" , \"yellow\" ); foreach ( $colors as $value ) { echo \" $value <br>\" ; } ?> <?php $age = array ( \"Peter\" => \"35\" , \"Ben\" => \"37\" , \"Joe\" => \"43\" ); foreach ( $age as $x => $val ) { echo \" $x = $val <br>\" ; } ?>","title":"foreach"},{"location":"PR/phpLoops/#endforeach","text":"The endforeach keyword is used to close the code block of a foreach loop which was started using the foreach(...): syntax. <?php $cars = [ \"Ford\" , \"Volvo\" , \"BMW\" ]; foreach ( $cars as $car ) : echo \" $car <br>\" ; endforeach ; ?>","title":"endforeach"},{"location":"PR/phpLoops/#break-and-continue","text":"","title":"Break and Continue"},{"location":"PR/phpLoops/#php-break","text":"You have already seen the break statement used to \"jump out\" of a switch statement. The break statement can also be used to jump out of a loop. This example jumps out of the loop when x is equal to 4. <?php $x = 0 ; while ( $x < 10 ) { echo \"The number is: $x <br>\" ; $x ++ ; if ( $x == 4 ) { break ; } } ?>","title":"PHP Break"},{"location":"PR/phpLoops/#php-continue","text":"The continue statement breaks one iteration (in the loop), if a specified condition occurs, and continues with the next iteration in the loop. This example skips the value of 4. <?php for ( $x = 0 ; $x < 10 ; $x ++ ) { if ( $x == 4 ) { continue ; } echo \"The number is: $x <br>\" ; } ?>","title":"PHP Continue"},{"location":"PR/phpMath1/","text":"Most Common Functions pi() The pi() function returns the value of PI. <?php echo ( pi ()); // returns 3.1415926535898 ?> min() and max() The min() and max() functions can be used to find the lowest or highest value in a list of arguments. <?php echo ( min ( 1 , 2 , 3 )); // returns 1 echo ( max ( 1 , 2 , 3 )); // returns 3 ?> floor() and ceil() The floor() and ceil() functions can be used to round a number down or up. <?php echo ( floor ( 3.7 )); // returns 3 echo ( ceil ( 3.1 )); // returns 4 ?> abs() The abs() function returns the absolute value of a number. <?php echo ( abs ( - 3.7 )); // returns 3.7 ?> sqrt() The sqrt() function returns the square root of a number. <?php echo ( sqrt ( 9 )); // returns 3 ?> round() The round() function rounds a number to the nearest integer. <?php echo ( round ( 3.7 )); // returns 4 ?> rand() The rand() function generates a random number. <?php echo ( rand ( 1 , 10 )); // returns a random number between 1 and 10 (inclusive) ?> All Math Functions The PHP math functions are part of the PHP core. No installation is required to use these functions. Function Description abs() Returns the absolute (positive) value of a number acos() Returns the arc cosine of a number acosh() Returns the inverse hyperbolic cosine of a number asin() Returns the arc sine of a number asinh() Returns the inverse hyperbolic sine of a number atan() Returns the arc tangent of a number in radians atan2() Returns the arc tangent of two variables x and y atanh() Returns the inverse hyperbolic tangent of a number base_convert() Converts a number from one number base to another bindec() Converts a binary number to a decimal number ceil() Rounds a number up to the nearest integer cos() Returns the cosine of a number cosh() Returns the hyperbolic cosine of a number decbin() Converts a decimal number to a binary number dechex() Converts a decimal number to a hexadecimal number decoct() Converts a decimal number to an octal number deg2rad() Converts a degree value to a radian value exp() Calculates the exponent of e expm1() Returns exp(x) - 1 floor() Rounds a number down to the nearest integer fmod() Returns the remainder of x/y getrandmax() Returns the largest possible value returned by rand() hexdec() Converts a hexadecimal number to a decimal number hypot() Calculates the hypotenuse of a right-angle triangle intdiv() Performs integer division is_finite() Checks whether a value is finite or not is_infinite() Checks whether a value is infinite or not is_nan() Checks whether a value is 'not-a-number' lcg_value() Returns a pseudo random number in a range between 0 and 1 log() Returns the natural logarithm of a number log10() Returns the base-10 logarithm of a number log1p() Returns log(1+number) max() Returns the highest value in an array, or the highest value of several specified values min() Returns the lowest value in an array, or the lowest value of several specified values mt_getrandmax() Returns the largest possible value returned by mt_rand() mt_rand() Generates a random integer using Mersenne Twister algorithm mt_srand() Seeds the Mersenne Twister random number generator octdec() Converts an octal number to a decimal number pi() Returns the value of PI pow() Returns x raised to the power of y rad2deg() Converts a radian value to a degree value rand() Generates a random integer round() Rounds a floating-point number sin() Returns the sine of a number sinh() Returns the hyperbolic sine of a number sqrt() Returns the square root of a number srand() Seeds the random number generator tan() Returns the tangent of a number tanh() Returns the hyperbolic tangent of a number Predefined Math Constants Constant Value Description INF INF The infinite M_E 2.7182818284590452354 Returns e M_EULER 0.57721566490153286061 Returns Euler constant M_LNPI 1.14472988584940017414 Returns the natural logarithm of PI: log_e(pi) M_LN2 0.69314718055994530942 Returns the natural logarithm of 2: log_e 2 M_LN10 2.30258509299404568402 Returns the natural logarithm of 10: log_e 10 M_LOG2E 1.4426950408889634074 Returns the base-2 logarithm of E: log_2 e M_LOG10E 0.43429448190325182765 Returns the base-10 logarithm of E: log_10 e M_PI 3.14159265358979323846 Returns Pi M_PI_2 1.57079632679489661923 Returns Pi/2 M_PI_4 0.78539816339744830962 Returns Pi/4 M_1_PI 0.31830988618379067154 Returns 1/Pi M_2_PI 0.63661977236758134308 Returns 2/Pi M_SQRTPI 1.77245385090551602729 Returns the square root of PI: sqrt(pi) M_2_SQRTPI 1.12837916709551257390 Returns 2/square root of PI: 2/sqrt(pi) M_SQRT1_2 0.70710678118654752440 Returns the square root of 1/2: 1/sqrt(2) M_SQRT2 1.41421356237309504880 Returns the square root of 2: sqrt(2) M_SQRT3 1.73205080756887729352 Returns the square root of 3: sqrt(3) NAN NAN Not A Number PHP_ROUND_HALF_UP 1 Round halves up PHP_ROUND_HALF_DOWN 2 Round halves down PHP_ROUND_HALF_EVEN 3 Round halves to even numbers PHP_ROUND_HALF_ODD 4 Round halves to odd numbers","title":"Functions"},{"location":"PR/phpMath1/#most-common-functions","text":"","title":"Most Common Functions"},{"location":"PR/phpMath1/#pi","text":"The pi() function returns the value of PI. <?php echo ( pi ()); // returns 3.1415926535898 ?>","title":"pi()"},{"location":"PR/phpMath1/#min-and-max","text":"The min() and max() functions can be used to find the lowest or highest value in a list of arguments. <?php echo ( min ( 1 , 2 , 3 )); // returns 1 echo ( max ( 1 , 2 , 3 )); // returns 3 ?>","title":"min() and max()"},{"location":"PR/phpMath1/#floor-and-ceil","text":"The floor() and ceil() functions can be used to round a number down or up. <?php echo ( floor ( 3.7 )); // returns 3 echo ( ceil ( 3.1 )); // returns 4 ?>","title":"floor() and ceil()"},{"location":"PR/phpMath1/#abs","text":"The abs() function returns the absolute value of a number. <?php echo ( abs ( - 3.7 )); // returns 3.7 ?>","title":"abs()"},{"location":"PR/phpMath1/#sqrt","text":"The sqrt() function returns the square root of a number. <?php echo ( sqrt ( 9 )); // returns 3 ?>","title":"sqrt()"},{"location":"PR/phpMath1/#round","text":"The round() function rounds a number to the nearest integer. <?php echo ( round ( 3.7 )); // returns 4 ?>","title":"round()"},{"location":"PR/phpMath1/#rand","text":"The rand() function generates a random number. <?php echo ( rand ( 1 , 10 )); // returns a random number between 1 and 10 (inclusive) ?>","title":"rand()"},{"location":"PR/phpMath1/#all-math-functions","text":"The PHP math functions are part of the PHP core. No installation is required to use these functions. Function Description abs() Returns the absolute (positive) value of a number acos() Returns the arc cosine of a number acosh() Returns the inverse hyperbolic cosine of a number asin() Returns the arc sine of a number asinh() Returns the inverse hyperbolic sine of a number atan() Returns the arc tangent of a number in radians atan2() Returns the arc tangent of two variables x and y atanh() Returns the inverse hyperbolic tangent of a number base_convert() Converts a number from one number base to another bindec() Converts a binary number to a decimal number ceil() Rounds a number up to the nearest integer cos() Returns the cosine of a number cosh() Returns the hyperbolic cosine of a number decbin() Converts a decimal number to a binary number dechex() Converts a decimal number to a hexadecimal number decoct() Converts a decimal number to an octal number deg2rad() Converts a degree value to a radian value exp() Calculates the exponent of e expm1() Returns exp(x) - 1 floor() Rounds a number down to the nearest integer fmod() Returns the remainder of x/y getrandmax() Returns the largest possible value returned by rand() hexdec() Converts a hexadecimal number to a decimal number hypot() Calculates the hypotenuse of a right-angle triangle intdiv() Performs integer division is_finite() Checks whether a value is finite or not is_infinite() Checks whether a value is infinite or not is_nan() Checks whether a value is 'not-a-number' lcg_value() Returns a pseudo random number in a range between 0 and 1 log() Returns the natural logarithm of a number log10() Returns the base-10 logarithm of a number log1p() Returns log(1+number) max() Returns the highest value in an array, or the highest value of several specified values min() Returns the lowest value in an array, or the lowest value of several specified values mt_getrandmax() Returns the largest possible value returned by mt_rand() mt_rand() Generates a random integer using Mersenne Twister algorithm mt_srand() Seeds the Mersenne Twister random number generator octdec() Converts an octal number to a decimal number pi() Returns the value of PI pow() Returns x raised to the power of y rad2deg() Converts a radian value to a degree value rand() Generates a random integer round() Rounds a floating-point number sin() Returns the sine of a number sinh() Returns the hyperbolic sine of a number sqrt() Returns the square root of a number srand() Seeds the random number generator tan() Returns the tangent of a number tanh() Returns the hyperbolic tangent of a number","title":"All Math Functions"},{"location":"PR/phpMath1/#predefined-math-constants","text":"Constant Value Description INF INF The infinite M_E 2.7182818284590452354 Returns e M_EULER 0.57721566490153286061 Returns Euler constant M_LNPI 1.14472988584940017414 Returns the natural logarithm of PI: log_e(pi) M_LN2 0.69314718055994530942 Returns the natural logarithm of 2: log_e 2 M_LN10 2.30258509299404568402 Returns the natural logarithm of 10: log_e 10 M_LOG2E 1.4426950408889634074 Returns the base-2 logarithm of E: log_2 e M_LOG10E 0.43429448190325182765 Returns the base-10 logarithm of E: log_10 e M_PI 3.14159265358979323846 Returns Pi M_PI_2 1.57079632679489661923 Returns Pi/2 M_PI_4 0.78539816339744830962 Returns Pi/4 M_1_PI 0.31830988618379067154 Returns 1/Pi M_2_PI 0.63661977236758134308 Returns 2/Pi M_SQRTPI 1.77245385090551602729 Returns the square root of PI: sqrt(pi) M_2_SQRTPI 1.12837916709551257390 Returns 2/square root of PI: 2/sqrt(pi) M_SQRT1_2 0.70710678118654752440 Returns the square root of 1/2: 1/sqrt(2) M_SQRT2 1.41421356237309504880 Returns the square root of 2: sqrt(2) M_SQRT3 1.73205080756887729352 Returns the square root of 3: sqrt(3) NAN NAN Not A Number PHP_ROUND_HALF_UP 1 Round halves up PHP_ROUND_HALF_DOWN 2 Round halves down PHP_ROUND_HALF_EVEN 3 Round halves to even numbers PHP_ROUND_HALF_ODD 4 Round halves to odd numbers","title":"Predefined Math Constants"},{"location":"PR/phpNum1/","text":"PHP Numbers One thing to notice about PHP is that it provides automatic data type conversion. So, if you assign an integer value to a variable, the type of that variable will automatically be an integer. Then, if you assign a string to the same variable, the type will change to a string. This automatic conversion can sometimes break your code. PHP Integers An integer data type is a non-decimal number between -2147483648 and 2147483647 in 32 bit systems, and between -9223372036854775808 and 9223372036854775807 in 64 bit systems. A value greater (or lower) than this, will be stored as float, because it exceeds the limit of an integer. Another important thing to know is that even if 4 * 2.5 is 10, the result is stored as float, because one of the operands is a float (2.5). Integers can be specified in three formats: decimal (10-based), hexadecimal (16-based - prefixed with 0x) or octal (8-based - prefixed with 0) PHP Integer Constants PHP has the following predefined constants for integers: PHP_INT_MAX - The largest integer supported PHP_INT_MIN - The smallest integer supported PHP_INT_SIZE - The size of an integer in bytes PHP Integer Functions PHP has the following functions to check if the type of a variable is integer: is_int() is_integer() - alias of is_int() is_long() - alias of is_int() PHP Floats The float data type can commonly store a value up to 1.7976931348623E+308 (platform dependent), and have a maximum precision of 14 digits. PHP Float Constants PHP has the following predefined constants for floats (from PHP 7.2): PHP_FLOAT_MAX - The largest representable floating point number PHP_FLOAT_MIN - The smallest representable positive floating point number PHP_FLOAT_DIG - The number of decimal digits that can be rounded into a float and back without precision loss PHP_FLOAT_EPSILON - The smallest representable positive number x, so that x + 1.0 != 1.0 PHP Float Functions PHP has the following functions to check if the type of a variable is float: is_float() is_double() - alias of is_float() PHP Infinity A numeric value that is larger than PHP_FLOAT_MAX is considered infinite. PHP has the following functions to check if a numeric value is finite or infinite: is_finite() is_infinite() <!DOCTYPE html> <html> <body> <?php // Check if a numeric value is finite or infinite $x = 1.9e411 ; var_dump ( $x ); ?> </body> </html> PHP NaN NaN stands for Not a Number. NaN is used for impossible mathematical operations. PHP has the following functions to check if a value is not a number: is_nan() <!DOCTYPE html> <html> <body> <?php // Invalid calculation will return a NaN value $x = acos ( 8 ); var_dump ( $x ); ?> </body> </html> Numerical Strings - is_numeric() The PHP is_numeric() function can be used to find whether a variable is numeric. The function returns true if the variable is a number or a numeric string, false otherwise. From PHP 7.0: The is_numeric() function will return FALSE for numeric strings in hexadecimal form (e.g. 0xf4c3b00c), as they are no longer considered as numeric strings. <!DOCTYPE html> <html> <body> <?php // Check if the variable is numeric $x = 5985 ; var_dump ( is_numeric ( $x )); echo \"<br>\" ; $x = \"5985\" ; var_dump ( is_numeric ( $x )); echo \"<br>\" ; $x = \"59.85\" + 100 ; var_dump ( is_numeric ( $x )); echo \"<br>\" ; $x = \"Hello\" ; var_dump ( is_numeric ( $x )); ?> </body> </html> When you want to ensure that a variable contains a number, even if it\u2019s typed as a string. Alternatively, you want to check if a variable is not only a number, but is also specifically typed as one. <?php foreach ([ 5 , '5' , '05' , 12.3 , '16.7' , 'five' , 0xDECAFBAD , '10e200' ] as $maybeNumber ) { $isItNumeric = is_numeric ( $maybeNumber ); $actualType = gettype ( $maybeNumber ); print \"Is the $actualType $maybeNumber numeric? \" ; if ( is_numeric ( $maybeNumber )) { print \"yes\" ; } else { print \"no\" ; } print \" \\n \" ; } ?> Is the integer 5 numeric? yes Is the string 5 numeric? yes Is the string 05 numeric? yes Is the double 12.3 numeric? yes Is the string 16.7 numeric? yes Is the string five numeric? no Is the integer 3737844653 numeric? yes Is the string 10e200 numeric? yes Helpfully, is_numeric() properly parses decimal numbers, such as 5.1; however, numbers with thousands separators, such as 5,100, cause is_numeric() to return false. To strip the thousands separators from your number before calling is_numeric(), use str_replace() . <?php $number = \"5,100\" ; // This is_numeric() call returns false $withCommas = is_numeric ( $number ); // This is_numeric() call returns true $withoutCommas = is_numeric ( str_replace ( ',' , '' , $number )); ?> PHP Casting to Integers Sometimes you need to cast a numerical value into another data type. The (int), (integer), or intval() function are often used to convert a value to an integer. <!DOCTYPE html> <html> <body> <?php // Cast float to int $x = 23465.768 ; $int_cast = ( int ) $x ; echo $int_cast ; echo \"<br>\" ; // Cast string to int $x = \"23465.768\" ; $int_cast = ( int ) $x ; echo $int_cast ; ?> </body> </html>","title":"Basics"},{"location":"PR/phpNum1/#php-numbers","text":"One thing to notice about PHP is that it provides automatic data type conversion. So, if you assign an integer value to a variable, the type of that variable will automatically be an integer. Then, if you assign a string to the same variable, the type will change to a string. This automatic conversion can sometimes break your code.","title":"PHP Numbers"},{"location":"PR/phpNum1/#php-integers","text":"An integer data type is a non-decimal number between -2147483648 and 2147483647 in 32 bit systems, and between -9223372036854775808 and 9223372036854775807 in 64 bit systems. A value greater (or lower) than this, will be stored as float, because it exceeds the limit of an integer. Another important thing to know is that even if 4 * 2.5 is 10, the result is stored as float, because one of the operands is a float (2.5). Integers can be specified in three formats: decimal (10-based), hexadecimal (16-based - prefixed with 0x) or octal (8-based - prefixed with 0)","title":"PHP Integers"},{"location":"PR/phpNum1/#php-integer-constants","text":"PHP has the following predefined constants for integers: PHP_INT_MAX - The largest integer supported PHP_INT_MIN - The smallest integer supported PHP_INT_SIZE - The size of an integer in bytes","title":"PHP Integer Constants"},{"location":"PR/phpNum1/#php-integer-functions","text":"PHP has the following functions to check if the type of a variable is integer: is_int() is_integer() - alias of is_int() is_long() - alias of is_int()","title":"PHP Integer Functions"},{"location":"PR/phpNum1/#php-floats","text":"The float data type can commonly store a value up to 1.7976931348623E+308 (platform dependent), and have a maximum precision of 14 digits.","title":"PHP Floats"},{"location":"PR/phpNum1/#php-float-constants","text":"PHP has the following predefined constants for floats (from PHP 7.2): PHP_FLOAT_MAX - The largest representable floating point number PHP_FLOAT_MIN - The smallest representable positive floating point number PHP_FLOAT_DIG - The number of decimal digits that can be rounded into a float and back without precision loss PHP_FLOAT_EPSILON - The smallest representable positive number x, so that x + 1.0 != 1.0","title":"PHP Float Constants"},{"location":"PR/phpNum1/#php-float-functions","text":"PHP has the following functions to check if the type of a variable is float: is_float() is_double() - alias of is_float()","title":"PHP Float Functions"},{"location":"PR/phpNum1/#php-infinity","text":"A numeric value that is larger than PHP_FLOAT_MAX is considered infinite. PHP has the following functions to check if a numeric value is finite or infinite: is_finite() is_infinite() <!DOCTYPE html> <html> <body> <?php // Check if a numeric value is finite or infinite $x = 1.9e411 ; var_dump ( $x ); ?> </body> </html>","title":"PHP Infinity"},{"location":"PR/phpNum1/#php-nan","text":"NaN stands for Not a Number. NaN is used for impossible mathematical operations. PHP has the following functions to check if a value is not a number: is_nan() <!DOCTYPE html> <html> <body> <?php // Invalid calculation will return a NaN value $x = acos ( 8 ); var_dump ( $x ); ?> </body> </html>","title":"PHP NaN"},{"location":"PR/phpNum1/#numerical-strings-is_numeric","text":"The PHP is_numeric() function can be used to find whether a variable is numeric. The function returns true if the variable is a number or a numeric string, false otherwise. From PHP 7.0: The is_numeric() function will return FALSE for numeric strings in hexadecimal form (e.g. 0xf4c3b00c), as they are no longer considered as numeric strings. <!DOCTYPE html> <html> <body> <?php // Check if the variable is numeric $x = 5985 ; var_dump ( is_numeric ( $x )); echo \"<br>\" ; $x = \"5985\" ; var_dump ( is_numeric ( $x )); echo \"<br>\" ; $x = \"59.85\" + 100 ; var_dump ( is_numeric ( $x )); echo \"<br>\" ; $x = \"Hello\" ; var_dump ( is_numeric ( $x )); ?> </body> </html> When you want to ensure that a variable contains a number, even if it\u2019s typed as a string. Alternatively, you want to check if a variable is not only a number, but is also specifically typed as one. <?php foreach ([ 5 , '5' , '05' , 12.3 , '16.7' , 'five' , 0xDECAFBAD , '10e200' ] as $maybeNumber ) { $isItNumeric = is_numeric ( $maybeNumber ); $actualType = gettype ( $maybeNumber ); print \"Is the $actualType $maybeNumber numeric? \" ; if ( is_numeric ( $maybeNumber )) { print \"yes\" ; } else { print \"no\" ; } print \" \\n \" ; } ?> Is the integer 5 numeric? yes Is the string 5 numeric? yes Is the string 05 numeric? yes Is the double 12.3 numeric? yes Is the string 16.7 numeric? yes Is the string five numeric? no Is the integer 3737844653 numeric? yes Is the string 10e200 numeric? yes Helpfully, is_numeric() properly parses decimal numbers, such as 5.1; however, numbers with thousands separators, such as 5,100, cause is_numeric() to return false. To strip the thousands separators from your number before calling is_numeric(), use str_replace() . <?php $number = \"5,100\" ; // This is_numeric() call returns false $withCommas = is_numeric ( $number ); // This is_numeric() call returns true $withoutCommas = is_numeric ( str_replace ( ',' , '' , $number )); ?>","title":"Numerical Strings - is_numeric()"},{"location":"PR/phpNum1/#php-casting-to-integers","text":"Sometimes you need to cast a numerical value into another data type. The (int), (integer), or intval() function are often used to convert a value to an integer. <!DOCTYPE html> <html> <body> <?php // Cast float to int $x = 23465.768 ; $int_cast = ( int ) $x ; echo $int_cast ; echo \"<br>\" ; // Cast string to int $x = \"23465.768\" ; $int_cast = ( int ) $x ; echo $int_cast ; ?> </body> </html>","title":"PHP Casting to Integers"},{"location":"PR/phpOperators1/","text":"Operators are used to perform operations on variables and values. PHP divides the operators in the following groups: Arithmetic operators Assignment operators Comparison operators Increment/Decrement operators Logical operators String operators Array operators Conditional assignment operators PHP Arithmetic Operators The PHP arithmetic operators are used with numeric values to perform common arithmetical operations, such as addition, subtraction, multiplication etc. Operator Description Example Result + Addition $x + $y Sum of $x and $y - Subtraction $x - $y Difference of $x and $y * Multiplication $x * $y Product of $x and $y / Division $x / $y Quotient of $x and $y % Modulus $x % $y Remainder of $x divided by $y ** Exponentiation $x ** $y $x to the power of $y PHP Assignment Operators The PHP assignment operators are used with numeric values to write a value to a variable. The basic assignment operator in PHP is \"=\". It means that the left operand gets set to the value of the assignment expression on the right. Operator Description Example Result = Assignment $x = $y Assign $y to $x += Addition Assignment $x = $x + $y Add $y to $x and assign the result to $x -= Subtraction Assignment $x = $x - $y Subtract $y from $x and assign the result to $x *= Multiplication Assignment $x = $x * $y Multiply $x by $y and assign the result to $x /= Division Assignment $x = $x / $y Divide $x by $y and assign the result to $x %= Modulus Assignment $x = $x % $y Modulus of $x divided by $y and assign the result to $x PHP Comparison Operators The PHP comparison operators are used to compare two values (number or string): Operator Description Example Result == Equal to $x == $y Returns true if $x is equal to $y === Identical to $x === $y Returns true if $x is equal to $y, and they are of the same type != Not equal to $x != $y Returns true if $x is not equal to $y <> Not equal to $x <> $y Returns true if $x is not equal to $y !== Not identical to $x !== $y Returns true if $x is not equal to $y, or they are not of the same type < Less than $x < $y Returns true if $x is less than $y <= Less than or equal to $x <= $y Returns true if $x is less than or equal to $y > Greater than $x > $y Returns true if $x is greater than $y >= Greater than or equal to $x >= $y Returns true if $x is greater than or equal to $y <=> Spaceship operator $x <=> $y Returns an integer less than, equal to, or greater than zero, depending on if $x is less than, equal to, or greater than $y. Introduced in PHP 7. PHP Increment / Decrement Operators The PHP increment and decrement operators are used to increase or decrease the value of a variable. Operator Description Result ++$x Pre-increment Increments $x by one, then returns $x $x++ Post-increment Returns $x, then increments $x by one --$x Pre-decrement Decrements $x by one, then returns $x $x-- Post-decrement Returns $x, then decrements $x by one PHP Logical Operators The PHP logical operators are used to combine conditional statements. Operator Description Example Result && Logical AND $x && $y Returns true if both $x and $y are true || Logical OR $x || $y Returns true if either $x or $y is true ! Logical NOT ! $x Returns the opposite of $x and Logical AND $x and $y Returns true if both $x and $y are true or Logical OR $x or $y Returns true if either $x or $y is true xor Logical Xor $x xor $y True if either $x or $y is true, but not both PHP String Operators The PHP string operators are used to concatenate strings. Operator Description Example Result . Concatenation $x . $y Concatenates $x and $y .= Concatenation assignment $x .= $y Appends $y to $x PHP Array Operators The PHP array operators are used to perform operations on arrays. Operator Description Example Result + Union $x + $y Union of $x and $y == Equality $x == $y Returns true if $x and $y have the same key/value pairs === Identity $x === $y Returns true if $x and $y have the same key/value pairs in the same order and of the same types != Inequality $x != $y Returns true if $x is not equal to $y <> Inequality $x <> $y Returns true if $x is not equal to $y !== Non-identity $x !== $y Returns true if $x is not identical to $y Conditional Assignment Operators Operator Description Example Result ?: Ternary Operator $x = expr1 ? expr2 : expr3 Returns the value of $x. The value of $x is expr2 if expr1 = TRUE. The value of $x is expr3 if expr1 = FALSE ?? Null coalescing $x = expr1 ?? expr2 Returns the value of $x. The value of $x is expr1 if expr1 exists, and is not NULL. If expr1 does not exist, or is NULL, the value of $x is expr2. Introduced in PHP 7","title":"Operators"},{"location":"PR/phpOperators1/#php-arithmetic-operators","text":"The PHP arithmetic operators are used with numeric values to perform common arithmetical operations, such as addition, subtraction, multiplication etc. Operator Description Example Result + Addition $x + $y Sum of $x and $y - Subtraction $x - $y Difference of $x and $y * Multiplication $x * $y Product of $x and $y / Division $x / $y Quotient of $x and $y % Modulus $x % $y Remainder of $x divided by $y ** Exponentiation $x ** $y $x to the power of $y","title":"PHP Arithmetic Operators"},{"location":"PR/phpOperators1/#php-assignment-operators","text":"The PHP assignment operators are used with numeric values to write a value to a variable. The basic assignment operator in PHP is \"=\". It means that the left operand gets set to the value of the assignment expression on the right. Operator Description Example Result = Assignment $x = $y Assign $y to $x += Addition Assignment $x = $x + $y Add $y to $x and assign the result to $x -= Subtraction Assignment $x = $x - $y Subtract $y from $x and assign the result to $x *= Multiplication Assignment $x = $x * $y Multiply $x by $y and assign the result to $x /= Division Assignment $x = $x / $y Divide $x by $y and assign the result to $x %= Modulus Assignment $x = $x % $y Modulus of $x divided by $y and assign the result to $x","title":"PHP Assignment Operators"},{"location":"PR/phpOperators1/#php-comparison-operators","text":"The PHP comparison operators are used to compare two values (number or string): Operator Description Example Result == Equal to $x == $y Returns true if $x is equal to $y === Identical to $x === $y Returns true if $x is equal to $y, and they are of the same type != Not equal to $x != $y Returns true if $x is not equal to $y <> Not equal to $x <> $y Returns true if $x is not equal to $y !== Not identical to $x !== $y Returns true if $x is not equal to $y, or they are not of the same type < Less than $x < $y Returns true if $x is less than $y <= Less than or equal to $x <= $y Returns true if $x is less than or equal to $y > Greater than $x > $y Returns true if $x is greater than $y >= Greater than or equal to $x >= $y Returns true if $x is greater than or equal to $y <=> Spaceship operator $x <=> $y Returns an integer less than, equal to, or greater than zero, depending on if $x is less than, equal to, or greater than $y. Introduced in PHP 7.","title":"PHP Comparison Operators"},{"location":"PR/phpOperators1/#php-increment-decrement-operators","text":"The PHP increment and decrement operators are used to increase or decrease the value of a variable. Operator Description Result ++$x Pre-increment Increments $x by one, then returns $x $x++ Post-increment Returns $x, then increments $x by one --$x Pre-decrement Decrements $x by one, then returns $x $x-- Post-decrement Returns $x, then decrements $x by one","title":"PHP Increment / Decrement Operators"},{"location":"PR/phpOperators1/#php-logical-operators","text":"The PHP logical operators are used to combine conditional statements. Operator Description Example Result && Logical AND $x && $y Returns true if both $x and $y are true || Logical OR $x || $y Returns true if either $x or $y is true ! Logical NOT ! $x Returns the opposite of $x and Logical AND $x and $y Returns true if both $x and $y are true or Logical OR $x or $y Returns true if either $x or $y is true xor Logical Xor $x xor $y True if either $x or $y is true, but not both","title":"PHP Logical Operators"},{"location":"PR/phpOperators1/#php-string-operators","text":"The PHP string operators are used to concatenate strings. Operator Description Example Result . Concatenation $x . $y Concatenates $x and $y .= Concatenation assignment $x .= $y Appends $y to $x","title":"PHP String Operators"},{"location":"PR/phpOperators1/#php-array-operators","text":"The PHP array operators are used to perform operations on arrays. Operator Description Example Result + Union $x + $y Union of $x and $y == Equality $x == $y Returns true if $x and $y have the same key/value pairs === Identity $x === $y Returns true if $x and $y have the same key/value pairs in the same order and of the same types != Inequality $x != $y Returns true if $x is not equal to $y <> Inequality $x <> $y Returns true if $x is not equal to $y !== Non-identity $x !== $y Returns true if $x is not identical to $y","title":"PHP Array Operators"},{"location":"PR/phpOperators1/#conditional-assignment-operators","text":"Operator Description Example Result ?: Ternary Operator $x = expr1 ? expr2 : expr3 Returns the value of $x. The value of $x is expr2 if expr1 = TRUE. The value of $x is expr3 if expr1 = FALSE ?? Null coalescing $x = expr1 ?? expr2 Returns the value of $x. The value of $x is expr1 if expr1 exists, and is not NULL. If expr1 does not exist, or is NULL, the value of $x is expr2. Introduced in PHP 7","title":"Conditional Assignment Operators"},{"location":"PR/phpStr/","text":"PHP strings are binary-safe (i.e., they can contain null bytes) and can grow and shrink on demand. Their size is limited only by the amount of memory that is available to PHP. Usually, PHP strings are ASCII strings. You must do extra work to handle non-ASCII data like UTF-8 or other multibyte character encodings. Initialization Similar in form and behavior to Perl and the Unix shell, strings can be initialized in four ways: With single quotes , With double quotes , With the \u201chere document\u201d (heredoc) format , and With the \u201cnowdoc\u201d (nowdoc) format . Single-quoted strings With single-quoted strings, the only special characters you need to escape inside a string are the backslash and the single quote itself. <?php print 'I\\'ve gone to the store.' ; ?> Double-quoted strings Double-quoted strings don\u2019t recognize escaped single quotes, but they do recognize interpolated variables and the following escape sequences. Escape sequence Character \\n Newline (ASCII 10) \\r Carriage return (ASCII 13) \\t Tab (ASCII 9) \\ Backslash $ Dollar sign \" Double quote \\0 through \\777 Octal value \\x0 through \\xFF Hex value <?php print \"I've gone to the store.\" ; print \"The sauce cost \\$ 10.25.\" ; $cost = '$10.25' ; print \"The sauce cost $cost .\" ; print \"The sauce cost \\$\\061\\060 . \\x32\\x35 .\" ; ?> Heredoc strings Heredoc-specified strings recognize all the interpolations and escapes of double-quoted strings, but they don\u2019t require double quotes to be escaped. Heredocs start with <<< and a token. That token (with no leading or trailing whitespace), followed by a semicolon to end the statement (if necessary), ends the heredoc. <?php print <<< END It ' s funny when signs say things like : Original \"Root\" Beer \"Free\" Gift Shoes cleaned while \"you\" wait or have other misquoted words . END ; Newlines, spacing, and quotes are all preserved in a heredoc. By convention, the endof-string identifier is usually all caps, and it is case sensitive. <?php print <<< PARSLEY It ' s easy to grow fresh : Parsley Chives on your windowsill PARSLEY ; print <<< DOGS If you like pets , yell out : DOGS AND CATS ARE GREAT ! DOGS ; ?> Heredocs are especially useful for printing out HTML with interpolated variables be\u2010 cause you don\u2019t have to escape the double quotes that appear in the HTML elements. Printing HTML with a here document <?php if ( $remaining_cards > 0 ) { $url = '/deal.php' ; $text = 'Deal More Cards' ; } else { $url = '/new-game.php' ; $text = 'Start a New Game' ; } print <<< HTML There are < b > $remaining_cards </ b > left . < p > < a href = \" $url \" > $text </ a > HTML ; ?> Concatenation with a here document The semicolon needs to go after the end-of-string delimiter to tell PHP the statement is ended. In some cases, however, you shouldn\u2019t use the semicolon. <?php $html = <<< END < div class = \" $divClass \" > < ul class = \" $ulClass \" > < li > END . $listItem . '</li></div>' ; print $html ; ?> The expression needs to continue on the next line, so you don\u2019t use a semicolon. Note also that in order for PHP to recognize the end-of-string delimiter, the . string concatenation operator needs to go on a separate line from the end-of-string delimiter. NowDoc strings Nowdocs are similar to heredocs, but there is no variable interpolation. So, nowdocs are to heredocs as single-quoted strings are to double-quoted strings. They\u2019re best when you have a block of non-PHP code, such as JavaScript, that you want to print as part of an HTML page or send to another program. For example, if you\u2019re using jQuery: <?php $js = <<<' __JS__ ' $.ajax({ 'url': '/api/getStock', 'data': { 'ticker': 'LNKD' }, 'success': function( data ) { $( \"#stock-price\" ).html( \"<strong>$\" + data + \"</strong>\" ); } }); __JS__ ; print $js ; ?> Heredoc strings are like double-quoted strings without escaping. Nowdoc strings are like single-quoted strings without escaping. Interpolating Functions and Expressions Within Strings You want to include the results of executing a function or expression within a string. Use the string concatenation operator (.), when the value you want to include can\u2019t be inside the string. <?php //String concatenation print 'You have ' . ( $_POST [ 'boys' ] + $_POST [ 'girls' ]) . ' children.' ; print \"The word ' $word ' is \" . strlen ( $word ) . ' characters long.' ; print 'You owe ' . $amounts [ 'payment' ] . ' immediately.' ; print \"My circle's diameter is \" . $circle -> getDiameter () . ' inches.' ; ?> You can put variables, object properties, and array elements (if the subscript is unquo\u2010 ted) directly in double-quoted strings. <?php print \"I have $children children.\" ; print \"You owe $amounts[payment] immediately.\" ; print \"My circle's diameter is $circle->diameter inches.\" ; ?> Interpolation with double-quoted strings places some limitations on the syntax of what can be interpolated. In the previous example, $amounts['payment'] had to be written as $amounts[payment] so it would be interpolated properly. Use curly braces around more complicated expressions to interpolate them into a string. For example: <?php print \"I have { $children } children.\" ; print \"You owe { $amounts [ 'payment' ] } immediately.\" ; print \"My circle's diameter is { $circle -> getDiameter () } inches.\" ; ?> Direct interpolation or using string concatenation also works with heredocs. Interpo\u2010 lating with string concatenation in heredocs can look a little strange because the closing heredoc delimiter and the string concatenation operator have to be on separate lines: <?php print <<< END Right now , the time is END . strftime ( '%c' ) . <<< END but tomorrow it will be END . strftime ( '%c' , time () + 86400 ); ?> Also, if you\u2019re interpolating with heredocs, make sure to include appropriate spacing for the whole string to appear properly. In the previous example, Right now, the time is has to include a trailing space, and but tomorrow it will be has to include leading and trailing spaces. Processing a String One Byte at a Time Loop through each byte in the string with for. $string = \"This weekend, I'm going shopping for a pet chicken.\"; $vowels = 0; for ($i = 0, $j = strlen($string); $i < $j; $i++) { if (strstr('aeiouAEIOU',$string[$i])) { $vowels++; } } ?> The \"Look and Say\" Algorithm function lookandsay($s) { // initialize the return value to the empty string $r = ''; // $m holds the character we're counting, initialize to the first // character in the string $m = $s[0]; // $n is the number of $m's we've seen, initialize to 1 $n = 1; for ($i = 1, $j = strlen($s); $i < $j; $i++) { // if this character is the same as the last one if ($s[$i] == $m) { // increment the count of this character $n++; } else { // otherwise, add the count and character to the return value $r .= $n.$m; // set the character we're looking for to the current one $m = $s[$i]; // and reset the count to 1 $n = 1; } } // return the built up string as well as the last count and character return $r.$n.$m; } for ($i = 0, $s = 1; $i < 10; $i++) { $s = lookandsay($s); print \"$s\\n\"; } ?> 1 11 21 1211 111221 312211 13112221 1113213211 31131211131221 It\u2019s called the \u201cLook and Say\u201d sequence because each element is what you get by looking at the previous element and saying what\u2019s in it. For example, looking at the first element, 1, you say \u201cone one.\u201d So the second element is \u201c11.\u201d That\u2019s two ones, so the third element is \u201c21.\u201d Similarly, that\u2019s one two and one one, so the fourth element is \u201c1211,\u201d and so on.","title":"Basics"},{"location":"PR/phpStr/#initialization","text":"Similar in form and behavior to Perl and the Unix shell, strings can be initialized in four ways: With single quotes , With double quotes , With the \u201chere document\u201d (heredoc) format , and With the \u201cnowdoc\u201d (nowdoc) format .","title":"Initialization"},{"location":"PR/phpStr/#single-quoted-strings","text":"With single-quoted strings, the only special characters you need to escape inside a string are the backslash and the single quote itself. <?php print 'I\\'ve gone to the store.' ; ?>","title":"Single-quoted strings"},{"location":"PR/phpStr/#double-quoted-strings","text":"Double-quoted strings don\u2019t recognize escaped single quotes, but they do recognize interpolated variables and the following escape sequences. Escape sequence Character \\n Newline (ASCII 10) \\r Carriage return (ASCII 13) \\t Tab (ASCII 9) \\ Backslash $ Dollar sign \" Double quote \\0 through \\777 Octal value \\x0 through \\xFF Hex value <?php print \"I've gone to the store.\" ; print \"The sauce cost \\$ 10.25.\" ; $cost = '$10.25' ; print \"The sauce cost $cost .\" ; print \"The sauce cost \\$\\061\\060 . \\x32\\x35 .\" ; ?>","title":"Double-quoted strings"},{"location":"PR/phpStr/#heredoc-strings","text":"Heredoc-specified strings recognize all the interpolations and escapes of double-quoted strings, but they don\u2019t require double quotes to be escaped. Heredocs start with <<< and a token. That token (with no leading or trailing whitespace), followed by a semicolon to end the statement (if necessary), ends the heredoc. <?php print <<< END It ' s funny when signs say things like : Original \"Root\" Beer \"Free\" Gift Shoes cleaned while \"you\" wait or have other misquoted words . END ; Newlines, spacing, and quotes are all preserved in a heredoc. By convention, the endof-string identifier is usually all caps, and it is case sensitive. <?php print <<< PARSLEY It ' s easy to grow fresh : Parsley Chives on your windowsill PARSLEY ; print <<< DOGS If you like pets , yell out : DOGS AND CATS ARE GREAT ! DOGS ; ?> Heredocs are especially useful for printing out HTML with interpolated variables be\u2010 cause you don\u2019t have to escape the double quotes that appear in the HTML elements.","title":"Heredoc strings"},{"location":"PR/phpStr/#printing-html-with-a-here-document","text":"<?php if ( $remaining_cards > 0 ) { $url = '/deal.php' ; $text = 'Deal More Cards' ; } else { $url = '/new-game.php' ; $text = 'Start a New Game' ; } print <<< HTML There are < b > $remaining_cards </ b > left . < p > < a href = \" $url \" > $text </ a > HTML ; ?>","title":"Printing HTML with a here document"},{"location":"PR/phpStr/#concatenation-with-a-here-document","text":"The semicolon needs to go after the end-of-string delimiter to tell PHP the statement is ended. In some cases, however, you shouldn\u2019t use the semicolon. <?php $html = <<< END < div class = \" $divClass \" > < ul class = \" $ulClass \" > < li > END . $listItem . '</li></div>' ; print $html ; ?> The expression needs to continue on the next line, so you don\u2019t use a semicolon. Note also that in order for PHP to recognize the end-of-string delimiter, the . string concatenation operator needs to go on a separate line from the end-of-string delimiter.","title":"Concatenation with a here document"},{"location":"PR/phpStr/#nowdoc-strings","text":"Nowdocs are similar to heredocs, but there is no variable interpolation. So, nowdocs are to heredocs as single-quoted strings are to double-quoted strings. They\u2019re best when you have a block of non-PHP code, such as JavaScript, that you want to print as part of an HTML page or send to another program. For example, if you\u2019re using jQuery: <?php $js = <<<' __JS__ ' $.ajax({ 'url': '/api/getStock', 'data': { 'ticker': 'LNKD' }, 'success': function( data ) { $( \"#stock-price\" ).html( \"<strong>$\" + data + \"</strong>\" ); } }); __JS__ ; print $js ; ?> Heredoc strings are like double-quoted strings without escaping. Nowdoc strings are like single-quoted strings without escaping.","title":"NowDoc strings"},{"location":"PR/phpStr/#interpolating-functions-and-expressions-within-strings","text":"You want to include the results of executing a function or expression within a string. Use the string concatenation operator (.), when the value you want to include can\u2019t be inside the string. <?php //String concatenation print 'You have ' . ( $_POST [ 'boys' ] + $_POST [ 'girls' ]) . ' children.' ; print \"The word ' $word ' is \" . strlen ( $word ) . ' characters long.' ; print 'You owe ' . $amounts [ 'payment' ] . ' immediately.' ; print \"My circle's diameter is \" . $circle -> getDiameter () . ' inches.' ; ?> You can put variables, object properties, and array elements (if the subscript is unquo\u2010 ted) directly in double-quoted strings. <?php print \"I have $children children.\" ; print \"You owe $amounts[payment] immediately.\" ; print \"My circle's diameter is $circle->diameter inches.\" ; ?> Interpolation with double-quoted strings places some limitations on the syntax of what can be interpolated. In the previous example, $amounts['payment'] had to be written as $amounts[payment] so it would be interpolated properly. Use curly braces around more complicated expressions to interpolate them into a string. For example: <?php print \"I have { $children } children.\" ; print \"You owe { $amounts [ 'payment' ] } immediately.\" ; print \"My circle's diameter is { $circle -> getDiameter () } inches.\" ; ?> Direct interpolation or using string concatenation also works with heredocs. Interpo\u2010 lating with string concatenation in heredocs can look a little strange because the closing heredoc delimiter and the string concatenation operator have to be on separate lines: <?php print <<< END Right now , the time is END . strftime ( '%c' ) . <<< END but tomorrow it will be END . strftime ( '%c' , time () + 86400 ); ?> Also, if you\u2019re interpolating with heredocs, make sure to include appropriate spacing for the whole string to appear properly. In the previous example, Right now, the time is has to include a trailing space, and but tomorrow it will be has to include leading and trailing spaces.","title":"Interpolating Functions and Expressions Within Strings"},{"location":"PR/phpStr/#processing-a-string-one-byte-at-a-time","text":"Loop through each byte in the string with for. $string = \"This weekend, I'm going shopping for a pet chicken.\"; $vowels = 0; for ($i = 0, $j = strlen($string); $i < $j; $i++) { if (strstr('aeiouAEIOU',$string[$i])) { $vowels++; } } ?>","title":"Processing a String One Byte at a Time"},{"location":"PR/phpStr/#the-look-and-say-algorithm","text":"function lookandsay($s) { // initialize the return value to the empty string $r = ''; // $m holds the character we're counting, initialize to the first // character in the string $m = $s[0]; // $n is the number of $m's we've seen, initialize to 1 $n = 1; for ($i = 1, $j = strlen($s); $i < $j; $i++) { // if this character is the same as the last one if ($s[$i] == $m) { // increment the count of this character $n++; } else { // otherwise, add the count and character to the return value $r .= $n.$m; // set the character we're looking for to the current one $m = $s[$i]; // and reset the count to 1 $n = 1; } } // return the built up string as well as the last count and character return $r.$n.$m; } for ($i = 0, $s = 1; $i < 10; $i++) { $s = lookandsay($s); print \"$s\\n\"; } ?> 1 11 21 1211 111221 312211 13112221 1113213211 31131211131221 It\u2019s called the \u201cLook and Say\u201d sequence because each element is what you get by looking at the previous element and saying what\u2019s in it. For example, looking at the first element, 1, you say \u201cone one.\u201d So the second element is \u201c11.\u201d That\u2019s two ones, so the third element is \u201c21.\u201d Similarly, that\u2019s one two and one one, so the fourth element is \u201c1211,\u201d and so on.","title":"The \"Look and Say\" Algorithm"},{"location":"PR/phpStr1/","text":"PHP contains many useful built-in functions and methods to accomplish common tasks. Most Common Functions strlen() The PHP strlen() function returns the length of a string. <?php echo strlen ( \"Hello world!\" ); // outputs 12 ?> str_word_count() The PHP str_word_count() function counts the number of words in a string. <?php echo str_word_count ( \"Hello world!\" ); // outputs 2 ?> strrev() Reverse by byte The PHP strrev() function reverses a string by byte. <?php echo strrev ( \"Hello world!\" ); // outputs !dlrow olleH ?> Reverse by words To reverse by words, explode the string by word boundary, reverse the words, and then rejoin. <?php echo implode ( \" \" , array_reverse ( explode ( \" \" , \"Hello world!\" ))); // outputs world! Hello ?> <?php $s = \"Once upon a time there was a turtle.\" ; // break the string up into words $words = explode ( ' ' , $s ); // reverse the array of words $words = array_reverse ( $words ); // rebuild the string $s = implode ( ' ' , $words ); print $s ; ?> turtle. a was there time a upon Once strpos() The PHP strpos() function searches for a specific text within a string. If a match is found, the function returns the character position of the first match. If no match is found, it will return FALSE. <?php echo strpos ( \"Hello world!\" , \"world\" ); // outputs 6 ?> The first character position in a string is 0 (not 1). You want to know if a string contains a particular substring. For example, you want to find out if an email address contains a @. <?php if ( strpos ( $_POST [ 'email' ], '@' ) === false ) { print 'There was no @ in the e-mail address!' ; } ?> To differentiate between return values of 0 and false, you must use the identity operator (===) or the not\u2013identity operator (!==) instead of regular equals (==) or not-equals (!=). Fixed-Width Field Data Records pack() The PHP pack() function converts an array into a binary string. When you need to format data records such that each field takes up a set amount of characters. Use pack() with a format string that specifies a sequence of space-padded strings. Format characters for pack( ) and unpack( ) Format character Data type a NUL-padded string A Space-padded string h Hex string, low nibble first H Hex string, high nibble first c signed char C unsigned char s signed short (16 bit, machine byte order) S unsigned short (16 bit, machine byte order) n unsigned short (16 bit, big endian byte order) v unsigned short (16 bit, little endian byte order) i signed int (machine-dependent size and byte order) I unsigned int (machine-dependent size and byte order) l signed long (32 bit, machine byte order) L unsigned long (32 bit, machine byte order) N unsigned long (32 bit, big endian byte order) V unsigned long (32 bit, little endian byte order) f float (machine-dependent size and representation) d double (machine-dependent size and representation) x NUL byte X Back up one byte @ NUL-fill to absolute position <?php //Generating fixed-width field data records $books = array ( array ( 'Elmer Gantry' , 'Sinclair Lewis' , 1927 ), array ( 'The Scarlatti Inheritance' , 'Robert Ludlum' , 1971 ), array ( 'The Parsifal Mosaic' , 'William Styron' , 1979 ) ); foreach ( $books as $book ) { print pack ( 'A25A15A4' , $book [ 0 ], $book [ 1 ], $book [ 2 ]) . \" \\n \" ; } ?> The format string A25A14A4 tells pack() to transform its subsequent arguments into a 25-character space-padded string, a 14-character space-padded string, and a 4-character space-padded string. For space-padded fields in fixed-width records, pack() provides a concise solution. Storing Binary Data in Strings You can use pack() to store binary data in strings. When you want to parse a string that contains values encoded as a binary structure or encode values into a string. For example, you want to store numbers in their binary representation instead of as sequences of ASCII characters. <?php $packed = pack ( 'S4' , 1974 , 106 , 28225 , 32725 ); ?> Use unpack() to extract binary data from a string: <?php $nums = unpack ( 'S4' , $packed ); print_r ( $nums ); ?> str_pad() To pad fields with something other than a space, however, use substr() to ensure that the field values aren\u2019t too long and str_pad() to ensure that the field values aren\u2019t too short. <?php //Generating fixed-width field data records without pack( ) $books = array ( array ( 'Elmer Gantry' , 'Sinclair Lewis' , 1927 ), array ( 'The Scarlatti Inheritance' , 'Robert Ludlum' , 1971 ), array ( 'The Parsifal Mosaic' , 'William Styron' , 1979 ) ); foreach ( $books as $book ) { $title = str_pad ( substr ( $book [ 0 ], 0 , 25 ), 25 , '.' ); $author = str_pad ( substr ( $book [ 1 ], 0 , 15 ), 15 , '.' ); $year = str_pad ( substr ( $book [ 2 ], 0 , 4 ), 4 , '.' ); print \" $title$author$year\\n \" ; } ?> substr() The PHP substr() function extracts a part of a string and returns the extracted part as a new string. You want to extract part of a string, starting at a particular place in the string. For example, you want the first eight characters of a username entered into a form. If $start and $length are positive, substr() returns $length characters in the string, starting at $start. If $start is negative, the string is counted from the end of the string. If $length is negative, the string is counted from the end of the string. <?php //$substring = substr($string,$start,$length); $username = substr ( $_GET [ 'username' ], 0 , 8 ); ?> When you need to break apart fixed-width records in strings and parsing Fixed-Width Field Data Records, use substr() instead of explode(). <?php Parsing fixed - width records with substr ( ) $fp = fopen ( 'fixed-width-records.txt' , 'r' , true ) or die ( \"can't open file\" ); while ( $s = fgets ( $fp , 1024 )) { $fields [ 1 ] = substr ( $s , 0 , 25 ); // first field: first 25 characters of the line $fields [ 2 ] = substr ( $s , 25 , 15 ); // second field: next 15 characters of the line $fields [ 3 ] = substr ( $s , 40 , 4 ); // third field: next 4 characters of the line $fields = array_map ( 'rtrim' , $fields ); // strip the trailing whitespace // a function to do something with the fields process_fields ( $fields ); } fclose ( $fp ) or die ( \"can't close file\" ); ?> unpack() The PHP unpack() function unpacks binary data from a string. Multiple format characters must be separated with / in unpack(): <?php $packed = pack ( 'S4' , 1974 , 106 , 28225 , 32725 ); $nums = unpack ( 'S1a/S1b/S1c/S1d' , $packed ); print_r ( $nums ); ?> Array ( [a] => 1974 [b] => 106 [c] => 28225 [d] => 32725 ) <?php //Parsing fixed-width records with unpack( ) function fixed_width_unpack ( $format_string , $data ) { $r = array (); for ( $i = 0 , $j = count ( $data ); $i < $j ; $i ++ ) { $r [ $i ] = unpack ( $format_string , $data [ $i ]); } return $r ; } ?> Data in which each field is allotted a fixed number of characters per line may look like this list of books, titles, and publication dates: $booklist=<<<END Elmer Gantry Sinclair Lewis 1927 The Scarlatti InheritanceRobert Ludlum 1971 The Parsifal Mosaic Robert Ludlum 1982 Sophie's Choice William Styron 1979 END; In each line, the title occupies the first 25 characters, the author\u2019s name the next 15 characters, and the publication year the next 4 characters. Knowing those field widths, you can easily use substr() to parse the fields into an array: <?php $books = explode ( \" \\n \" , $booklist ); for ( $i = 0 , $j = count ( $books ); $i < $j ; $i ++ ) { $book_array [ $i ][ 'title' ] = substr ( $books [ $i ], 0 , 25 ); $book_array [ $i ][ 'author' ] = substr ( $books [ $i ], 25 , 15 ); $book_array [ $i ][ 'publication_year' ] = substr ( $books [ $i ], 40 , 4 ); } ?> Exploding $booklist into an array of lines makes the looping code the same whether it\u2019s operating over a string or a series of lines read in from a file. The loop can be made more flexible by specifying the field names and widths in a separate array that can be passed to a parsing function, as shown in the fixed_width_substr() function below. <?php //fixed_width_substr( ) function fixed_width_substr ( $fields , $data ) { $r = array (); for ( $i = 0 , $j = count ( $data ); $i < $j ; $i ++ ) { $line_pos = 0 ; foreach ( $fields as $field_name => $field_length ) { $r [ $i ][ $field_name ] = rtrim ( substr ( $data [ $i ], $line_pos , $field_length )); $line_pos += $field_length ; } } return $r ; } $book_fields = array ( 'title' => 25 , 'author' => 15 , 'publication_year' => 4 ); $book_array = fixed_width_substr ( $book_fields , $booklist ); ?> The variable $line_pos keeps track of the start of each field and is advanced by the previous field\u2019s width as the code moves through each line. Use rtrim() to remove trailing whitespace from each field. You can use unpack() as a substitute for substr() to extract fields. Instead of specifying the field names and widths as an associative array, create a format string for unpack(). A fixed-width field extractor using unpack() looks like the fixed_width_unpack() function below. <?php //fixed_width_unpack( ) function fixed_width_unpack ( $format_string , $data ) { $r = array (); for ( $i = 0 , $j = count ( $data ); $i < $j ; $i ++ ) { $r [ $i ] = unpack ( $format_string , $data [ $i ]); } return $r ; } ?> Because the A format to unpack() means space-padded string, there\u2019s no need to rtrim() off the trailing spaces. Once the fields have been parsed into $book_array by either function, the data can be printed as an HTML table, for example: <?php $book_array = fixed_width_unpack ( 'A25title/A15author/A4publication_year' , $books ); print \"<table> \\n \" ; // print a header row print '<tr><td>' ; print join ( '</td><td>' , array_keys ( $book_array [ 0 ])); print \"</td></tr> \\n \" ; // print each data row foreach ( $book_array as $row ) { print '<tr><td>' ; print join ( '</td><td>' , array_values ( $row )); print \"</td></tr> \\n \" ; } print \"</table> \\n \" ; ?> Both substr() and unpack() have equivalent capabilities when the fixed-width fields are strings, but unpack() is the better solution when the elements of the fields aren\u2019t just strings. Taking Strings Apart When you need to break a string into pieces. For example, you want to access each line that a user enters in a textarea form field. explode() Use explode() if what separates the pieces is a constant string: $words = explode(' ','My sentence is not very complicated'); The simplest solution of the bunch is explode(). Pass it your separator string, the string to be separated, and an optional limit on how many elements should be returned: <?php $dwarves = 'dopey,sleepy,happy,grumpy,sneezy,bashful,doc' ; $dwarf_array = explode ( ',' , $dwarves ); ?> Array ( [0] => dopey [1] => sleepy [2] => happy [3] => grumpy [4] => sneezy [5] => bashful [6] => doc ) If the specified limit is less than the number of possible chunks, the last chunk contains the remainder: <?php $dwarves = 'dopey,sleepy,happy,grumpy,sneezy,bashful,doc' ; $dwarf_array = explode ( ',' , $dwarves , 5 ); print_r ( $dwarf_array ); ?> Array ( [0] => dopey [1] => sleepy [2] => happy [3] => grumpy [4] => sneezy,bashful,doc ) The separator is treated literally by explode(). If you specify a comma and a space as a separator, it breaks the string only on a comma followed by a space, not on a comma or a space. With preg_split() , you have more flexibility. Instead of a string literal as a separator, it uses a Perl-compatible regular expression engine. With preg_split(), you can take advantage of various Perl-ish regular expression extensions, as well as tricks such as including the separator text in the returned array of strings: <?php $math = \"3 + 2 / 7 - 9\" ; $stack = preg_split ( '/ *([+\\-\\/*]) */' , $math , - 1 , PREG_SPLIT_DELIM_CAPTURE ); print_r ( $stack ); ?> Array ( [0] => 3 [1] => + [2] => 2 [3] => / [4] => 7 [5] => - [6] => 9 ) The separator regular expression looks for the four mathematical operators (+, -, /, *), surrounded by optional leading or trailing spaces. The PREG_SPLIT_DELIM_CAPTURE flag tells preg_split() to include the matches as part of the separator regular expression in parentheses in the returned array of strings. Only the mathematical operator character class is in parentheses, so the returned array doesn\u2019t have any spaces in it. str_split() Use preg_split() if you need a Perl-compatible regular expression to describe the separator: $words = preg_split('/\\d\\. /','my day: 1. get up 2. get dressed 3. eat toast'); $lines = preg_split('/[\\n\\r]+/',$_POST['textarea']); Use the /i flag to preg_split() for case-insensitive separator matching: $words = preg_split('/ x /i','31 inches x 22 inches X 9 inches'); If all of your fields are the same size, str_split() is a handy shortcut for chopping up incoming data. It returns an array made up of sections of a string. <?php $book_array = str_split ( $booklist , 25 ); ?> The str_split() function splits a string into an array. <?php echo str_split ( \"Hello world!\" ); // outputs [\"H\", \"e\", \"l\", \"l\", \"o\", \" \", \"w\", \"o\", \"r\", \"l\", \"d\", \"!\"] ?> substr_replace() The PHP substr_replace() function replaces part of a string with another string. You want to replace a substring with a different string. For example, you want to obscure all but the last four digits of a credit card number before printing it. <?php // Everything from position $start to the end of $old_string // becomes $new_substring $new_string = substr_replace ( $old_string , $new_substring , $start ); //$length characters, starting at position $start, become $new_substring $new_string = substr_replace ( $old_string , $new_substring , $start , $length ); ?> Without the $length argument, substr_replace() replaces everything from $start to the end of the string. If $length is specified, only that many characters are replaced. <?php print substr_replace ( 'My pet is a blue dog.' , 'fish.' , 12 ); print substr_replace ( 'My pet is a blue dog.' , 'green' , 12 , 4 ); $credit_card = '4111 1111 1111 1111' ; print substr_replace ( $credit_card , 'xxxx ' , 0 , strlen ( $credit_card ) - 4 ); ?> My pet is a fish. My pet is a green dog. xxxx 1111 If $start is negative, the new substring is placed by counting $start characters from the end of $old_string, not from the beginning. If $start and $length are 0, the new substring is inserted at the start of $old_string. The function substr_replace() is useful when you\u2019ve got text that\u2019s too big to display all at once, and you want to display some of the text with a link to the rest. <?php /* Displays the first 25 characters of a message with an ellipsis after it as a link to a page that displays more text */ $r = mysql_query ( \"SELECT id,message FROM messages WHERE id = $id \" ) or die (); $ob = mysql_fetch_object ( $r ); printf ( '<a href=\"more-text.php?id=%d\">%s</a>' , $ob -> id , substr_replace ( $ob -> message , ' ...' , 25 )); ?> /* The more-text.php page referenced can use the message ID passed in the query string to retrieve the full message and display it. */ str_replace() The PHP str_replace() function replaces some characters with some other characters in a string. <?php echo str_replace ( \"world\" , \"Earth\" , \"Hello world!\" ); // outputs Hello Earth! ?> Expanding and Compressing Tabs You want to change spaces to tabs (or tabs to spaces) in a string while keeping text aligned with tab stops. For example, you want to display formatted text to users in a standardized way. <?php // Switching tabs and spaces $rows = $db -> query ( 'SELECT message FROM messages WHERE id = 1' ); $obj = $rows -> fetch ( PDO :: FETCH_OBJ ); $tabbed = str_replace ( ' ' , \" \\t \" , $obj -> message ); $spaced = str_replace ( \" \\t \" , ' ' , $obj -> message ); print \"With Tabs: <pre> $tabbed </pre>\" ; print \"With Spaces: <pre> $spaced </pre>\" ; ?> Using str_replace() for conversion, however, doesn\u2019t respect tab stops. If you want tab stops every eight characters, a line beginning with a five-letter word and a tab should have that tab replaced with three spaces, not one. Use the tab_expand() function shown below to turn tabs to spaces in a way that respects tab stops. <?php function tab_expand ( $text ) { while ( strstr ( $text , \" \\t \" )) { $text = preg_replace_callback ( '/^([^\\t\\n]*)(\\t+)/m' , 'tab_expand_helper' , $text ); } return $text ; } function tab_expand_helper ( $matches ) { $tab_stop = 8 ; return $matches [ 1 ] . str_repeat ( ' ' , strlen ( $matches [ 2 ]) * $tab_stop - ( strlen ( $matches [ 1 ]) % $tab_stop )); } $spaced = tab_expand ( $obj -> message ); ?> You can use the tab_unexpand() function shown below to reverse the process to turn spaces back to tabs. <?php function tab_unexpand ( $text ) { $tab_stop = 8 ; $lines = explode ( \" \\n \" , $text ); foreach ( $lines as $i => $line ) { // Expand any tabs to spaces $line = tab_expand ( $line ); $chunks = str_split ( $line , $tab_stop ); $chunkCount = count ( $chunks ); // Scan all but the last chunk for ( $j = 0 ; $j < $chunkCount - 1 ; $j ++ ) { $chunks [ $j ] = preg_replace ( '/ {2,}$/' , \" \\t \" , $chunks [ $j ]); } // If the last chunk is a tab-stop's worth of spaces // convert it to a tab; Otherwise, leave it alone if ( $chunks [ $chunkCount - 1 ] == str_repeat ( ' ' , $tab_stop )) { $chunks [ $chunkCount - 1 ] = \" \\t \" ; } // Recombine the chunks $lines [ $i ] = implode ( '' , $chunks ); } // Recombine the lines return implode ( \" \\n \" , $lines ); } $tabbed = tab_unexpand ( $obj -> message ); ?> Each function assumes tab stops are every eight spaces, but that can be modified by changing the setting of the $tab_stop variable. The regular expression in tab_expand() matches both a group of tabs and all the text in a line before that group of tabs. It needs to match the text before the tabs because the length of that text affects how many spaces the tabs should be replaced with so that subsequent text is aligned with the next tab stop. The function doesn\u2019t just replace each tab with eight spaces; it adjusts text after tabs to line up with tab stops. Similarly, tab_unexpand() doesn\u2019t just look for eight consecutive spaces and then replace them with one tab character. It divides up each line into eight-character chunks and then substitutes ending whitespace in those chunks (at least two spaces) with tabs. This not only preserves text alignment with tab stops; it also saves space in the string. str_repeat() The str_repeat() function repeats a string a specified number of times. <?php echo str_repeat ( \"Hello \" , 3 ); // outputs Hello Hello Hello ?> str_shuffle() The str_shuffle() function randomly shuffles all the characters of a string. <?php echo str_shuffle ( \"Hello world!\" ); // outputs !Wdroel loHl ?> str_rand() The str_rand() function returns a random string of specified length. <?php function str_rand ( $length = 32 , $characters = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ' ) { if ( ! is_int ( $length ) || $length < 0 ) { return false ; } $characters_length = strlen ( $characters ) - 1 ; $string = '' ; for ( $i = $length ; $i > 0 ; $i -- ) { $string .= $characters [ mt_rand ( 0 , $characters_length )]; } return $string ; } ?> PHP has native functions for generating random numbers, but nothing for random strings. The str_rand() function returns a 32-character string constructed from letters and numbers. Pass in an integer to change the length of the returned string. To use an alternative set of characters, pass them as a string as the second argument. For example, to get a 16-digit Morse Code: <?php print str_rand ( 16 , '.-' ); ?> .--..-.-.--.---- Case Conversion ucfirst() The PHP ucfirst() function capitalizes the first character of a string. <?php echo ucfirst ( \"hello world!\" ); // outputs Hello world! ?> ucwords() The PHP ucwords() function capitalizes the first character of each word in a string. <?php echo ucwords ( \"hello world!\" ); // outputs Hello World! ?> strtolower() The PHP strtolower() function converts a string to lowercase. <?php echo strtolower ( \"Hello world!\" ); // outputs hello world! ?> strtoupper() The PHP strtoupper() function converts a string to uppercase. <?php echo strtoupper ( \"Hello world!\" ); // outputs HELLO WORLD! ?> Trimming Blanks from a String You want to remove whitespace from the beginning or end of a string. For example, you want to clean up user input before validating it. Use ltrim(), rtrim(), or trim(). The ltrim() function removes whitespace from the beginning of a string, rtrim() from the end of a string, and trim() from both the beginning and end of a string. For these functions, whitespace is defined as the following characters: newline, carriage return, space, horizontal and vertical tab, and null. Trimming whitespace off of strings saves storage space and can make for more precise display of formatted data or text. The trim() functions can also remove user-specified characters from strings. Pass the characters you want to remove as a second argument. You can indicate a range of characters with two dots between the first and last characters in the range. <?php // Remove numerals and space from the beginning of the line print ltrim ( '10 PRINT A$' , ' 0..9' ); // Remove semicolon from the end of the line print rtrim ( 'SELECT * FROM turtles;' , ';' ); ?> ltrim() The PHP ltrim() function removes leading whitespace from a string. <?php echo ltrim ( \" Hello world!\" ); // outputs \"Hello world!\" ?> rtrim() The PHP rtrim() function removes trailing whitespace from a string. <?php echo rtrim ( \"Hello world! \" ); // outputs \"Hello world!\" ?> trim() The PHP trim() function removes leading and trailing whitespace from a string. <?php echo trim ( \" Hello world! \" ); // outputs \"Hello world!\" ?> Formatting to CSV fgetcsv() The PHP str_getcsv() function parses a CSV string into an array. Parsing Comma-Separated Data. You have data in comma-separated values (CSV) format\u2014for example, a file exported from Excel or a database\u2014and you want to extract the records and fields into a format you can manipulate in PHP. If the CSV data is in a file (or available via a URL), open the file with fopen() and read in the data with fgetcsv(). <?php //Reading CSV data from a file $fp = fopen ( $filename , 'r' ) or die ( \"can't open file\" ); print \"<table> \\n \" ; while ( $csv_line = fgetcsv ( $fp )) { print '<tr>' ; for ( $i = 0 , $j = count ( $csv_line ); $i < $j ; $i ++ ) { print '<td>' . htmlentities ( $csv_line [ $i ]) . '</td>' ; } print \"</tr> \\n \" ; } print \"</table> \\n \" ; fclose ( $fp ) or die ( \"can't close file\" ); ?> By default, fgetcsv() reads in an entire line of data. If your average line length is more than 8,192 bytes, your program may run faster if you specify an explicit line length instead of letting PHP figure it out. Do this by providing a second argument to fgetcsv() that is a value larger than the maximum length of a line in your CSV file. (Don\u2019t forget to count the end-of-line whitespace.) If you pass a line length of 0, PHP will use the default behavior. You can pass fgetcsv() an optional third argument, a delimiter to use instead of a comma (,). However, using a different delimiter somewhat defeats the purpose of CSV as an easy way to exchange tabular data. Don\u2019t be tempted to bypass fgetcsv() and just read a line in and explode() on the commas. CSV is more complicated than that so that it can deal with field values that have, for example, literal commas in them that should not be treated as field delimiters. Using fgetcsv() protects you and your code from subtle errors. str_getcsv() The PHP str_getcsv() function parses a CSV string into an array. Parsing Comma-Separated Data. Use str_getcsv() only when you have the CSV already as a string in your program. <?php $string = 'PHP,Java,Python,Kotlin,Swift' ; $data = str_getcsv ( $string ); var_dump ( $data ); ?> fputcsv() The PHP fputcsv() function converts an array into a CSV string and generating Comma-Separated Data. You want to format data as comma-separated values (CSV) so that it can be imported by a spreadsheet or database. <?php $sales = array ( array ( 'Northeast' , '2005-01-01' , '2005-02-01' , 12.54 ), array ( 'Northwest' , '2005-01-01' , '2005-02-01' , 546.33 ), array ( 'Southeast' , '2005-01-01' , '2005-02-01' , 93.26 ), array ( 'Southwest' , '2005-01-01' , '2005-02-01' , 945.21 ), array ( 'All Regions' , '--' , '--' , 1597.34 ) ); $filename = './sales.csv' ; $fh = fopen ( $filename , 'w' ) or die ( \"Can't open $filename \" ); foreach ( $sales as $sales_line ) { if ( fputcsv ( $fh , $sales_line ) === false ) { die ( \"Can't write CSV line\" ); } } fclose ( $fh ) or die ( \"Can't close $filename \" ); ?> To print the CSV-formatted data instead of writing it to a file, use the special output stream php://output . <?php $sales = array ( array ( 'Northeast' , '2005-01-01' , '2005-02-01' , 12.54 ), array ( 'Northwest' , '2005-01-01' , '2005-02-01' , 546.33 ), array ( 'Southeast' , '2005-01-01' , '2005-02-01' , 93.26 ), array ( 'Southwest' , '2005-01-01' , '2005-02-01' , 945.21 ), array ( 'All Regions' , '--' , '--' , 1597.34 ) ); $fh = fopen ( 'php://output' , 'w' ); foreach ( $sales as $sales_line ) { if ( fputcsv ( $fh , $sales_line ) === false ) { die ( \"Can't write CSV line\" ); } } fclose ( $fh ); ?> To put the CSV-formatted data into a string instead of printing it or writing it to a file. <?php $sales = array ( array ( 'Northeast' , '2005-01-01' , '2005-02-01' , 12.54 ), array ( 'Northwest' , '2005-01-01' , '2005-02-01' , 546.33 ), array ( 'Southeast' , '2005-01-01' , '2005-02-01' , 93.26 ), array ( 'Southwest' , '2005-01-01' , '2005-02-01' , 945.21 ), array ( 'All Regions' , '--' , '--' , 1597.34 ) ); ob_start (); $fh = fopen ( 'php://output' , 'w' ) or die ( \"Can't open php://output\" ); foreach ( $sales as $sales_line ) { if ( fputcsv ( $fh , $sales_line ) === false ) { die ( \"Can't write CSV line\" ); } } fclose ( $fh ) or die ( \"Can't close php://output\" ); $output = ob_get_contents (); ob_end_clean (); ?> Wrapping Text at a Certain Line Length When you need to wrap lines in a string. For example, you want to display text by using the pre tags but have it stay within a regularly sized browser window. wordwrap() <?php $s = \"Four score and seven years ago our fathers brought forth on this continent \u21b5 a new nation, conceived in liberty and dedicated to the proposition \u21b5 that all men are created equal.\" ; print \"<pre> \\n \" . wordwrap ( $s ) . \" \\n </pre>\" ; ?> <pre> Four score and seven years ago our fathers brought forth on this continent a new nation, conceived in liberty and dedicated to the proposition that all men are created equal. </pre> By default, wordwrap() wraps text at 75 characters per line. An optional second argu\u2010 ment specifies a different line length: <?php print wordwrap ( $s , 50 ); ?> Four score and seven years ago our fathers brought forth on this continent a new nation, conceived in liberty and dedicated to the proposition that all men are created equal. Other characters besides \\n can be used for line breaks. For double spacing, use \"\\n\\n\": <?php print wordwrap ( $s , 50 , \" \\n\\n \" ); ?> This prints: Four score and seven years ago our fathers brought forth on this continent a new nation, conceived in liberty and dedicated to the proposition that all men are created equal. There is an optional fourth argument to wordwrap() that controls the treatment of words that are longer than the specified line length. If this argument is 1, these words are wrapped. Otherwise, they span past the specified line length: <?php print wordwrap ( 'jabberwocky' , 5 ) . \" \\n \" ; print wordwrap ( 'jabberwocky' , 5 , \" \\n \" , 1 ); ?> This prints: jabberwocky jabbe rwock y All String Functions The PHP string functions are part of the PHP core. No installation is required to use these functions. For more information, see PHP String Functions Function Description addcslashes() Returns a string with backslashes in front of the specified characters addslashes() Returns a string with backslashes in front of predefined characters bin2hex() Converts a string of ASCII characters to hexadecimal values chop() Removes whitespace or other characters from the right end of a string chr() Returns a character from a specified ASCII value chunk_split() Splits a string into a series of smaller parts convert_cyr_string() Converts a string from one Cyrillic character-set to another convert_uudecode() Decodes a uuencoded string convert_uuencode() Encodes a string using the uuencode algorithm count_chars() Returns information about characters used in a string crc32() Calculates a 32-bit CRC for a string crypt() One-way string hashing echo() Outputs one or more strings explode() Breaks a string into an array fprintf() Writes a formatted string to a specified output stream get_html_translation_table() Returns the translation table used by htmlspecialchars() and htmlentities() hebrev() Converts Hebrew text to visual text hebrevc() Converts Hebrew text to visual text and new lines (\\n) into hex2bin() Converts a string of hexadecimal values to ASCII characters html_entity_decode() Converts HTML entities to characters htmlentities() Converts characters to HTML entities htmlspecialchars_decode() Converts some predefined HTML entities to characters htmlspecialchars() Converts some predefined characters to HTML entities implode() Returns a string from the elements of an array join() Alias of implode() lcfirst() Converts the first character of a string to lowercase levenshtein() Returns the Levenshtein distance between two strings localeconv() Returns locale numeric and monetary formatting information ltrim() Removes whitespace or other characters from the left side of a string md5() Calculates the MD5 hash of a string md5_file() Calculates the MD5 hash of a file metaphone() Calculates the metaphone key of a string money_format() Returns a string formatted as a currency string nl_langinfo() Returns specific local information nl2br() Inserts HTML line breaks in front of each newline in a string number_format() Formats a number with grouped thousands ord() Returns the ASCII value of the first character of a string parse_str() Parses a query string into variables print() Outputs one or more strings printf() Outputs a formatted string quoted_printable_decode() Converts a quoted-printable string to an 8-bit string quoted_printable_encode() Converts an 8-bit string to a quoted printable string quotemeta() Quotes meta characters rtrim() Removes whitespace or other characters from the right side of a string setlocale() Sets locale information sha1() Calculates the SHA-1 hash of a string sha1_file() Calculates the SHA-1 hash of a file similar_text() Calculates the similarity between two strings soundex() Calculates the soundex key of a string sprintf() Writes a formatted string to a variable sscanf() Parses input from a string according to a format str_getcsv() Parses a CSV string into an array str_ireplace() Replaces some characters in a string (case-insensitive) str_pad() Pads a string to a new length str_repeat() Repeats a string a specified number of times str_replace() Replaces some characters in a string (case-sensitive) str_rot13() Performs the ROT13 encoding on a string str_shuffle() Randomly shuffles all characters in a string str_split() Splits a string into an array str_word_count() Count the number of words in a string strcasecmp() Compares two strings (case-insensitive) strchr() Finds the first occurrence of a string inside another string (alias of strstr()) strcmp() Compares two strings (case-sensitive) strcoll() Compares two strings (locale based string comparison) strcspn() Returns the number of characters found in a string before any part of some specified characters are found strip_tags() Strips HTML and PHP tags from a string stripcslashes() Unquotes a string quoted with addcslashes() stripslashes() Unquotes a string quoted with addslashes() stripos() Returns the position of the first occurrence of a string inside another string (case-insensitive) stristr() Finds the first occurrence of a string inside another string (case-insensitive) strlen() Returns the length of a string strnatcasecmp() Compares two strings using a \"natural order\" algorithm (case-insensitive) strnatcmp() Compares two strings using a \"natural order\" algorithm (case-sensitive) strncasecmp() String comparison of the first n characters (case-insensitive) strncmp() String comparison of the first n characters (case-sensitive) strpbrk() Searches a string for any of a set of characters strpos() Returns the position of the first occurrence of a string inside another string (case-sensitive) strrchr() Finds the last occurrence of a string inside another string strrev() Reverses a string strripos() Finds the position of the last occurrence of a string inside another string (case-insensitive) strrpos() Finds the position of the last occurrence of a string inside another string (case-sensitive) strspn() Returns the number of characters found in a string that contains only characters from a specified charlist strstr() Finds the first occurrence of a string inside another string (case-sensitive) strtok() Splits a string into smaller strings strtolower() Converts a string to lowercase letters strtoupper() Converts a string to uppercase letters strtr() Translates certain characters in a string substr() Returns a part of a string substr_compare() Compares two strings from a specified start position (binary safe and optionally case-sensitive) substr_count() Counts the number of times a substring occurs in a string substr_replace() Replaces a part of a string with another string trim() Removes whitespace or other characters from both sides of a string ucfirst() Converts the first character of a string to uppercase ucwords() Converts the first character of each word in a string to uppercase vfprintf() Writes a formatted string to a specified output stream vprintf() Outputs a formatted string vsprintf() Writes a formatted string to a variable wordwrap() Wraps a string to a given number of characters","title":"Functions"},{"location":"PR/phpStr1/#most-common-functions","text":"","title":"Most Common Functions"},{"location":"PR/phpStr1/#strlen","text":"The PHP strlen() function returns the length of a string. <?php echo strlen ( \"Hello world!\" ); // outputs 12 ?>","title":"strlen()"},{"location":"PR/phpStr1/#str_word_count","text":"The PHP str_word_count() function counts the number of words in a string. <?php echo str_word_count ( \"Hello world!\" ); // outputs 2 ?>","title":"str_word_count()"},{"location":"PR/phpStr1/#strrev","text":"","title":"strrev()"},{"location":"PR/phpStr1/#reverse-by-byte","text":"The PHP strrev() function reverses a string by byte. <?php echo strrev ( \"Hello world!\" ); // outputs !dlrow olleH ?>","title":"Reverse by byte"},{"location":"PR/phpStr1/#reverse-by-words","text":"To reverse by words, explode the string by word boundary, reverse the words, and then rejoin. <?php echo implode ( \" \" , array_reverse ( explode ( \" \" , \"Hello world!\" ))); // outputs world! Hello ?> <?php $s = \"Once upon a time there was a turtle.\" ; // break the string up into words $words = explode ( ' ' , $s ); // reverse the array of words $words = array_reverse ( $words ); // rebuild the string $s = implode ( ' ' , $words ); print $s ; ?> turtle. a was there time a upon Once","title":"Reverse by words"},{"location":"PR/phpStr1/#strpos","text":"The PHP strpos() function searches for a specific text within a string. If a match is found, the function returns the character position of the first match. If no match is found, it will return FALSE. <?php echo strpos ( \"Hello world!\" , \"world\" ); // outputs 6 ?> The first character position in a string is 0 (not 1). You want to know if a string contains a particular substring. For example, you want to find out if an email address contains a @. <?php if ( strpos ( $_POST [ 'email' ], '@' ) === false ) { print 'There was no @ in the e-mail address!' ; } ?> To differentiate between return values of 0 and false, you must use the identity operator (===) or the not\u2013identity operator (!==) instead of regular equals (==) or not-equals (!=).","title":"strpos()"},{"location":"PR/phpStr1/#fixed-width-field-data-records","text":"","title":"Fixed-Width Field Data Records"},{"location":"PR/phpStr1/#pack","text":"The PHP pack() function converts an array into a binary string. When you need to format data records such that each field takes up a set amount of characters. Use pack() with a format string that specifies a sequence of space-padded strings.","title":"pack()"},{"location":"PR/phpStr1/#format-characters-for-pack-and-unpack","text":"Format character Data type a NUL-padded string A Space-padded string h Hex string, low nibble first H Hex string, high nibble first c signed char C unsigned char s signed short (16 bit, machine byte order) S unsigned short (16 bit, machine byte order) n unsigned short (16 bit, big endian byte order) v unsigned short (16 bit, little endian byte order) i signed int (machine-dependent size and byte order) I unsigned int (machine-dependent size and byte order) l signed long (32 bit, machine byte order) L unsigned long (32 bit, machine byte order) N unsigned long (32 bit, big endian byte order) V unsigned long (32 bit, little endian byte order) f float (machine-dependent size and representation) d double (machine-dependent size and representation) x NUL byte X Back up one byte @ NUL-fill to absolute position <?php //Generating fixed-width field data records $books = array ( array ( 'Elmer Gantry' , 'Sinclair Lewis' , 1927 ), array ( 'The Scarlatti Inheritance' , 'Robert Ludlum' , 1971 ), array ( 'The Parsifal Mosaic' , 'William Styron' , 1979 ) ); foreach ( $books as $book ) { print pack ( 'A25A15A4' , $book [ 0 ], $book [ 1 ], $book [ 2 ]) . \" \\n \" ; } ?> The format string A25A14A4 tells pack() to transform its subsequent arguments into a 25-character space-padded string, a 14-character space-padded string, and a 4-character space-padded string. For space-padded fields in fixed-width records, pack() provides a concise solution.","title":"Format characters for pack( ) and unpack( )"},{"location":"PR/phpStr1/#storing-binary-data-in-strings","text":"You can use pack() to store binary data in strings. When you want to parse a string that contains values encoded as a binary structure or encode values into a string. For example, you want to store numbers in their binary representation instead of as sequences of ASCII characters. <?php $packed = pack ( 'S4' , 1974 , 106 , 28225 , 32725 ); ?> Use unpack() to extract binary data from a string: <?php $nums = unpack ( 'S4' , $packed ); print_r ( $nums ); ?>","title":"Storing Binary Data in Strings"},{"location":"PR/phpStr1/#str_pad","text":"To pad fields with something other than a space, however, use substr() to ensure that the field values aren\u2019t too long and str_pad() to ensure that the field values aren\u2019t too short. <?php //Generating fixed-width field data records without pack( ) $books = array ( array ( 'Elmer Gantry' , 'Sinclair Lewis' , 1927 ), array ( 'The Scarlatti Inheritance' , 'Robert Ludlum' , 1971 ), array ( 'The Parsifal Mosaic' , 'William Styron' , 1979 ) ); foreach ( $books as $book ) { $title = str_pad ( substr ( $book [ 0 ], 0 , 25 ), 25 , '.' ); $author = str_pad ( substr ( $book [ 1 ], 0 , 15 ), 15 , '.' ); $year = str_pad ( substr ( $book [ 2 ], 0 , 4 ), 4 , '.' ); print \" $title$author$year\\n \" ; } ?>","title":"str_pad()"},{"location":"PR/phpStr1/#substr","text":"The PHP substr() function extracts a part of a string and returns the extracted part as a new string. You want to extract part of a string, starting at a particular place in the string. For example, you want the first eight characters of a username entered into a form. If $start and $length are positive, substr() returns $length characters in the string, starting at $start. If $start is negative, the string is counted from the end of the string. If $length is negative, the string is counted from the end of the string. <?php //$substring = substr($string,$start,$length); $username = substr ( $_GET [ 'username' ], 0 , 8 ); ?> When you need to break apart fixed-width records in strings and parsing Fixed-Width Field Data Records, use substr() instead of explode(). <?php Parsing fixed - width records with substr ( ) $fp = fopen ( 'fixed-width-records.txt' , 'r' , true ) or die ( \"can't open file\" ); while ( $s = fgets ( $fp , 1024 )) { $fields [ 1 ] = substr ( $s , 0 , 25 ); // first field: first 25 characters of the line $fields [ 2 ] = substr ( $s , 25 , 15 ); // second field: next 15 characters of the line $fields [ 3 ] = substr ( $s , 40 , 4 ); // third field: next 4 characters of the line $fields = array_map ( 'rtrim' , $fields ); // strip the trailing whitespace // a function to do something with the fields process_fields ( $fields ); } fclose ( $fp ) or die ( \"can't close file\" ); ?>","title":"substr()"},{"location":"PR/phpStr1/#unpack","text":"The PHP unpack() function unpacks binary data from a string. Multiple format characters must be separated with / in unpack(): <?php $packed = pack ( 'S4' , 1974 , 106 , 28225 , 32725 ); $nums = unpack ( 'S1a/S1b/S1c/S1d' , $packed ); print_r ( $nums ); ?> Array ( [a] => 1974 [b] => 106 [c] => 28225 [d] => 32725 ) <?php //Parsing fixed-width records with unpack( ) function fixed_width_unpack ( $format_string , $data ) { $r = array (); for ( $i = 0 , $j = count ( $data ); $i < $j ; $i ++ ) { $r [ $i ] = unpack ( $format_string , $data [ $i ]); } return $r ; } ?> Data in which each field is allotted a fixed number of characters per line may look like this list of books, titles, and publication dates: $booklist=<<<END Elmer Gantry Sinclair Lewis 1927 The Scarlatti InheritanceRobert Ludlum 1971 The Parsifal Mosaic Robert Ludlum 1982 Sophie's Choice William Styron 1979 END; In each line, the title occupies the first 25 characters, the author\u2019s name the next 15 characters, and the publication year the next 4 characters. Knowing those field widths, you can easily use substr() to parse the fields into an array: <?php $books = explode ( \" \\n \" , $booklist ); for ( $i = 0 , $j = count ( $books ); $i < $j ; $i ++ ) { $book_array [ $i ][ 'title' ] = substr ( $books [ $i ], 0 , 25 ); $book_array [ $i ][ 'author' ] = substr ( $books [ $i ], 25 , 15 ); $book_array [ $i ][ 'publication_year' ] = substr ( $books [ $i ], 40 , 4 ); } ?> Exploding $booklist into an array of lines makes the looping code the same whether it\u2019s operating over a string or a series of lines read in from a file. The loop can be made more flexible by specifying the field names and widths in a separate array that can be passed to a parsing function, as shown in the fixed_width_substr() function below. <?php //fixed_width_substr( ) function fixed_width_substr ( $fields , $data ) { $r = array (); for ( $i = 0 , $j = count ( $data ); $i < $j ; $i ++ ) { $line_pos = 0 ; foreach ( $fields as $field_name => $field_length ) { $r [ $i ][ $field_name ] = rtrim ( substr ( $data [ $i ], $line_pos , $field_length )); $line_pos += $field_length ; } } return $r ; } $book_fields = array ( 'title' => 25 , 'author' => 15 , 'publication_year' => 4 ); $book_array = fixed_width_substr ( $book_fields , $booklist ); ?> The variable $line_pos keeps track of the start of each field and is advanced by the previous field\u2019s width as the code moves through each line. Use rtrim() to remove trailing whitespace from each field. You can use unpack() as a substitute for substr() to extract fields. Instead of specifying the field names and widths as an associative array, create a format string for unpack(). A fixed-width field extractor using unpack() looks like the fixed_width_unpack() function below. <?php //fixed_width_unpack( ) function fixed_width_unpack ( $format_string , $data ) { $r = array (); for ( $i = 0 , $j = count ( $data ); $i < $j ; $i ++ ) { $r [ $i ] = unpack ( $format_string , $data [ $i ]); } return $r ; } ?> Because the A format to unpack() means space-padded string, there\u2019s no need to rtrim() off the trailing spaces. Once the fields have been parsed into $book_array by either function, the data can be printed as an HTML table, for example: <?php $book_array = fixed_width_unpack ( 'A25title/A15author/A4publication_year' , $books ); print \"<table> \\n \" ; // print a header row print '<tr><td>' ; print join ( '</td><td>' , array_keys ( $book_array [ 0 ])); print \"</td></tr> \\n \" ; // print each data row foreach ( $book_array as $row ) { print '<tr><td>' ; print join ( '</td><td>' , array_values ( $row )); print \"</td></tr> \\n \" ; } print \"</table> \\n \" ; ?> Both substr() and unpack() have equivalent capabilities when the fixed-width fields are strings, but unpack() is the better solution when the elements of the fields aren\u2019t just strings.","title":"unpack()"},{"location":"PR/phpStr1/#taking-strings-apart","text":"When you need to break a string into pieces. For example, you want to access each line that a user enters in a textarea form field.","title":"Taking Strings Apart"},{"location":"PR/phpStr1/#explode","text":"Use explode() if what separates the pieces is a constant string: $words = explode(' ','My sentence is not very complicated'); The simplest solution of the bunch is explode(). Pass it your separator string, the string to be separated, and an optional limit on how many elements should be returned: <?php $dwarves = 'dopey,sleepy,happy,grumpy,sneezy,bashful,doc' ; $dwarf_array = explode ( ',' , $dwarves ); ?> Array ( [0] => dopey [1] => sleepy [2] => happy [3] => grumpy [4] => sneezy [5] => bashful [6] => doc ) If the specified limit is less than the number of possible chunks, the last chunk contains the remainder: <?php $dwarves = 'dopey,sleepy,happy,grumpy,sneezy,bashful,doc' ; $dwarf_array = explode ( ',' , $dwarves , 5 ); print_r ( $dwarf_array ); ?> Array ( [0] => dopey [1] => sleepy [2] => happy [3] => grumpy [4] => sneezy,bashful,doc ) The separator is treated literally by explode(). If you specify a comma and a space as a separator, it breaks the string only on a comma followed by a space, not on a comma or a space. With preg_split() , you have more flexibility. Instead of a string literal as a separator, it uses a Perl-compatible regular expression engine. With preg_split(), you can take advantage of various Perl-ish regular expression extensions, as well as tricks such as including the separator text in the returned array of strings: <?php $math = \"3 + 2 / 7 - 9\" ; $stack = preg_split ( '/ *([+\\-\\/*]) */' , $math , - 1 , PREG_SPLIT_DELIM_CAPTURE ); print_r ( $stack ); ?> Array ( [0] => 3 [1] => + [2] => 2 [3] => / [4] => 7 [5] => - [6] => 9 ) The separator regular expression looks for the four mathematical operators (+, -, /, *), surrounded by optional leading or trailing spaces. The PREG_SPLIT_DELIM_CAPTURE flag tells preg_split() to include the matches as part of the separator regular expression in parentheses in the returned array of strings. Only the mathematical operator character class is in parentheses, so the returned array doesn\u2019t have any spaces in it.","title":"explode()"},{"location":"PR/phpStr1/#str_split","text":"Use preg_split() if you need a Perl-compatible regular expression to describe the separator: $words = preg_split('/\\d\\. /','my day: 1. get up 2. get dressed 3. eat toast'); $lines = preg_split('/[\\n\\r]+/',$_POST['textarea']); Use the /i flag to preg_split() for case-insensitive separator matching: $words = preg_split('/ x /i','31 inches x 22 inches X 9 inches'); If all of your fields are the same size, str_split() is a handy shortcut for chopping up incoming data. It returns an array made up of sections of a string. <?php $book_array = str_split ( $booklist , 25 ); ?> The str_split() function splits a string into an array. <?php echo str_split ( \"Hello world!\" ); // outputs [\"H\", \"e\", \"l\", \"l\", \"o\", \" \", \"w\", \"o\", \"r\", \"l\", \"d\", \"!\"] ?>","title":"str_split()"},{"location":"PR/phpStr1/#substr_replace","text":"The PHP substr_replace() function replaces part of a string with another string. You want to replace a substring with a different string. For example, you want to obscure all but the last four digits of a credit card number before printing it. <?php // Everything from position $start to the end of $old_string // becomes $new_substring $new_string = substr_replace ( $old_string , $new_substring , $start ); //$length characters, starting at position $start, become $new_substring $new_string = substr_replace ( $old_string , $new_substring , $start , $length ); ?> Without the $length argument, substr_replace() replaces everything from $start to the end of the string. If $length is specified, only that many characters are replaced. <?php print substr_replace ( 'My pet is a blue dog.' , 'fish.' , 12 ); print substr_replace ( 'My pet is a blue dog.' , 'green' , 12 , 4 ); $credit_card = '4111 1111 1111 1111' ; print substr_replace ( $credit_card , 'xxxx ' , 0 , strlen ( $credit_card ) - 4 ); ?> My pet is a fish. My pet is a green dog. xxxx 1111 If $start is negative, the new substring is placed by counting $start characters from the end of $old_string, not from the beginning. If $start and $length are 0, the new substring is inserted at the start of $old_string. The function substr_replace() is useful when you\u2019ve got text that\u2019s too big to display all at once, and you want to display some of the text with a link to the rest. <?php /* Displays the first 25 characters of a message with an ellipsis after it as a link to a page that displays more text */ $r = mysql_query ( \"SELECT id,message FROM messages WHERE id = $id \" ) or die (); $ob = mysql_fetch_object ( $r ); printf ( '<a href=\"more-text.php?id=%d\">%s</a>' , $ob -> id , substr_replace ( $ob -> message , ' ...' , 25 )); ?> /* The more-text.php page referenced can use the message ID passed in the query string to retrieve the full message and display it. */","title":"substr_replace()"},{"location":"PR/phpStr1/#str_replace","text":"The PHP str_replace() function replaces some characters with some other characters in a string. <?php echo str_replace ( \"world\" , \"Earth\" , \"Hello world!\" ); // outputs Hello Earth! ?>","title":"str_replace()"},{"location":"PR/phpStr1/#expanding-and-compressing-tabs","text":"You want to change spaces to tabs (or tabs to spaces) in a string while keeping text aligned with tab stops. For example, you want to display formatted text to users in a standardized way. <?php // Switching tabs and spaces $rows = $db -> query ( 'SELECT message FROM messages WHERE id = 1' ); $obj = $rows -> fetch ( PDO :: FETCH_OBJ ); $tabbed = str_replace ( ' ' , \" \\t \" , $obj -> message ); $spaced = str_replace ( \" \\t \" , ' ' , $obj -> message ); print \"With Tabs: <pre> $tabbed </pre>\" ; print \"With Spaces: <pre> $spaced </pre>\" ; ?> Using str_replace() for conversion, however, doesn\u2019t respect tab stops. If you want tab stops every eight characters, a line beginning with a five-letter word and a tab should have that tab replaced with three spaces, not one. Use the tab_expand() function shown below to turn tabs to spaces in a way that respects tab stops. <?php function tab_expand ( $text ) { while ( strstr ( $text , \" \\t \" )) { $text = preg_replace_callback ( '/^([^\\t\\n]*)(\\t+)/m' , 'tab_expand_helper' , $text ); } return $text ; } function tab_expand_helper ( $matches ) { $tab_stop = 8 ; return $matches [ 1 ] . str_repeat ( ' ' , strlen ( $matches [ 2 ]) * $tab_stop - ( strlen ( $matches [ 1 ]) % $tab_stop )); } $spaced = tab_expand ( $obj -> message ); ?> You can use the tab_unexpand() function shown below to reverse the process to turn spaces back to tabs. <?php function tab_unexpand ( $text ) { $tab_stop = 8 ; $lines = explode ( \" \\n \" , $text ); foreach ( $lines as $i => $line ) { // Expand any tabs to spaces $line = tab_expand ( $line ); $chunks = str_split ( $line , $tab_stop ); $chunkCount = count ( $chunks ); // Scan all but the last chunk for ( $j = 0 ; $j < $chunkCount - 1 ; $j ++ ) { $chunks [ $j ] = preg_replace ( '/ {2,}$/' , \" \\t \" , $chunks [ $j ]); } // If the last chunk is a tab-stop's worth of spaces // convert it to a tab; Otherwise, leave it alone if ( $chunks [ $chunkCount - 1 ] == str_repeat ( ' ' , $tab_stop )) { $chunks [ $chunkCount - 1 ] = \" \\t \" ; } // Recombine the chunks $lines [ $i ] = implode ( '' , $chunks ); } // Recombine the lines return implode ( \" \\n \" , $lines ); } $tabbed = tab_unexpand ( $obj -> message ); ?> Each function assumes tab stops are every eight spaces, but that can be modified by changing the setting of the $tab_stop variable. The regular expression in tab_expand() matches both a group of tabs and all the text in a line before that group of tabs. It needs to match the text before the tabs because the length of that text affects how many spaces the tabs should be replaced with so that subsequent text is aligned with the next tab stop. The function doesn\u2019t just replace each tab with eight spaces; it adjusts text after tabs to line up with tab stops. Similarly, tab_unexpand() doesn\u2019t just look for eight consecutive spaces and then replace them with one tab character. It divides up each line into eight-character chunks and then substitutes ending whitespace in those chunks (at least two spaces) with tabs. This not only preserves text alignment with tab stops; it also saves space in the string.","title":"Expanding and Compressing Tabs"},{"location":"PR/phpStr1/#str_repeat","text":"The str_repeat() function repeats a string a specified number of times. <?php echo str_repeat ( \"Hello \" , 3 ); // outputs Hello Hello Hello ?>","title":"str_repeat()"},{"location":"PR/phpStr1/#str_shuffle","text":"The str_shuffle() function randomly shuffles all the characters of a string. <?php echo str_shuffle ( \"Hello world!\" ); // outputs !Wdroel loHl ?>","title":"str_shuffle()"},{"location":"PR/phpStr1/#str_rand","text":"The str_rand() function returns a random string of specified length. <?php function str_rand ( $length = 32 , $characters = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ' ) { if ( ! is_int ( $length ) || $length < 0 ) { return false ; } $characters_length = strlen ( $characters ) - 1 ; $string = '' ; for ( $i = $length ; $i > 0 ; $i -- ) { $string .= $characters [ mt_rand ( 0 , $characters_length )]; } return $string ; } ?> PHP has native functions for generating random numbers, but nothing for random strings. The str_rand() function returns a 32-character string constructed from letters and numbers. Pass in an integer to change the length of the returned string. To use an alternative set of characters, pass them as a string as the second argument. For example, to get a 16-digit Morse Code: <?php print str_rand ( 16 , '.-' ); ?> .--..-.-.--.----","title":"str_rand()"},{"location":"PR/phpStr1/#case-conversion","text":"","title":"Case Conversion"},{"location":"PR/phpStr1/#ucfirst","text":"The PHP ucfirst() function capitalizes the first character of a string. <?php echo ucfirst ( \"hello world!\" ); // outputs Hello world! ?>","title":"ucfirst()"},{"location":"PR/phpStr1/#ucwords","text":"The PHP ucwords() function capitalizes the first character of each word in a string. <?php echo ucwords ( \"hello world!\" ); // outputs Hello World! ?>","title":"ucwords()"},{"location":"PR/phpStr1/#strtolower","text":"The PHP strtolower() function converts a string to lowercase. <?php echo strtolower ( \"Hello world!\" ); // outputs hello world! ?>","title":"strtolower()"},{"location":"PR/phpStr1/#strtoupper","text":"The PHP strtoupper() function converts a string to uppercase. <?php echo strtoupper ( \"Hello world!\" ); // outputs HELLO WORLD! ?>","title":"strtoupper()"},{"location":"PR/phpStr1/#trimming-blanks-from-a-string","text":"You want to remove whitespace from the beginning or end of a string. For example, you want to clean up user input before validating it. Use ltrim(), rtrim(), or trim(). The ltrim() function removes whitespace from the beginning of a string, rtrim() from the end of a string, and trim() from both the beginning and end of a string. For these functions, whitespace is defined as the following characters: newline, carriage return, space, horizontal and vertical tab, and null. Trimming whitespace off of strings saves storage space and can make for more precise display of formatted data or text. The trim() functions can also remove user-specified characters from strings. Pass the characters you want to remove as a second argument. You can indicate a range of characters with two dots between the first and last characters in the range. <?php // Remove numerals and space from the beginning of the line print ltrim ( '10 PRINT A$' , ' 0..9' ); // Remove semicolon from the end of the line print rtrim ( 'SELECT * FROM turtles;' , ';' ); ?>","title":"Trimming Blanks from a String"},{"location":"PR/phpStr1/#ltrim","text":"The PHP ltrim() function removes leading whitespace from a string. <?php echo ltrim ( \" Hello world!\" ); // outputs \"Hello world!\" ?>","title":"ltrim()"},{"location":"PR/phpStr1/#rtrim","text":"The PHP rtrim() function removes trailing whitespace from a string. <?php echo rtrim ( \"Hello world! \" ); // outputs \"Hello world!\" ?>","title":"rtrim()"},{"location":"PR/phpStr1/#trim","text":"The PHP trim() function removes leading and trailing whitespace from a string. <?php echo trim ( \" Hello world! \" ); // outputs \"Hello world!\" ?>","title":"trim()"},{"location":"PR/phpStr1/#formatting-to-csv","text":"","title":"Formatting to CSV"},{"location":"PR/phpStr1/#fgetcsv","text":"The PHP str_getcsv() function parses a CSV string into an array. Parsing Comma-Separated Data. You have data in comma-separated values (CSV) format\u2014for example, a file exported from Excel or a database\u2014and you want to extract the records and fields into a format you can manipulate in PHP. If the CSV data is in a file (or available via a URL), open the file with fopen() and read in the data with fgetcsv(). <?php //Reading CSV data from a file $fp = fopen ( $filename , 'r' ) or die ( \"can't open file\" ); print \"<table> \\n \" ; while ( $csv_line = fgetcsv ( $fp )) { print '<tr>' ; for ( $i = 0 , $j = count ( $csv_line ); $i < $j ; $i ++ ) { print '<td>' . htmlentities ( $csv_line [ $i ]) . '</td>' ; } print \"</tr> \\n \" ; } print \"</table> \\n \" ; fclose ( $fp ) or die ( \"can't close file\" ); ?> By default, fgetcsv() reads in an entire line of data. If your average line length is more than 8,192 bytes, your program may run faster if you specify an explicit line length instead of letting PHP figure it out. Do this by providing a second argument to fgetcsv() that is a value larger than the maximum length of a line in your CSV file. (Don\u2019t forget to count the end-of-line whitespace.) If you pass a line length of 0, PHP will use the default behavior. You can pass fgetcsv() an optional third argument, a delimiter to use instead of a comma (,). However, using a different delimiter somewhat defeats the purpose of CSV as an easy way to exchange tabular data. Don\u2019t be tempted to bypass fgetcsv() and just read a line in and explode() on the commas. CSV is more complicated than that so that it can deal with field values that have, for example, literal commas in them that should not be treated as field delimiters. Using fgetcsv() protects you and your code from subtle errors.","title":"fgetcsv()"},{"location":"PR/phpStr1/#str_getcsv","text":"The PHP str_getcsv() function parses a CSV string into an array. Parsing Comma-Separated Data. Use str_getcsv() only when you have the CSV already as a string in your program. <?php $string = 'PHP,Java,Python,Kotlin,Swift' ; $data = str_getcsv ( $string ); var_dump ( $data ); ?>","title":"str_getcsv()"},{"location":"PR/phpStr1/#fputcsv","text":"The PHP fputcsv() function converts an array into a CSV string and generating Comma-Separated Data. You want to format data as comma-separated values (CSV) so that it can be imported by a spreadsheet or database. <?php $sales = array ( array ( 'Northeast' , '2005-01-01' , '2005-02-01' , 12.54 ), array ( 'Northwest' , '2005-01-01' , '2005-02-01' , 546.33 ), array ( 'Southeast' , '2005-01-01' , '2005-02-01' , 93.26 ), array ( 'Southwest' , '2005-01-01' , '2005-02-01' , 945.21 ), array ( 'All Regions' , '--' , '--' , 1597.34 ) ); $filename = './sales.csv' ; $fh = fopen ( $filename , 'w' ) or die ( \"Can't open $filename \" ); foreach ( $sales as $sales_line ) { if ( fputcsv ( $fh , $sales_line ) === false ) { die ( \"Can't write CSV line\" ); } } fclose ( $fh ) or die ( \"Can't close $filename \" ); ?> To print the CSV-formatted data instead of writing it to a file, use the special output stream php://output . <?php $sales = array ( array ( 'Northeast' , '2005-01-01' , '2005-02-01' , 12.54 ), array ( 'Northwest' , '2005-01-01' , '2005-02-01' , 546.33 ), array ( 'Southeast' , '2005-01-01' , '2005-02-01' , 93.26 ), array ( 'Southwest' , '2005-01-01' , '2005-02-01' , 945.21 ), array ( 'All Regions' , '--' , '--' , 1597.34 ) ); $fh = fopen ( 'php://output' , 'w' ); foreach ( $sales as $sales_line ) { if ( fputcsv ( $fh , $sales_line ) === false ) { die ( \"Can't write CSV line\" ); } } fclose ( $fh ); ?> To put the CSV-formatted data into a string instead of printing it or writing it to a file. <?php $sales = array ( array ( 'Northeast' , '2005-01-01' , '2005-02-01' , 12.54 ), array ( 'Northwest' , '2005-01-01' , '2005-02-01' , 546.33 ), array ( 'Southeast' , '2005-01-01' , '2005-02-01' , 93.26 ), array ( 'Southwest' , '2005-01-01' , '2005-02-01' , 945.21 ), array ( 'All Regions' , '--' , '--' , 1597.34 ) ); ob_start (); $fh = fopen ( 'php://output' , 'w' ) or die ( \"Can't open php://output\" ); foreach ( $sales as $sales_line ) { if ( fputcsv ( $fh , $sales_line ) === false ) { die ( \"Can't write CSV line\" ); } } fclose ( $fh ) or die ( \"Can't close php://output\" ); $output = ob_get_contents (); ob_end_clean (); ?>","title":"fputcsv()"},{"location":"PR/phpStr1/#wrapping-text-at-a-certain-line-length","text":"When you need to wrap lines in a string. For example, you want to display text by using the pre tags but have it stay within a regularly sized browser window.","title":"Wrapping Text at a Certain Line Length"},{"location":"PR/phpStr1/#wordwrap","text":"<?php $s = \"Four score and seven years ago our fathers brought forth on this continent \u21b5 a new nation, conceived in liberty and dedicated to the proposition \u21b5 that all men are created equal.\" ; print \"<pre> \\n \" . wordwrap ( $s ) . \" \\n </pre>\" ; ?> <pre> Four score and seven years ago our fathers brought forth on this continent a new nation, conceived in liberty and dedicated to the proposition that all men are created equal. </pre> By default, wordwrap() wraps text at 75 characters per line. An optional second argu\u2010 ment specifies a different line length: <?php print wordwrap ( $s , 50 ); ?> Four score and seven years ago our fathers brought forth on this continent a new nation, conceived in liberty and dedicated to the proposition that all men are created equal. Other characters besides \\n can be used for line breaks. For double spacing, use \"\\n\\n\": <?php print wordwrap ( $s , 50 , \" \\n\\n \" ); ?> This prints: Four score and seven years ago our fathers brought forth on this continent a new nation, conceived in liberty and dedicated to the proposition that all men are created equal. There is an optional fourth argument to wordwrap() that controls the treatment of words that are longer than the specified line length. If this argument is 1, these words are wrapped. Otherwise, they span past the specified line length: <?php print wordwrap ( 'jabberwocky' , 5 ) . \" \\n \" ; print wordwrap ( 'jabberwocky' , 5 , \" \\n \" , 1 ); ?> This prints: jabberwocky jabbe rwock y","title":"wordwrap()"},{"location":"PR/phpStr1/#all-string-functions","text":"The PHP string functions are part of the PHP core. No installation is required to use these functions. For more information, see PHP String Functions Function Description addcslashes() Returns a string with backslashes in front of the specified characters addslashes() Returns a string with backslashes in front of predefined characters bin2hex() Converts a string of ASCII characters to hexadecimal values chop() Removes whitespace or other characters from the right end of a string chr() Returns a character from a specified ASCII value chunk_split() Splits a string into a series of smaller parts convert_cyr_string() Converts a string from one Cyrillic character-set to another convert_uudecode() Decodes a uuencoded string convert_uuencode() Encodes a string using the uuencode algorithm count_chars() Returns information about characters used in a string crc32() Calculates a 32-bit CRC for a string crypt() One-way string hashing echo() Outputs one or more strings explode() Breaks a string into an array fprintf() Writes a formatted string to a specified output stream get_html_translation_table() Returns the translation table used by htmlspecialchars() and htmlentities() hebrev() Converts Hebrew text to visual text hebrevc() Converts Hebrew text to visual text and new lines (\\n) into hex2bin() Converts a string of hexadecimal values to ASCII characters html_entity_decode() Converts HTML entities to characters htmlentities() Converts characters to HTML entities htmlspecialchars_decode() Converts some predefined HTML entities to characters htmlspecialchars() Converts some predefined characters to HTML entities implode() Returns a string from the elements of an array join() Alias of implode() lcfirst() Converts the first character of a string to lowercase levenshtein() Returns the Levenshtein distance between two strings localeconv() Returns locale numeric and monetary formatting information ltrim() Removes whitespace or other characters from the left side of a string md5() Calculates the MD5 hash of a string md5_file() Calculates the MD5 hash of a file metaphone() Calculates the metaphone key of a string money_format() Returns a string formatted as a currency string nl_langinfo() Returns specific local information nl2br() Inserts HTML line breaks in front of each newline in a string number_format() Formats a number with grouped thousands ord() Returns the ASCII value of the first character of a string parse_str() Parses a query string into variables print() Outputs one or more strings printf() Outputs a formatted string quoted_printable_decode() Converts a quoted-printable string to an 8-bit string quoted_printable_encode() Converts an 8-bit string to a quoted printable string quotemeta() Quotes meta characters rtrim() Removes whitespace or other characters from the right side of a string setlocale() Sets locale information sha1() Calculates the SHA-1 hash of a string sha1_file() Calculates the SHA-1 hash of a file similar_text() Calculates the similarity between two strings soundex() Calculates the soundex key of a string sprintf() Writes a formatted string to a variable sscanf() Parses input from a string according to a format str_getcsv() Parses a CSV string into an array str_ireplace() Replaces some characters in a string (case-insensitive) str_pad() Pads a string to a new length str_repeat() Repeats a string a specified number of times str_replace() Replaces some characters in a string (case-sensitive) str_rot13() Performs the ROT13 encoding on a string str_shuffle() Randomly shuffles all characters in a string str_split() Splits a string into an array str_word_count() Count the number of words in a string strcasecmp() Compares two strings (case-insensitive) strchr() Finds the first occurrence of a string inside another string (alias of strstr()) strcmp() Compares two strings (case-sensitive) strcoll() Compares two strings (locale based string comparison) strcspn() Returns the number of characters found in a string before any part of some specified characters are found strip_tags() Strips HTML and PHP tags from a string stripcslashes() Unquotes a string quoted with addcslashes() stripslashes() Unquotes a string quoted with addslashes() stripos() Returns the position of the first occurrence of a string inside another string (case-insensitive) stristr() Finds the first occurrence of a string inside another string (case-insensitive) strlen() Returns the length of a string strnatcasecmp() Compares two strings using a \"natural order\" algorithm (case-insensitive) strnatcmp() Compares two strings using a \"natural order\" algorithm (case-sensitive) strncasecmp() String comparison of the first n characters (case-insensitive) strncmp() String comparison of the first n characters (case-sensitive) strpbrk() Searches a string for any of a set of characters strpos() Returns the position of the first occurrence of a string inside another string (case-sensitive) strrchr() Finds the last occurrence of a string inside another string strrev() Reverses a string strripos() Finds the position of the last occurrence of a string inside another string (case-insensitive) strrpos() Finds the position of the last occurrence of a string inside another string (case-sensitive) strspn() Returns the number of characters found in a string that contains only characters from a specified charlist strstr() Finds the first occurrence of a string inside another string (case-sensitive) strtok() Splits a string into smaller strings strtolower() Converts a string to lowercase letters strtoupper() Converts a string to uppercase letters strtr() Translates certain characters in a string substr() Returns a part of a string substr_compare() Compares two strings from a specified start position (binary safe and optionally case-sensitive) substr_count() Counts the number of times a substring occurs in a string substr_replace() Replaces a part of a string with another string trim() Removes whitespace or other characters from both sides of a string ucfirst() Converts the first character of a string to uppercase ucwords() Converts the first character of each word in a string to uppercase vfprintf() Writes a formatted string to a specified output stream vprintf() Outputs a formatted string vsprintf() Writes a formatted string to a variable wordwrap() Wraps a string to a given number of characters","title":"All String Functions"},{"location":"PR/phpSuperGlobals/","text":"Superglobals were introduced in PHP 4.1.0, and are built-in variables that are always available in all scopes. The PHP superglobal variables are: $GLOBALS $_SERVER $_REQUEST $_POST $_GET $_FILES $_ENV $_COOKIE $_SESSION $GLOBALS $GLOBALS is a PHP super global variable which is used to access global variables from anywhere in the PHP script (also from within functions or methods). PHP stores all global variables in an array called $GLOBALS[index]. The index holds the name of the variable. <?php $x = 75 ; $y = 25 ; function addition () { $GLOBALS [ 'z' ] = $GLOBALS [ 'x' ] + $GLOBALS [ 'y' ]; } addition (); echo $z ; ?> $_SERVER $_SERVER is a PHP super global variable which holds information about headers, paths, and script locations. <?php echo $_SERVER [ 'PHP_SELF' ]; echo \"<br>\" ; echo $_SERVER [ 'SERVER_NAME' ]; echo \"<br>\" ; echo $_SERVER [ 'HTTP_HOST' ]; echo \"<br>\" ; echo $_SERVER [ 'HTTP_REFERER' ]; echo \"<br>\" ; echo $_SERVER [ 'HTTP_USER_AGENT' ]; echo \"<br>\" ; echo $_SERVER [ 'SCRIPT_NAME' ]; ?> The following table lists the most important elements that can go inside $_SERVER. Element Description $_SERVER['PHP_SELF'] Returns the filename of the currently executing script $_SERVER['GATEWAY_INTERFACE'] Returns the version of the Common Gateway Interface (CGI) the server is using $_SERVER['SERVER_ADDR'] Returns the IP address of the host server $_SERVER['SERVER_NAME'] Returns the name of the host server (such as www.w3schools.com) $_SERVER['SERVER_SOFTWARE'] Returns the server identification string (such as Apache/2.2.24) $_SERVER['SERVER_PROTOCOL'] Returns the name and revision of the information protocol (such as HTTP/1.1) $_SERVER['REQUEST_METHOD'] Returns the request method used to access the page (such as POST) $_SERVER['REQUEST_TIME'] Returns the timestamp of the start of the request (such as 1377687496) $_SERVER['QUERY_STRING'] Returns the query string if the page is accessed via a query string $_SERVER['HTTP_ACCEPT'] Returns the Accept header from the current request $_SERVER['HTTP_ACCEPT_CHARSET'] Returns the Accept_Charset header from the current request (such as utf-8,ISO-8859-1) $_SERVER['HTTP_HOST'] Returns the Host header from the current request $_SERVER['HTTP_REFERER'] Returns the complete URL of the current page (not reliable because not all user-agents support it) $_SERVER['HTTPS'] Is the script queried through a secure HTTP protocol $_SERVER['REMOTE_ADDR'] Returns the IP address from where the user is viewing the current page $_SERVER['REMOTE_HOST'] Returns the Host name from where the user is viewing the current page $_SERVER['REMOTE_PORT'] Returns the port being used on the user's machine to communicate with the web server $_SERVER['SCRIPT_FILENAME'] Returns the absolute pathname of the currently executing script $_SERVER['SERVER_ADMIN'] Returns the value given to the SERVER_ADMIN directive in the web server $_SERVER['SERVER_PORT'] Returns the port on the server machine being used by the web server for communication (such as 80) $_SERVER['SERVER_SIGNATURE'] Returns the server version and virtual host name which are added to server-generated pages $_SERVER['PATH_TRANSLATED'] Returns the file system based path to the current script $_SERVER['SCRIPT_NAME'] Returns the path of the current script $_SERVER['SCRIPT_URI'] Returns the URI of the current page $_REQUEST PHP $_REQUEST is a PHP super global variable which is used to collect data after submitting an HTML form. < html > < body > < form method = \"post\" action = \"<?php echo $_SERVER['PHP_SELF'];?>\" > Name: < input type = \"text\" name = \"fname\" > < input type = \"submit\" > </ form > <?php if ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") { // collect value of input field $name = $_REQUEST['fname']; if (empty($name)) { echo \"Name is empty\"; } else { echo $name; } } ?> </ body > </ html > $_POST PHP $_POST is a PHP super global variable which is used to collect form data after submitting an HTML form with method=\"post\". $_POST is also widely used to pass variables. < html > < body > < form method = \"post\" action = \"<?php echo $_SERVER['PHP_SELF'];?>\" > Name: < input type = \"text\" name = \"fname\" > < input type = \"submit\" > </ form > <?php if ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") { // collect value of input field $name = $_POST['fname']; if (empty($name)) { echo \"Name is empty\"; } else { echo $name; } } ?> </ body > </ html > $_GET PHP $_GET is a PHP super global variable which is used to collect form data after submitting an HTML form with method=\"get\". < html > < body > <?php echo \"Study \" . $_GET['subject'] . \" at \" . $_GET['web']; ?> </ body > </ html >","title":"Globals"},{"location":"PR/phpSuperGlobals/#globals","text":"$GLOBALS is a PHP super global variable which is used to access global variables from anywhere in the PHP script (also from within functions or methods). PHP stores all global variables in an array called $GLOBALS[index]. The index holds the name of the variable. <?php $x = 75 ; $y = 25 ; function addition () { $GLOBALS [ 'z' ] = $GLOBALS [ 'x' ] + $GLOBALS [ 'y' ]; } addition (); echo $z ; ?>","title":"$GLOBALS"},{"location":"PR/phpSuperGlobals/#_server","text":"$_SERVER is a PHP super global variable which holds information about headers, paths, and script locations. <?php echo $_SERVER [ 'PHP_SELF' ]; echo \"<br>\" ; echo $_SERVER [ 'SERVER_NAME' ]; echo \"<br>\" ; echo $_SERVER [ 'HTTP_HOST' ]; echo \"<br>\" ; echo $_SERVER [ 'HTTP_REFERER' ]; echo \"<br>\" ; echo $_SERVER [ 'HTTP_USER_AGENT' ]; echo \"<br>\" ; echo $_SERVER [ 'SCRIPT_NAME' ]; ?> The following table lists the most important elements that can go inside $_SERVER. Element Description $_SERVER['PHP_SELF'] Returns the filename of the currently executing script $_SERVER['GATEWAY_INTERFACE'] Returns the version of the Common Gateway Interface (CGI) the server is using $_SERVER['SERVER_ADDR'] Returns the IP address of the host server $_SERVER['SERVER_NAME'] Returns the name of the host server (such as www.w3schools.com) $_SERVER['SERVER_SOFTWARE'] Returns the server identification string (such as Apache/2.2.24) $_SERVER['SERVER_PROTOCOL'] Returns the name and revision of the information protocol (such as HTTP/1.1) $_SERVER['REQUEST_METHOD'] Returns the request method used to access the page (such as POST) $_SERVER['REQUEST_TIME'] Returns the timestamp of the start of the request (such as 1377687496) $_SERVER['QUERY_STRING'] Returns the query string if the page is accessed via a query string $_SERVER['HTTP_ACCEPT'] Returns the Accept header from the current request $_SERVER['HTTP_ACCEPT_CHARSET'] Returns the Accept_Charset header from the current request (such as utf-8,ISO-8859-1) $_SERVER['HTTP_HOST'] Returns the Host header from the current request $_SERVER['HTTP_REFERER'] Returns the complete URL of the current page (not reliable because not all user-agents support it) $_SERVER['HTTPS'] Is the script queried through a secure HTTP protocol $_SERVER['REMOTE_ADDR'] Returns the IP address from where the user is viewing the current page $_SERVER['REMOTE_HOST'] Returns the Host name from where the user is viewing the current page $_SERVER['REMOTE_PORT'] Returns the port being used on the user's machine to communicate with the web server $_SERVER['SCRIPT_FILENAME'] Returns the absolute pathname of the currently executing script $_SERVER['SERVER_ADMIN'] Returns the value given to the SERVER_ADMIN directive in the web server $_SERVER['SERVER_PORT'] Returns the port on the server machine being used by the web server for communication (such as 80) $_SERVER['SERVER_SIGNATURE'] Returns the server version and virtual host name which are added to server-generated pages $_SERVER['PATH_TRANSLATED'] Returns the file system based path to the current script $_SERVER['SCRIPT_NAME'] Returns the path of the current script $_SERVER['SCRIPT_URI'] Returns the URI of the current page","title":"$_SERVER"},{"location":"PR/phpSuperGlobals/#_request","text":"PHP $_REQUEST is a PHP super global variable which is used to collect data after submitting an HTML form. < html > < body > < form method = \"post\" action = \"<?php echo $_SERVER['PHP_SELF'];?>\" > Name: < input type = \"text\" name = \"fname\" > < input type = \"submit\" > </ form > <?php if ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") { // collect value of input field $name = $_REQUEST['fname']; if (empty($name)) { echo \"Name is empty\"; } else { echo $name; } } ?> </ body > </ html >","title":"$_REQUEST"},{"location":"PR/phpSuperGlobals/#_post","text":"PHP $_POST is a PHP super global variable which is used to collect form data after submitting an HTML form with method=\"post\". $_POST is also widely used to pass variables. < html > < body > < form method = \"post\" action = \"<?php echo $_SERVER['PHP_SELF'];?>\" > Name: < input type = \"text\" name = \"fname\" > < input type = \"submit\" > </ form > <?php if ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") { // collect value of input field $name = $_POST['fname']; if (empty($name)) { echo \"Name is empty\"; } else { echo $name; } } ?> </ body > </ html >","title":"$_POST"},{"location":"PR/phpSuperGlobals/#_get","text":"PHP $_GET is a PHP super global variable which is used to collect form data after submitting an HTML form with method=\"get\". < html > < body > <?php echo \"Study \" . $_GET['subject'] . \" at \" . $_GET['web']; ?> </ body > </ html >","title":"$_GET"},{"location":"PR/phpVar1/","text":"In PHP, we store all pieces of data -- numbers, characters, strings, everything -- as objects, and we refer to these objects using variables. As a simple case, we can assign a variable a value using the assignment operator, which is the \"equals\" sign. Creating (Declaring) PHP Variables In PHP, a variable starts with the $ sign, followed by the name of the variable: Remember that variables are case-sensitive! <?php $txt = \"Hello world!\" ; //No difference between \"\" and '' $x = 5 ; $y = 10.5 ; ?> After the execution of the statements above, the variable $txt will hold the value Hello world!, the variable $x will hold the value 5, and the variable $y will hold the value 10.5. Note: When you assign a text value to a variable, put quotes around the value. Note: Unlike other programming languages, PHP has no command for declaring a variable. It is created the moment you first assign a value to it. Rules for PHP variables: A variable starts with the $ sign, followed by the name of the variable A variable name must start with a letter or the underscore character A variable name cannot start with a number A variable name can only contain alpha-numeric characters and underscores (A-z, 0-9, and _ ) Variable names are case-sensitive ($age and $AGE are two different variables) Output Variables The PHP echo statement is often used to output data to the screen. The following example will show how to output text and a variable: <?php $txt = \"phpTutorial\" ; echo \"I love $txt !\" ; ?> Tools for understanding strange objects var_dump() function var_dump() displays structured information about one or more expressions that includes its type and value. Arrays and objects are explored recursively with values indented to show structure. <!DOCTYPE html> <html> <body> <?php $x = 5985 ; var_dump ( $x ); ?> </body> </html> int(5985) print_r() function print_r() displays the value of a variable, in a human-readable format. <?php $a = array ( \"red\" , \"green\" , \"blue\" ); print_r ( $a ); echo \"<br>\" ; $b = array ( \"Peter\" => \"35\" , \"Ben\" => \"37\" , \"Joe\" => \"43\" ); print_r ( $b ); ?> Array ( [0] => red [1] => green [2] => blue ) Array ( [Peter] => 35 [Ben] => 37 [Joe] => 43 ) NULL The null type is PHP's unit type, i.e. it has only one value: null. Undefined, and unset() variables will resolve to the value null. There is only one value of type null, and that is the case-insensitive constant null. <?php $var = NULL ; ?>","title":"Variables"},{"location":"PR/phpVar1/#creating-declaring-php-variables","text":"In PHP, a variable starts with the $ sign, followed by the name of the variable: Remember that variables are case-sensitive! <?php $txt = \"Hello world!\" ; //No difference between \"\" and '' $x = 5 ; $y = 10.5 ; ?> After the execution of the statements above, the variable $txt will hold the value Hello world!, the variable $x will hold the value 5, and the variable $y will hold the value 10.5. Note: When you assign a text value to a variable, put quotes around the value. Note: Unlike other programming languages, PHP has no command for declaring a variable. It is created the moment you first assign a value to it.","title":"Creating (Declaring) PHP Variables"},{"location":"PR/phpVar1/#rules-for-php-variables","text":"A variable starts with the $ sign, followed by the name of the variable A variable name must start with a letter or the underscore character A variable name cannot start with a number A variable name can only contain alpha-numeric characters and underscores (A-z, 0-9, and _ ) Variable names are case-sensitive ($age and $AGE are two different variables)","title":"Rules for PHP variables:"},{"location":"PR/phpVar1/#output-variables","text":"The PHP echo statement is often used to output data to the screen. The following example will show how to output text and a variable: <?php $txt = \"phpTutorial\" ; echo \"I love $txt !\" ; ?>","title":"Output Variables"},{"location":"PR/phpVar1/#tools-for-understanding-strange-objects","text":"","title":"Tools for understanding strange objects"},{"location":"PR/phpVar1/#var_dump-function","text":"var_dump() displays structured information about one or more expressions that includes its type and value. Arrays and objects are explored recursively with values indented to show structure. <!DOCTYPE html> <html> <body> <?php $x = 5985 ; var_dump ( $x ); ?> </body> </html> int(5985)","title":"var_dump() function"},{"location":"PR/phpVar1/#print_r-function","text":"print_r() displays the value of a variable, in a human-readable format. <?php $a = array ( \"red\" , \"green\" , \"blue\" ); print_r ( $a ); echo \"<br>\" ; $b = array ( \"Peter\" => \"35\" , \"Ben\" => \"37\" , \"Joe\" => \"43\" ); print_r ( $b ); ?> Array ( [0] => red [1] => green [2] => blue ) Array ( [Peter] => 35 [Ben] => 37 [Joe] => 43 )","title":"print_r() function"},{"location":"PR/phpVar1/#null","text":"The null type is PHP's unit type, i.e. it has only one value: null. Undefined, and unset() variables will resolve to the value null. There is only one value of type null, and that is the case-insensitive constant null. <?php $var = NULL ; ?>","title":"NULL"},{"location":"PR/phpVar2/","text":"Data Types PHP supports the following data types: String Integer Float Boolean Array Object NULL Resource PHP String A string is a sequence of characters, like \"Hello world!\". A string can be any text inside quotes. You can use single or double quotes. $x = \"Hello world!\"; PHP Integer An integer data type is a non-decimal number between -2,147,483,648 and 2,147,483,647. Integers can be specified in: decimal (base 10), hexadecimal (base 16), octal (base 8), or binary (base 2) notation <?php $a = 1234 ; // decimal number $a = 0123 ; // octal number (equivalent to 83 decimal) $a = 0 o123 ; // octal number (as of PHP 8.1.0) $a = 0x1A ; // hexadecimal number (equivalent to 26 decimal) $a = 0 b11111111 ; // binary number (equivalent to 255 decimal) $a = 1 _234_567 ; // decimal number (as of PHP 7.4.0) ?> PHP Float A float (floating point number) is a number with a decimal point or a number in exponential form. $x = 10.365; PHP Boolean A Boolean represents two possible states: TRUE or FALSE. $x = true; $y = false; PHP Array An array stores multiple values in one single variable. $x = array(\"Volvo\", \"BMW\", \"Toyota\"); PHP Object Classes and objects are the two main aspects of object-oriented programming. A class is a template for objects, and an object is an instance of a class. When the individual objects are created, they inherit all the properties and behaviors from the class, but each object will have different values for the properties. Let's assume we have a class named Car. A Car can have properties like model, color, etc. We can define variables like $model, $color, and so on, to hold the values of these properties. When the individual objects (Volvo, BMW, Toyota, etc.) are created, they inherit all the properties and behaviors from the class, but each object will have different values for the properties. If you create a __construct() function, PHP will automatically call this function when you create an object from a class. <?php class Car { public $color ; public $model ; public function __construct ( $color , $model ) { $this -> color = $color ; $this -> model = $model ; } public function message () { return \"My car is a \" . $this -> color . \" \" . $this -> model . \"!\" ; } } $myCar = new Car ( \"black\" , \"Volvo\" ); echo $myCar -> message (); echo \"<br>\" ; $myCar = new Car ( \"red\" , \"Toyota\" ); echo $myCar -> message (); ?> PHP NULL Value Null is a special data type which can have only one value: NULL. A variable of data type NULL is a variable that has no value assigned to it. Tip: If a variable is created without a value, it is automatically assigned a value of NULL. Variables can also be emptied by setting the value to NULL PHP Resource The special resource type is not an actual data type. It is the storing of a reference to functions and resources external to PHP. A common example of using the resource data type is a database call. Type Casting PHP does not require explicit type definition in variable declaration. In this case, the type of a variable is determined by the value it stores. That is to say, if a string is assigned to variable $var, then $var is of type string. If afterwards an int value is assigned to $var, it will be of type int. Type casting converts the value to a chosen type by writing the type within parentheses before the value to convert. The casts allowed are: (int) - cast to int (bool) - cast to bool (float) - cast to float (string) - cast to string (array) - cast to array (object) - cast to object (unset) - cast to NULL <?php $bool_false = false ; $int_val = ( int ) $bool_false ; var_dump ( $int_val ); //Output will be 0 $bool_true = true ; $int_val = ( int ) $bool_true ; var_dump ( $int_val ); //Output will be 1 ?> Casting literal strings and variables to binary strings: <?php $binary = ( binary ) $string ; $binary = b \"binary string\" ; ?> Instead of casting a variable to a string, it is also possible to enclose the variable in double quotes. <?php $foo = 10 ; // $foo is an integer $str = \" $foo \" ; // $str is a string $fst = ( string ) $foo ; // $fst is also a string // This prints out that \"they are the same\" if ( $fst === $str ) { echo \"they are the same\" ; } ?>","title":"Data Types and Casting"},{"location":"PR/phpVar2/#data-types","text":"PHP supports the following data types: String Integer Float Boolean Array Object NULL Resource","title":"Data Types"},{"location":"PR/phpVar2/#php-string","text":"A string is a sequence of characters, like \"Hello world!\". A string can be any text inside quotes. You can use single or double quotes. $x = \"Hello world!\";","title":"PHP String"},{"location":"PR/phpVar2/#php-integer","text":"An integer data type is a non-decimal number between -2,147,483,648 and 2,147,483,647. Integers can be specified in: decimal (base 10), hexadecimal (base 16), octal (base 8), or binary (base 2) notation <?php $a = 1234 ; // decimal number $a = 0123 ; // octal number (equivalent to 83 decimal) $a = 0 o123 ; // octal number (as of PHP 8.1.0) $a = 0x1A ; // hexadecimal number (equivalent to 26 decimal) $a = 0 b11111111 ; // binary number (equivalent to 255 decimal) $a = 1 _234_567 ; // decimal number (as of PHP 7.4.0) ?>","title":"PHP Integer"},{"location":"PR/phpVar2/#php-float","text":"A float (floating point number) is a number with a decimal point or a number in exponential form. $x = 10.365;","title":"PHP Float"},{"location":"PR/phpVar2/#php-boolean","text":"A Boolean represents two possible states: TRUE or FALSE. $x = true; $y = false;","title":"PHP Boolean"},{"location":"PR/phpVar2/#php-array","text":"An array stores multiple values in one single variable. $x = array(\"Volvo\", \"BMW\", \"Toyota\");","title":"PHP Array"},{"location":"PR/phpVar2/#php-object","text":"Classes and objects are the two main aspects of object-oriented programming. A class is a template for objects, and an object is an instance of a class. When the individual objects are created, they inherit all the properties and behaviors from the class, but each object will have different values for the properties. Let's assume we have a class named Car. A Car can have properties like model, color, etc. We can define variables like $model, $color, and so on, to hold the values of these properties. When the individual objects (Volvo, BMW, Toyota, etc.) are created, they inherit all the properties and behaviors from the class, but each object will have different values for the properties. If you create a __construct() function, PHP will automatically call this function when you create an object from a class. <?php class Car { public $color ; public $model ; public function __construct ( $color , $model ) { $this -> color = $color ; $this -> model = $model ; } public function message () { return \"My car is a \" . $this -> color . \" \" . $this -> model . \"!\" ; } } $myCar = new Car ( \"black\" , \"Volvo\" ); echo $myCar -> message (); echo \"<br>\" ; $myCar = new Car ( \"red\" , \"Toyota\" ); echo $myCar -> message (); ?>","title":"PHP Object"},{"location":"PR/phpVar2/#php-null-value","text":"Null is a special data type which can have only one value: NULL. A variable of data type NULL is a variable that has no value assigned to it. Tip: If a variable is created without a value, it is automatically assigned a value of NULL. Variables can also be emptied by setting the value to NULL","title":"PHP NULL Value"},{"location":"PR/phpVar2/#php-resource","text":"The special resource type is not an actual data type. It is the storing of a reference to functions and resources external to PHP. A common example of using the resource data type is a database call.","title":"PHP Resource"},{"location":"PR/phpVar2/#type-casting","text":"PHP does not require explicit type definition in variable declaration. In this case, the type of a variable is determined by the value it stores. That is to say, if a string is assigned to variable $var, then $var is of type string. If afterwards an int value is assigned to $var, it will be of type int. Type casting converts the value to a chosen type by writing the type within parentheses before the value to convert. The casts allowed are: (int) - cast to int (bool) - cast to bool (float) - cast to float (string) - cast to string (array) - cast to array (object) - cast to object (unset) - cast to NULL <?php $bool_false = false ; $int_val = ( int ) $bool_false ; var_dump ( $int_val ); //Output will be 0 $bool_true = true ; $int_val = ( int ) $bool_true ; var_dump ( $int_val ); //Output will be 1 ?> Casting literal strings and variables to binary strings: <?php $binary = ( binary ) $string ; $binary = b \"binary string\" ; ?> Instead of casting a variable to a string, it is also possible to enclose the variable in double quotes. <?php $foo = 10 ; // $foo is an integer $str = \" $foo \" ; // $str is a string $fst = ( string ) $foo ; // $fst is also a string // This prints out that \"they are the same\" if ( $fst === $str ) { echo \"they are the same\" ; } ?>","title":"Type Casting"},{"location":"PR/phpVar3/","text":"In PHP, variables can be declared anywhere in the script. The scope of a variable is the part of the script where the variable can be referenced/used. PHP has three different variable scopes: Local Global Static Local Scope A variable declared within a function has a LOCAL SCOPE and can only be accessed within that function: <?php function myTest () { $x = 5 ; // local scope echo \"<p>Variable x inside function is: $x </p>\" ; } myTest (); // using x outside the function will generate an error echo \"<p>Variable x outside function is: $x </p>\" ; ?> You can have local variables with the same name in different functions, because local variables are only recognized by the function in which they are declared. Global Scope A variable declared outside a function has a GLOBAL SCOPE and can only be accessed outside a function: <?php $x = 5 ; // global scope function myTest () { // using x inside this function will generate an error echo \"<p>Variable x inside function is: $x </p>\" ; } myTest (); echo \"<p>Variable x outside function is: $x </p>\" ; ?> PHP The global Keyword The global keyword is used to access a global variable from within a function. To do this, use the global keyword before the variables (inside the function): <?php $x = 5 ; $y = 10 ; function myTest () { global $x , $y ; $y = $x + $y ; } myTest (); echo $y ; // outputs 15 ?> PHP also stores all global variables in an array called $GLOBALS[index]. The index holds the name of the variable. This array is also accessible from within functions and can be used to update global variables directly. The example above can be rewritten like this: <?php $x = 5 ; $y = 10 ; function myTest () { $GLOBALS [ 'y' ] = $GLOBALS [ 'x' ] + $GLOBALS [ 'y' ]; } myTest (); echo $y ; // outputs 15 ?> PHP The static Keyword Normally, when a function is completed/executed, all of its variables are deleted. However, sometimes we want a local variable NOT to be deleted. We need it for a further job. To do this, use the static keyword when you first declare the variable: <?php function myTest () { static $x = 0 ; echo $x ; $x ++ ; } myTest (); myTest (); myTest (); ?> Then, each time the function is called, that variable will still have the information it contained from the last time the function was called. Note: The variable is still local to the function.","title":"Variable Scope"},{"location":"PR/phpVar3/#local-scope","text":"A variable declared within a function has a LOCAL SCOPE and can only be accessed within that function: <?php function myTest () { $x = 5 ; // local scope echo \"<p>Variable x inside function is: $x </p>\" ; } myTest (); // using x outside the function will generate an error echo \"<p>Variable x outside function is: $x </p>\" ; ?> You can have local variables with the same name in different functions, because local variables are only recognized by the function in which they are declared.","title":"Local Scope"},{"location":"PR/phpVar3/#global-scope","text":"A variable declared outside a function has a GLOBAL SCOPE and can only be accessed outside a function: <?php $x = 5 ; // global scope function myTest () { // using x inside this function will generate an error echo \"<p>Variable x inside function is: $x </p>\" ; } myTest (); echo \"<p>Variable x outside function is: $x </p>\" ; ?>","title":"Global Scope"},{"location":"PR/phpVar3/#php-the-global-keyword","text":"The global keyword is used to access a global variable from within a function. To do this, use the global keyword before the variables (inside the function): <?php $x = 5 ; $y = 10 ; function myTest () { global $x , $y ; $y = $x + $y ; } myTest (); echo $y ; // outputs 15 ?> PHP also stores all global variables in an array called $GLOBALS[index]. The index holds the name of the variable. This array is also accessible from within functions and can be used to update global variables directly. The example above can be rewritten like this: <?php $x = 5 ; $y = 10 ; function myTest () { $GLOBALS [ 'y' ] = $GLOBALS [ 'x' ] + $GLOBALS [ 'y' ]; } myTest (); echo $y ; // outputs 15 ?>","title":"PHP The global Keyword"},{"location":"PR/phpVar3/#php-the-static-keyword","text":"Normally, when a function is completed/executed, all of its variables are deleted. However, sometimes we want a local variable NOT to be deleted. We need it for a further job. To do this, use the static keyword when you first declare the variable: <?php function myTest () { static $x = 0 ; echo $x ; $x ++ ; } myTest (); myTest (); myTest (); ?> Then, each time the function is called, that variable will still have the information it contained from the last time the function was called. Note: The variable is still local to the function.","title":"PHP The static Keyword"},{"location":"PR/phpVar4/","text":"Variable Handling Functions The PHP variable handling functions are part of the PHP core. No installation is required to use these functions. Function Description boolval() Returns the boolean value of a variable debug_zval_dump() Dumps a string representation of an internal zend value to output doubleval() Alias of floatval() empty() Checks whether a variable is empty floatval() Returns the float value of a variable get_defined_vars() Returns all defined variables, as an array get_resource_type() Returns the type of a resource gettype() Returns the type of a variable intval() Returns the integer value of a variable is_array() Checks whether a variable is an array is_bool() Checks whether a variable is a boolean is_callable() Checks whether the contents of a variable can be called as a function is_countable() Checks whether the contents of a variable is a countable value is_double() Alias of is_float() is_float() Checks whether a variable is of type float is_int() Checks whether a variable is of type integer is_integer() Alias of is_int() is_iterable() Checks whether the contents of a variable is an iterable value is_long() Alias of is_int() is_null() Checks whether a variable is NULL is_numeric() Checks whether a variable is a number or a numeric string is_object() Checks whether a variable is an object is_real() Alias of is_float() is_resource() Checks whether a variable is a resource is_scalar() Checks whether a variable is a scalar is_string() Checks whether a variable is of type string isset() Checks whether a variable is set (declared and not NULL) print_r() Prints the information about a variable in a human-readable way serialize() Converts a storable representation of a value settype() Converts a variable to a specific type strval() Returns the string value of a variable unserialize() Converts serialized data back into actual data unset() Unsets a variable var_dump() Dumps information about one or more variables var_export() Returns structured information (valid PHP code) about a variable","title":"Variable Handling"},{"location":"PR/phpVar4/#variable-handling-functions","text":"The PHP variable handling functions are part of the PHP core. No installation is required to use these functions. Function Description boolval() Returns the boolean value of a variable debug_zval_dump() Dumps a string representation of an internal zend value to output doubleval() Alias of floatval() empty() Checks whether a variable is empty floatval() Returns the float value of a variable get_defined_vars() Returns all defined variables, as an array get_resource_type() Returns the type of a resource gettype() Returns the type of a variable intval() Returns the integer value of a variable is_array() Checks whether a variable is an array is_bool() Checks whether a variable is a boolean is_callable() Checks whether the contents of a variable can be called as a function is_countable() Checks whether the contents of a variable is a countable value is_double() Alias of is_float() is_float() Checks whether a variable is of type float is_int() Checks whether a variable is of type integer is_integer() Alias of is_int() is_iterable() Checks whether the contents of a variable is an iterable value is_long() Alias of is_int() is_null() Checks whether a variable is NULL is_numeric() Checks whether a variable is a number or a numeric string is_object() Checks whether a variable is an object is_real() Alias of is_float() is_resource() Checks whether a variable is a resource is_scalar() Checks whether a variable is a scalar is_string() Checks whether a variable is of type string isset() Checks whether a variable is set (declared and not NULL) print_r() Prints the information about a variable in a human-readable way serialize() Converts a storable representation of a value settype() Converts a variable to a specific type strval() Returns the string value of a variable unserialize() Converts serialized data back into actual data unset() Unsets a variable var_dump() Dumps information about one or more variables var_export() Returns structured information (valid PHP code) about a variable","title":"Variable Handling Functions"}]}