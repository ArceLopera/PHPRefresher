{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to PHP Refresher Everyone can forget about grammar and vocabulary. What is most important is to know where to look. The key to becoming a proficient PHP developer is to keep learning and practicing regularly. With a strong foundation in the basics, a commitment to ongoing learning, and a willingness to experiment with new tools and technologies, you can refresh your PHP skills and take your programming career to the next level. Basic Topics Advanced Topics Basics Data Structures Functions Classes This material is a work in progress, so your feedback is welcome. The best way to provide that feedback is to click here and create an issue in this GitHub repository .","title":"Home"},{"location":"#welcome-to-php-refresher","text":"Everyone can forget about grammar and vocabulary. What is most important is to know where to look. The key to becoming a proficient PHP developer is to keep learning and practicing regularly. With a strong foundation in the basics, a commitment to ongoing learning, and a willingness to experiment with new tools and technologies, you can refresh your PHP skills and take your programming career to the next level. Basic Topics Advanced Topics Basics Data Structures Functions Classes This material is a work in progress, so your feedback is welcome. The best way to provide that feedback is to click here and create an issue in this GitHub repository .","title":"Welcome to PHP Refresher"},{"location":"phpRefresh/","text":"PHP (recursive acronym for PHP: Hypertext Preprocessor) is a widely-used open source general-purpose scripting language that is especially suited for web development and can be embedded into HTML. A PHP script is executed on the server, and the plain HTML result is sent back to the browser. <!DOCTYPE html> <html> <head> <title>Example</title> </head> <body> <?php echo \"Hi, I'm a PHP script!\" ; ?> </body> </html> PHP is lossly typed (i.e. types are not necessarily enforced), dynamically, implicitly typed (i.e. you don\u2019t have to declare variables), case sensitive (i.e. var and VAR are two different variables) and object-oriented (i.e. everything is an object, like C# and Java). PHP is a language like C that uses curly braces to contain code statements within loops or conditionals. PHP statements end with a semicolon (;) just like C. There are not dot notation in PHP. Everything is function based. \"name\".split(); //doesnt work split(\"name\"); //works PHP Resources The website http://www.php.net is the official website for the PHP language, and Docs PHP Syntax A PHP script can be placed anywhere in the document. A PHP script starts with <?php and ends with ?> The default file extension for PHP files is \".php\". A PHP file normally contains HTML tags, and some PHP scripting code. PHP Case Sensitivity In PHP, keywords (e.g. if, else, while, echo, etc.), classes, functions, and user-defined functions are not case-sensitive. Warning: However; all variable names are case-sensitive! PHP Comments A comment in PHP code is a line that is not executed as a part of the program. Its only purpose is to be read by someone who is looking at the code. Syntax for single-line comments: <!DOCTYPE html> <html> <body> <?php // This is a single-line comment # This is also a single-line comment ?> </body> </html> Syntax for multiple-line comments: <!DOCTYPE html> <html> <body> <?php /* This is a multiple-lines comment block that spans over multiple lines */ ?> </body> </html>","title":"General"},{"location":"phpRefresh/#php-resources","text":"The website http://www.php.net is the official website for the PHP language, and Docs","title":"PHP Resources"},{"location":"phpRefresh/#php-syntax","text":"A PHP script can be placed anywhere in the document. A PHP script starts with <?php and ends with ?> The default file extension for PHP files is \".php\". A PHP file normally contains HTML tags, and some PHP scripting code.","title":"PHP Syntax"},{"location":"phpRefresh/#php-case-sensitivity","text":"In PHP, keywords (e.g. if, else, while, echo, etc.), classes, functions, and user-defined functions are not case-sensitive. Warning: However; all variable names are case-sensitive!","title":"PHP Case Sensitivity"},{"location":"phpRefresh/#php-comments","text":"A comment in PHP code is a line that is not executed as a part of the program. Its only purpose is to be read by someone who is looking at the code.","title":"PHP Comments"},{"location":"phpRefresh/#syntax-for-single-line-comments","text":"<!DOCTYPE html> <html> <body> <?php // This is a single-line comment # This is also a single-line comment ?> </body> </html>","title":"Syntax for single-line comments:"},{"location":"phpRefresh/#syntax-for-multiple-line-comments","text":"<!DOCTYPE html> <html> <body> <?php /* This is a multiple-lines comment block that spans over multiple lines */ ?> </body> </html>","title":"Syntax for multiple-line comments:"},{"location":"DS/phpArray/","text":"An array stores multiple values in one single variable. <?php $cars = array ( \"Volvo\" , \"BMW\" , \"Toyota\" ); echo \"I like \" . $cars [ 0 ] . \", \" . $cars [ 1 ] . \" and \" . $cars [ 2 ] . \".\" ; ?> Create an Array in PHP In PHP, the array() function is used to create an array: array(); In PHP, there are three types of arrays: Indexed arrays - Arrays with a numeric index Associative arrays - Arrays with named keys Multidimensional arrays - Arrays containing one or more arrays PHP Indexed Arrays There are two ways to create indexed arrays: The index can be assigned automatically (index always starts at 0), like this: $cars = array(\"Volvo\", \"BMW\", \"Toyota\"); or the index can be assigned manually: $cars[0] = \"Volvo\"; $cars[1] = \"BMW\"; $cars[2] = \"Toyota\"; <?php $cars = array ( \"Volvo\" , \"BMW\" , \"Toyota\" ); echo \"I like \" . $cars [ 0 ] . \", \" . $cars [ 1 ] . \" and \" . $cars [ 2 ] . \".\" ; ?> <?php $cars = array ( \"Volvo\" , \"BMW\" , \"Toyota\" ); $arrlength = count ( $cars ); for ( $x = 0 ; $x < $arrlength ; $x ++ ) { echo $cars [ $x ]; echo \"<br>\" ; } ?> PHP Associative Arrays Associative arrays are arrays with named keys. There are two ways to create an associative array: $age = array(\"Peter\"=>\"35\", \"Ben\"=>\"37\", \"Joe\"=>\"43\"); or: $age['Peter'] = \"35\"; $age['Ben'] = \"37\"; $age['Joe'] = \"43\"; <?php $age = array ( \"Peter\" => \"35\" , \"Ben\" => \"37\" , \"Joe\" => \"43\" ); echo \"Peter is \" . $age [ 'Peter' ] . \" years old.\" ; ?> <?php $age = array ( \"Peter\" => \"35\" , \"Ben\" => \"37\" , \"Joe\" => \"43\" ); foreach ( $age as $x => $x_value ) { echo \"Key=\" . $x . \", Value=\" . $x_value ; echo \"<br>\" ; } ?> PHP Multidimensional Arrays Multidimensional arrays are arrays containing one or more arrays. <?php $cars = array ( array ( \"Volvo\" , 22 , 18 ), array ( \"BMW\" , 15 , 13 ), array ( \"Saab\" , 5 , 2 ), array ( \"Land Rover\" , 17 , 15 ) ); echo $cars [ 0 ][ 0 ] . \": In stock: \" . $cars [ 0 ][ 1 ] . \", sold: \" . $cars [ 0 ][ 2 ] . \".<br>\" ; echo $cars [ 1 ][ 0 ] . \": In stock: \" . $cars [ 1 ][ 1 ] . \", sold: \" . $cars [ 1 ][ 2 ] . \".<br>\" ; echo $cars [ 2 ][ 0 ] . \": In stock: \" . $cars [ 2 ][ 1 ] . \", sold: \" . $cars [ 2 ][ 2 ] . \".<br>\" ; echo $cars [ 3 ][ 0 ] . \": In stock: \" . $cars [ 3 ][ 1 ] . \", sold: \" . $cars [ 3 ][ 2 ] . \".<br>\" ; ?> <?php for ( $row = 0 ; $row < 4 ; $row ++ ) { echo \"<p><b>Row number $row </b></p>\" ; echo \"<ul>\" ; for ( $col = 0 ; $col < 3 ; $col ++ ) { echo \"<li>\" . $cars [ $row ][ $col ] . \"</li>\" ; } echo \"</ul>\" ; } ?> The Array Functions The PHP array functions are used to perform operations on arrays. All functions at the reference . The count() Function The count() function is used to return the length (the number of elements) of an array. <?php $cars = array ( \"Volvo\" , \"BMW\" , \"Toyota\" ); echo count ( $cars ); ?> Sorting Arrays sort() - sort arrays in ascending order rsort() - sort arrays in descending order asort() - sort associative arrays in ascending order, according to the value ksort() - sort associative arrays in ascending order, according to the key arsort() - sort associative arrays in descending order, according to the value krsort() - sort associative arrays in descending order, according to the key sort() The sort() function sorts an array alphabetically. <?php $cars = array ( \"Volvo\" , \"BMW\" , \"Toyota\" ); sort ( $cars ); echo $cars [ 0 ]; ?> rsort() The rsort() function sorts an array in descending order. <?php $cars = array ( \"Volvo\" , \"BMW\" , \"Toyota\" ); rsort ( $cars ); echo $cars [ 0 ]; ?> asort() The asort() function sorts an associative array in ascending order, according to the value. <?php $age = array ( \"Peter\" => \"35\" , \"Ben\" => \"37\" , \"Joe\" => \"43\" ); asort ( $age ); foreach ( $age as $x => $x_value ) { echo \"Key=\" . $x . \", Value=\" . $x_value ; echo \"<br>\" ; } ?> ksort() The ksort() function sorts an associative array in ascending order, according to the key. <?php $age = array ( \"Peter\" => \"35\" , \"Ben\" => \"37\" , \"Joe\" => \"43\" ); ksort ( $age ); foreach ( $age as $x => $x_value ) { echo \"Key=\" . $x . \", Value=\" . $x_value ; echo \"<br>\" ; } ?> arsort() The arsort() function sorts an associative array in descending order, according to the value. <?php $age = array ( \"Peter\" => \"35\" , \"Ben\" => \"37\" , \"Joe\" => \"43\" ); arsort ( $age ); foreach ( $age as $x => $x_value ) { echo \"Key=\" . $x . \", Value=\" . $x_value ; echo \"<br>\" ; } ?> krsort() The krsort() function sorts an associative array in descending order, according to the key. <?php $age = array ( \"Peter\" => \"35\" , \"Ben\" => \"37\" , \"Joe\" => \"43\" ); krsort ( $age ); foreach ( $age as $x => $x_value ) { echo \"Key=\" . $x . \", Value=\" . $x_value ; echo \"<br>\" ; } ?>","title":"Array"},{"location":"DS/phpArray/#create-an-array-in-php","text":"In PHP, the array() function is used to create an array: array(); In PHP, there are three types of arrays: Indexed arrays - Arrays with a numeric index Associative arrays - Arrays with named keys Multidimensional arrays - Arrays containing one or more arrays","title":"Create an Array in PHP"},{"location":"DS/phpArray/#php-indexed-arrays","text":"There are two ways to create indexed arrays: The index can be assigned automatically (index always starts at 0), like this: $cars = array(\"Volvo\", \"BMW\", \"Toyota\"); or the index can be assigned manually: $cars[0] = \"Volvo\"; $cars[1] = \"BMW\"; $cars[2] = \"Toyota\"; <?php $cars = array ( \"Volvo\" , \"BMW\" , \"Toyota\" ); echo \"I like \" . $cars [ 0 ] . \", \" . $cars [ 1 ] . \" and \" . $cars [ 2 ] . \".\" ; ?> <?php $cars = array ( \"Volvo\" , \"BMW\" , \"Toyota\" ); $arrlength = count ( $cars ); for ( $x = 0 ; $x < $arrlength ; $x ++ ) { echo $cars [ $x ]; echo \"<br>\" ; } ?>","title":"PHP Indexed Arrays"},{"location":"DS/phpArray/#php-associative-arrays","text":"Associative arrays are arrays with named keys. There are two ways to create an associative array: $age = array(\"Peter\"=>\"35\", \"Ben\"=>\"37\", \"Joe\"=>\"43\"); or: $age['Peter'] = \"35\"; $age['Ben'] = \"37\"; $age['Joe'] = \"43\"; <?php $age = array ( \"Peter\" => \"35\" , \"Ben\" => \"37\" , \"Joe\" => \"43\" ); echo \"Peter is \" . $age [ 'Peter' ] . \" years old.\" ; ?> <?php $age = array ( \"Peter\" => \"35\" , \"Ben\" => \"37\" , \"Joe\" => \"43\" ); foreach ( $age as $x => $x_value ) { echo \"Key=\" . $x . \", Value=\" . $x_value ; echo \"<br>\" ; } ?>","title":"PHP Associative Arrays"},{"location":"DS/phpArray/#php-multidimensional-arrays","text":"Multidimensional arrays are arrays containing one or more arrays. <?php $cars = array ( array ( \"Volvo\" , 22 , 18 ), array ( \"BMW\" , 15 , 13 ), array ( \"Saab\" , 5 , 2 ), array ( \"Land Rover\" , 17 , 15 ) ); echo $cars [ 0 ][ 0 ] . \": In stock: \" . $cars [ 0 ][ 1 ] . \", sold: \" . $cars [ 0 ][ 2 ] . \".<br>\" ; echo $cars [ 1 ][ 0 ] . \": In stock: \" . $cars [ 1 ][ 1 ] . \", sold: \" . $cars [ 1 ][ 2 ] . \".<br>\" ; echo $cars [ 2 ][ 0 ] . \": In stock: \" . $cars [ 2 ][ 1 ] . \", sold: \" . $cars [ 2 ][ 2 ] . \".<br>\" ; echo $cars [ 3 ][ 0 ] . \": In stock: \" . $cars [ 3 ][ 1 ] . \", sold: \" . $cars [ 3 ][ 2 ] . \".<br>\" ; ?> <?php for ( $row = 0 ; $row < 4 ; $row ++ ) { echo \"<p><b>Row number $row </b></p>\" ; echo \"<ul>\" ; for ( $col = 0 ; $col < 3 ; $col ++ ) { echo \"<li>\" . $cars [ $row ][ $col ] . \"</li>\" ; } echo \"</ul>\" ; } ?>","title":"PHP Multidimensional Arrays"},{"location":"DS/phpArray/#the-array-functions","text":"The PHP array functions are used to perform operations on arrays. All functions at the reference .","title":"The Array Functions"},{"location":"DS/phpArray/#the-count-function","text":"The count() function is used to return the length (the number of elements) of an array. <?php $cars = array ( \"Volvo\" , \"BMW\" , \"Toyota\" ); echo count ( $cars ); ?>","title":"The count() Function"},{"location":"DS/phpArray/#sorting-arrays","text":"sort() - sort arrays in ascending order rsort() - sort arrays in descending order asort() - sort associative arrays in ascending order, according to the value ksort() - sort associative arrays in ascending order, according to the key arsort() - sort associative arrays in descending order, according to the value krsort() - sort associative arrays in descending order, according to the key","title":"Sorting Arrays"},{"location":"DS/phpArray/#sort","text":"The sort() function sorts an array alphabetically. <?php $cars = array ( \"Volvo\" , \"BMW\" , \"Toyota\" ); sort ( $cars ); echo $cars [ 0 ]; ?>","title":"sort()"},{"location":"DS/phpArray/#rsort","text":"The rsort() function sorts an array in descending order. <?php $cars = array ( \"Volvo\" , \"BMW\" , \"Toyota\" ); rsort ( $cars ); echo $cars [ 0 ]; ?>","title":"rsort()"},{"location":"DS/phpArray/#asort","text":"The asort() function sorts an associative array in ascending order, according to the value. <?php $age = array ( \"Peter\" => \"35\" , \"Ben\" => \"37\" , \"Joe\" => \"43\" ); asort ( $age ); foreach ( $age as $x => $x_value ) { echo \"Key=\" . $x . \", Value=\" . $x_value ; echo \"<br>\" ; } ?>","title":"asort()"},{"location":"DS/phpArray/#ksort","text":"The ksort() function sorts an associative array in ascending order, according to the key. <?php $age = array ( \"Peter\" => \"35\" , \"Ben\" => \"37\" , \"Joe\" => \"43\" ); ksort ( $age ); foreach ( $age as $x => $x_value ) { echo \"Key=\" . $x . \", Value=\" . $x_value ; echo \"<br>\" ; } ?>","title":"ksort()"},{"location":"DS/phpArray/#arsort","text":"The arsort() function sorts an associative array in descending order, according to the value. <?php $age = array ( \"Peter\" => \"35\" , \"Ben\" => \"37\" , \"Joe\" => \"43\" ); arsort ( $age ); foreach ( $age as $x => $x_value ) { echo \"Key=\" . $x . \", Value=\" . $x_value ; echo \"<br>\" ; } ?>","title":"arsort()"},{"location":"DS/phpArray/#krsort","text":"The krsort() function sorts an associative array in descending order, according to the key. <?php $age = array ( \"Peter\" => \"35\" , \"Ben\" => \"37\" , \"Joe\" => \"43\" ); krsort ( $age ); foreach ( $age as $x => $x_value ) { echo \"Key=\" . $x . \", Value=\" . $x_value ; echo \"<br>\" ; } ?>","title":"krsort()"},{"location":"Func/phpAll/","text":"PHP has over 1000 built-in functions that can be called directly, from within a script, to perform a specific task. Here is a list of all PHP functions, keywords and constants, along with examples. PHP Functions Functions Array Calendar Date Directory Error Exception Filesystem Filter FTP JSON Keywords Libxml Mail Math Misc MySQLi Network Output RegEx SimpleXML Stream String Var Handling XML Parser Zip Timezones","title":"All"},{"location":"Func/phpRegex/","text":"A regular expression is a sequence of characters that forms a search pattern. When you search for data in a text, you can use this search pattern to describe what you are searching for. Regular Expressions Functions Function Description preg_match() Returns 1 if the pattern was found in the string and 0 if not preg_match_all() Returns the number of times the pattern was found in the string, which may also be 0 preg_replace() Returns a new string where matched patterns have been replaced with another string preg_match() <?php $str = \"Visit arcelopera.github.io\" ; $pattern = \"/arce/i\" ; echo preg_match ( $pattern , $str ); // Outputs 1 ?> preg_match_all() <?php $str = \"The rain in SPAIN falls mainly on the plains.\" ; $pattern = \"/ain/i\" ; echo preg_match_all ( $pattern , $str ); // Outputs 4 ?> preg_replace() <?php $str = \"Visit Microsoft!\" ; $pattern = \"/microsoft/i\" ; echo preg_replace ( $pattern , \"ME\" , $str ); // Outputs \"Visit ME!\" ?> Regular Expression Modifiers Modifier Description i Performs a case-insensitive search m Performs a multiline search (patterns that search for the beginning or end of a string will match the beginning or end of each line) u Enables correct matching of UTF-8 encoded patterns Regular Expression Patterns Brackets are used to find a range of characters: Expression Description [abc] Find one character from the options between the brackets [^abc] Find any character NOT between the brackets [0-9] Find one character from the range 0 to 9 Metacharacters Metacharacters are characters with a special meaning. Metacharacter Description | Find a match for any one of the patterns separated by | as in: cat|dog|fish . Find just one instance of any character ^ Finds a match as the beginning of a string as in: ^Hello $ Finds a match at the end of the string as in: World$ \\d Find a digit \\s Find a whitespace character \\b Find a match at the beginning of a word like this: \\bWORD, or at the end of a word like this: WORD\\b \\uxxxx Find the Unicode character specified by the hexadecimal number xxxx Quantifiers Quantifiers define quantities Quantifier Description n+ Find one or more n n* Find zero or more n n? Find zero or one n n{x} Matches any string that contains a sequence of X n's n{x,} Matches any string that contains a sequence of at least X n's n{,y} Matches any string that contains a sequence of up to Y n's n{x,y} Matches any string that contains a sequence of X to Y n's If your expression needs to search for one of the special characters you can use a backslash ( \\ ) to escape them. For example, to search for one or more question marks you can use the following expression: $pattern = '/\\?+/'; Grouping You can use parentheses ( ) to apply quantifiers to entire patterns. They also can be used to select parts of the pattern to be used as a match. <?php $str = \"Apples and bananas.\" ; $pattern = \"/ba(na){2}/i\" ; echo preg_match ( $pattern , $str ); // Outputs 1 ?>","title":"Regex"},{"location":"Func/phpRegex/#regular-expressions-functions","text":"Function Description preg_match() Returns 1 if the pattern was found in the string and 0 if not preg_match_all() Returns the number of times the pattern was found in the string, which may also be 0 preg_replace() Returns a new string where matched patterns have been replaced with another string","title":"Regular Expressions Functions"},{"location":"Func/phpRegex/#preg_match","text":"<?php $str = \"Visit arcelopera.github.io\" ; $pattern = \"/arce/i\" ; echo preg_match ( $pattern , $str ); // Outputs 1 ?>","title":"preg_match()"},{"location":"Func/phpRegex/#preg_match_all","text":"<?php $str = \"The rain in SPAIN falls mainly on the plains.\" ; $pattern = \"/ain/i\" ; echo preg_match_all ( $pattern , $str ); // Outputs 4 ?>","title":"preg_match_all()"},{"location":"Func/phpRegex/#preg_replace","text":"<?php $str = \"Visit Microsoft!\" ; $pattern = \"/microsoft/i\" ; echo preg_replace ( $pattern , \"ME\" , $str ); // Outputs \"Visit ME!\" ?>","title":"preg_replace()"},{"location":"Func/phpRegex/#regular-expression-modifiers","text":"Modifier Description i Performs a case-insensitive search m Performs a multiline search (patterns that search for the beginning or end of a string will match the beginning or end of each line) u Enables correct matching of UTF-8 encoded patterns","title":"Regular Expression Modifiers"},{"location":"Func/phpRegex/#regular-expression-patterns","text":"Brackets are used to find a range of characters: Expression Description [abc] Find one character from the options between the brackets [^abc] Find any character NOT between the brackets [0-9] Find one character from the range 0 to 9","title":"Regular Expression Patterns"},{"location":"Func/phpRegex/#metacharacters","text":"Metacharacters are characters with a special meaning. Metacharacter Description | Find a match for any one of the patterns separated by | as in: cat|dog|fish . Find just one instance of any character ^ Finds a match as the beginning of a string as in: ^Hello $ Finds a match at the end of the string as in: World$ \\d Find a digit \\s Find a whitespace character \\b Find a match at the beginning of a word like this: \\bWORD, or at the end of a word like this: WORD\\b \\uxxxx Find the Unicode character specified by the hexadecimal number xxxx","title":"Metacharacters"},{"location":"Func/phpRegex/#quantifiers","text":"Quantifiers define quantities Quantifier Description n+ Find one or more n n* Find zero or more n n? Find zero or one n n{x} Matches any string that contains a sequence of X n's n{x,} Matches any string that contains a sequence of at least X n's n{,y} Matches any string that contains a sequence of up to Y n's n{x,y} Matches any string that contains a sequence of X to Y n's If your expression needs to search for one of the special characters you can use a backslash ( \\ ) to escape them. For example, to search for one or more question marks you can use the following expression: $pattern = '/\\?+/';","title":"Quantifiers"},{"location":"Func/phpRegex/#grouping","text":"You can use parentheses ( ) to apply quantifiers to entire patterns. They also can be used to select parts of the pattern to be used as a match. <?php $str = \"Apples and bananas.\" ; $pattern = \"/ba(na){2}/i\" ; echo preg_match ( $pattern , $str ); // Outputs 1 ?>","title":"Grouping"},{"location":"Func/phpUserFunc/","text":"A function is a block of statements that can be used repeatedly in a program. A function will not execute automatically when a page loads. A function will be executed by a call to the function. Create a User Defined Function <?php function writeMsg () { echo \"Hello world!\" ; } writeMsg (); // call the function ?> Arguments Information can be passed to functions through arguments. Arguments are specified after the function name, inside the parentheses. You can add as many arguments as you want, just separate them with a comma. <?php function familyName ( $fname ) { echo \" $fname Refsnes.<br>\" ; } familyName ( \"Jani\" ); familyName ( \"Hege\" ); familyName ( \"Stale\" ); familyName ( \"Kai Jim\" ); familyName ( \"Borge\" ); ?> <?php function familyName ( $fname , $year ) { echo \" $fname Refsnes. Born in $year <br>\" ; } familyName ( \"Hege\" , \"1975\" ); familyName ( \"Stale\" , \"1978\" ); familyName ( \"Kai Jim\" , \"1983\" ); ?> PHP is a Loosely Typed Language In the example above, notice that we did not have to tell PHP which data type the variable is. PHP automatically associates a data type to the variable, depending on its value. Since the data types are not set in a strict sense, you can do things like adding a string to an integer without causing an error. In PHP 7, type declarations were added. This gives us an option to specify the expected data type when declaring a function, and by adding the strict declaration, it will throw a \"Fatal Error\" if the data type mismatches. <?php function addNumbers ( int $a , int $b ) { return $a + $b ; } echo addNumbers ( 5 , \"5 days\" ); // since strict is NOT enabled \"5 days\" is changed to int(5), and it will return 10 ?> To specify strict we need to set declare(strict_types=1);. This must be on the very first line of the PHP file. <?php declare ( strict_types = 1 ); // strict requirement function addNumbers ( int $a , int $b ) { return $a + $b ; } echo addNumbers ( 5 , \"5 days\" ); // since strict is enabled and \"5 days\" is not an integer, an error will be thrown ?> Default Parameter Values <?php declare ( strict_types = 1 ); // strict requirement function setHeight ( int $minheight = 50 ) { echo \"The height is : $minheight <br>\" ; } setHeight ( 350 ); setHeight (); // will use the default value of 50 setHeight ( 135 ); setHeight ( 80 ); ?> Returning values To let a function return a value, use the return statement <?php function sum ( int $x , int $y ) { return $x + $y ; } echo sum ( 5 , 5 ); ?> PHP Return Type Declarations PHP 7 also supports Type Declarations for the return statement. Like with the type declaration for function arguments, by enabling the strict requirement, it will throw a \"Fatal Error\" on a type mismatch. To declare a type for the function return, add a colon ( : ) and the type right before the opening curly ( /{ )bracket when declaring the function. <?php declare ( strict_types = 1 ); // strict requirement function addNumbers ( float $a , float $b ) : float { return $a + $b ; } echo addNumbers ( 1.2 , 5.2 ); ?> <?php declare ( strict_types = 1 ); // strict requirement function addNumbers ( float $a , float $b ) : int { return ( int )( $a + $b ); } echo addNumbers ( 1.2 , 5.2 ); ?> Passing Arguments by Reference In PHP, arguments are usually passed by value, which means that a copy of the value is used in the function and the variable that was passed into the function cannot be changed. When a function argument is passed by reference, changes to the argument also change the variable that was passed in. To turn a function argument into a reference, the & operator is used <?php function add_five ( & $value ) { $value += 5 ; } $num = 2 ; add_five ( $num ); echo $num ; ?>","title":"User-Defined"},{"location":"Func/phpUserFunc/#create-a-user-defined-function","text":"<?php function writeMsg () { echo \"Hello world!\" ; } writeMsg (); // call the function ?>","title":"Create a User Defined Function"},{"location":"Func/phpUserFunc/#arguments","text":"Information can be passed to functions through arguments. Arguments are specified after the function name, inside the parentheses. You can add as many arguments as you want, just separate them with a comma. <?php function familyName ( $fname ) { echo \" $fname Refsnes.<br>\" ; } familyName ( \"Jani\" ); familyName ( \"Hege\" ); familyName ( \"Stale\" ); familyName ( \"Kai Jim\" ); familyName ( \"Borge\" ); ?> <?php function familyName ( $fname , $year ) { echo \" $fname Refsnes. Born in $year <br>\" ; } familyName ( \"Hege\" , \"1975\" ); familyName ( \"Stale\" , \"1978\" ); familyName ( \"Kai Jim\" , \"1983\" ); ?>","title":"Arguments"},{"location":"Func/phpUserFunc/#php-is-a-loosely-typed-language","text":"In the example above, notice that we did not have to tell PHP which data type the variable is. PHP automatically associates a data type to the variable, depending on its value. Since the data types are not set in a strict sense, you can do things like adding a string to an integer without causing an error. In PHP 7, type declarations were added. This gives us an option to specify the expected data type when declaring a function, and by adding the strict declaration, it will throw a \"Fatal Error\" if the data type mismatches. <?php function addNumbers ( int $a , int $b ) { return $a + $b ; } echo addNumbers ( 5 , \"5 days\" ); // since strict is NOT enabled \"5 days\" is changed to int(5), and it will return 10 ?> To specify strict we need to set declare(strict_types=1);. This must be on the very first line of the PHP file. <?php declare ( strict_types = 1 ); // strict requirement function addNumbers ( int $a , int $b ) { return $a + $b ; } echo addNumbers ( 5 , \"5 days\" ); // since strict is enabled and \"5 days\" is not an integer, an error will be thrown ?>","title":"PHP is a Loosely Typed Language"},{"location":"Func/phpUserFunc/#default-parameter-values","text":"<?php declare ( strict_types = 1 ); // strict requirement function setHeight ( int $minheight = 50 ) { echo \"The height is : $minheight <br>\" ; } setHeight ( 350 ); setHeight (); // will use the default value of 50 setHeight ( 135 ); setHeight ( 80 ); ?>","title":"Default Parameter Values"},{"location":"Func/phpUserFunc/#returning-values","text":"To let a function return a value, use the return statement <?php function sum ( int $x , int $y ) { return $x + $y ; } echo sum ( 5 , 5 ); ?>","title":"Returning values"},{"location":"Func/phpUserFunc/#php-return-type-declarations","text":"PHP 7 also supports Type Declarations for the return statement. Like with the type declaration for function arguments, by enabling the strict requirement, it will throw a \"Fatal Error\" on a type mismatch. To declare a type for the function return, add a colon ( : ) and the type right before the opening curly ( /{ )bracket when declaring the function. <?php declare ( strict_types = 1 ); // strict requirement function addNumbers ( float $a , float $b ) : float { return $a + $b ; } echo addNumbers ( 1.2 , 5.2 ); ?> <?php declare ( strict_types = 1 ); // strict requirement function addNumbers ( float $a , float $b ) : int { return ( int )( $a + $b ); } echo addNumbers ( 1.2 , 5.2 ); ?>","title":"PHP Return Type Declarations"},{"location":"Func/phpUserFunc/#passing-arguments-by-reference","text":"In PHP, arguments are usually passed by value, which means that a copy of the value is used in the function and the variable that was passed into the function cannot be changed. When a function argument is passed by reference, changes to the argument also change the variable that was passed in. To turn a function argument into a reference, the & operator is used <?php function add_five ( & $value ) { $value += 5 ; } $num = 2 ; add_five ( $num ); echo $num ; ?>","title":"Passing Arguments by Reference"},{"location":"PR/phpConst/","text":"A valid constant name starts with a letter or underscore (no $ sign before the constant name). Unlike variables, constants are automatically global across the entire script. Create a PHP Constant There are 2 ways to create a constant: 1. Using the define() function 2. Using the const keyword const vs. define() const are always case-sensitive define() has has a case-insensitive option. const cannot be created inside another block scope, like inside a function or inside an if statement. define can be created inside another block scope. Using the define() function. Syntax define(name, value, case-insensitive) Parameters: name: Specifies the name of the constant value: Specifies the value of the constant case-insensitive: Specifies whether the constant name should be case-insensitive. Default is false. Note: Defining case-insensitive constants was deprecated in PHP 7.3. PHP 8.0 accepts only false, the value true will produce a warning. <?php define ( \"GREETING\" , \"Hello World!\" ); // Create a constant with a case-sensitive name define ( \"GREETING\" , \"Welcome to W3Schools.com!\" , true ); // Create a constant with a case-insensitive name echo GREETING ; ?> PHP Constant Arrays In PHP7, you can create an Array constant using the define() function. <?php define ( \"cars\" , [ \"Alfa Romeo\" , \"BMW\" , \"Toyota\" ]); echo cars [ 0 ]; ?> PHP const Keyword You can also create a constant by using the const keyword. <?php const MYCAR = \"Volvo\" ; echo MYCAR ; ?>","title":"Constant"},{"location":"PR/phpConst/#create-a-php-constant","text":"There are 2 ways to create a constant: 1. Using the define() function 2. Using the const keyword","title":"Create a PHP Constant"},{"location":"PR/phpConst/#const-vs-define","text":"const are always case-sensitive define() has has a case-insensitive option. const cannot be created inside another block scope, like inside a function or inside an if statement. define can be created inside another block scope.","title":"const vs. define()"},{"location":"PR/phpConst/#using-the-define-function","text":"Syntax define(name, value, case-insensitive) Parameters: name: Specifies the name of the constant value: Specifies the value of the constant case-insensitive: Specifies whether the constant name should be case-insensitive. Default is false. Note: Defining case-insensitive constants was deprecated in PHP 7.3. PHP 8.0 accepts only false, the value true will produce a warning. <?php define ( \"GREETING\" , \"Hello World!\" ); // Create a constant with a case-sensitive name define ( \"GREETING\" , \"Welcome to W3Schools.com!\" , true ); // Create a constant with a case-insensitive name echo GREETING ; ?>","title":"Using the define() function."},{"location":"PR/phpConst/#php-constant-arrays","text":"In PHP7, you can create an Array constant using the define() function. <?php define ( \"cars\" , [ \"Alfa Romeo\" , \"BMW\" , \"Toyota\" ]); echo cars [ 0 ]; ?>","title":"PHP Constant Arrays"},{"location":"PR/phpConst/#php-const-keyword","text":"You can also create a constant by using the const keyword. <?php const MYCAR = \"Volvo\" ; echo MYCAR ; ?>","title":"PHP const Keyword"},{"location":"PR/phpIF/","text":"Conditional statements are used to perform different actions based on different conditions. PHP Conditional Statements In PHP we have the following conditional statements: if statement - executes some code if one condition is true if...else statement - executes some code if a condition is true and another code if that condition is false if...elseif...else statement - executes different codes for more than two conditions switch statement - selects one of many blocks of code to be executed if statement <?php $t = date ( \"H\" ); if ( $t < \"20\" ) { echo \"Have a good day!\" ; } ?> if...else statement <?php $t = date ( \"H\" ); if ( $t < \"20\" ) { echo \"Have a good day!\" ; } else { echo \"Have a good night!\" ; } ?> if...elseif...else statement <?php $t = date ( \"H\" ); if ( $t < \"10\" ) { echo \"Have a good morning!\" ; } elseif ( $t < \"20\" ) { echo \"Have a good day!\" ; } else { echo \"Have a good night!\" ; } ?> switch statement <?php $favcolor = \"red\" ; switch ( $favcolor ) { case \"red\" : echo \"Your favorite color is red!\" ; break ; case \"blue\" : echo \"Your favorite color is blue!\" ; break ; case \"green\" : echo \"Your favorite color is green!\" ; break ; default : echo \"Your favorite color is neither red, blue, nor green!\" ; } ?>","title":"Conditionals"},{"location":"PR/phpIF/#php-conditional-statements","text":"In PHP we have the following conditional statements: if statement - executes some code if one condition is true if...else statement - executes some code if a condition is true and another code if that condition is false if...elseif...else statement - executes different codes for more than two conditions switch statement - selects one of many blocks of code to be executed","title":"PHP Conditional Statements"},{"location":"PR/phpIF/#if-statement","text":"<?php $t = date ( \"H\" ); if ( $t < \"20\" ) { echo \"Have a good day!\" ; } ?>","title":"if statement"},{"location":"PR/phpIF/#ifelse-statement","text":"<?php $t = date ( \"H\" ); if ( $t < \"20\" ) { echo \"Have a good day!\" ; } else { echo \"Have a good night!\" ; } ?>","title":"if...else statement"},{"location":"PR/phpIF/#ifelseifelse-statement","text":"<?php $t = date ( \"H\" ); if ( $t < \"10\" ) { echo \"Have a good morning!\" ; } elseif ( $t < \"20\" ) { echo \"Have a good day!\" ; } else { echo \"Have a good night!\" ; } ?>","title":"if...elseif...else statement"},{"location":"PR/phpIF/#switch-statement","text":"<?php $favcolor = \"red\" ; switch ( $favcolor ) { case \"red\" : echo \"Your favorite color is red!\" ; break ; case \"blue\" : echo \"Your favorite color is blue!\" ; break ; case \"green\" : echo \"Your favorite color is green!\" ; break ; default : echo \"Your favorite color is neither red, blue, nor green!\" ; } ?>","title":"switch statement"},{"location":"PR/phpLoops/","text":"In PHP, we have the following loop types: while - loops through a block of code as long as the specified condition is true do...while - loops through a block of code once, and then repeats the loop as long as the specified condition is true for - loops through a block of code a specified number of times foreach - loops through a block of code for each element in an array To control further the flow of a loop, you can use the break and continue statements. while The while loop - Loops through a block of code as long as the specified condition is true. <?php $x = 1 ; while ( $x <= 5 ) { echo \"The number is: $x <br>\" ; $x ++ ; } ?> do...while The do...while loop - Loops through a block of code once, and then repeats the loop as long as the specified condition is true. In a do...while loop the condition is tested AFTER executing the statements within the loop. This means that the do...while loop will execute its statements at least once, even if the condition is false. See example below. <?php $x = 1 ; do { echo \"The number is: $x <br>\" ; $x ++ ; } while ( $x <= 5 ); ?> for The for loop - Loops through a block of code a specified number of times. <?php for ( $x = 0 ; $x <= 10 ; $x ++ ) { echo \"The number is: $x <br>\" ; } ?> foreach The foreach loop - Loops through a block of code for each element in an array. <?php $colors = array ( \"red\" , \"green\" , \"blue\" , \"yellow\" ); foreach ( $colors as $value ) { echo \" $value <br>\" ; } ?> <?php $age = array ( \"Peter\" => \"35\" , \"Ben\" => \"37\" , \"Joe\" => \"43\" ); foreach ( $age as $x => $val ) { echo \" $x = $val <br>\" ; } ?> Break and Continue PHP Break You have already seen the break statement used to \"jump out\" of a switch statement. The break statement can also be used to jump out of a loop. This example jumps out of the loop when x is equal to 4. <?php $x = 0 ; while ( $x < 10 ) { echo \"The number is: $x <br>\" ; $x ++ ; if ( $x == 4 ) { break ; } } ?> PHP Continue The continue statement breaks one iteration (in the loop), if a specified condition occurs, and continues with the next iteration in the loop. This example skips the value of 4. <?php for ( $x = 0 ; $x < 10 ; $x ++ ) { if ( $x == 4 ) { continue ; } echo \"The number is: $x <br>\" ; } ?>","title":"Loops"},{"location":"PR/phpLoops/#while","text":"The while loop - Loops through a block of code as long as the specified condition is true. <?php $x = 1 ; while ( $x <= 5 ) { echo \"The number is: $x <br>\" ; $x ++ ; } ?>","title":"while"},{"location":"PR/phpLoops/#dowhile","text":"The do...while loop - Loops through a block of code once, and then repeats the loop as long as the specified condition is true. In a do...while loop the condition is tested AFTER executing the statements within the loop. This means that the do...while loop will execute its statements at least once, even if the condition is false. See example below. <?php $x = 1 ; do { echo \"The number is: $x <br>\" ; $x ++ ; } while ( $x <= 5 ); ?>","title":"do...while"},{"location":"PR/phpLoops/#for","text":"The for loop - Loops through a block of code a specified number of times. <?php for ( $x = 0 ; $x <= 10 ; $x ++ ) { echo \"The number is: $x <br>\" ; } ?>","title":"for"},{"location":"PR/phpLoops/#foreach","text":"The foreach loop - Loops through a block of code for each element in an array. <?php $colors = array ( \"red\" , \"green\" , \"blue\" , \"yellow\" ); foreach ( $colors as $value ) { echo \" $value <br>\" ; } ?> <?php $age = array ( \"Peter\" => \"35\" , \"Ben\" => \"37\" , \"Joe\" => \"43\" ); foreach ( $age as $x => $val ) { echo \" $x = $val <br>\" ; } ?>","title":"foreach"},{"location":"PR/phpLoops/#break-and-continue","text":"","title":"Break and Continue"},{"location":"PR/phpLoops/#php-break","text":"You have already seen the break statement used to \"jump out\" of a switch statement. The break statement can also be used to jump out of a loop. This example jumps out of the loop when x is equal to 4. <?php $x = 0 ; while ( $x < 10 ) { echo \"The number is: $x <br>\" ; $x ++ ; if ( $x == 4 ) { break ; } } ?>","title":"PHP Break"},{"location":"PR/phpLoops/#php-continue","text":"The continue statement breaks one iteration (in the loop), if a specified condition occurs, and continues with the next iteration in the loop. This example skips the value of 4. <?php for ( $x = 0 ; $x < 10 ; $x ++ ) { if ( $x == 4 ) { continue ; } echo \"The number is: $x <br>\" ; } ?>","title":"PHP Continue"},{"location":"PR/phpMath1/","text":"PHP pi() Function The pi() function returns the value of PI. <?php echo ( pi ()); // returns 3.1415926535898 ?> PHP min() and max() Functions The min() and max() functions can be used to find the lowest or highest value in a list of arguments. <?php echo ( min ( 1 , 2 , 3 )); // returns 1 echo ( max ( 1 , 2 , 3 )); // returns 3 ?> PHP floor() and ceil() Functions The floor() and ceil() functions can be used to round a number down or up. <?php echo ( floor ( 3.7 )); // returns 3 echo ( ceil ( 3.1 )); // returns 4 ?> PHP abs() Function The abs() function returns the absolute value of a number. <?php echo ( abs ( - 3.7 )); // returns 3.7 ?> PHP sqrt() Function The sqrt() function returns the square root of a number. <?php echo ( sqrt ( 9 )); // returns 3 ?> PHP round() Function The round() function rounds a number to the nearest integer. <?php echo ( round ( 3.7 )); // returns 4 ?> PHP rand() Function The rand() function generates a random number. <?php echo ( rand ( 1 , 10 )); // returns a random number between 1 and 10 (inclusive) ?>","title":"Math"},{"location":"PR/phpMath1/#php-pi-function","text":"The pi() function returns the value of PI. <?php echo ( pi ()); // returns 3.1415926535898 ?>","title":"PHP pi() Function"},{"location":"PR/phpMath1/#php-min-and-max-functions","text":"The min() and max() functions can be used to find the lowest or highest value in a list of arguments. <?php echo ( min ( 1 , 2 , 3 )); // returns 1 echo ( max ( 1 , 2 , 3 )); // returns 3 ?>","title":"PHP min() and max() Functions"},{"location":"PR/phpMath1/#php-floor-and-ceil-functions","text":"The floor() and ceil() functions can be used to round a number down or up. <?php echo ( floor ( 3.7 )); // returns 3 echo ( ceil ( 3.1 )); // returns 4 ?>","title":"PHP floor() and ceil() Functions"},{"location":"PR/phpMath1/#php-abs-function","text":"The abs() function returns the absolute value of a number. <?php echo ( abs ( - 3.7 )); // returns 3.7 ?>","title":"PHP abs() Function"},{"location":"PR/phpMath1/#php-sqrt-function","text":"The sqrt() function returns the square root of a number. <?php echo ( sqrt ( 9 )); // returns 3 ?>","title":"PHP sqrt() Function"},{"location":"PR/phpMath1/#php-round-function","text":"The round() function rounds a number to the nearest integer. <?php echo ( round ( 3.7 )); // returns 4 ?>","title":"PHP round() Function"},{"location":"PR/phpMath1/#php-rand-function","text":"The rand() function generates a random number. <?php echo ( rand ( 1 , 10 )); // returns a random number between 1 and 10 (inclusive) ?>","title":"PHP rand() Function"},{"location":"PR/phpNum1/","text":"PHP Numbers One thing to notice about PHP is that it provides automatic data type conversion. So, if you assign an integer value to a variable, the type of that variable will automatically be an integer. Then, if you assign a string to the same variable, the type will change to a string. This automatic conversion can sometimes break your code. PHP Integers An integer data type is a non-decimal number between -2147483648 and 2147483647 in 32 bit systems, and between -9223372036854775808 and 9223372036854775807 in 64 bit systems. A value greater (or lower) than this, will be stored as float, because it exceeds the limit of an integer. Another important thing to know is that even if 4 * 2.5 is 10, the result is stored as float, because one of the operands is a float (2.5). Integers can be specified in three formats: decimal (10-based), hexadecimal (16-based - prefixed with 0x) or octal (8-based - prefixed with 0) PHP Integer Constants PHP has the following predefined constants for integers: PHP_INT_MAX - The largest integer supported PHP_INT_MIN - The smallest integer supported PHP_INT_SIZE - The size of an integer in bytes PHP Integer Functions PHP has the following functions to check if the type of a variable is integer: is_int() is_integer() - alias of is_int() is_long() - alias of is_int() PHP Floats The float data type can commonly store a value up to 1.7976931348623E+308 (platform dependent), and have a maximum precision of 14 digits. PHP Float Constants PHP has the following predefined constants for floats (from PHP 7.2): PHP_FLOAT_MAX - The largest representable floating point number PHP_FLOAT_MIN - The smallest representable positive floating point number PHP_FLOAT_DIG - The number of decimal digits that can be rounded into a float and back without precision loss PHP_FLOAT_EPSILON - The smallest representable positive number x, so that x + 1.0 != 1.0 PHP Float Functions PHP has the following functions to check if the type of a variable is float: is_float() is_double() - alias of is_float() PHP Infinity A numeric value that is larger than PHP_FLOAT_MAX is considered infinite. PHP has the following functions to check if a numeric value is finite or infinite: is_finite() is_infinite() <!DOCTYPE html> <html> <body> <?php // Check if a numeric value is finite or infinite $x = 1.9e411 ; var_dump ( $x ); ?> </body> </html> PHP NaN NaN stands for Not a Number. NaN is used for impossible mathematical operations. PHP has the following functions to check if a value is not a number: is_nan() <!DOCTYPE html> <html> <body> <?php // Invalid calculation will return a NaN value $x = acos ( 8 ); var_dump ( $x ); ?> </body> </html> PHP Numerical Strings The PHP is_numeric() function can be used to find whether a variable is numeric. The function returns true if the variable is a number or a numeric string, false otherwise. From PHP 7.0: The is_numeric() function will return FALSE for numeric strings in hexadecimal form (e.g. 0xf4c3b00c), as they are no longer considered as numeric strings. <!DOCTYPE html> <html> <body> <?php // Check if the variable is numeric $x = 5985 ; var_dump ( is_numeric ( $x )); echo \"<br>\" ; $x = \"5985\" ; var_dump ( is_numeric ( $x )); echo \"<br>\" ; $x = \"59.85\" + 100 ; var_dump ( is_numeric ( $x )); echo \"<br>\" ; $x = \"Hello\" ; var_dump ( is_numeric ( $x )); ?> </body> </html> PHP Casting to Integers Sometimes you need to cast a numerical value into another data type. The (int), (integer), or intval() function are often used to convert a value to an integer. <!DOCTYPE html> <html> <body> <?php // Cast float to int $x = 23465.768 ; $int_cast = ( int ) $x ; echo $int_cast ; echo \"<br>\" ; // Cast string to int $x = \"23465.768\" ; $int_cast = ( int ) $x ; echo $int_cast ; ?> </body> </html>","title":"Numerical"},{"location":"PR/phpNum1/#php-numbers","text":"One thing to notice about PHP is that it provides automatic data type conversion. So, if you assign an integer value to a variable, the type of that variable will automatically be an integer. Then, if you assign a string to the same variable, the type will change to a string. This automatic conversion can sometimes break your code.","title":"PHP Numbers"},{"location":"PR/phpNum1/#php-integers","text":"An integer data type is a non-decimal number between -2147483648 and 2147483647 in 32 bit systems, and between -9223372036854775808 and 9223372036854775807 in 64 bit systems. A value greater (or lower) than this, will be stored as float, because it exceeds the limit of an integer. Another important thing to know is that even if 4 * 2.5 is 10, the result is stored as float, because one of the operands is a float (2.5). Integers can be specified in three formats: decimal (10-based), hexadecimal (16-based - prefixed with 0x) or octal (8-based - prefixed with 0)","title":"PHP Integers"},{"location":"PR/phpNum1/#php-integer-constants","text":"PHP has the following predefined constants for integers: PHP_INT_MAX - The largest integer supported PHP_INT_MIN - The smallest integer supported PHP_INT_SIZE - The size of an integer in bytes","title":"PHP Integer Constants"},{"location":"PR/phpNum1/#php-integer-functions","text":"PHP has the following functions to check if the type of a variable is integer: is_int() is_integer() - alias of is_int() is_long() - alias of is_int()","title":"PHP Integer Functions"},{"location":"PR/phpNum1/#php-floats","text":"The float data type can commonly store a value up to 1.7976931348623E+308 (platform dependent), and have a maximum precision of 14 digits.","title":"PHP Floats"},{"location":"PR/phpNum1/#php-float-constants","text":"PHP has the following predefined constants for floats (from PHP 7.2): PHP_FLOAT_MAX - The largest representable floating point number PHP_FLOAT_MIN - The smallest representable positive floating point number PHP_FLOAT_DIG - The number of decimal digits that can be rounded into a float and back without precision loss PHP_FLOAT_EPSILON - The smallest representable positive number x, so that x + 1.0 != 1.0","title":"PHP Float Constants"},{"location":"PR/phpNum1/#php-float-functions","text":"PHP has the following functions to check if the type of a variable is float: is_float() is_double() - alias of is_float()","title":"PHP Float Functions"},{"location":"PR/phpNum1/#php-infinity","text":"A numeric value that is larger than PHP_FLOAT_MAX is considered infinite. PHP has the following functions to check if a numeric value is finite or infinite: is_finite() is_infinite() <!DOCTYPE html> <html> <body> <?php // Check if a numeric value is finite or infinite $x = 1.9e411 ; var_dump ( $x ); ?> </body> </html>","title":"PHP Infinity"},{"location":"PR/phpNum1/#php-nan","text":"NaN stands for Not a Number. NaN is used for impossible mathematical operations. PHP has the following functions to check if a value is not a number: is_nan() <!DOCTYPE html> <html> <body> <?php // Invalid calculation will return a NaN value $x = acos ( 8 ); var_dump ( $x ); ?> </body> </html>","title":"PHP NaN"},{"location":"PR/phpNum1/#php-numerical-strings","text":"The PHP is_numeric() function can be used to find whether a variable is numeric. The function returns true if the variable is a number or a numeric string, false otherwise. From PHP 7.0: The is_numeric() function will return FALSE for numeric strings in hexadecimal form (e.g. 0xf4c3b00c), as they are no longer considered as numeric strings. <!DOCTYPE html> <html> <body> <?php // Check if the variable is numeric $x = 5985 ; var_dump ( is_numeric ( $x )); echo \"<br>\" ; $x = \"5985\" ; var_dump ( is_numeric ( $x )); echo \"<br>\" ; $x = \"59.85\" + 100 ; var_dump ( is_numeric ( $x )); echo \"<br>\" ; $x = \"Hello\" ; var_dump ( is_numeric ( $x )); ?> </body> </html>","title":"PHP Numerical Strings"},{"location":"PR/phpNum1/#php-casting-to-integers","text":"Sometimes you need to cast a numerical value into another data type. The (int), (integer), or intval() function are often used to convert a value to an integer. <!DOCTYPE html> <html> <body> <?php // Cast float to int $x = 23465.768 ; $int_cast = ( int ) $x ; echo $int_cast ; echo \"<br>\" ; // Cast string to int $x = \"23465.768\" ; $int_cast = ( int ) $x ; echo $int_cast ; ?> </body> </html>","title":"PHP Casting to Integers"},{"location":"PR/phpOperators1/","text":"Operators are used to perform operations on variables and values. PHP divides the operators in the following groups: Arithmetic operators Assignment operators Comparison operators Increment/Decrement operators Logical operators String operators Array operators Conditional assignment operators PHP Arithmetic Operators The PHP arithmetic operators are used with numeric values to perform common arithmetical operations, such as addition, subtraction, multiplication etc. Operator Description Example Result + Addition $x + $y Sum of $x and $y - Subtraction $x - $y Difference of $x and $y * Multiplication $x * $y Product of $x and $y / Division $x / $y Quotient of $x and $y % Modulus $x % $y Remainder of $x divided by $y ** Exponentiation $x ** $y $x to the power of $y PHP Assignment Operators The PHP assignment operators are used with numeric values to write a value to a variable. The basic assignment operator in PHP is \"=\". It means that the left operand gets set to the value of the assignment expression on the right. Operator Description Example Result = Assignment $x = $y Assign $y to $x += Addition Assignment $x = $x + $y Add $y to $x and assign the result to $x -= Subtraction Assignment $x = $x - $y Subtract $y from $x and assign the result to $x *= Multiplication Assignment $x = $x * $y Multiply $x by $y and assign the result to $x /= Division Assignment $x = $x / $y Divide $x by $y and assign the result to $x %= Modulus Assignment $x = $x % $y Modulus of $x divided by $y and assign the result to $x PHP Comparison Operators The PHP comparison operators are used to compare two values (number or string): Operator Description Example Result == Equal to $x == $y Returns true if $x is equal to $y === Identical to $x === $y Returns true if $x is equal to $y, and they are of the same type != Not equal to $x != $y Returns true if $x is not equal to $y <> Not equal to $x <> $y Returns true if $x is not equal to $y !== Not identical to $x !== $y Returns true if $x is not equal to $y, or they are not of the same type < Less than $x < $y Returns true if $x is less than $y <= Less than or equal to $x <= $y Returns true if $x is less than or equal to $y > Greater than $x > $y Returns true if $x is greater than $y >= Greater than or equal to $x >= $y Returns true if $x is greater than or equal to $y <=> Spaceship operator $x <=> $y Returns an integer less than, equal to, or greater than zero, depending on if $x is less than, equal to, or greater than $y. Introduced in PHP 7. PHP Increment / Decrement Operators The PHP increment and decrement operators are used to increase or decrease the value of a variable. Operator Description Result ++$x Pre-increment Increments $x by one, then returns $x $x++ Post-increment Returns $x, then increments $x by one --$x Pre-decrement Decrements $x by one, then returns $x $x-- Post-decrement Returns $x, then decrements $x by one PHP Logical Operators The PHP logical operators are used to combine conditional statements. Operator Description Example Result && Logical AND $x && $y Returns true if both $x and $y are true || Logical OR $x || $y Returns true if either $x or $y is true ! Logical NOT ! $x Returns the opposite of $x and Logical AND $x and $y Returns true if both $x and $y are true or Logical OR $x or $y Returns true if either $x or $y is true xor Logical Xor $x xor $y True if either $x or $y is true, but not both PHP String Operators The PHP string operators are used to concatenate strings. Operator Description Example Result . Concatenation $x . $y Concatenates $x and $y .= Concatenation assignment $x .= $y Appends $y to $x PHP Array Operators The PHP array operators are used to perform operations on arrays. Operator Description Example Result + Union $x + $y Union of $x and $y == Equality $x == $y Returns true if $x and $y have the same key/value pairs === Identity $x === $y Returns true if $x and $y have the same key/value pairs in the same order and of the same types != Inequality $x != $y Returns true if $x is not equal to $y <> Inequality $x <> $y Returns true if $x is not equal to $y !== Non-identity $x !== $y Returns true if $x is not identical to $y Conditional Assignment Operators Operator Description Example Result ?: Ternary Operator $x = expr1 ? expr2 : expr3 Returns the value of $x. The value of $x is expr2 if expr1 = TRUE. The value of $x is expr3 if expr1 = FALSE ?? Null coalescing $x = expr1 ?? expr2 Returns the value of $x. The value of $x is expr1 if expr1 exists, and is not NULL. If expr1 does not exist, or is NULL, the value of $x is expr2. Introduced in PHP 7","title":"Operators"},{"location":"PR/phpOperators1/#php-arithmetic-operators","text":"The PHP arithmetic operators are used with numeric values to perform common arithmetical operations, such as addition, subtraction, multiplication etc. Operator Description Example Result + Addition $x + $y Sum of $x and $y - Subtraction $x - $y Difference of $x and $y * Multiplication $x * $y Product of $x and $y / Division $x / $y Quotient of $x and $y % Modulus $x % $y Remainder of $x divided by $y ** Exponentiation $x ** $y $x to the power of $y","title":"PHP Arithmetic Operators"},{"location":"PR/phpOperators1/#php-assignment-operators","text":"The PHP assignment operators are used with numeric values to write a value to a variable. The basic assignment operator in PHP is \"=\". It means that the left operand gets set to the value of the assignment expression on the right. Operator Description Example Result = Assignment $x = $y Assign $y to $x += Addition Assignment $x = $x + $y Add $y to $x and assign the result to $x -= Subtraction Assignment $x = $x - $y Subtract $y from $x and assign the result to $x *= Multiplication Assignment $x = $x * $y Multiply $x by $y and assign the result to $x /= Division Assignment $x = $x / $y Divide $x by $y and assign the result to $x %= Modulus Assignment $x = $x % $y Modulus of $x divided by $y and assign the result to $x","title":"PHP Assignment Operators"},{"location":"PR/phpOperators1/#php-comparison-operators","text":"The PHP comparison operators are used to compare two values (number or string): Operator Description Example Result == Equal to $x == $y Returns true if $x is equal to $y === Identical to $x === $y Returns true if $x is equal to $y, and they are of the same type != Not equal to $x != $y Returns true if $x is not equal to $y <> Not equal to $x <> $y Returns true if $x is not equal to $y !== Not identical to $x !== $y Returns true if $x is not equal to $y, or they are not of the same type < Less than $x < $y Returns true if $x is less than $y <= Less than or equal to $x <= $y Returns true if $x is less than or equal to $y > Greater than $x > $y Returns true if $x is greater than $y >= Greater than or equal to $x >= $y Returns true if $x is greater than or equal to $y <=> Spaceship operator $x <=> $y Returns an integer less than, equal to, or greater than zero, depending on if $x is less than, equal to, or greater than $y. Introduced in PHP 7.","title":"PHP Comparison Operators"},{"location":"PR/phpOperators1/#php-increment-decrement-operators","text":"The PHP increment and decrement operators are used to increase or decrease the value of a variable. Operator Description Result ++$x Pre-increment Increments $x by one, then returns $x $x++ Post-increment Returns $x, then increments $x by one --$x Pre-decrement Decrements $x by one, then returns $x $x-- Post-decrement Returns $x, then decrements $x by one","title":"PHP Increment / Decrement Operators"},{"location":"PR/phpOperators1/#php-logical-operators","text":"The PHP logical operators are used to combine conditional statements. Operator Description Example Result && Logical AND $x && $y Returns true if both $x and $y are true || Logical OR $x || $y Returns true if either $x or $y is true ! Logical NOT ! $x Returns the opposite of $x and Logical AND $x and $y Returns true if both $x and $y are true or Logical OR $x or $y Returns true if either $x or $y is true xor Logical Xor $x xor $y True if either $x or $y is true, but not both","title":"PHP Logical Operators"},{"location":"PR/phpOperators1/#php-string-operators","text":"The PHP string operators are used to concatenate strings. Operator Description Example Result . Concatenation $x . $y Concatenates $x and $y .= Concatenation assignment $x .= $y Appends $y to $x","title":"PHP String Operators"},{"location":"PR/phpOperators1/#php-array-operators","text":"The PHP array operators are used to perform operations on arrays. Operator Description Example Result + Union $x + $y Union of $x and $y == Equality $x == $y Returns true if $x and $y have the same key/value pairs === Identity $x === $y Returns true if $x and $y have the same key/value pairs in the same order and of the same types != Inequality $x != $y Returns true if $x is not equal to $y <> Inequality $x <> $y Returns true if $x is not equal to $y !== Non-identity $x !== $y Returns true if $x is not identical to $y","title":"PHP Array Operators"},{"location":"PR/phpOperators1/#conditional-assignment-operators","text":"Operator Description Example Result ?: Ternary Operator $x = expr1 ? expr2 : expr3 Returns the value of $x. The value of $x is expr2 if expr1 = TRUE. The value of $x is expr3 if expr1 = FALSE ?? Null coalescing $x = expr1 ?? expr2 Returns the value of $x. The value of $x is expr1 if expr1 exists, and is not NULL. If expr1 does not exist, or is NULL, the value of $x is expr2. Introduced in PHP 7","title":"Conditional Assignment Operators"},{"location":"PR/phpStr1/","text":"PHP contains many useful built-in functions and methods to accomplish common tasks. strlen() The PHP strlen() function returns the length of a string. <?php echo strlen ( \"Hello world!\" ); // outputs 12 ?> str_word_count() The PHP str_word_count() function counts the number of words in a string. <?php echo str_word_count ( \"Hello world!\" ); // outputs 2 ?> strrev() The PHP strrev() function reverses a string. <?php echo strrev ( \"Hello world!\" ); // outputs !dlrow olleH ?> strpos() The PHP strpos() function searches for a specific text within a string. If a match is found, the function returns the character position of the first match. If no match is found, it will return FALSE. <?php echo strpos ( \"Hello world!\" , \"world\" ); // outputs 6 ?> The first character position in a string is 0 (not 1). str_replace() The PHP str_replace() function replaces some characters with some other characters in a string. <?php echo str_replace ( \"world\" , \"Earth\" , \"Hello world!\" ); // outputs Hello Earth! ?> str_repeat() The str_repeat() function repeats a string a specified number of times. <?php echo str_repeat ( \"Hello \" , 3 ); // outputs Hello Hello Hello ?> str_split() The str_split() function splits a string into an array. <?php echo str_split ( \"Hello world!\" ); // outputs [\"H\", \"e\", \"l\", \"l\", \"o\", \" \", \"w\", \"o\", \"r\", \"l\", \"d\", \"!\"] ?> str_shuffle() The str_shuffle() function randomly shuffles all the characters of a string. <?php echo str_shuffle ( \"Hello world!\" ); // outputs !Wdroel loHl ?> For more information, see PHP String Functions","title":"Functions"},{"location":"PR/phpStr1/#strlen","text":"The PHP strlen() function returns the length of a string. <?php echo strlen ( \"Hello world!\" ); // outputs 12 ?>","title":"strlen()"},{"location":"PR/phpStr1/#str_word_count","text":"The PHP str_word_count() function counts the number of words in a string. <?php echo str_word_count ( \"Hello world!\" ); // outputs 2 ?>","title":"str_word_count()"},{"location":"PR/phpStr1/#strrev","text":"The PHP strrev() function reverses a string. <?php echo strrev ( \"Hello world!\" ); // outputs !dlrow olleH ?>","title":"strrev()"},{"location":"PR/phpStr1/#strpos","text":"The PHP strpos() function searches for a specific text within a string. If a match is found, the function returns the character position of the first match. If no match is found, it will return FALSE. <?php echo strpos ( \"Hello world!\" , \"world\" ); // outputs 6 ?> The first character position in a string is 0 (not 1).","title":"strpos()"},{"location":"PR/phpStr1/#str_replace","text":"The PHP str_replace() function replaces some characters with some other characters in a string. <?php echo str_replace ( \"world\" , \"Earth\" , \"Hello world!\" ); // outputs Hello Earth! ?>","title":"str_replace()"},{"location":"PR/phpStr1/#str_repeat","text":"The str_repeat() function repeats a string a specified number of times. <?php echo str_repeat ( \"Hello \" , 3 ); // outputs Hello Hello Hello ?>","title":"str_repeat()"},{"location":"PR/phpStr1/#str_split","text":"The str_split() function splits a string into an array. <?php echo str_split ( \"Hello world!\" ); // outputs [\"H\", \"e\", \"l\", \"l\", \"o\", \" \", \"w\", \"o\", \"r\", \"l\", \"d\", \"!\"] ?>","title":"str_split()"},{"location":"PR/phpStr1/#str_shuffle","text":"The str_shuffle() function randomly shuffles all the characters of a string. <?php echo str_shuffle ( \"Hello world!\" ); // outputs !Wdroel loHl ?> For more information, see PHP String Functions","title":"str_shuffle()"},{"location":"PR/phpSuperGlobals/","text":"Superglobals were introduced in PHP 4.1.0, and are built-in variables that are always available in all scopes. The PHP superglobal variables are: $GLOBALS $_SERVER $_REQUEST $_POST $_GET $_FILES $_ENV $_COOKIE \\ $_SESSION $GLOBALS $GLOBALS is a PHP super global variable which is used to access global variables from anywhere in the PHP script (also from within functions or methods). PHP stores all global variables in an array called $GLOBALS[index]. The index holds the name of the variable. <?php $x = 75 ; $y = 25 ; function addition () { $GLOBALS [ 'z' ] = $GLOBALS [ 'x' ] + $GLOBALS [ 'y' ]; } addition (); echo $z ; ?> $_SERVER $_SERVER is a PHP super global variable which holds information about headers, paths, and script locations. <?php echo $_SERVER [ 'PHP_SELF' ]; echo \"<br>\" ; echo $_SERVER [ 'SERVER_NAME' ]; echo \"<br>\" ; echo $_SERVER [ 'HTTP_HOST' ]; echo \"<br>\" ; echo $_SERVER [ 'HTTP_REFERER' ]; echo \"<br>\" ; echo $_SERVER [ 'HTTP_USER_AGENT' ]; echo \"<br>\" ; echo $_SERVER [ 'SCRIPT_NAME' ]; ?> The following table lists the most important elements that can go inside $_SERVER. Element Description $_SERVER['PHP_SELF'] Returns the filename of the currently executing script $_SERVER['GATEWAY_INTERFACE'] Returns the version of the Common Gateway Interface (CGI) the server is using $_SERVER['SERVER_ADDR'] Returns the IP address of the host server $_SERVER['SERVER_NAME'] Returns the name of the host server (such as www.w3schools.com) $_SERVER['SERVER_SOFTWARE'] Returns the server identification string (such as Apache/2.2.24) $_SERVER['SERVER_PROTOCOL'] Returns the name and revision of the information protocol (such as HTTP/1.1) $_SERVER['REQUEST_METHOD'] Returns the request method used to access the page (such as POST) $_SERVER['REQUEST_TIME'] Returns the timestamp of the start of the request (such as 1377687496) $_SERVER['QUERY_STRING'] Returns the query string if the page is accessed via a query string $_SERVER['HTTP_ACCEPT'] Returns the Accept header from the current request $_SERVER['HTTP_ACCEPT_CHARSET'] Returns the Accept_Charset header from the current request (such as utf-8,ISO-8859-1) $_SERVER['HTTP_HOST'] Returns the Host header from the current request $_SERVER['HTTP_REFERER'] Returns the complete URL of the current page (not reliable because not all user-agents support it) $_SERVER['HTTPS'] Is the script queried through a secure HTTP protocol $_SERVER['REMOTE_ADDR'] Returns the IP address from where the user is viewing the current page $_SERVER['REMOTE_HOST'] Returns the Host name from where the user is viewing the current page $_SERVER['REMOTE_PORT'] Returns the port being used on the user's machine to communicate with the web server $_SERVER['SCRIPT_FILENAME'] Returns the absolute pathname of the currently executing script $_SERVER['SERVER_ADMIN'] Returns the value given to the SERVER_ADMIN directive in the web server $_SERVER['SERVER_PORT'] Returns the port on the server machine being used by the web server for communication (such as 80) $_SERVER['SERVER_SIGNATURE'] Returns the server version and virtual host name which are added to server-generated pages $_SERVER['PATH_TRANSLATED'] Returns the file system based path to the current script $_SERVER['SCRIPT_NAME'] Returns the path of the current script $_SERVER['SCRIPT_URI'] Returns the URI of the current page $_REQUEST PHP $_REQUEST is a PHP super global variable which is used to collect data after submitting an HTML form. < html > < body > < form method = \"post\" action = \"<?php echo $_SERVER['PHP_SELF'];?>\" > Name: < input type = \"text\" name = \"fname\" > < input type = \"submit\" > </ form > <?php if ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") { // collect value of input field $name = $_REQUEST['fname']; if (empty($name)) { echo \"Name is empty\"; } else { echo $name; } } ?> </ body > </ html > $_POST PHP $_POST is a PHP super global variable which is used to collect form data after submitting an HTML form with method=\"post\". $_POST is also widely used to pass variables. < html > < body > < form method = \"post\" action = \"<?php echo $_SERVER['PHP_SELF'];?>\" > Name: < input type = \"text\" name = \"fname\" > < input type = \"submit\" > </ form > <?php if ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") { // collect value of input field $name = $_POST['fname']; if (empty($name)) { echo \"Name is empty\"; } else { echo $name; } } ?> </ body > </ html > $_GET PHP $_GET is a PHP super global variable which is used to collect form data after submitting an HTML form with method=\"get\". < html > < body > <?php echo \"Study \" . $_GET['subject'] . \" at \" . $_GET['web']; ?> </ body > </ html >","title":"Globals"},{"location":"PR/phpSuperGlobals/#globals","text":"$GLOBALS is a PHP super global variable which is used to access global variables from anywhere in the PHP script (also from within functions or methods). PHP stores all global variables in an array called $GLOBALS[index]. The index holds the name of the variable. <?php $x = 75 ; $y = 25 ; function addition () { $GLOBALS [ 'z' ] = $GLOBALS [ 'x' ] + $GLOBALS [ 'y' ]; } addition (); echo $z ; ?>","title":"$GLOBALS"},{"location":"PR/phpSuperGlobals/#_server","text":"$_SERVER is a PHP super global variable which holds information about headers, paths, and script locations. <?php echo $_SERVER [ 'PHP_SELF' ]; echo \"<br>\" ; echo $_SERVER [ 'SERVER_NAME' ]; echo \"<br>\" ; echo $_SERVER [ 'HTTP_HOST' ]; echo \"<br>\" ; echo $_SERVER [ 'HTTP_REFERER' ]; echo \"<br>\" ; echo $_SERVER [ 'HTTP_USER_AGENT' ]; echo \"<br>\" ; echo $_SERVER [ 'SCRIPT_NAME' ]; ?> The following table lists the most important elements that can go inside $_SERVER. Element Description $_SERVER['PHP_SELF'] Returns the filename of the currently executing script $_SERVER['GATEWAY_INTERFACE'] Returns the version of the Common Gateway Interface (CGI) the server is using $_SERVER['SERVER_ADDR'] Returns the IP address of the host server $_SERVER['SERVER_NAME'] Returns the name of the host server (such as www.w3schools.com) $_SERVER['SERVER_SOFTWARE'] Returns the server identification string (such as Apache/2.2.24) $_SERVER['SERVER_PROTOCOL'] Returns the name and revision of the information protocol (such as HTTP/1.1) $_SERVER['REQUEST_METHOD'] Returns the request method used to access the page (such as POST) $_SERVER['REQUEST_TIME'] Returns the timestamp of the start of the request (such as 1377687496) $_SERVER['QUERY_STRING'] Returns the query string if the page is accessed via a query string $_SERVER['HTTP_ACCEPT'] Returns the Accept header from the current request $_SERVER['HTTP_ACCEPT_CHARSET'] Returns the Accept_Charset header from the current request (such as utf-8,ISO-8859-1) $_SERVER['HTTP_HOST'] Returns the Host header from the current request $_SERVER['HTTP_REFERER'] Returns the complete URL of the current page (not reliable because not all user-agents support it) $_SERVER['HTTPS'] Is the script queried through a secure HTTP protocol $_SERVER['REMOTE_ADDR'] Returns the IP address from where the user is viewing the current page $_SERVER['REMOTE_HOST'] Returns the Host name from where the user is viewing the current page $_SERVER['REMOTE_PORT'] Returns the port being used on the user's machine to communicate with the web server $_SERVER['SCRIPT_FILENAME'] Returns the absolute pathname of the currently executing script $_SERVER['SERVER_ADMIN'] Returns the value given to the SERVER_ADMIN directive in the web server $_SERVER['SERVER_PORT'] Returns the port on the server machine being used by the web server for communication (such as 80) $_SERVER['SERVER_SIGNATURE'] Returns the server version and virtual host name which are added to server-generated pages $_SERVER['PATH_TRANSLATED'] Returns the file system based path to the current script $_SERVER['SCRIPT_NAME'] Returns the path of the current script $_SERVER['SCRIPT_URI'] Returns the URI of the current page","title":"$_SERVER"},{"location":"PR/phpSuperGlobals/#_request","text":"PHP $_REQUEST is a PHP super global variable which is used to collect data after submitting an HTML form. < html > < body > < form method = \"post\" action = \"<?php echo $_SERVER['PHP_SELF'];?>\" > Name: < input type = \"text\" name = \"fname\" > < input type = \"submit\" > </ form > <?php if ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") { // collect value of input field $name = $_REQUEST['fname']; if (empty($name)) { echo \"Name is empty\"; } else { echo $name; } } ?> </ body > </ html >","title":"$_REQUEST"},{"location":"PR/phpSuperGlobals/#_post","text":"PHP $_POST is a PHP super global variable which is used to collect form data after submitting an HTML form with method=\"post\". $_POST is also widely used to pass variables. < html > < body > < form method = \"post\" action = \"<?php echo $_SERVER['PHP_SELF'];?>\" > Name: < input type = \"text\" name = \"fname\" > < input type = \"submit\" > </ form > <?php if ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") { // collect value of input field $name = $_POST['fname']; if (empty($name)) { echo \"Name is empty\"; } else { echo $name; } } ?> </ body > </ html >","title":"$_POST"},{"location":"PR/phpSuperGlobals/#_get","text":"PHP $_GET is a PHP super global variable which is used to collect form data after submitting an HTML form with method=\"get\". < html > < body > <?php echo \"Study \" . $_GET['subject'] . \" at \" . $_GET['web']; ?> </ body > </ html >","title":"$_GET"},{"location":"PR/phpVar1/","text":"In PHP, we store all pieces of data -- numbers, characters, strings, everything -- as objects, and we refer to these objects using variables. As a simple case, we can assign a variable a value using the assignment operator, which is the \"equals\" sign. Creating (Declaring) PHP Variables In PHP, a variable starts with the $ sign, followed by the name of the variable: Remember that variables are case-sensitive! <?php $txt = \"Hello world!\" ; //No difference between \"\" and '' $x = 5 ; $y = 10.5 ; ?> After the execution of the statements above, the variable $txt will hold the value Hello world!, the variable $x will hold the value 5, and the variable $y will hold the value 10.5. Note: When you assign a text value to a variable, put quotes around the value. Note: Unlike other programming languages, PHP has no command for declaring a variable. It is created the moment you first assign a value to it. Rules for PHP variables: A variable starts with the $ sign, followed by the name of the variable A variable name must start with a letter or the underscore character A variable name cannot start with a number A variable name can only contain alpha-numeric characters and underscores (A-z, 0-9, and _ ) Variable names are case-sensitive ($age and $AGE are two different variables) Output Variables The PHP echo statement is often used to output data to the screen. The following example will show how to output text and a variable: <?php $txt = \"phpTutorial\" ; echo \"I love $txt !\" ; ?> Tools for understanding strange objects var_dump() function var_dump() displays structured information about one or more expressions that includes its type and value. Arrays and objects are explored recursively with values indented to show structure. <!DOCTYPE html> <html> <body> <?php $x = 5985 ; var_dump ( $x ); ?> </body> </html> int(5985) print_r() function print_r() displays the value of a variable, in a human-readable format. <?php $a = array ( \"red\" , \"green\" , \"blue\" ); print_r ( $a ); echo \"<br>\" ; $b = array ( \"Peter\" => \"35\" , \"Ben\" => \"37\" , \"Joe\" => \"43\" ); print_r ( $b ); ?> Array ( [0] => red [1] => green [2] => blue ) Array ( [Peter] => 35 [Ben] => 37 [Joe] => 43 ) NULL The null type is PHP's unit type, i.e. it has only one value: null. Undefined, and unset() variables will resolve to the value null. There is only one value of type null, and that is the case-insensitive constant null. <?php $var = NULL ; ?>","title":"Variables"},{"location":"PR/phpVar1/#creating-declaring-php-variables","text":"In PHP, a variable starts with the $ sign, followed by the name of the variable: Remember that variables are case-sensitive! <?php $txt = \"Hello world!\" ; //No difference between \"\" and '' $x = 5 ; $y = 10.5 ; ?> After the execution of the statements above, the variable $txt will hold the value Hello world!, the variable $x will hold the value 5, and the variable $y will hold the value 10.5. Note: When you assign a text value to a variable, put quotes around the value. Note: Unlike other programming languages, PHP has no command for declaring a variable. It is created the moment you first assign a value to it.","title":"Creating (Declaring) PHP Variables"},{"location":"PR/phpVar1/#rules-for-php-variables","text":"A variable starts with the $ sign, followed by the name of the variable A variable name must start with a letter or the underscore character A variable name cannot start with a number A variable name can only contain alpha-numeric characters and underscores (A-z, 0-9, and _ ) Variable names are case-sensitive ($age and $AGE are two different variables)","title":"Rules for PHP variables:"},{"location":"PR/phpVar1/#output-variables","text":"The PHP echo statement is often used to output data to the screen. The following example will show how to output text and a variable: <?php $txt = \"phpTutorial\" ; echo \"I love $txt !\" ; ?>","title":"Output Variables"},{"location":"PR/phpVar1/#tools-for-understanding-strange-objects","text":"","title":"Tools for understanding strange objects"},{"location":"PR/phpVar1/#var_dump-function","text":"var_dump() displays structured information about one or more expressions that includes its type and value. Arrays and objects are explored recursively with values indented to show structure. <!DOCTYPE html> <html> <body> <?php $x = 5985 ; var_dump ( $x ); ?> </body> </html> int(5985)","title":"var_dump() function"},{"location":"PR/phpVar1/#print_r-function","text":"print_r() displays the value of a variable, in a human-readable format. <?php $a = array ( \"red\" , \"green\" , \"blue\" ); print_r ( $a ); echo \"<br>\" ; $b = array ( \"Peter\" => \"35\" , \"Ben\" => \"37\" , \"Joe\" => \"43\" ); print_r ( $b ); ?> Array ( [0] => red [1] => green [2] => blue ) Array ( [Peter] => 35 [Ben] => 37 [Joe] => 43 )","title":"print_r() function"},{"location":"PR/phpVar1/#null","text":"The null type is PHP's unit type, i.e. it has only one value: null. Undefined, and unset() variables will resolve to the value null. There is only one value of type null, and that is the case-insensitive constant null. <?php $var = NULL ; ?>","title":"NULL"},{"location":"PR/phpVar2/","text":"Data Types PHP supports the following data types: String Integer Float Boolean Array Object NULL Resource PHP String A string is a sequence of characters, like \"Hello world!\". A string can be any text inside quotes. You can use single or double quotes. $x = \"Hello world!\"; PHP Integer An integer data type is a non-decimal number between -2,147,483,648 and 2,147,483,647. Integers can be specified in: decimal (base 10), hexadecimal (base 16), octal (base 8), or binary (base 2) notation <?php $a = 1234 ; // decimal number $a = 0123 ; // octal number (equivalent to 83 decimal) $a = 0 o123 ; // octal number (as of PHP 8.1.0) $a = 0x1A ; // hexadecimal number (equivalent to 26 decimal) $a = 0 b11111111 ; // binary number (equivalent to 255 decimal) $a = 1 _234_567 ; // decimal number (as of PHP 7.4.0) ?> PHP Float A float (floating point number) is a number with a decimal point or a number in exponential form. $x = 10.365; PHP Boolean A Boolean represents two possible states: TRUE or FALSE. $x = true; $y = false; PHP Array An array stores multiple values in one single variable. $x = array(\"Volvo\", \"BMW\", \"Toyota\"); PHP Object Classes and objects are the two main aspects of object-oriented programming. A class is a template for objects, and an object is an instance of a class. When the individual objects are created, they inherit all the properties and behaviors from the class, but each object will have different values for the properties. Let's assume we have a class named Car. A Car can have properties like model, color, etc. We can define variables like $model, $color, and so on, to hold the values of these properties. When the individual objects (Volvo, BMW, Toyota, etc.) are created, they inherit all the properties and behaviors from the class, but each object will have different values for the properties. If you create a __construct() function, PHP will automatically call this function when you create an object from a class. <?php class Car { public $color ; public $model ; public function __construct ( $color , $model ) { $this -> color = $color ; $this -> model = $model ; } public function message () { return \"My car is a \" . $this -> color . \" \" . $this -> model . \"!\" ; } } $myCar = new Car ( \"black\" , \"Volvo\" ); echo $myCar -> message (); echo \"<br>\" ; $myCar = new Car ( \"red\" , \"Toyota\" ); echo $myCar -> message (); ?> PHP NULL Value Null is a special data type which can have only one value: NULL. A variable of data type NULL is a variable that has no value assigned to it. Tip: If a variable is created without a value, it is automatically assigned a value of NULL. Variables can also be emptied by setting the value to NULL PHP Resource The special resource type is not an actual data type. It is the storing of a reference to functions and resources external to PHP. A common example of using the resource data type is a database call. Type Casting PHP does not require explicit type definition in variable declaration. In this case, the type of a variable is determined by the value it stores. That is to say, if a string is assigned to variable $var, then $var is of type string. If afterwards an int value is assigned to $var, it will be of type int. Type casting converts the value to a chosen type by writing the type within parentheses before the value to convert. The casts allowed are: (int) - cast to int (bool) - cast to bool (float) - cast to float (string) - cast to string (array) - cast to array (object) - cast to object (unset) - cast to NULL <?php $bool_false = false ; $int_val = ( int ) $bool_false ; var_dump ( $int_val ); //Output will be 0 $bool_true = true ; $int_val = ( int ) $bool_true ; var_dump ( $int_val ); //Output will be 1 ?> Casting literal strings and variables to binary strings: <?php $binary = ( binary ) $string ; $binary = b \"binary string\" ; ?> Instead of casting a variable to a string, it is also possible to enclose the variable in double quotes. <?php $foo = 10 ; // $foo is an integer $str = \" $foo \" ; // $str is a string $fst = ( string ) $foo ; // $fst is also a string // This prints out that \"they are the same\" if ( $fst === $str ) { echo \"they are the same\" ; } ?>","title":"Data Types and Casting"},{"location":"PR/phpVar2/#data-types","text":"PHP supports the following data types: String Integer Float Boolean Array Object NULL Resource","title":"Data Types"},{"location":"PR/phpVar2/#php-string","text":"A string is a sequence of characters, like \"Hello world!\". A string can be any text inside quotes. You can use single or double quotes. $x = \"Hello world!\";","title":"PHP String"},{"location":"PR/phpVar2/#php-integer","text":"An integer data type is a non-decimal number between -2,147,483,648 and 2,147,483,647. Integers can be specified in: decimal (base 10), hexadecimal (base 16), octal (base 8), or binary (base 2) notation <?php $a = 1234 ; // decimal number $a = 0123 ; // octal number (equivalent to 83 decimal) $a = 0 o123 ; // octal number (as of PHP 8.1.0) $a = 0x1A ; // hexadecimal number (equivalent to 26 decimal) $a = 0 b11111111 ; // binary number (equivalent to 255 decimal) $a = 1 _234_567 ; // decimal number (as of PHP 7.4.0) ?>","title":"PHP Integer"},{"location":"PR/phpVar2/#php-float","text":"A float (floating point number) is a number with a decimal point or a number in exponential form. $x = 10.365;","title":"PHP Float"},{"location":"PR/phpVar2/#php-boolean","text":"A Boolean represents two possible states: TRUE or FALSE. $x = true; $y = false;","title":"PHP Boolean"},{"location":"PR/phpVar2/#php-array","text":"An array stores multiple values in one single variable. $x = array(\"Volvo\", \"BMW\", \"Toyota\");","title":"PHP Array"},{"location":"PR/phpVar2/#php-object","text":"Classes and objects are the two main aspects of object-oriented programming. A class is a template for objects, and an object is an instance of a class. When the individual objects are created, they inherit all the properties and behaviors from the class, but each object will have different values for the properties. Let's assume we have a class named Car. A Car can have properties like model, color, etc. We can define variables like $model, $color, and so on, to hold the values of these properties. When the individual objects (Volvo, BMW, Toyota, etc.) are created, they inherit all the properties and behaviors from the class, but each object will have different values for the properties. If you create a __construct() function, PHP will automatically call this function when you create an object from a class. <?php class Car { public $color ; public $model ; public function __construct ( $color , $model ) { $this -> color = $color ; $this -> model = $model ; } public function message () { return \"My car is a \" . $this -> color . \" \" . $this -> model . \"!\" ; } } $myCar = new Car ( \"black\" , \"Volvo\" ); echo $myCar -> message (); echo \"<br>\" ; $myCar = new Car ( \"red\" , \"Toyota\" ); echo $myCar -> message (); ?>","title":"PHP Object"},{"location":"PR/phpVar2/#php-null-value","text":"Null is a special data type which can have only one value: NULL. A variable of data type NULL is a variable that has no value assigned to it. Tip: If a variable is created without a value, it is automatically assigned a value of NULL. Variables can also be emptied by setting the value to NULL","title":"PHP NULL Value"},{"location":"PR/phpVar2/#php-resource","text":"The special resource type is not an actual data type. It is the storing of a reference to functions and resources external to PHP. A common example of using the resource data type is a database call.","title":"PHP Resource"},{"location":"PR/phpVar2/#type-casting","text":"PHP does not require explicit type definition in variable declaration. In this case, the type of a variable is determined by the value it stores. That is to say, if a string is assigned to variable $var, then $var is of type string. If afterwards an int value is assigned to $var, it will be of type int. Type casting converts the value to a chosen type by writing the type within parentheses before the value to convert. The casts allowed are: (int) - cast to int (bool) - cast to bool (float) - cast to float (string) - cast to string (array) - cast to array (object) - cast to object (unset) - cast to NULL <?php $bool_false = false ; $int_val = ( int ) $bool_false ; var_dump ( $int_val ); //Output will be 0 $bool_true = true ; $int_val = ( int ) $bool_true ; var_dump ( $int_val ); //Output will be 1 ?> Casting literal strings and variables to binary strings: <?php $binary = ( binary ) $string ; $binary = b \"binary string\" ; ?> Instead of casting a variable to a string, it is also possible to enclose the variable in double quotes. <?php $foo = 10 ; // $foo is an integer $str = \" $foo \" ; // $str is a string $fst = ( string ) $foo ; // $fst is also a string // This prints out that \"they are the same\" if ( $fst === $str ) { echo \"they are the same\" ; } ?>","title":"Type Casting"},{"location":"PR/phpVar3/","text":"In PHP, variables can be declared anywhere in the script. The scope of a variable is the part of the script where the variable can be referenced/used. PHP has three different variable scopes: Local Global Static Local Scope A variable declared within a function has a LOCAL SCOPE and can only be accessed within that function: <?php function myTest () { $x = 5 ; // local scope echo \"<p>Variable x inside function is: $x </p>\" ; } myTest (); // using x outside the function will generate an error echo \"<p>Variable x outside function is: $x </p>\" ; ?> You can have local variables with the same name in different functions, because local variables are only recognized by the function in which they are declared. Global Scope A variable declared outside a function has a GLOBAL SCOPE and can only be accessed outside a function: <?php $x = 5 ; // global scope function myTest () { // using x inside this function will generate an error echo \"<p>Variable x inside function is: $x </p>\" ; } myTest (); echo \"<p>Variable x outside function is: $x </p>\" ; ?> PHP The global Keyword The global keyword is used to access a global variable from within a function. To do this, use the global keyword before the variables (inside the function): <?php $x = 5 ; $y = 10 ; function myTest () { global $x , $y ; $y = $x + $y ; } myTest (); echo $y ; // outputs 15 ?> PHP also stores all global variables in an array called $GLOBALS[index]. The index holds the name of the variable. This array is also accessible from within functions and can be used to update global variables directly. The example above can be rewritten like this: <?php $x = 5 ; $y = 10 ; function myTest () { $GLOBALS [ 'y' ] = $GLOBALS [ 'x' ] + $GLOBALS [ 'y' ]; } myTest (); echo $y ; // outputs 15 ?> PHP The static Keyword Normally, when a function is completed/executed, all of its variables are deleted. However, sometimes we want a local variable NOT to be deleted. We need it for a further job. To do this, use the static keyword when you first declare the variable: <?php function myTest () { static $x = 0 ; echo $x ; $x ++ ; } myTest (); myTest (); myTest (); ?> Then, each time the function is called, that variable will still have the information it contained from the last time the function was called. Note: The variable is still local to the function.","title":"Variable Scope"},{"location":"PR/phpVar3/#local-scope","text":"A variable declared within a function has a LOCAL SCOPE and can only be accessed within that function: <?php function myTest () { $x = 5 ; // local scope echo \"<p>Variable x inside function is: $x </p>\" ; } myTest (); // using x outside the function will generate an error echo \"<p>Variable x outside function is: $x </p>\" ; ?> You can have local variables with the same name in different functions, because local variables are only recognized by the function in which they are declared.","title":"Local Scope"},{"location":"PR/phpVar3/#global-scope","text":"A variable declared outside a function has a GLOBAL SCOPE and can only be accessed outside a function: <?php $x = 5 ; // global scope function myTest () { // using x inside this function will generate an error echo \"<p>Variable x inside function is: $x </p>\" ; } myTest (); echo \"<p>Variable x outside function is: $x </p>\" ; ?>","title":"Global Scope"},{"location":"PR/phpVar3/#php-the-global-keyword","text":"The global keyword is used to access a global variable from within a function. To do this, use the global keyword before the variables (inside the function): <?php $x = 5 ; $y = 10 ; function myTest () { global $x , $y ; $y = $x + $y ; } myTest (); echo $y ; // outputs 15 ?> PHP also stores all global variables in an array called $GLOBALS[index]. The index holds the name of the variable. This array is also accessible from within functions and can be used to update global variables directly. The example above can be rewritten like this: <?php $x = 5 ; $y = 10 ; function myTest () { $GLOBALS [ 'y' ] = $GLOBALS [ 'x' ] + $GLOBALS [ 'y' ]; } myTest (); echo $y ; // outputs 15 ?>","title":"PHP The global Keyword"},{"location":"PR/phpVar3/#php-the-static-keyword","text":"Normally, when a function is completed/executed, all of its variables are deleted. However, sometimes we want a local variable NOT to be deleted. We need it for a further job. To do this, use the static keyword when you first declare the variable: <?php function myTest () { static $x = 0 ; echo $x ; $x ++ ; } myTest (); myTest (); myTest (); ?> Then, each time the function is called, that variable will still have the information it contained from the last time the function was called. Note: The variable is still local to the function.","title":"PHP The static Keyword"}]}