{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to PHP Refresher Everyone can forget about grammar and vocabulary. What is most important is to know where to look. The key to becoming a proficient PHP developer is to keep learning and practicing regularly. With a strong foundation in the basics, a commitment to ongoing learning, and a willingness to experiment with new tools and technologies, you can refresh your PHP skills and take your programming career to the next level. Basic Topics Advanced Topics Basics File Management Functions MySql Data Structures XML Classes Ajax This material is a work in progress, so your feedback is welcome. The best way to provide that feedback is to click here and create an issue in this GitHub repository .","title":"Home"},{"location":"#welcome-to-php-refresher","text":"Everyone can forget about grammar and vocabulary. What is most important is to know where to look. The key to becoming a proficient PHP developer is to keep learning and practicing regularly. With a strong foundation in the basics, a commitment to ongoing learning, and a willingness to experiment with new tools and technologies, you can refresh your PHP skills and take your programming career to the next level. Basic Topics Advanced Topics Basics File Management Functions MySql Data Structures XML Classes Ajax This material is a work in progress, so your feedback is welcome. The best way to provide that feedback is to click here and create an issue in this GitHub repository .","title":"Welcome to PHP Refresher"},{"location":"phpRefresh/","text":"PHP (recursive acronym for PHP: Hypertext Preprocessor) is a widely-used open source general-purpose scripting language that is especially suited for web development and can be embedded into HTML. A PHP script is executed on the server, and the plain HTML result is sent back to the browser. <!DOCTYPE html> <html> <head> <title>Example</title> </head> <body> <?php echo \"Hi, I'm a PHP script!\" ; ?> </body> </html> PHP is lossly typed (i.e. types are not necessarily enforced), dynamically, implicitly typed (i.e. you don\u2019t have to declare variables), case sensitive (i.e. var and VAR are two different variables) and object-oriented (i.e. everything is an object, like C# and Java). PHP is a language like C that uses curly braces to contain code statements within loops or conditionals. PHP statements end with a semicolon (;) just like C. There are not dot notation in PHP. Everything is function based. \"name\".split(); //doesnt work split(\"name\"); //works PHP Resources The website http://www.php.net is the official website for the PHP language, and Docs The PHP cookbook Composer : Composer is a dependency manager for PHP that provides a structured way both to declare dependencies in your project and to install them. PHP: The Right Way : A quick reference that attempts to be a comprehensive source of PHP best practices. A great place to start if you\u2019re wondering about the idiomatic way to do something in PHP. PHP Syntax A PHP script can be placed anywhere in the document. A PHP script starts with <?php and ends with ?> The default file extension for PHP files is \".php\". A PHP file normally contains HTML tags, and some PHP scripting code. PHP Case Sensitivity In PHP, keywords (e.g. if, else, while, echo, etc.), classes, functions, and user-defined functions are not case-sensitive. Warning: However; all variable names are case-sensitive! PHP Comments A comment in PHP code is a line that is not executed as a part of the program. Its only purpose is to be read by someone who is looking at the code. Syntax for single-line comments: <!DOCTYPE html> <html> <body> <?php // This is a single-line comment # This is also a single-line comment ?> </body> </html> Syntax for multiple-line comments: <!DOCTYPE html> <html> <body> <?php /* This is a multiple-lines comment block that spans over multiple lines */ ?> </body> </html>","title":"General"},{"location":"phpRefresh/#php-resources","text":"The website http://www.php.net is the official website for the PHP language, and Docs The PHP cookbook Composer : Composer is a dependency manager for PHP that provides a structured way both to declare dependencies in your project and to install them. PHP: The Right Way : A quick reference that attempts to be a comprehensive source of PHP best practices. A great place to start if you\u2019re wondering about the idiomatic way to do something in PHP.","title":"PHP Resources"},{"location":"phpRefresh/#php-syntax","text":"A PHP script can be placed anywhere in the document. A PHP script starts with <?php and ends with ?> The default file extension for PHP files is \".php\". A PHP file normally contains HTML tags, and some PHP scripting code.","title":"PHP Syntax"},{"location":"phpRefresh/#php-case-sensitivity","text":"In PHP, keywords (e.g. if, else, while, echo, etc.), classes, functions, and user-defined functions are not case-sensitive. Warning: However; all variable names are case-sensitive!","title":"PHP Case Sensitivity"},{"location":"phpRefresh/#php-comments","text":"A comment in PHP code is a line that is not executed as a part of the program. Its only purpose is to be read by someone who is looking at the code.","title":"PHP Comments"},{"location":"phpRefresh/#syntax-for-single-line-comments","text":"<!DOCTYPE html> <html> <body> <?php // This is a single-line comment # This is also a single-line comment ?> </body> </html>","title":"Syntax for single-line comments:"},{"location":"phpRefresh/#syntax-for-multiple-line-comments","text":"<!DOCTYPE html> <html> <body> <?php /* This is a multiple-lines comment block that spans over multiple lines */ ?> </body> </html>","title":"Syntax for multiple-line comments:"},{"location":"Adv/phpAjax/","text":"AJAX is about updating parts of a web page, without reloading the whole page. What is AJAX? AJAX = Asynchronous JavaScript and XML. AJAX is a technique for creating fast and dynamic web pages. AJAX allows web pages to be updated asynchronously by exchanging small amounts of data with the server behind the scenes. This means that it is possible to update parts of a web page, without reloading the whole page. Classic web pages, (which do not use AJAX) must reload the entire page if the content should change. Examples of applications using AJAX: Google Maps, Gmail, Youtube, and Facebook tabs. AJAX is based on internet standards, and uses a combination of: XMLHttpRequest object (to exchange data asynchronously with a server) JavaScript/DOM (to display/interact with the information) CSS (to style the data) XML (often used as the format for transferring data) AJAX applications are browser- and platform-independent! AJAX and PHP < html > < head > < script > function showHint ( str ) { if ( str . length == 0 ) { document . getElementById ( \"txtHint\" ). innerHTML = \"\" ; return ; } else { var xmlhttp = new XMLHttpRequest (); xmlhttp . onreadystatechange = function () { if ( this . readyState == 4 && this . status == 200 ) { document . getElementById ( \"txtHint\" ). innerHTML = this . responseText ; } }; xmlhttp . open ( \"GET\" , \"gethint.php?q=\" + str , true ); xmlhttp . send (); } } </ script > </ head > < body > < p >< b > Start typing a name in the input field below: </ b ></ p > < form action = \"\" > < label for = \"fname\" > First name: </ label > < input type = \"text\" id = \"fname\" name = \"fname\" onkeyup = \"showHint(this.value)\" > </ form > < p > Suggestions: < span id = \"txtHint\" ></ span ></ p > </ body > </ html > The PHP File - \"gethint.php\" The PHP file checks an array of names, and returns the corresponding name(s) to the browser <?php // Array with names $a [] = \"Anna\" ; $a [] = \"Brittany\" ; $a [] = \"Cinderella\" ; $a [] = \"Diana\" ; $a [] = \"Eva\" ; $a [] = \"Fiona\" ; $a [] = \"Gunda\" ; $a [] = \"Hege\" ; $a [] = \"Inga\" ; $a [] = \"Johanna\" ; $a [] = \"Kitty\" ; $a [] = \"Linda\" ; $a [] = \"Nina\" ; $a [] = \"Ophelia\" ; $a [] = \"Petunia\" ; $a [] = \"Amanda\" ; $a [] = \"Raquel\" ; $a [] = \"Cindy\" ; $a [] = \"Doris\" ; $a [] = \"Eve\" ; $a [] = \"Evita\" ; $a [] = \"Sunniva\" ; $a [] = \"Tove\" ; $a [] = \"Unni\" ; $a [] = \"Violet\" ; $a [] = \"Liza\" ; $a [] = \"Elizabeth\" ; $a [] = \"Ellen\" ; $a [] = \"Wenche\" ; $a [] = \"Vicky\" ; // get the q parameter from URL $q = $_REQUEST [ \"q\" ]; $hint = \"\" ; // lookup all hints from array if $q is different from \"\" if ( $q !== \"\" ) { $q = strtolower ( $q ); $len = strlen ( $q ); foreach ( $a as $name ) { if ( stristr ( $q , substr ( $name , 0 , $len ))) { if ( $hint === \"\" ) { $hint = $name ; } else { $hint .= \", $name \" ; } } } } // Output \"no suggestion\" if no hint was found or output correct values echo $hint === \"\" ? \"no suggestion\" : $hint ; ?> AJAX and MySQL AJAX can be used for interactive communication with a database. The database table we use in the example above looks like this: id FirstName LastName Age Hometown Job 1 Peter Griffin 41 Quahog Brewery 2 Lois Griffin 40 Newport Piano Teacher 3 Joseph Swanson 39 Quahog Police Officer 4 Glenn Quagmire 41 Quahog Pilot < html > < head > < script > function showUser ( str ) { if ( str == \"\" ) { document . getElementById ( \"txtHint\" ). innerHTML = \"\" ; return ; } else { var xmlhttp = new XMLHttpRequest (); xmlhttp . onreadystatechange = function () { if ( this . readyState == 4 && this . status == 200 ) { document . getElementById ( \"txtHint\" ). innerHTML = this . responseText ; } }; xmlhttp . open ( \"GET\" , \"getuser.php?q=\" + str , true ); xmlhttp . send (); } } </ script > </ head > < body > < form > < select name = \"users\" onchange = \"showUser(this.value)\" > < option value = \"\" > Select a person: </ option > < option value = \"1\" > Peter Griffin </ option > < option value = \"2\" > Lois Griffin </ option > < option value = \"3\" > Joseph Swanson </ option > < option value = \"4\" > Glenn Quagmire </ option > </ select > </ form > < br > < div id = \"txtHint\" >< b > Person info will be listed here... </ b ></ div > </ body > </ html > The page on the server called by the JavaScript above is a PHP file called \"getuser.php\". The source code in \"getuser.php\" runs a query against a MySQL database, and returns the result in an HTML table. <!DOCTYPE html> <html> <head> <style> table { width: 100%; border-collapse: collapse; } table, td, th { border: 1px solid black; padding: 5px; } th {text-align: left;} </style> </head> <body> <?php $q = intval ( $_GET [ 'q' ]); $con = mysqli_connect ( 'localhost' , 'peter' , 'abc123' ); if ( ! $con ) { die ( 'Could not connect: ' . mysqli_error ( $con )); } mysqli_select_db ( $con , \"ajax_demo\" ); $sql = \"SELECT * FROM user WHERE id = '\" . $q . \"'\" ; $result = mysqli_query ( $con , $sql ); echo \"<table> <tr> <th>Firstname</th> <th>Lastname</th> <th>Age</th> <th>Hometown</th> <th>Job</th> </tr>\" ; while ( $row = mysqli_fetch_array ( $result )) { echo \"<tr>\" ; echo \"<td>\" . $row [ 'FirstName' ] . \"</td>\" ; echo \"<td>\" . $row [ 'LastName' ] . \"</td>\" ; echo \"<td>\" . $row [ 'Age' ] . \"</td>\" ; echo \"<td>\" . $row [ 'Hometown' ] . \"</td>\" ; echo \"<td>\" . $row [ 'Job' ] . \"</td>\" ; echo \"</tr>\" ; } echo \"</table>\" ; mysqli_close ( $con ); ?> </body> </html> AJAX and XML < html > < head > < script > function showCD ( str ) { if ( str == \"\" ) { document . getElementById ( \"txtHint\" ). innerHTML = \"\" ; return ; } var xmlhttp = new XMLHttpRequest (); xmlhttp . onreadystatechange = function () { if ( this . readyState == 4 && this . status == 200 ) { document . getElementById ( \"txtHint\" ). innerHTML = this . responseText ; } } xmlhttp . open ( \"GET\" , \"getcd.php?q=\" + str , true ); xmlhttp . send (); } </ script > </ head > < body > < form > Select a CD: < select name = \"cds\" onchange = \"showCD(this.value)\" > < option value = \"\" > Select a CD: </ option > < option value = \"Bob Dylan\" > Bob Dylan </ option > < option value = \"Bee Gees\" > Bee Gees </ option > < option value = \"Cat Stevens\" > Cat Stevens </ option > </ select > </ form > < div id = \"txtHint\" >< b > CD info will be listed here... </ b ></ div > </ body > </ html > <?php $q = $_GET [ \"q\" ]; $xmlDoc = new DOMDocument (); $xmlDoc -> load ( \"cd_catalog.xml\" ); $x = $xmlDoc -> getElementsByTagName ( 'ARTIST' ); for ( $i = 0 ; $i <= $x -> length - 1 ; $i ++ ) { //Process only element nodes if ( $x -> item ( $i ) -> nodeType == 1 ) { if ( $x -> item ( $i ) -> childNodes -> item ( 0 ) -> nodeValue == $q ) { $y = ( $x -> item ( $i ) -> parentNode ); } } } $cd = ( $y -> childNodes ); for ( $i = 0 ; $i < $cd -> length ; $i ++ ) { //Process only element nodes if ( $cd -> item ( $i ) -> nodeType == 1 ) { echo ( \"<b>\" . $cd -> item ( $i ) -> nodeName . \":</b> \" ); echo ( $cd -> item ( $i ) -> childNodes -> item ( 0 ) -> nodeValue ); echo ( \"<br>\" ); } } ?> AJAX Live Search Live search has many benefits compared to traditional searching: Results are shown as you type Results narrow as you continue typing If results become too narrow, remove characters to see a broader result < html > < head > < script > function showResult ( str ) { if ( str . length == 0 ) { document . getElementById ( \"livesearch\" ). innerHTML = \"\" ; document . getElementById ( \"livesearch\" ). style . border = \"0px\" ; return ; } var xmlhttp = new XMLHttpRequest (); xmlhttp . onreadystatechange = function () { if ( this . readyState == 4 && this . status == 200 ) { document . getElementById ( \"livesearch\" ). innerHTML = this . responseText ; document . getElementById ( \"livesearch\" ). style . border = \"1px solid #A5ACB2\" ; } } xmlhttp . open ( \"GET\" , \"livesearch.php?q=\" + str , true ); xmlhttp . send (); } </ script > </ head > < body > < form > < input type = \"text\" size = \"30\" onkeyup = \"showResult(this.value)\" > < div id = \"livesearch\" ></ div > </ form > </ body > </ html > <?php $xmlDoc = new DOMDocument (); $xmlDoc -> load ( \"links.xml\" ); $x = $xmlDoc -> getElementsByTagName ( 'link' ); //get the q parameter from URL $q = $_GET [ \"q\" ]; //lookup all links from the xml file if length of q>0 if ( strlen ( $q ) > 0 ) { $hint = \"\" ; for ( $i = 0 ; $i < ( $x -> length ); $i ++ ) { $y = $x -> item ( $i ) -> getElementsByTagName ( 'title' ); $z = $x -> item ( $i ) -> getElementsByTagName ( 'url' ); if ( $y -> item ( 0 ) -> nodeType == 1 ) { //find a link matching the search text if ( stristr ( $y -> item ( 0 ) -> childNodes -> item ( 0 ) -> nodeValue , $q )) { if ( $hint == \"\" ) { $hint = \"<a href='\" . $z -> item ( 0 ) -> childNodes -> item ( 0 ) -> nodeValue . \"' target='_blank'>\" . $y -> item ( 0 ) -> childNodes -> item ( 0 ) -> nodeValue . \"</a>\" ; } else { $hint = $hint . \"<br /><a href='\" . $z -> item ( 0 ) -> childNodes -> item ( 0 ) -> nodeValue . \"' target='_blank'>\" . $y -> item ( 0 ) -> childNodes -> item ( 0 ) -> nodeValue . \"</a>\" ; } } } } } // Set output to \"no suggestion\" if no hint was found // or to the correct values if ( $hint == \"\" ) { $response = \"no suggestion\" ; } else { $response = $hint ; } //output the response echo $response ; ?> AJAX Poll < html > < head > < script > function getVote ( int ) { var xmlhttp = new XMLHttpRequest (); xmlhttp . onreadystatechange = function () { if ( this . readyState == 4 && this . status == 200 ) { document . getElementById ( \"poll\" ). innerHTML = this . responseText ; } } xmlhttp . open ( \"GET\" , \"poll_vote.php?vote=\" + int , true ); xmlhttp . send (); } </ script > </ head > < body > < div id = \"poll\" > < h3 > Do you like PHP and AJAX so far? </ h3 > < form > Yes: < input type = \"radio\" name = \"vote\" value = \"0\" onclick = \"getVote(this.value)\" >< br > No: < input type = \"radio\" name = \"vote\" value = \"1\" onclick = \"getVote(this.value)\" > </ form > </ div > </ body > </ html > <?php $vote = $_REQUEST [ 'vote' ]; //get content of textfile $filename = \"poll_result.txt\" ; $content = file ( $filename ); //put content in array $array = explode ( \"||\" , $content [ 0 ]); $yes = $array [ 0 ]; $no = $array [ 1 ]; if ( $vote == 0 ) { $yes = $yes + 1 ; } if ( $vote == 1 ) { $no = $no + 1 ; } //insert votes to txt file $insertvote = $yes . \"||\" . $no ; $fp = fopen ( $filename , \"w\" ); fputs ( $fp , $insertvote ); fclose ( $fp ); ?> <h2>Result:</h2> <table> <tr> <td>Yes:</td> <td><img src=\"poll.gif\" width=' <?php echo ( 100 * round ( $yes / ( $no + $yes ), 2 )); ?> ' height='20'> <?php echo ( 100 * round ( $yes / ( $no + $yes ), 2 )); ?> % </td> </tr> <tr> <td>No:</td> <td><img src=\"poll.gif\" width=' <?php echo ( 100 * round ( $no / ( $no + $yes ), 2 )); ?> ' height='20'> <?php echo ( 100 * round ( $no / ( $no + $yes ), 2 )); ?> % </td> </tr> </table> Remember to allow your web server to edit the text file. Do NOT give everyone access, just the web server (PHP).","title":"Ajax"},{"location":"Adv/phpAjax/#what-is-ajax","text":"AJAX = Asynchronous JavaScript and XML. AJAX is a technique for creating fast and dynamic web pages. AJAX allows web pages to be updated asynchronously by exchanging small amounts of data with the server behind the scenes. This means that it is possible to update parts of a web page, without reloading the whole page. Classic web pages, (which do not use AJAX) must reload the entire page if the content should change. Examples of applications using AJAX: Google Maps, Gmail, Youtube, and Facebook tabs. AJAX is based on internet standards, and uses a combination of: XMLHttpRequest object (to exchange data asynchronously with a server) JavaScript/DOM (to display/interact with the information) CSS (to style the data) XML (often used as the format for transferring data) AJAX applications are browser- and platform-independent!","title":"What is AJAX?"},{"location":"Adv/phpAjax/#ajax-and-php","text":"< html > < head > < script > function showHint ( str ) { if ( str . length == 0 ) { document . getElementById ( \"txtHint\" ). innerHTML = \"\" ; return ; } else { var xmlhttp = new XMLHttpRequest (); xmlhttp . onreadystatechange = function () { if ( this . readyState == 4 && this . status == 200 ) { document . getElementById ( \"txtHint\" ). innerHTML = this . responseText ; } }; xmlhttp . open ( \"GET\" , \"gethint.php?q=\" + str , true ); xmlhttp . send (); } } </ script > </ head > < body > < p >< b > Start typing a name in the input field below: </ b ></ p > < form action = \"\" > < label for = \"fname\" > First name: </ label > < input type = \"text\" id = \"fname\" name = \"fname\" onkeyup = \"showHint(this.value)\" > </ form > < p > Suggestions: < span id = \"txtHint\" ></ span ></ p > </ body > </ html >","title":"AJAX and PHP"},{"location":"Adv/phpAjax/#the-php-file-gethintphp","text":"The PHP file checks an array of names, and returns the corresponding name(s) to the browser <?php // Array with names $a [] = \"Anna\" ; $a [] = \"Brittany\" ; $a [] = \"Cinderella\" ; $a [] = \"Diana\" ; $a [] = \"Eva\" ; $a [] = \"Fiona\" ; $a [] = \"Gunda\" ; $a [] = \"Hege\" ; $a [] = \"Inga\" ; $a [] = \"Johanna\" ; $a [] = \"Kitty\" ; $a [] = \"Linda\" ; $a [] = \"Nina\" ; $a [] = \"Ophelia\" ; $a [] = \"Petunia\" ; $a [] = \"Amanda\" ; $a [] = \"Raquel\" ; $a [] = \"Cindy\" ; $a [] = \"Doris\" ; $a [] = \"Eve\" ; $a [] = \"Evita\" ; $a [] = \"Sunniva\" ; $a [] = \"Tove\" ; $a [] = \"Unni\" ; $a [] = \"Violet\" ; $a [] = \"Liza\" ; $a [] = \"Elizabeth\" ; $a [] = \"Ellen\" ; $a [] = \"Wenche\" ; $a [] = \"Vicky\" ; // get the q parameter from URL $q = $_REQUEST [ \"q\" ]; $hint = \"\" ; // lookup all hints from array if $q is different from \"\" if ( $q !== \"\" ) { $q = strtolower ( $q ); $len = strlen ( $q ); foreach ( $a as $name ) { if ( stristr ( $q , substr ( $name , 0 , $len ))) { if ( $hint === \"\" ) { $hint = $name ; } else { $hint .= \", $name \" ; } } } } // Output \"no suggestion\" if no hint was found or output correct values echo $hint === \"\" ? \"no suggestion\" : $hint ; ?>","title":"The PHP File - \"gethint.php\""},{"location":"Adv/phpAjax/#ajax-and-mysql","text":"AJAX can be used for interactive communication with a database. The database table we use in the example above looks like this: id FirstName LastName Age Hometown Job 1 Peter Griffin 41 Quahog Brewery 2 Lois Griffin 40 Newport Piano Teacher 3 Joseph Swanson 39 Quahog Police Officer 4 Glenn Quagmire 41 Quahog Pilot < html > < head > < script > function showUser ( str ) { if ( str == \"\" ) { document . getElementById ( \"txtHint\" ). innerHTML = \"\" ; return ; } else { var xmlhttp = new XMLHttpRequest (); xmlhttp . onreadystatechange = function () { if ( this . readyState == 4 && this . status == 200 ) { document . getElementById ( \"txtHint\" ). innerHTML = this . responseText ; } }; xmlhttp . open ( \"GET\" , \"getuser.php?q=\" + str , true ); xmlhttp . send (); } } </ script > </ head > < body > < form > < select name = \"users\" onchange = \"showUser(this.value)\" > < option value = \"\" > Select a person: </ option > < option value = \"1\" > Peter Griffin </ option > < option value = \"2\" > Lois Griffin </ option > < option value = \"3\" > Joseph Swanson </ option > < option value = \"4\" > Glenn Quagmire </ option > </ select > </ form > < br > < div id = \"txtHint\" >< b > Person info will be listed here... </ b ></ div > </ body > </ html > The page on the server called by the JavaScript above is a PHP file called \"getuser.php\". The source code in \"getuser.php\" runs a query against a MySQL database, and returns the result in an HTML table. <!DOCTYPE html> <html> <head> <style> table { width: 100%; border-collapse: collapse; } table, td, th { border: 1px solid black; padding: 5px; } th {text-align: left;} </style> </head> <body> <?php $q = intval ( $_GET [ 'q' ]); $con = mysqli_connect ( 'localhost' , 'peter' , 'abc123' ); if ( ! $con ) { die ( 'Could not connect: ' . mysqli_error ( $con )); } mysqli_select_db ( $con , \"ajax_demo\" ); $sql = \"SELECT * FROM user WHERE id = '\" . $q . \"'\" ; $result = mysqli_query ( $con , $sql ); echo \"<table> <tr> <th>Firstname</th> <th>Lastname</th> <th>Age</th> <th>Hometown</th> <th>Job</th> </tr>\" ; while ( $row = mysqli_fetch_array ( $result )) { echo \"<tr>\" ; echo \"<td>\" . $row [ 'FirstName' ] . \"</td>\" ; echo \"<td>\" . $row [ 'LastName' ] . \"</td>\" ; echo \"<td>\" . $row [ 'Age' ] . \"</td>\" ; echo \"<td>\" . $row [ 'Hometown' ] . \"</td>\" ; echo \"<td>\" . $row [ 'Job' ] . \"</td>\" ; echo \"</tr>\" ; } echo \"</table>\" ; mysqli_close ( $con ); ?> </body> </html>","title":"AJAX and MySQL"},{"location":"Adv/phpAjax/#ajax-and-xml","text":"< html > < head > < script > function showCD ( str ) { if ( str == \"\" ) { document . getElementById ( \"txtHint\" ). innerHTML = \"\" ; return ; } var xmlhttp = new XMLHttpRequest (); xmlhttp . onreadystatechange = function () { if ( this . readyState == 4 && this . status == 200 ) { document . getElementById ( \"txtHint\" ). innerHTML = this . responseText ; } } xmlhttp . open ( \"GET\" , \"getcd.php?q=\" + str , true ); xmlhttp . send (); } </ script > </ head > < body > < form > Select a CD: < select name = \"cds\" onchange = \"showCD(this.value)\" > < option value = \"\" > Select a CD: </ option > < option value = \"Bob Dylan\" > Bob Dylan </ option > < option value = \"Bee Gees\" > Bee Gees </ option > < option value = \"Cat Stevens\" > Cat Stevens </ option > </ select > </ form > < div id = \"txtHint\" >< b > CD info will be listed here... </ b ></ div > </ body > </ html > <?php $q = $_GET [ \"q\" ]; $xmlDoc = new DOMDocument (); $xmlDoc -> load ( \"cd_catalog.xml\" ); $x = $xmlDoc -> getElementsByTagName ( 'ARTIST' ); for ( $i = 0 ; $i <= $x -> length - 1 ; $i ++ ) { //Process only element nodes if ( $x -> item ( $i ) -> nodeType == 1 ) { if ( $x -> item ( $i ) -> childNodes -> item ( 0 ) -> nodeValue == $q ) { $y = ( $x -> item ( $i ) -> parentNode ); } } } $cd = ( $y -> childNodes ); for ( $i = 0 ; $i < $cd -> length ; $i ++ ) { //Process only element nodes if ( $cd -> item ( $i ) -> nodeType == 1 ) { echo ( \"<b>\" . $cd -> item ( $i ) -> nodeName . \":</b> \" ); echo ( $cd -> item ( $i ) -> childNodes -> item ( 0 ) -> nodeValue ); echo ( \"<br>\" ); } } ?>","title":"AJAX and XML"},{"location":"Adv/phpAjax/#ajax-live-search","text":"Live search has many benefits compared to traditional searching: Results are shown as you type Results narrow as you continue typing If results become too narrow, remove characters to see a broader result < html > < head > < script > function showResult ( str ) { if ( str . length == 0 ) { document . getElementById ( \"livesearch\" ). innerHTML = \"\" ; document . getElementById ( \"livesearch\" ). style . border = \"0px\" ; return ; } var xmlhttp = new XMLHttpRequest (); xmlhttp . onreadystatechange = function () { if ( this . readyState == 4 && this . status == 200 ) { document . getElementById ( \"livesearch\" ). innerHTML = this . responseText ; document . getElementById ( \"livesearch\" ). style . border = \"1px solid #A5ACB2\" ; } } xmlhttp . open ( \"GET\" , \"livesearch.php?q=\" + str , true ); xmlhttp . send (); } </ script > </ head > < body > < form > < input type = \"text\" size = \"30\" onkeyup = \"showResult(this.value)\" > < div id = \"livesearch\" ></ div > </ form > </ body > </ html > <?php $xmlDoc = new DOMDocument (); $xmlDoc -> load ( \"links.xml\" ); $x = $xmlDoc -> getElementsByTagName ( 'link' ); //get the q parameter from URL $q = $_GET [ \"q\" ]; //lookup all links from the xml file if length of q>0 if ( strlen ( $q ) > 0 ) { $hint = \"\" ; for ( $i = 0 ; $i < ( $x -> length ); $i ++ ) { $y = $x -> item ( $i ) -> getElementsByTagName ( 'title' ); $z = $x -> item ( $i ) -> getElementsByTagName ( 'url' ); if ( $y -> item ( 0 ) -> nodeType == 1 ) { //find a link matching the search text if ( stristr ( $y -> item ( 0 ) -> childNodes -> item ( 0 ) -> nodeValue , $q )) { if ( $hint == \"\" ) { $hint = \"<a href='\" . $z -> item ( 0 ) -> childNodes -> item ( 0 ) -> nodeValue . \"' target='_blank'>\" . $y -> item ( 0 ) -> childNodes -> item ( 0 ) -> nodeValue . \"</a>\" ; } else { $hint = $hint . \"<br /><a href='\" . $z -> item ( 0 ) -> childNodes -> item ( 0 ) -> nodeValue . \"' target='_blank'>\" . $y -> item ( 0 ) -> childNodes -> item ( 0 ) -> nodeValue . \"</a>\" ; } } } } } // Set output to \"no suggestion\" if no hint was found // or to the correct values if ( $hint == \"\" ) { $response = \"no suggestion\" ; } else { $response = $hint ; } //output the response echo $response ; ?>","title":"AJAX Live Search"},{"location":"Adv/phpAjax/#ajax-poll","text":"< html > < head > < script > function getVote ( int ) { var xmlhttp = new XMLHttpRequest (); xmlhttp . onreadystatechange = function () { if ( this . readyState == 4 && this . status == 200 ) { document . getElementById ( \"poll\" ). innerHTML = this . responseText ; } } xmlhttp . open ( \"GET\" , \"poll_vote.php?vote=\" + int , true ); xmlhttp . send (); } </ script > </ head > < body > < div id = \"poll\" > < h3 > Do you like PHP and AJAX so far? </ h3 > < form > Yes: < input type = \"radio\" name = \"vote\" value = \"0\" onclick = \"getVote(this.value)\" >< br > No: < input type = \"radio\" name = \"vote\" value = \"1\" onclick = \"getVote(this.value)\" > </ form > </ div > </ body > </ html > <?php $vote = $_REQUEST [ 'vote' ]; //get content of textfile $filename = \"poll_result.txt\" ; $content = file ( $filename ); //put content in array $array = explode ( \"||\" , $content [ 0 ]); $yes = $array [ 0 ]; $no = $array [ 1 ]; if ( $vote == 0 ) { $yes = $yes + 1 ; } if ( $vote == 1 ) { $no = $no + 1 ; } //insert votes to txt file $insertvote = $yes . \"||\" . $no ; $fp = fopen ( $filename , \"w\" ); fputs ( $fp , $insertvote ); fclose ( $fp ); ?> <h2>Result:</h2> <table> <tr> <td>Yes:</td> <td><img src=\"poll.gif\" width=' <?php echo ( 100 * round ( $yes / ( $no + $yes ), 2 )); ?> ' height='20'> <?php echo ( 100 * round ( $yes / ( $no + $yes ), 2 )); ?> % </td> </tr> <tr> <td>No:</td> <td><img src=\"poll.gif\" width=' <?php echo ( 100 * round ( $no / ( $no + $yes ), 2 )); ?> ' height='20'> <?php echo ( 100 * round ( $no / ( $no + $yes ), 2 )); ?> % </td> </tr> </table> Remember to allow your web server to edit the text file. Do NOT give everyone access, just the web server (PHP).","title":"AJAX Poll"},{"location":"Adv/phpFile/","text":"PHP File Handling File handling is an important part of any web application. You often need to open and process a file for different tasks. PHP has several functions for creating, reading, uploading, and editing files. readfile() The readfile() function reads a file and writes it to the output buffer. Assume we have a text file called \"webdictionary.txt\", stored on the server, that looks like this: AJAX = Asynchronous JavaScript and XML CSS = Cascading Style Sheets HTML = Hyper Text Markup Language PHP = PHP Hypertext Preprocessor SQL = Structured Query Language SVG = Scalable Vector Graphics XML = EXtensible Markup Language The PHP code to read the file and write it to the output buffer is as follows (the readfile() function returns the number of bytes read on success): <?php echo readfile ( \"webdictionary.txt\" ); ?> The readfile() function is useful if all you want to do is open up a file and read its contents. fopen() A better method to open files is with the fopen() function. This function gives you more options than the readfile() function. <?php $myfile = fopen ( \"webdictionary.txt\" , \"r\" ) or die ( \"Unable to open file!\" ); echo fread ( $myfile , filesize ( \"webdictionary.txt\" )); fclose ( $myfile ); ?> The file may be opened in one of the following modes: Modes Description r Open a file for read only. File pointer starts at the beginning of the file w Open a file for write only. Erases the contents of the file or creates a new file if it doesn't exist. File pointer starts at the beginning of the file a Open a file for write only. The existing data in file is preserved. File pointer starts at the end of the file. Creates a new file if the file doesn't exist x Creates a new file for write only. Returns FALSE and an error if file already exists r+ Open a file for read/write. File pointer starts at the beginning of the file w+ Open a file for read/write. Erases the contents of the file or creates a new file if it doesn't exist. File pointer starts at the beginning of the file a+ Open a file for read/write. The existing data in file is preserved. File pointer starts at the end of the file. Creates a new file if the file doesn't exist x+ Creates a new file for read/write. Returns FALSE and an error if file already exists The fopen() function is also used to create a file. If you use fopen() on a file that does not exist, it will create it, given that the file is opened for writing (w) or appending (a). <?php $myfile = fopen ( \"webdictionary.txt\" , \"w\" ) or die ( \"Unable to open file!\" ); fwrite ( $myfile , \"Hello World!\" ); fclose ( $myfile ); ?> File Permissions If you are having errors when trying to get this code to run, check that you have granted your PHP file access to write information to the hard drive. fread() The fread() function reads from an open file. The first parameter of fread() contains the name of the file to read from and the second parameter specifies the maximum number of bytes to read. The following PHP code reads the \"webdictionary.txt\" file to the end: fread($myfile,filesize(\"webdictionary.txt\")); fwrite() The fwrite() function is used to write to a file. The first parameter of fwrite() contains the name of the file to write to and the second parameter is the string to be written. <?php $myfile = fopen ( \"newfile.txt\" , \"w\" ) or die ( \"Unable to open file!\" ); $txt = \"John Doe \\n \" ; fwrite ( $myfile , $txt ); $txt = \"Jane Doe \\n \" ; fwrite ( $myfile , $txt ); fclose ( $myfile ); ?> fclose() The fclose() function is used to close an open file. It's a good programming practice to close all files after you have finished with them. The fclose() requires the name of the file (or a variable that holds the filename) we want to close: <?php $myfile = fopen ( \"webdictionary.txt\" , \"r\" ); // some code to be executed.... fclose ( $myfile ); ?> fgets() The fgets() function is used to read a single line from a file. <?php $myfile = fopen ( \"webdictionary.txt\" , \"r\" ) or die ( \"Unable to open file!\" ); echo fgets ( $myfile ); fclose ( $myfile ); ?> After a call to the fgets() function, the file pointer has moved to the next line. feof() The feof() function checks if the \"end-of-file\" (EOF) has been reached. The feof() function is useful for looping through data of unknown length. <?php $myfile = fopen ( \"webdictionary.txt\" , \"r\" ) or die ( \"Unable to open file!\" ); // Output one line until end-of-file while ( ! feof ( $myfile )) { echo fgets ( $myfile ) . \"<br>\" ; } fclose ( $myfile ); ?> fgetc() The fgetc() function is used to read a single character from a file. <?php $myfile = fopen ( \"webdictionary.txt\" , \"r\" ) or die ( \"Unable to open file!\" ); // Output one character until end-of-file while ( ! feof ( $myfile )) { echo fgetc ( $myfile ); } fclose ( $myfile ); ?> After a call to the fgetc() function, the file pointer moves to the next character. PHP File Upload With PHP, it is easy to upload files to the server. Configure The \"php.ini\" File First, ensure that PHP is configured to allow file uploads. In your \"php.ini\" file, search for the file_uploads directive, and set it to On: file_uploads = On Create The HTML Form <!DOCTYPE html> < html > < body > < form action = \"upload.php\" method = \"post\" enctype = \"multipart/form-data\" > Select image to upload: < input type = \"file\" name = \"fileToUpload\" id = \"fileToUpload\" > < input type = \"submit\" value = \"Upload Image\" name = \"submit\" > </ form > </ body > </ html > Some rules to follow for the HTML form above: Make sure that the form uses method=\"post\" The form also needs the following attribute: enctype=\"multipart/form-data\". It specifies which content-type to use when submitting the form Without the requirements above, the file upload will not work. Other things to notice: The type=\"file\" attribute of the input tag shows the input field as a file-select control, with a \"Browse\" button next to the input control The form above sends data to a file called \"upload.php\", which we will create next. Create The Upload File PHP Script The \"upload.php\" file contains the code for uploading a file: <?php $target_dir = \"uploads/\" ; $target_file = $target_dir . basename ( $_FILES [ \"fileToUpload\" ][ \"name\" ]); $uploadOk = 1 ; $imageFileType = strtolower ( pathinfo ( $target_file , PATHINFO_EXTENSION )); // Check if image file is a actual image or fake image if ( isset ( $_POST [ \"submit\" ])) { $check = getimagesize ( $_FILES [ \"fileToUpload\" ][ \"tmp_name\" ]); if ( $check !== false ) { echo \"File is an image - \" . $check [ \"mime\" ] . \".\" ; $uploadOk = 1 ; } else { echo \"File is not an image.\" ; $uploadOk = 0 ; } } ?> PHP script explained: $target_dir = \"uploads/\" - specifies the directory where the file is going to be placed $target_file specifies the path of the file to be uploaded $uploadOk=1 is not used yet (will be used later) $imageFileType holds the file extension of the file (in lower case) Next, check if the image file is an actual image or a fake image You will need to create a new directory called \"uploads\" in the directory where \"upload.php\" file resides. The uploaded files will be saved there. Check if File Already Exists Now we can add some restrictions. First, we will check if the file already exists in the \"uploads\" folder. If it does, an error message is displayed, and $uploadOk is set to 0: // Check if file already exists if (file_exists($target_file)) { echo \"Sorry, file already exists.\"; $uploadOk = 0; } ?> Limit File Size The file input field in our HTML form above is named \"fileToUpload\". Now, we want to check the size of the file. If the file is larger than 500KB, an error message is displayed, and $uploadOk is set to 0: // Check file size if ($_FILES[\"fileToUpload\"][\"size\"] > 500000) { echo \"Sorry, your file is too large.\"; $uploadOk = 0; } ?> Limit File Type The code below only allows users to upload JPG, JPEG, PNG, and GIF files. All other file types gives an error message before setting $uploadOk to 0: // Allow certain file formats if($imageFileType != \"jpg\" && $imageFileType != \"png\" && $imageFileType != \"jpeg\" && $imageFileType != \"gif\" ) { echo \"Sorry, only JPG, JPEG, PNG & GIF files are allowed.\"; $uploadOk = 0; } ?> Complete Upload File PHP Script The complete \"upload.php\" file now looks like this: <?php $target_dir = \"uploads/\" ; $target_file = $target_dir . basename ( $_FILES [ \"fileToUpload\" ][ \"name\" ]); $uploadOk = 1 ; $imageFileType = strtolower ( pathinfo ( $target_file , PATHINFO_EXTENSION )); // Check if image file is a actual image or fake image if ( isset ( $_POST [ \"submit\" ])) { $check = getimagesize ( $_FILES [ \"fileToUpload\" ][ \"tmp_name\" ]); if ( $check !== false ) { echo \"File is an image - \" . $check [ \"mime\" ] . \".\" ; $uploadOk = 1 ; } else { echo \"File is not an image.\" ; $uploadOk = 0 ; } } // Check if file already exists if ( file_exists ( $target_file )) { echo \"Sorry, file already exists.\" ; $uploadOk = 0 ; } // Check file size if ( $_FILES [ \"fileToUpload\" ][ \"size\" ] > 500000 ) { echo \"Sorry, your file is too large.\" ; $uploadOk = 0 ; } // Allow certain file formats if ( $imageFileType != \"jpg\" && $imageFileType != \"png\" && $imageFileType != \"jpeg\" && $imageFileType != \"gif\" ) { echo \"Sorry, only JPG, JPEG, PNG & GIF files are allowed.\" ; $uploadOk = 0 ; } // Check if $uploadOk is set to 0 by an error if ( $uploadOk == 0 ) { echo \"Sorry, your file was not uploaded.\" ; // if everything is ok, try to upload file } else { if ( move_uploaded_file ( $_FILES [ \"fileToUpload\" ][ \"tmp_name\" ], $target_file )) { echo \"The file \" . htmlspecialchars ( basename ( $_FILES [ \"fileToUpload\" ][ \"name\" ])) . \" has been uploaded.\" ; } else { echo \"Sorry, there was an error uploading your file.\" ; } } ?> PHP Directory Functions Function Description chdir() Changes the current directory chroot() Changes the root directory closedir() Closes a directory handle dir() Returns an instance of the Directory class getcwd() Returns the current working directory opendir() Opens a directory handle readdir() Returns an entry from a directory handle rewinddir() Resets a directory handle scandir() Returns an array of files and directories of a specified directory chdir() The chdir() function changes the current working directory. <?php // Get current directory echo getcwd () . \"<br>\" ; // Change directory chdir ( \"images\" ); // Get current directory echo getcwd (); ?> chroot() The chroot() function changes the root directory. <?php // Change root directory chroot ( \"/path/to/chroot/\" ); // Get current directory echo getcwd (); ?> closedir() The closedir() function closes a directory handle. <?php $dir = \"/images/\" ; // Open a directory, and read its contents if ( is_dir ( $dir )){ if ( $dh = opendir ( $dir )){ while (( $file = readdir ( $dh )) !== false ){ echo \"filename:\" . $file . \"<br>\" ; } closedir ( $dh ); } } ?> dir() The dir() function returns an instance of the Directory class. <?php $d = dir ( getcwd ()); echo \"Handle: \" . $d -> handle . \"<br>\" ; echo \"Path: \" . $d -> path . \"<br>\" ; while (( $file = $d -> read ()) !== false ){ echo \"filename: \" . $file . \"<br>\" ; } $d -> close (); ?> Handle: Resource id #2 Path: /etc/php filename: . filename: .. filename: ajax.gif filename: books.xml filename: cdcatalog.xml filename: cd_catalog.xml filename: default.asp filename: demo_array.asp filename: demo_array.htm ... ... ... getcwd() The getcwd() function returns the current working directory. <?php echo getcwd (); ?> /home/username/public_html opendir() The opendir() function opens a directory handle. <?php $dir = \"/images/\" ; // Open a directory, and read its contents if ( is_dir ( $dir )){ if ( $dh = opendir ( $dir )){ while (( $file = readdir ( $dh )) !== false ){ echo \"filename:\" . $file . \"<br>\" ; } closedir ( $dh ); } } ?> readdir() The readdir() function returns an entry from a directory handle. <?php $dir = \"/images/\" ; // Open a directory, and read its contents if ( is_dir ( $dir )){ if ( $dh = opendir ( $dir )){ while (( $file = readdir ( $dh )) !== false ){ echo \"filename:\" . $file . \"<br>\" ; } closedir ( $dh ); } } ?> rewinddir() The rewinddir() function resets a directory handle. <?php $dir = \"/images/\" ; // Open a directory, and read its contents if ( is_dir ( $dir )){ if ( $dh = opendir ( $dir )){ // List files in images directory while (( $file = readdir ( $dh )) !== false ){ echo \"filename:\" . $file . \"<br>\" ; } rewinddir (); // List once again files in images directory while (( $file = readdir ( $dh )) !== false ){ echo \"filename:\" . $file . \"<br>\" ; } closedir ( $dh ); } } ?> scandir() The scandir() function returns an array of files and directories of a specified directory. <?php $dir = \"/images/\" ; // Sort in ascending order - this is default $a = scandir ( $dir ); // Sort in descending order $b = scandir ( $dir , 1 ); print_r ( $a ); print_r ( $b ); ?>","title":"Filesystem"},{"location":"Adv/phpFile/#php-file-handling","text":"File handling is an important part of any web application. You often need to open and process a file for different tasks. PHP has several functions for creating, reading, uploading, and editing files.","title":"PHP File Handling"},{"location":"Adv/phpFile/#readfile","text":"The readfile() function reads a file and writes it to the output buffer. Assume we have a text file called \"webdictionary.txt\", stored on the server, that looks like this: AJAX = Asynchronous JavaScript and XML CSS = Cascading Style Sheets HTML = Hyper Text Markup Language PHP = PHP Hypertext Preprocessor SQL = Structured Query Language SVG = Scalable Vector Graphics XML = EXtensible Markup Language The PHP code to read the file and write it to the output buffer is as follows (the readfile() function returns the number of bytes read on success): <?php echo readfile ( \"webdictionary.txt\" ); ?> The readfile() function is useful if all you want to do is open up a file and read its contents.","title":"readfile()"},{"location":"Adv/phpFile/#fopen","text":"A better method to open files is with the fopen() function. This function gives you more options than the readfile() function. <?php $myfile = fopen ( \"webdictionary.txt\" , \"r\" ) or die ( \"Unable to open file!\" ); echo fread ( $myfile , filesize ( \"webdictionary.txt\" )); fclose ( $myfile ); ?> The file may be opened in one of the following modes: Modes Description r Open a file for read only. File pointer starts at the beginning of the file w Open a file for write only. Erases the contents of the file or creates a new file if it doesn't exist. File pointer starts at the beginning of the file a Open a file for write only. The existing data in file is preserved. File pointer starts at the end of the file. Creates a new file if the file doesn't exist x Creates a new file for write only. Returns FALSE and an error if file already exists r+ Open a file for read/write. File pointer starts at the beginning of the file w+ Open a file for read/write. Erases the contents of the file or creates a new file if it doesn't exist. File pointer starts at the beginning of the file a+ Open a file for read/write. The existing data in file is preserved. File pointer starts at the end of the file. Creates a new file if the file doesn't exist x+ Creates a new file for read/write. Returns FALSE and an error if file already exists The fopen() function is also used to create a file. If you use fopen() on a file that does not exist, it will create it, given that the file is opened for writing (w) or appending (a). <?php $myfile = fopen ( \"webdictionary.txt\" , \"w\" ) or die ( \"Unable to open file!\" ); fwrite ( $myfile , \"Hello World!\" ); fclose ( $myfile ); ?>","title":"fopen()"},{"location":"Adv/phpFile/#file-permissions","text":"If you are having errors when trying to get this code to run, check that you have granted your PHP file access to write information to the hard drive.","title":"File Permissions"},{"location":"Adv/phpFile/#fread","text":"The fread() function reads from an open file. The first parameter of fread() contains the name of the file to read from and the second parameter specifies the maximum number of bytes to read. The following PHP code reads the \"webdictionary.txt\" file to the end: fread($myfile,filesize(\"webdictionary.txt\"));","title":"fread()"},{"location":"Adv/phpFile/#fwrite","text":"The fwrite() function is used to write to a file. The first parameter of fwrite() contains the name of the file to write to and the second parameter is the string to be written. <?php $myfile = fopen ( \"newfile.txt\" , \"w\" ) or die ( \"Unable to open file!\" ); $txt = \"John Doe \\n \" ; fwrite ( $myfile , $txt ); $txt = \"Jane Doe \\n \" ; fwrite ( $myfile , $txt ); fclose ( $myfile ); ?>","title":"fwrite()"},{"location":"Adv/phpFile/#fclose","text":"The fclose() function is used to close an open file. It's a good programming practice to close all files after you have finished with them. The fclose() requires the name of the file (or a variable that holds the filename) we want to close: <?php $myfile = fopen ( \"webdictionary.txt\" , \"r\" ); // some code to be executed.... fclose ( $myfile ); ?>","title":"fclose()"},{"location":"Adv/phpFile/#fgets","text":"The fgets() function is used to read a single line from a file. <?php $myfile = fopen ( \"webdictionary.txt\" , \"r\" ) or die ( \"Unable to open file!\" ); echo fgets ( $myfile ); fclose ( $myfile ); ?> After a call to the fgets() function, the file pointer has moved to the next line.","title":"fgets()"},{"location":"Adv/phpFile/#feof","text":"The feof() function checks if the \"end-of-file\" (EOF) has been reached. The feof() function is useful for looping through data of unknown length. <?php $myfile = fopen ( \"webdictionary.txt\" , \"r\" ) or die ( \"Unable to open file!\" ); // Output one line until end-of-file while ( ! feof ( $myfile )) { echo fgets ( $myfile ) . \"<br>\" ; } fclose ( $myfile ); ?>","title":"feof()"},{"location":"Adv/phpFile/#fgetc","text":"The fgetc() function is used to read a single character from a file. <?php $myfile = fopen ( \"webdictionary.txt\" , \"r\" ) or die ( \"Unable to open file!\" ); // Output one character until end-of-file while ( ! feof ( $myfile )) { echo fgetc ( $myfile ); } fclose ( $myfile ); ?> After a call to the fgetc() function, the file pointer moves to the next character.","title":"fgetc()"},{"location":"Adv/phpFile/#php-file-upload","text":"With PHP, it is easy to upload files to the server.","title":"PHP File Upload"},{"location":"Adv/phpFile/#configure-the-phpini-file","text":"First, ensure that PHP is configured to allow file uploads. In your \"php.ini\" file, search for the file_uploads directive, and set it to On: file_uploads = On","title":"Configure The \"php.ini\" File"},{"location":"Adv/phpFile/#create-the-html-form","text":"<!DOCTYPE html> < html > < body > < form action = \"upload.php\" method = \"post\" enctype = \"multipart/form-data\" > Select image to upload: < input type = \"file\" name = \"fileToUpload\" id = \"fileToUpload\" > < input type = \"submit\" value = \"Upload Image\" name = \"submit\" > </ form > </ body > </ html > Some rules to follow for the HTML form above: Make sure that the form uses method=\"post\" The form also needs the following attribute: enctype=\"multipart/form-data\". It specifies which content-type to use when submitting the form Without the requirements above, the file upload will not work. Other things to notice: The type=\"file\" attribute of the input tag shows the input field as a file-select control, with a \"Browse\" button next to the input control The form above sends data to a file called \"upload.php\", which we will create next.","title":"Create The HTML Form"},{"location":"Adv/phpFile/#create-the-upload-file-php-script","text":"The \"upload.php\" file contains the code for uploading a file: <?php $target_dir = \"uploads/\" ; $target_file = $target_dir . basename ( $_FILES [ \"fileToUpload\" ][ \"name\" ]); $uploadOk = 1 ; $imageFileType = strtolower ( pathinfo ( $target_file , PATHINFO_EXTENSION )); // Check if image file is a actual image or fake image if ( isset ( $_POST [ \"submit\" ])) { $check = getimagesize ( $_FILES [ \"fileToUpload\" ][ \"tmp_name\" ]); if ( $check !== false ) { echo \"File is an image - \" . $check [ \"mime\" ] . \".\" ; $uploadOk = 1 ; } else { echo \"File is not an image.\" ; $uploadOk = 0 ; } } ?> PHP script explained: $target_dir = \"uploads/\" - specifies the directory where the file is going to be placed $target_file specifies the path of the file to be uploaded $uploadOk=1 is not used yet (will be used later) $imageFileType holds the file extension of the file (in lower case) Next, check if the image file is an actual image or a fake image You will need to create a new directory called \"uploads\" in the directory where \"upload.php\" file resides. The uploaded files will be saved there.","title":"Create The Upload File PHP Script"},{"location":"Adv/phpFile/#check-if-file-already-exists","text":"Now we can add some restrictions. First, we will check if the file already exists in the \"uploads\" folder. If it does, an error message is displayed, and $uploadOk is set to 0: // Check if file already exists if (file_exists($target_file)) { echo \"Sorry, file already exists.\"; $uploadOk = 0; } ?>","title":"Check if File Already Exists"},{"location":"Adv/phpFile/#limit-file-size","text":"The file input field in our HTML form above is named \"fileToUpload\". Now, we want to check the size of the file. If the file is larger than 500KB, an error message is displayed, and $uploadOk is set to 0: // Check file size if ($_FILES[\"fileToUpload\"][\"size\"] > 500000) { echo \"Sorry, your file is too large.\"; $uploadOk = 0; } ?>","title":"Limit File Size"},{"location":"Adv/phpFile/#limit-file-type","text":"The code below only allows users to upload JPG, JPEG, PNG, and GIF files. All other file types gives an error message before setting $uploadOk to 0: // Allow certain file formats if($imageFileType != \"jpg\" && $imageFileType != \"png\" && $imageFileType != \"jpeg\" && $imageFileType != \"gif\" ) { echo \"Sorry, only JPG, JPEG, PNG & GIF files are allowed.\"; $uploadOk = 0; } ?>","title":"Limit File Type"},{"location":"Adv/phpFile/#complete-upload-file-php-script","text":"The complete \"upload.php\" file now looks like this: <?php $target_dir = \"uploads/\" ; $target_file = $target_dir . basename ( $_FILES [ \"fileToUpload\" ][ \"name\" ]); $uploadOk = 1 ; $imageFileType = strtolower ( pathinfo ( $target_file , PATHINFO_EXTENSION )); // Check if image file is a actual image or fake image if ( isset ( $_POST [ \"submit\" ])) { $check = getimagesize ( $_FILES [ \"fileToUpload\" ][ \"tmp_name\" ]); if ( $check !== false ) { echo \"File is an image - \" . $check [ \"mime\" ] . \".\" ; $uploadOk = 1 ; } else { echo \"File is not an image.\" ; $uploadOk = 0 ; } } // Check if file already exists if ( file_exists ( $target_file )) { echo \"Sorry, file already exists.\" ; $uploadOk = 0 ; } // Check file size if ( $_FILES [ \"fileToUpload\" ][ \"size\" ] > 500000 ) { echo \"Sorry, your file is too large.\" ; $uploadOk = 0 ; } // Allow certain file formats if ( $imageFileType != \"jpg\" && $imageFileType != \"png\" && $imageFileType != \"jpeg\" && $imageFileType != \"gif\" ) { echo \"Sorry, only JPG, JPEG, PNG & GIF files are allowed.\" ; $uploadOk = 0 ; } // Check if $uploadOk is set to 0 by an error if ( $uploadOk == 0 ) { echo \"Sorry, your file was not uploaded.\" ; // if everything is ok, try to upload file } else { if ( move_uploaded_file ( $_FILES [ \"fileToUpload\" ][ \"tmp_name\" ], $target_file )) { echo \"The file \" . htmlspecialchars ( basename ( $_FILES [ \"fileToUpload\" ][ \"name\" ])) . \" has been uploaded.\" ; } else { echo \"Sorry, there was an error uploading your file.\" ; } } ?>","title":"Complete Upload File PHP Script"},{"location":"Adv/phpFile/#php-directory-functions","text":"Function Description chdir() Changes the current directory chroot() Changes the root directory closedir() Closes a directory handle dir() Returns an instance of the Directory class getcwd() Returns the current working directory opendir() Opens a directory handle readdir() Returns an entry from a directory handle rewinddir() Resets a directory handle scandir() Returns an array of files and directories of a specified directory","title":"PHP Directory Functions"},{"location":"Adv/phpFile/#chdir","text":"The chdir() function changes the current working directory. <?php // Get current directory echo getcwd () . \"<br>\" ; // Change directory chdir ( \"images\" ); // Get current directory echo getcwd (); ?>","title":"chdir()"},{"location":"Adv/phpFile/#chroot","text":"The chroot() function changes the root directory. <?php // Change root directory chroot ( \"/path/to/chroot/\" ); // Get current directory echo getcwd (); ?>","title":"chroot()"},{"location":"Adv/phpFile/#closedir","text":"The closedir() function closes a directory handle. <?php $dir = \"/images/\" ; // Open a directory, and read its contents if ( is_dir ( $dir )){ if ( $dh = opendir ( $dir )){ while (( $file = readdir ( $dh )) !== false ){ echo \"filename:\" . $file . \"<br>\" ; } closedir ( $dh ); } } ?>","title":"closedir()"},{"location":"Adv/phpFile/#dir","text":"The dir() function returns an instance of the Directory class. <?php $d = dir ( getcwd ()); echo \"Handle: \" . $d -> handle . \"<br>\" ; echo \"Path: \" . $d -> path . \"<br>\" ; while (( $file = $d -> read ()) !== false ){ echo \"filename: \" . $file . \"<br>\" ; } $d -> close (); ?> Handle: Resource id #2 Path: /etc/php filename: . filename: .. filename: ajax.gif filename: books.xml filename: cdcatalog.xml filename: cd_catalog.xml filename: default.asp filename: demo_array.asp filename: demo_array.htm ... ... ...","title":"dir()"},{"location":"Adv/phpFile/#getcwd","text":"The getcwd() function returns the current working directory. <?php echo getcwd (); ?> /home/username/public_html","title":"getcwd()"},{"location":"Adv/phpFile/#opendir","text":"The opendir() function opens a directory handle. <?php $dir = \"/images/\" ; // Open a directory, and read its contents if ( is_dir ( $dir )){ if ( $dh = opendir ( $dir )){ while (( $file = readdir ( $dh )) !== false ){ echo \"filename:\" . $file . \"<br>\" ; } closedir ( $dh ); } } ?>","title":"opendir()"},{"location":"Adv/phpFile/#readdir","text":"The readdir() function returns an entry from a directory handle. <?php $dir = \"/images/\" ; // Open a directory, and read its contents if ( is_dir ( $dir )){ if ( $dh = opendir ( $dir )){ while (( $file = readdir ( $dh )) !== false ){ echo \"filename:\" . $file . \"<br>\" ; } closedir ( $dh ); } } ?>","title":"readdir()"},{"location":"Adv/phpFile/#rewinddir","text":"The rewinddir() function resets a directory handle. <?php $dir = \"/images/\" ; // Open a directory, and read its contents if ( is_dir ( $dir )){ if ( $dh = opendir ( $dir )){ // List files in images directory while (( $file = readdir ( $dh )) !== false ){ echo \"filename:\" . $file . \"<br>\" ; } rewinddir (); // List once again files in images directory while (( $file = readdir ( $dh )) !== false ){ echo \"filename:\" . $file . \"<br>\" ; } closedir ( $dh ); } } ?>","title":"rewinddir()"},{"location":"Adv/phpFile/#scandir","text":"The scandir() function returns an array of files and directories of a specified directory. <?php $dir = \"/images/\" ; // Sort in ascending order - this is default $a = scandir ( $dir ); // Sort in descending order $b = scandir ( $dir , 1 ); print_r ( $a ); print_r ( $b ); ?>","title":"scandir()"},{"location":"Adv/phpGoto/","text":"The goto operator can be used to jump to another section in the program. The target point is specified by a case-sensitive label followed by a colon, and the instruction is given as goto followed by the desired target label. This is not a full unrestricted goto. The target label must be within the same file and context, meaning that you cannot jump out of a function or method, nor can you jump into one. You also cannot jump into any sort of loop or switch structure. You may jump out of these, and a common use is to use a goto in place of a multi-level break. <?php goto label ; echo \"hello\" ; label : echo \"world\" ; ?> The above example will output: world","title":"Goto"},{"location":"Adv/phpInclude/","text":"The include (or require) statement takes all the text/code/markup that exists in the specified file and copies it into the file that uses the include statement. Including files is very useful when you want to include the same PHP, HTML, or text on multiple pages of a website. PHP include and require Statements It is possible to insert the content of one PHP file into another PHP file (before the server executes it), with the include or require statement. The include and require statements are identical, except upon failure: require will produce a fatal error (E_COMPILE_ERROR) and stop the script include will only produce a warning (E_WARNING) and the script will continue So, if you want the execution to go on and show users the output, even if the include file is missing, use the include statement. Otherwise, in case of FrameWork, CMS, or a complex PHP application coding, always use the require statement to include a key file to the flow of execution. This will help avoid compromising your application's security and integrity, just in-case one key file is accidentally missing. Including files saves a lot of work. This means that you can create a standard header, footer, or menu file for all your web pages. Then, when the header needs to be updated, you can only update the header include file. PHP include Examples Example 1 <html> <body> <h1>Welcome to my home page!</h1> <p>Some text.</p> <p>Some more text.</p> <?php include 'footer.php' ; ?> </body> </html> Example 2 Assume we have a standard menu file called \"menu.php\": <?php echo '<a href=\"/default.asp\">Home</a> - <a href=\"/html/default.asp\">HTML Tutorial</a> - <a href=\"/css/default.asp\">CSS Tutorial</a> - <a href=\"/js/default.asp\">JavaScript Tutorial</a> - <a href=\"default.asp\">PHP Tutorial</a>' ; ?> All pages in the Web site should use this menu file. Here is how it can be done (we are using a <'div> element so that the menu easily can be styled with CSS later): <html> <body> <div class=\"menu\"> <?php include 'menu.php' ; ?> </div> <h1>Welcome to my home page!</h1> <p>Some text.</p> <p>Some more text.</p> </body> </html> Example 3 Assume we have a file called \"vars.php\", with some variables defined: <?php $color = 'red' ; $car = 'BMW' ; ?> Then, if we include the \"vars.php\" file, the variables can be used in the calling file: <html> <body> <h1>Welcome to my home page!</h1> <?php include 'vars.php' ; echo \"I have a $color $car .\" ; ?> </body> </html> Include_once The include_once statement is similar to the include statement, except that it will only include the file once. If the file is already included, the include statement will not include it again. <!DOCTYPE html> <html> <body> <h1>Welcome to my home page!</h1> <p>Some text.</p> <p>Some more text.</p> <?php include_once 'footer.php' ; ?> </body> </html> PHP include vs. require The require statement is also used to include a file into the PHP code. However, there is one big difference between include and require; when a file is included with the include statement and PHP cannot find it, the script will continue to execute: <html> <body> <h1>Welcome to my home page!</h1> <?php include 'noFileExists.php' ; echo \"I have a $color $car .\" ; ?> </body> </html> If we do the same example using the require statement, the echo statement will not be executed because the script execution dies after the require statement returned a fatal error: <html> <body> <h1>Welcome to my home page!</h1> <?php require 'noFileExists.php' ; echo \"I have a $color $car .\" ; ?> </body> </html> require_once The require_once keyword is used to embed PHP code from another file. If the file is not found, a fatal error is thrown and the program stops. If the file was already included previously, this statement will not include it again. <!DOCTYPE html> <html> <body> <h1>Welcome to my home page!</h1> <p>Some text.</p> <p>Some more text.</p> <?php require_once 'footer.php' ; ?> </body> </html> Conclusion Use require when the file is required by the application. Use include when the file is not required and application should continue when file is not found.","title":"Include"},{"location":"Adv/phpInclude/#php-include-and-require-statements","text":"It is possible to insert the content of one PHP file into another PHP file (before the server executes it), with the include or require statement. The include and require statements are identical, except upon failure: require will produce a fatal error (E_COMPILE_ERROR) and stop the script include will only produce a warning (E_WARNING) and the script will continue So, if you want the execution to go on and show users the output, even if the include file is missing, use the include statement. Otherwise, in case of FrameWork, CMS, or a complex PHP application coding, always use the require statement to include a key file to the flow of execution. This will help avoid compromising your application's security and integrity, just in-case one key file is accidentally missing. Including files saves a lot of work. This means that you can create a standard header, footer, or menu file for all your web pages. Then, when the header needs to be updated, you can only update the header include file.","title":"PHP include and require Statements"},{"location":"Adv/phpInclude/#php-include-examples","text":"","title":"PHP include Examples"},{"location":"Adv/phpInclude/#example-1","text":"<html> <body> <h1>Welcome to my home page!</h1> <p>Some text.</p> <p>Some more text.</p> <?php include 'footer.php' ; ?> </body> </html>","title":"Example 1"},{"location":"Adv/phpInclude/#example-2","text":"Assume we have a standard menu file called \"menu.php\": <?php echo '<a href=\"/default.asp\">Home</a> - <a href=\"/html/default.asp\">HTML Tutorial</a> - <a href=\"/css/default.asp\">CSS Tutorial</a> - <a href=\"/js/default.asp\">JavaScript Tutorial</a> - <a href=\"default.asp\">PHP Tutorial</a>' ; ?> All pages in the Web site should use this menu file. Here is how it can be done (we are using a <'div> element so that the menu easily can be styled with CSS later): <html> <body> <div class=\"menu\"> <?php include 'menu.php' ; ?> </div> <h1>Welcome to my home page!</h1> <p>Some text.</p> <p>Some more text.</p> </body> </html>","title":"Example 2"},{"location":"Adv/phpInclude/#example-3","text":"Assume we have a file called \"vars.php\", with some variables defined: <?php $color = 'red' ; $car = 'BMW' ; ?> Then, if we include the \"vars.php\" file, the variables can be used in the calling file: <html> <body> <h1>Welcome to my home page!</h1> <?php include 'vars.php' ; echo \"I have a $color $car .\" ; ?> </body> </html>","title":"Example 3"},{"location":"Adv/phpInclude/#include_once","text":"The include_once statement is similar to the include statement, except that it will only include the file once. If the file is already included, the include statement will not include it again. <!DOCTYPE html> <html> <body> <h1>Welcome to my home page!</h1> <p>Some text.</p> <p>Some more text.</p> <?php include_once 'footer.php' ; ?> </body> </html>","title":"Include_once"},{"location":"Adv/phpInclude/#php-include-vs-require","text":"The require statement is also used to include a file into the PHP code. However, there is one big difference between include and require; when a file is included with the include statement and PHP cannot find it, the script will continue to execute: <html> <body> <h1>Welcome to my home page!</h1> <?php include 'noFileExists.php' ; echo \"I have a $color $car .\" ; ?> </body> </html> If we do the same example using the require statement, the echo statement will not be executed because the script execution dies after the require statement returned a fatal error: <html> <body> <h1>Welcome to my home page!</h1> <?php require 'noFileExists.php' ; echo \"I have a $color $car .\" ; ?> </body> </html>","title":"PHP include vs. require"},{"location":"Adv/phpInclude/#require_once","text":"The require_once keyword is used to embed PHP code from another file. If the file is not found, a fatal error is thrown and the program stops. If the file was already included previously, this statement will not include it again. <!DOCTYPE html> <html> <body> <h1>Welcome to my home page!</h1> <p>Some text.</p> <p>Some more text.</p> <?php require_once 'footer.php' ; ?> </body> </html>","title":"require_once"},{"location":"Adv/phpInclude/#conclusion","text":"Use require when the file is required by the application. Use include when the file is not required and application should continue when file is not found.","title":"Conclusion"},{"location":"Adv/phpMySql/","text":"MySQL is a database system used on the web MySQL is a database system that runs on a server MySQL is ideal for both small and large applications MySQL is very fast, reliable, and easy to use MySQL uses standard SQL MySQL compiles on a number of platforms MySQL is free to download and use MySQL is developed, distributed, and supported by Oracle Corporation MySQL is named after co-founder Monty Widenius's daughter: My The data in a MySQL database are stored in tables. A table is a collection of related data, and it consists of columns and rows. PHP + MySQL Database System PHP combined with MySQL are cross-platform (you can develop in Windows and serve on a Unix platform) PHP Connect to MySQL PHP 5 and later can work with a MySQL database using: MySQLi extension (the \"i\" stands for improved) PDO (PHP Data Objects) Earlier versions of PHP used the MySQL extension. However, this extension was deprecated in 2012. Should I Use MySQLi or PDO? If you need a short answer, it would be \"Whatever you like\". Both MySQLi and PDO have their advantages: PDO will work on 12 different database systems, whereas MySQLi will only work with MySQL databases. So, if you have to switch your project to use another database, PDO makes the process easy. You only have to change the connection string and a few queries. With MySQLi, you will need to rewrite the entire code - queries included. Both are object-oriented, but MySQLi also offers a procedural API. Both support Prepared Statements. Prepared Statements protect from SQL injection, and are very important for web application security. MySQLi Installation For Linux and Windows: The MySQLi extension is automatically installed in most cases, when php5 mysql package is installed. For installation details, go to: http://php.net/manual/en/mysqli.installation.php PDO Installation For installation details, go to: http://php.net/manual/en/pdo.installation.php Open a Connection to MySQL Before we can access data in the MySQL database, we need to be able to connect to the server: //Example (MySQLi Object-Oriented) <?php $servername = \"localhost\" ; $username = \"username\" ; $password = \"password\" ; // Create connection $conn = new mysqli ( $servername , $username , $password ); // Check connection if ( $conn -> connect_error ) { die ( \"Connection failed: \" . $conn -> connect_error ); } echo \"Connected successfully\" ; ?> Note on the object-oriented example above: $connect_error was broken until PHP 5.2.9 and 5.3.0. If you need to ensure compatibility with PHP versions prior to 5.2.9 and 5.3.0, use the following code instead: // Check connection if (mysqli_connect_error()) { die(\"Database connection failed: \" . mysqli_connect_error()); } //Example (MySQLi Procedural) <?php $servername = \"localhost\" ; $username = \"username\" ; $password = \"password\" ; // Create connection $conn = new mysqli ( $servername , $username , $password ); // Check connection if ( $conn -> connect_error ) { die ( \"Connection failed: \" . $conn -> connect_error ); } echo \"Connected successfully\" ; ?> //Example (PDO) <?php $servername = \"localhost\" ; $username = \"username\" ; $password = \"password\" ; try { $conn = new PDO ( \"mysql:host= $servername ;dbname=myDB\" , $username , $password ); // set the PDO error mode to exception $conn -> setAttribute ( PDO :: ATTR_ERRMODE , PDO :: ERRMODE_EXCEPTION ); echo \"Connected successfully\" ; } catch ( PDOException $e ) { echo \"Connection failed: \" . $e -> getMessage (); } ?> Note: In the PDO example above we have also specified a database (myDB). PDO require a valid database to connect to. If no database is specified, an exception is thrown. A great benefit of PDO is that it has an exception class to handle any problems that may occur in our database queries. If an exception is thrown within the try{ } block, the script stops executing and flows directly to the first catch(){ } block. Close Connection The connection will be closed automatically when the script ends. To close the connection before, use the following: //MySQLi Object-Oriented: <?php $conn -> close (); ?> //MySQLi Procedural: <?php mysqli_close ( $conn ); ?> //PDO: <?php $conn = null ; ?> MySQL Database Create Database //MySQLi Object-Oriented: <?php $servername = \"localhost\" ; $username = \"username\" ; $password = \"password\" ; // Create connection $conn = new mysqli ( $servername , $username , $password ); // Check connection if ( $conn -> connect_error ) { die ( \"Connection failed: \" . $conn -> connect_error ); } // Create database $sql = \"CREATE DATABASE myDB\" ; if ( $conn -> query ( $sql ) === TRUE ) { echo \"Database created successfully\" ; } else { echo \"Error creating database: \" . $conn -> error ; } $conn -> close (); ?> When you create a new database, you must only specify the first three arguments to the mysqli object (servername, username and password). If you have to use a specific port, add an empty string for the database-name argument, like this: new mysqli(\"localhost\", \"username\", \"password\", \"\", port). //MySQLi Procedural: <?php $servername = \"localhost\" ; $username = \"username\" ; $password = \"password\" ; // Create connection $conn = mysqli_connect ( $servername , $username , $password ); // Check connection if ( ! $conn ) { die ( \"Connection failed: \" . mysqli_connect_error ()); } // Create database $sql = \"CREATE DATABASE myDB\" ; if ( mysqli_query ( $conn , $sql )) { echo \"Database created successfully\" ; } else { echo \"Error creating database: \" . mysqli_error ( $conn ); } mysqli_close ( $conn ); ?> //PDO: <?php $servername = \"localhost\" ; $username = \"username\" ; $password = \"password\" ; try { $conn = new PDO ( \"mysql:host= $servername \" , $username , $password ); // set the PDO error mode to exception $conn -> setAttribute ( PDO :: ATTR_ERRMODE , PDO :: ERRMODE_EXCEPTION ); $sql = \"CREATE DATABASE myDBPDO\" ; // use exec() because no results are returned $conn -> exec ( $sql ); echo \"Database created successfully<br>\" ; } catch ( PDOException $e ) { echo $sql . \"<br>\" . $e -> getMessage (); } $conn = null ; ?> A great benefit of PDO is that it has exception class to handle any problems that may occur in our database queries. If an exception is thrown within the try{ } block, the script stops executing and flows directly to the first catch(){ } block. In the catch block above we echo the SQL statement and the generated error message. Create Table //MySQLi Object-Oriented: <?php $servername = \"localhost\" ; $username = \"username\" ; $password = \"password\" ; $dbname = \"myDB\" ; // Create connection $conn = new mysqli ( $servername , $username , $password , $dbname ); // Check connection if ( $conn -> connect_error ) { die ( \"Connection failed: \" . $conn -> connect_error ); } // sql to create table $sql = \"CREATE TABLE MyGuests ( id INT(6) UNSIGNED AUTO_INCREMENT PRIMARY KEY, firstname VARCHAR(30) NOT NULL, lastname VARCHAR(30) NOT NULL, email VARCHAR(50), reg_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP )\" ; if ( $conn -> query ( $sql ) === TRUE ) { echo \"Table MyGuests created successfully\" ; } else { echo \"Error creating table: \" . $conn -> error ; } $conn -> close (); ?> //MySQLi Procedural: <?php $servername = \"localhost\" ; $username = \"username\" ; $password = \"password\" ; $dbname = \"myDB\" ; // Create connection $conn = mysqli_connect ( $servername , $username , $password , $dbname ); // Check connection if ( ! $conn ) { die ( \"Connection failed: \" . mysqli_connect_error ()); } // sql to create table $sql = \"CREATE TABLE MyGuests ( id INT(6) UNSIGNED AUTO_INCREMENT PRIMARY KEY, firstname VARCHAR(30) NOT NULL, lastname VARCHAR(30) NOT NULL, email VARCHAR(50), reg_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP )\" ; if ( mysqli_query ( $conn , $sql )) { echo \"Table MyGuests created successfully\" ; } else { echo \"Error creating table: \" . mysqli_error ( $conn ); } mysqli_close ( $conn ); ?> //PDO: <?php $servername = \"localhost\" ; $username = \"username\" ; $password = \"password\" ; $dbname = \"myDBPDO\" ; try { $conn = new PDO ( \"mysql:host= $servername ;dbname= $dbname \" , $username , $password ); // set the PDO error mode to exception $conn -> setAttribute ( PDO :: ATTR_ERRMODE , PDO :: ERRMODE_EXCEPTION ); // sql to create table $sql = \"CREATE TABLE MyGuests ( id INT(6) UNSIGNED AUTO_INCREMENT PRIMARY KEY, firstname VARCHAR(30) NOT NULL, lastname VARCHAR(30) NOT NULL, email VARCHAR(50), reg_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP )\" ; // use exec() because no results are returned $conn -> exec ( $sql ); echo \"Table MyGuests created successfully\" ; } catch ( PDOException $e ) { echo $sql . \"<br>\" . $e -> getMessage (); } $conn = null ; ?> Insert Data //MySQLi Object-Oriented: <?php $servername = \"localhost\" ; $username = \"username\" ; $password = \"password\" ; $dbname = \"myDB\" ; // Create connection $conn = new mysqli ( $servername , $username , $password , $dbname ); // Check connection if ( $conn -> connect_error ) { die ( \"Connection failed: \" . $conn -> connect_error ); } $sql = \"INSERT INTO MyGuests (firstname, lastname, email) VALUES ('John', 'Doe', 'john@example.com')\" ; if ( $conn -> query ( $sql ) === TRUE ) { echo \"New record created successfully\" ; } else { echo \"Error: \" . $sql . \"<br>\" . $conn -> error ; } $conn -> close (); ?> //MySQLi Procedural: <?php $servername = \"localhost\" ; $username = \"username\" ; $password = \"password\" ; $dbname = \"myDB\" ; // Create connection $conn = mysqli_connect ( $servername , $username , $password , $dbname ); // Check connection if ( ! $conn ) { die ( \"Connection failed: \" . mysqli_connect_error ()); } $sql = \"INSERT INTO MyGuests (firstname, lastname, email) VALUES ('John', 'Doe', 'john@example.com')\" ; if ( mysqli_query ( $conn , $sql )) { echo \"New record created successfully\" ; } else { echo \"Error: \" . $sql . \"<br>\" . mysqli_error ( $conn ); } mysqli_close ( $conn ); ?> //PDO: <?php $servername = \"localhost\" ; $username = \"username\" ; $password = \"password\" ; $dbname = \"myDBPDO\" ; try { $conn = new PDO ( \"mysql:host= $servername ;dbname= $dbname \" , $username , $password ); // set the PDO error mode to exception $conn -> setAttribute ( PDO :: ATTR_ERRMODE , PDO :: ERRMODE_EXCEPTION ); $sql = \"INSERT INTO MyGuests (firstname, lastname, email) VALUES ('John', 'Doe', 'john@example.com')\" ; // use exec() because no results are returned $conn -> exec ( $sql ); echo \"New record created successfully\" ; } catch ( PDOException $e ) { echo $sql . \"<br>\" . $e -> getMessage (); } $conn = null ; ?> Get ID of The Last Inserted Record //MySQLi Object-Oriented: <?php $servername = \"localhost\" ; $username = \"username\" ; $password = \"password\" ; $dbname = \"myDB\" ; // Create connection $conn = new mysqli ( $servername , $username , $password , $dbname ); // Check connection if ( $conn -> connect_error ) { die ( \"Connection failed: \" . $conn -> connect_error ); } $sql = \"INSERT INTO MyGuests (firstname, lastname, email) VALUES ('John', 'Doe', 'john@example.com')\" ; if ( $conn -> query ( $sql ) === TRUE ) { $last_id = $conn -> insert_id ; echo \"New record created successfully. Last inserted ID is: \" . $last_id ; } else { echo \"Error: \" . $sql . \"<br>\" . $conn -> error ; } $conn -> close (); ?> //MySQLi Procedural: <?php $servername = \"localhost\" ; $username = \"username\" ; $password = \"password\" ; $dbname = \"myDB\" ; // Create connection $conn = mysqli_connect ( $servername , $username , $password , $dbname ); // Check connection if ( ! $conn ) { die ( \"Connection failed: \" . mysqli_connect_error ()); } $sql = \"INSERT INTO MyGuests (firstname, lastname, email) VALUES ('John', 'Doe', 'john@example.com')\" ; if ( mysqli_query ( $conn , $sql )) { $last_id = mysqli_insert_id ( $conn ); echo \"New record created successfully. Last inserted ID is: \" . $last_id ; } else { echo \"Error: \" . $sql . \"<br>\" . mysqli_error ( $conn ); } mysqli_close ( $conn ); ?> //PDO: <?php $servername = \"localhost\" ; $username = \"username\" ; $password = \"password\" ; $dbname = \"myDBPDO\" ; try { $conn = new PDO ( \"mysql:host= $servername ;dbname= $dbname \" , $username , $password ); // set the PDO error mode to exception $conn -> setAttribute ( PDO :: ATTR_ERRMODE , PDO :: ERRMODE_EXCEPTION ); $sql = \"INSERT INTO MyGuests (firstname, lastname, email) VALUES ('John', 'Doe', 'john@example.com')\" ; // use exec() because no results are returned $conn -> exec ( $sql ); $last_id = $conn -> lastInsertId (); echo \"New record created successfully. Last inserted ID is: \" . $last_id ; } catch ( PDOException $e ) { echo $sql . \"<br>\" . $e -> getMessage (); } $conn = null ; ?> Insert Multiple Records //MySQLi Object-Oriented: <?php $servername = \"localhost\" ; $username = \"username\" ; $password = \"password\" ; $dbname = \"myDB\" ; // Create connection $conn = new mysqli ( $servername , $username , $password , $dbname ); // Check connection if ( $conn -> connect_error ) { die ( \"Connection failed: \" . $conn -> connect_error ); } $sql = \"INSERT INTO MyGuests (firstname, lastname, email) VALUES ('John', 'Doe', 'john@example.com');\" ; $sql .= \"INSERT INTO MyGuests (firstname, lastname, email) VALUES ('Mary', 'Moe', 'mary@example.com');\" ; $sql .= \"INSERT INTO MyGuests (firstname, lastname, email) VALUES ('Julie', 'Dooley', 'julie@example.com')\" ; if ( $conn -> multi_query ( $sql ) === TRUE ) { echo \"New records created successfully\" ; } else { echo \"Error: \" . $sql . \"<br>\" . $conn -> error ; } $conn -> close (); ?> Note that each SQL statement must be separated by a semicolon. //MySQLi Procedural: <?php $servername = \"localhost\" ; $username = \"username\" ; $password = \"password\" ; $dbname = \"myDB\" ; // Create connection $conn = mysqli_connect ( $servername , $username , $password , $dbname ); // Check connection if ( ! $conn ) { die ( \"Connection failed: \" . mysqli_connect_error ()); } $sql = \"INSERT INTO MyGuests (firstname, lastname, email) VALUES ('John', 'Doe', 'john@example.com');\" ; $sql .= \"INSERT INTO MyGuests (firstname, lastname, email) VALUES ('Mary', 'Moe', 'mary@example.com');\" ; $sql .= \"INSERT INTO MyGuests (firstname, lastname, email) VALUES ('Julie', 'Dooley', 'julie@example.com')\" ; if ( mysqli_multi_query ( $conn , $sql )) { echo \"New records created successfully\" ; } else { echo \"Error: \" . $sql . \"<br>\" . mysqli_error ( $conn ); } mysqli_close ( $conn ); ?> //PDO: <?php $servername = \"localhost\" ; $username = \"username\" ; $password = \"password\" ; $dbname = \"myDBPDO\" ; try { $conn = new PDO ( \"mysql:host= $servername ;dbname= $dbname \" , $username , $password ); // set the PDO error mode to exception $conn -> setAttribute ( PDO :: ATTR_ERRMODE , PDO :: ERRMODE_EXCEPTION ); // begin the transaction $conn -> beginTransaction (); // our SQL statements $conn -> exec ( \"INSERT INTO MyGuests (firstname, lastname, email) VALUES ('John', 'Doe', 'john@example.com')\" ); $conn -> exec ( \"INSERT INTO MyGuests (firstname, lastname, email) VALUES ('Mary', 'Moe', 'mary@example.com')\" ); $conn -> exec ( \"INSERT INTO MyGuests (firstname, lastname, email) VALUES ('Julie', 'Dooley', 'julie@example.com')\" ); // commit the transaction $conn -> commit (); echo \"New records created successfully\" ; } catch ( PDOException $e ) { // roll back the transaction if something failed $conn -> rollback (); echo \"Error: \" . $e -> getMessage (); } $conn = null ; ?> Prepared Statements Prepared statements are very useful against SQL injections. A prepared statement is a feature used to execute the same (or similar) SQL statements repeatedly with high efficiency. Prepared statements basically work like this: Prepare: An SQL statement template is created and sent to the database. Certain values are left unspecified, called parameters (labeled \"?\"). Example: INSERT INTO MyGuests VALUES(?, ?, ?) The database parses, compiles, and performs query optimization on the SQL statement template, and stores the result without executing it Execute: At a later time, the application binds the values to the parameters, and the database executes the statement. The application may execute the statement as many times as it wants with different values Compared to executing SQL statements directly, prepared statements have three main advantages: Prepared statements reduce parsing time as the preparation on the query is done only once (although the statement is executed multiple times) Bound parameters minimize bandwidth to the server as you need send only the parameters each time, and not the whole query Prepared statements are very useful against SQL injections, because parameter values, which are transmitted later using a different protocol, need not be correctly escaped. If the original statement template is not derived from external input, SQL injection cannot occur. //MySQLi Object-Oriented: <?php $servername = \"localhost\" ; $username = \"username\" ; $password = \"password\" ; $dbname = \"myDB\" ; // Create connection $conn = new mysqli ( $servername , $username , $password , $dbname ); // Check connection if ( $conn -> connect_error ) { die ( \"Connection failed: \" . $conn -> connect_error ); } // prepare and bind $stmt = $conn -> prepare ( \"INSERT INTO MyGuests (firstname, lastname, email) VALUES (?, ?, ?)\" ); $stmt -> bind_param ( \"sss\" , $firstname , $lastname , $email ); // set parameters and execute $firstname = \"John\" ; $lastname = \"Doe\" ; $email = \"john@example.com\" ; $stmt -> execute (); $firstname = \"Mary\" ; $lastname = \"Moe\" ; $email = \"mary@example.com\" ; $stmt -> execute (); $firstname = \"Julie\" ; $lastname = \"Dooley\" ; $email = \"julie@example.com\" ; $stmt -> execute (); echo \"New records created successfully\" ; $stmt -> close (); $conn -> close (); ?> $stmt->bind_param(\"sss\", $firstname, $lastname, $email); This function binds the parameters to the SQL query and tells the database what the parameters are. The \"sss\" argument lists the types of data that the parameters are. The s character tells mysql that the parameter is a string. The argument may be one of four types: i - integer d - double s - string b - BLOB We must have one of these for each parameter. By telling mysql what type of data to expect, we minimize the risk of SQL injections. If we want to insert any data from external sources (like user input), it is very important that the data is sanitized and validated. //PDO: <?php $servername = \"localhost\" ; $username = \"username\" ; $password = \"password\" ; $dbname = \"myDBPDO\" ; try { $conn = new PDO ( \"mysql:host= $servername ;dbname= $dbname \" , $username , $password ); // set the PDO error mode to exception $conn -> setAttribute ( PDO :: ATTR_ERRMODE , PDO :: ERRMODE_EXCEPTION ); // prepare sql and bind parameters $stmt = $conn -> prepare ( \"INSERT INTO MyGuests (firstname, lastname, email) VALUES (:firstname, :lastname, :email)\" ); $stmt -> bindParam ( ':firstname' , $firstname ); $stmt -> bindParam ( ':lastname' , $lastname ); $stmt -> bindParam ( ':email' , $email ); // insert a row $firstname = \"John\" ; $lastname = \"Doe\" ; $email = \"john@example.com\" ; $stmt -> execute (); // insert another row $firstname = \"Mary\" ; $lastname = \"Moe\" ; $email = \"mary@example.com\" ; $stmt -> execute (); // insert another row $firstname = \"Julie\" ; $lastname = \"Dooley\" ; $email = \"julie@example.com\" ; $stmt -> execute (); echo \"New records created successfully\" ; } catch ( PDOException $e ) { echo \"Error: \" . $e -> getMessage (); } $conn = null ; ?> Select Data //MySQLi Object-Oriented: <?php $servername = \"localhost\" ; $username = \"username\" ; $password = \"password\" ; $dbname = \"myDB\" ; // Create connection $conn = new mysqli ( $servername , $username , $password , $dbname ); // Check connection if ( $conn -> connect_error ) { die ( \"Connection failed: \" . $conn -> connect_error ); } $sql = \"SELECT id, firstname, lastname FROM MyGuests\" ; $result = $conn -> query ( $sql ); if ( $result -> num_rows > 0 ) { // output data of each row while ( $row = $result -> fetch_assoc ()) { echo \"id: \" . $row [ \"id\" ] . \" - Name: \" . $row [ \"firstname\" ] . \" \" . $row [ \"lastname\" ] . \"<br>\" ; } } else { echo \"0 results\" ; } $conn -> close (); ?> //MySQLi Procedural: <?php $servername = \"localhost\" ; $username = \"username\" ; $password = \"password\" ; $dbname = \"myDB\" ; // Create connection $conn = mysqli_connect ( $servername , $username , $password , $dbname ); // Check connection if ( ! $conn ) { die ( \"Connection failed: \" . mysqli_connect_error ()); } $sql = \"SELECT id, firstname, lastname FROM MyGuests\" ; $result = mysqli_query ( $conn , $sql ); if ( mysqli_num_rows ( $result ) > 0 ) { // output data of each row while ( $row = mysqli_fetch_assoc ( $result )) { echo \"id: \" . $row [ \"id\" ] . \" - Name: \" . $row [ \"firstname\" ] . \" \" . $row [ \"lastname\" ] . \"<br>\" ; } } else { echo \"0 results\" ; } mysqli_close ( $conn ); ?> //PDO: <?php echo \"<table style='border: solid 1px black;'>\" ; echo \"<tr><th>Id</th><th>Firstname</th><th>Lastname</th></tr>\" ; class TableRows extends RecursiveIteratorIterator { function __construct ( $it ) { parent :: __construct ( $it , self :: LEAVES_ONLY ); } function current () { return \"<td style='width:150px;border:1px solid black;'>\" . parent :: current () . \"</td>\" ; } function beginChildren () { echo \"<tr>\" ; } function endChildren () { echo \"</tr>\" . \" \\n \" ; } } $servername = \"localhost\" ; $username = \"username\" ; $password = \"password\" ; $dbname = \"myDBPDO\" ; try { $conn = new PDO ( \"mysql:host= $servername ;dbname= $dbname \" , $username , $password ); $conn -> setAttribute ( PDO :: ATTR_ERRMODE , PDO :: ERRMODE_EXCEPTION ); $stmt = $conn -> prepare ( \"SELECT id, firstname, lastname FROM MyGuests\" ); $stmt -> execute (); // set the resulting array to associative $result = $stmt -> setFetchMode ( PDO :: FETCH_ASSOC ); foreach ( new TableRows ( new RecursiveArrayIterator ( $stmt -> fetchAll ())) as $k => $v ) { echo $v ; } } catch ( PDOException $e ) { echo \"Error: \" . $e -> getMessage (); } $conn = null ; echo \"</table>\" ; ?> Select and Filter Data //MySQLi Object-Oriented: <?php $servername = \"localhost\" ; $username = \"username\" ; $password = \"password\" ; $dbname = \"myDB\" ; // Create connection $conn = new mysqli ( $servername , $username , $password , $dbname ); // Check connection if ( $conn -> connect_error ) { die ( \"Connection failed: \" . $conn -> connect_error ); } $sql = \"SELECT id, firstname, lastname FROM MyGuests WHERE lastname='Doe'\" ; $result = $conn -> query ( $sql ); if ( $result -> num_rows > 0 ) { // output data of each row while ( $row = $result -> fetch_assoc ()) { echo \"id: \" . $row [ \"id\" ] . \" - Name: \" . $row [ \"firstname\" ] . \" \" . $row [ \"lastname\" ] . \"<br>\" ; } } else { echo \"0 results\" ; } $conn -> close (); ?> //MySQLi Procedural: <?php $servername = \"localhost\" ; $username = \"username\" ; $password = \"password\" ; $dbname = \"myDB\" ; // Create connection $conn = mysqli_connect ( $servername , $username , $password , $dbname ); // Check connection if ( ! $conn ) { die ( \"Connection failed: \" . mysqli_connect_error ()); } $sql = \"SELECT id, firstname, lastname FROM MyGuests WHERE lastname='Doe'\" ; $result = mysqli_query ( $conn , $sql ); if ( mysqli_num_rows ( $result ) > 0 ) { // output data of each row while ( $row = mysqli_fetch_assoc ( $result )) { echo \"id: \" . $row [ \"id\" ] . \" - Name: \" . $row [ \"firstname\" ] . \" \" . $row [ \"lastname\" ] . \"<br>\" ; } } else { echo \"0 results\" ; } mysqli_close ( $conn ); ?> //PDO: <?php echo \"<table style='border: solid 1px black;'>\" ; echo \"<tr><th>Id</th><th>Firstname</th><th>Lastname</th></tr>\" ; class TableRows extends RecursiveIteratorIterator { function __construct ( $it ) { parent :: __construct ( $it , self :: LEAVES_ONLY ); } function current () { return \"<td style='width:150px;border:1px solid black;'>\" . parent :: current () . \"</td>\" ; } function beginChildren () { echo \"<tr>\" ; } function endChildren () { echo \"</tr>\" . \" \\n \" ; } } $servername = \"localhost\" ; $username = \"username\" ; $password = \"password\" ; $dbname = \"myDBPDO\" ; try { $conn = new PDO ( \"mysql:host= $servername ;dbname= $dbname \" , $username , $password ); $conn -> setAttribute ( PDO :: ATTR_ERRMODE , PDO :: ERRMODE_EXCEPTION ); $stmt = $conn -> prepare ( \"SELECT id, firstname, lastname FROM MyGuests WHERE lastname='Doe'\" ); $stmt -> execute (); // set the resulting array to associative $result = $stmt -> setFetchMode ( PDO :: FETCH_ASSOC ); foreach ( new TableRows ( new RecursiveArrayIterator ( $stmt -> fetchAll ())) as $k => $v ) { echo $v ; } } catch ( PDOException $e ) { echo \"Error: \" . $e -> getMessage (); } $conn = null ; echo \"</table>\" ; ?> Select and Order Data //MySQLi Object-Oriented: <?php $servername = \"localhost\" ; $username = \"username\" ; $password = \"password\" ; $dbname = \"myDB\" ; // Create connection $conn = new mysqli ( $servername , $username , $password , $dbname ); // Check connection if ( $conn -> connect_error ) { die ( \"Connection failed: \" . $conn -> connect_error ); } $sql = \"SELECT id, firstname, lastname FROM MyGuests ORDER BY lastname\" ; $result = $conn -> query ( $sql ); if ( $result -> num_rows > 0 ) { // output data of each row while ( $row = $result -> fetch_assoc ()) { echo \"id: \" . $row [ \"id\" ] . \" - Name: \" . $row [ \"firstname\" ] . \" \" . $row [ \"lastname\" ] . \"<br>\" ; } } else { echo \"0 results\" ; } $conn -> close (); ?> //MySQLi Procedural: <?php $servername = \"localhost\" ; $username = \"username\" ; $password = \"password\" ; $dbname = \"myDB\" ; // Create connection $conn = mysqli_connect ( $servername , $username , $password , $dbname ); // Check connection if ( ! $conn ) { die ( \"Connection failed: \" . mysqli_connect_error ()); } $sql = \"SELECT id, firstname, lastname FROM MyGuests ORDER BY lastname\" ; $result = mysqli_query ( $conn , $sql ); if ( mysqli_num_rows ( $result ) > 0 ) { // output data of each row while ( $row = mysqli_fetch_assoc ( $result )) { echo \"id: \" . $row [ \"id\" ] . \" - Name: \" . $row [ \"firstname\" ] . \" \" . $row [ \"lastname\" ] . \"<br>\" ; } } else { echo \"0 results\" ; } mysqli_close ( $conn ); ?> //PDO: <?php echo \"<table style='border: solid 1px black;'>\" ; echo \"<tr><th>Id</th><th>Firstname</th><th>Lastname</th></tr>\" ; class TableRows extends RecursiveIteratorIterator { function __construct ( $it ) { parent :: __construct ( $it , self :: LEAVES_ONLY ); } function current () { return \"<td style='width:150px;border:1px solid black;'>\" . parent :: current () . \"</td>\" ; } function beginChildren () { echo \"<tr>\" ; } function endChildren () { echo \"</tr>\" . \" \\n \" ; } } $servername = \"localhost\" ; $username = \"username\" ; $password = \"password\" ; $dbname = \"myDBPDO\" ; try { $conn = new PDO ( \"mysql:host= $servername ;dbname= $dbname \" , $username , $password ); $conn -> setAttribute ( PDO :: ATTR_ERRMODE , PDO :: ERRMODE_EXCEPTION ); $stmt = $conn -> prepare ( \"SELECT id, firstname, lastname FROM MyGuests ORDER BY lastname\" ); $stmt -> execute (); // set the resulting array to associative $result = $stmt -> setFetchMode ( PDO :: FETCH_ASSOC ); foreach ( new TableRows ( new RecursiveArrayIterator ( $stmt -> fetchAll ())) as $k => $v ) { echo $v ; } } catch ( PDOException $e ) { echo \"Error: \" . $e -> getMessage (); } $conn = null ; echo \"</table>\" ; ?> Limit Data MySQL provides a LIMIT clause that is used to specify the number of records to return. The LIMIT clause makes it easy to code multi page results or pagination with SQL, and is very useful on large tables. Returning a large number of records can impact on performance. Assume we wish to select all records from 1 - 30 (inclusive) from a table called \"Orders\". The SQL query would then look like this: $sql = \"SELECT * FROM Orders LIMIT 30\"; When the SQL query above is run, it will return the first 30 records. What if we want to select records 16 - 25 (inclusive)? Mysql also provides a way to handle this: by using OFFSET. The SQL query below says \"return only 10 records, start on record 16 (OFFSET 15)\": $sql = \"SELECT * FROM Orders LIMIT 10 OFFSET 15\"; You could also use a shorter syntax to achieve the same result: $sql = \"SELECT * FROM Orders LIMIT 15, 10\"; Notice that the numbers are reversed when you use a comma. Delete Data //MySQLi Object-Oriented: <?php $servername = \"localhost\" ; $username = \"username\" ; $password = \"password\" ; $dbname = \"myDB\" ; // Create connection $conn = new mysqli ( $servername , $username , $password , $dbname ); // Check connection if ( $conn -> connect_error ) { die ( \"Connection failed: \" . $conn -> connect_error ); } // sql to delete a record $sql = \"DELETE FROM MyGuests WHERE id=3\" ; if ( $conn -> query ( $sql ) === TRUE ) { echo \"Record deleted successfully\" ; } else { echo \"Error deleting record: \" . $conn -> error ; } $conn -> close (); ?> //MySQLi Procedural: <?php $servername = \"localhost\" ; $username = \"username\" ; $password = \"password\" ; $dbname = \"myDB\" ; // Create connection $conn = mysqli_connect ( $servername , $username , $password , $dbname ); // Check connection if ( ! $conn ) { die ( \"Connection failed: \" . mysqli_connect_error ()); } // sql to delete a record $sql = \"DELETE FROM MyGuests WHERE id=3\" ; if ( mysqli_query ( $conn , $sql )) { echo \"Record deleted successfully\" ; } else { echo \"Error deleting record: \" . mysqli_error ( $conn ); } mysqli_close ( $conn ); ?> //PDO: <?php $servername = \"localhost\" ; $username = \"username\" ; $password = \"password\" ; $dbname = \"myDBPDO\" ; try { $conn = new PDO ( \"mysql:host= $servername ;dbname= $dbname \" , $username , $password ); // set the PDO error mode to exception $conn -> setAttribute ( PDO :: ATTR_ERRMODE , PDO :: ERRMODE_EXCEPTION ); // sql to delete a record $sql = \"DELETE FROM MyGuests WHERE id=3\" ; // use exec() because no results are returned $conn -> exec ( $sql ); echo \"Record deleted successfully\" ; } catch ( PDOException $e ) { echo $sql . \"<br>\" . $e -> getMessage (); } $conn = null ; ?> Update Data //MySQLi Object-Oriented: <?php $servername = \"localhost\" ; $username = \"username\" ; $password = \"password\" ; $dbname = \"myDB\" ; // Create connection $conn = new mysqli ( $servername , $username , $password , $dbname ); // Check connection if ( $conn -> connect_error ) { die ( \"Connection failed: \" . $conn -> connect_error ); } $sql = \"UPDATE MyGuests SET lastname='Doe' WHERE id=2\" ; if ( $conn -> query ( $sql ) === TRUE ) { echo \"Record updated successfully\" ; } else { echo \"Error updating record: \" . $conn -> error ; } $conn -> close (); ?> //MySQLi Procedural: <?php $servername = \"localhost\" ; $username = \"username\" ; $password = \"password\" ; $dbname = \"myDB\" ; // Create connection $conn = mysqli_connect ( $servername , $username , $password , $dbname ); // Check connection if ( ! $conn ) { die ( \"Connection failed: \" . mysqli_connect_error ()); } $sql = \"UPDATE MyGuests SET lastname='Doe' WHERE id=2\" ; if ( mysqli_query ( $conn , $sql )) { echo \"Record updated successfully\" ; } else { echo \"Error updating record: \" . mysqli_error ( $conn ); } mysqli_close ( $conn ); ?> //PDO: <?php $servername = \"localhost\" ; $username = \"username\" ; $password = \"password\" ; $dbname = \"myDBPDO\" ; try { $conn = new PDO ( \"mysql:host= $servername ;dbname= $dbname \" , $username , $password ); // set the PDO error mode to exception $conn -> setAttribute ( PDO :: ATTR_ERRMODE , PDO :: ERRMODE_EXCEPTION ); $sql = \"UPDATE MyGuests SET lastname='Doe' WHERE id=2\" ; // Prepare statement $stmt = $conn -> prepare ( $sql ); // execute the query $stmt -> execute (); // echo a message to say the UPDATE succeeded echo $stmt -> rowCount () . \" records UPDATED successfully\" ; } catch ( PDOException $e ) { echo $sql . \"<br>\" . $e -> getMessage (); } $conn = null ; ?>","title":"MySQL"},{"location":"Adv/phpMySql/#php-connect-to-mysql","text":"PHP 5 and later can work with a MySQL database using: MySQLi extension (the \"i\" stands for improved) PDO (PHP Data Objects) Earlier versions of PHP used the MySQL extension. However, this extension was deprecated in 2012.","title":"PHP Connect to MySQL"},{"location":"Adv/phpMySql/#should-i-use-mysqli-or-pdo","text":"If you need a short answer, it would be \"Whatever you like\". Both MySQLi and PDO have their advantages: PDO will work on 12 different database systems, whereas MySQLi will only work with MySQL databases. So, if you have to switch your project to use another database, PDO makes the process easy. You only have to change the connection string and a few queries. With MySQLi, you will need to rewrite the entire code - queries included. Both are object-oriented, but MySQLi also offers a procedural API. Both support Prepared Statements. Prepared Statements protect from SQL injection, and are very important for web application security.","title":"Should I Use MySQLi or PDO?"},{"location":"Adv/phpMySql/#mysqli-installation","text":"For Linux and Windows: The MySQLi extension is automatically installed in most cases, when php5 mysql package is installed. For installation details, go to: http://php.net/manual/en/mysqli.installation.php","title":"MySQLi Installation"},{"location":"Adv/phpMySql/#pdo-installation","text":"For installation details, go to: http://php.net/manual/en/pdo.installation.php","title":"PDO Installation"},{"location":"Adv/phpMySql/#open-a-connection-to-mysql","text":"Before we can access data in the MySQL database, we need to be able to connect to the server: //Example (MySQLi Object-Oriented) <?php $servername = \"localhost\" ; $username = \"username\" ; $password = \"password\" ; // Create connection $conn = new mysqli ( $servername , $username , $password ); // Check connection if ( $conn -> connect_error ) { die ( \"Connection failed: \" . $conn -> connect_error ); } echo \"Connected successfully\" ; ?> Note on the object-oriented example above: $connect_error was broken until PHP 5.2.9 and 5.3.0. If you need to ensure compatibility with PHP versions prior to 5.2.9 and 5.3.0, use the following code instead: // Check connection if (mysqli_connect_error()) { die(\"Database connection failed: \" . mysqli_connect_error()); } //Example (MySQLi Procedural) <?php $servername = \"localhost\" ; $username = \"username\" ; $password = \"password\" ; // Create connection $conn = new mysqli ( $servername , $username , $password ); // Check connection if ( $conn -> connect_error ) { die ( \"Connection failed: \" . $conn -> connect_error ); } echo \"Connected successfully\" ; ?> //Example (PDO) <?php $servername = \"localhost\" ; $username = \"username\" ; $password = \"password\" ; try { $conn = new PDO ( \"mysql:host= $servername ;dbname=myDB\" , $username , $password ); // set the PDO error mode to exception $conn -> setAttribute ( PDO :: ATTR_ERRMODE , PDO :: ERRMODE_EXCEPTION ); echo \"Connected successfully\" ; } catch ( PDOException $e ) { echo \"Connection failed: \" . $e -> getMessage (); } ?> Note: In the PDO example above we have also specified a database (myDB). PDO require a valid database to connect to. If no database is specified, an exception is thrown. A great benefit of PDO is that it has an exception class to handle any problems that may occur in our database queries. If an exception is thrown within the try{ } block, the script stops executing and flows directly to the first catch(){ } block.","title":"Open a Connection to MySQL"},{"location":"Adv/phpMySql/#close-connection","text":"The connection will be closed automatically when the script ends. To close the connection before, use the following: //MySQLi Object-Oriented: <?php $conn -> close (); ?> //MySQLi Procedural: <?php mysqli_close ( $conn ); ?> //PDO: <?php $conn = null ; ?>","title":"Close Connection"},{"location":"Adv/phpMySql/#mysql-database","text":"","title":"MySQL Database"},{"location":"Adv/phpMySql/#create-database","text":"//MySQLi Object-Oriented: <?php $servername = \"localhost\" ; $username = \"username\" ; $password = \"password\" ; // Create connection $conn = new mysqli ( $servername , $username , $password ); // Check connection if ( $conn -> connect_error ) { die ( \"Connection failed: \" . $conn -> connect_error ); } // Create database $sql = \"CREATE DATABASE myDB\" ; if ( $conn -> query ( $sql ) === TRUE ) { echo \"Database created successfully\" ; } else { echo \"Error creating database: \" . $conn -> error ; } $conn -> close (); ?> When you create a new database, you must only specify the first three arguments to the mysqli object (servername, username and password). If you have to use a specific port, add an empty string for the database-name argument, like this: new mysqli(\"localhost\", \"username\", \"password\", \"\", port). //MySQLi Procedural: <?php $servername = \"localhost\" ; $username = \"username\" ; $password = \"password\" ; // Create connection $conn = mysqli_connect ( $servername , $username , $password ); // Check connection if ( ! $conn ) { die ( \"Connection failed: \" . mysqli_connect_error ()); } // Create database $sql = \"CREATE DATABASE myDB\" ; if ( mysqli_query ( $conn , $sql )) { echo \"Database created successfully\" ; } else { echo \"Error creating database: \" . mysqli_error ( $conn ); } mysqli_close ( $conn ); ?> //PDO: <?php $servername = \"localhost\" ; $username = \"username\" ; $password = \"password\" ; try { $conn = new PDO ( \"mysql:host= $servername \" , $username , $password ); // set the PDO error mode to exception $conn -> setAttribute ( PDO :: ATTR_ERRMODE , PDO :: ERRMODE_EXCEPTION ); $sql = \"CREATE DATABASE myDBPDO\" ; // use exec() because no results are returned $conn -> exec ( $sql ); echo \"Database created successfully<br>\" ; } catch ( PDOException $e ) { echo $sql . \"<br>\" . $e -> getMessage (); } $conn = null ; ?> A great benefit of PDO is that it has exception class to handle any problems that may occur in our database queries. If an exception is thrown within the try{ } block, the script stops executing and flows directly to the first catch(){ } block. In the catch block above we echo the SQL statement and the generated error message.","title":"Create Database"},{"location":"Adv/phpMySql/#create-table","text":"//MySQLi Object-Oriented: <?php $servername = \"localhost\" ; $username = \"username\" ; $password = \"password\" ; $dbname = \"myDB\" ; // Create connection $conn = new mysqli ( $servername , $username , $password , $dbname ); // Check connection if ( $conn -> connect_error ) { die ( \"Connection failed: \" . $conn -> connect_error ); } // sql to create table $sql = \"CREATE TABLE MyGuests ( id INT(6) UNSIGNED AUTO_INCREMENT PRIMARY KEY, firstname VARCHAR(30) NOT NULL, lastname VARCHAR(30) NOT NULL, email VARCHAR(50), reg_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP )\" ; if ( $conn -> query ( $sql ) === TRUE ) { echo \"Table MyGuests created successfully\" ; } else { echo \"Error creating table: \" . $conn -> error ; } $conn -> close (); ?> //MySQLi Procedural: <?php $servername = \"localhost\" ; $username = \"username\" ; $password = \"password\" ; $dbname = \"myDB\" ; // Create connection $conn = mysqli_connect ( $servername , $username , $password , $dbname ); // Check connection if ( ! $conn ) { die ( \"Connection failed: \" . mysqli_connect_error ()); } // sql to create table $sql = \"CREATE TABLE MyGuests ( id INT(6) UNSIGNED AUTO_INCREMENT PRIMARY KEY, firstname VARCHAR(30) NOT NULL, lastname VARCHAR(30) NOT NULL, email VARCHAR(50), reg_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP )\" ; if ( mysqli_query ( $conn , $sql )) { echo \"Table MyGuests created successfully\" ; } else { echo \"Error creating table: \" . mysqli_error ( $conn ); } mysqli_close ( $conn ); ?> //PDO: <?php $servername = \"localhost\" ; $username = \"username\" ; $password = \"password\" ; $dbname = \"myDBPDO\" ; try { $conn = new PDO ( \"mysql:host= $servername ;dbname= $dbname \" , $username , $password ); // set the PDO error mode to exception $conn -> setAttribute ( PDO :: ATTR_ERRMODE , PDO :: ERRMODE_EXCEPTION ); // sql to create table $sql = \"CREATE TABLE MyGuests ( id INT(6) UNSIGNED AUTO_INCREMENT PRIMARY KEY, firstname VARCHAR(30) NOT NULL, lastname VARCHAR(30) NOT NULL, email VARCHAR(50), reg_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP )\" ; // use exec() because no results are returned $conn -> exec ( $sql ); echo \"Table MyGuests created successfully\" ; } catch ( PDOException $e ) { echo $sql . \"<br>\" . $e -> getMessage (); } $conn = null ; ?>","title":"Create Table"},{"location":"Adv/phpMySql/#insert-data","text":"//MySQLi Object-Oriented: <?php $servername = \"localhost\" ; $username = \"username\" ; $password = \"password\" ; $dbname = \"myDB\" ; // Create connection $conn = new mysqli ( $servername , $username , $password , $dbname ); // Check connection if ( $conn -> connect_error ) { die ( \"Connection failed: \" . $conn -> connect_error ); } $sql = \"INSERT INTO MyGuests (firstname, lastname, email) VALUES ('John', 'Doe', 'john@example.com')\" ; if ( $conn -> query ( $sql ) === TRUE ) { echo \"New record created successfully\" ; } else { echo \"Error: \" . $sql . \"<br>\" . $conn -> error ; } $conn -> close (); ?> //MySQLi Procedural: <?php $servername = \"localhost\" ; $username = \"username\" ; $password = \"password\" ; $dbname = \"myDB\" ; // Create connection $conn = mysqli_connect ( $servername , $username , $password , $dbname ); // Check connection if ( ! $conn ) { die ( \"Connection failed: \" . mysqli_connect_error ()); } $sql = \"INSERT INTO MyGuests (firstname, lastname, email) VALUES ('John', 'Doe', 'john@example.com')\" ; if ( mysqli_query ( $conn , $sql )) { echo \"New record created successfully\" ; } else { echo \"Error: \" . $sql . \"<br>\" . mysqli_error ( $conn ); } mysqli_close ( $conn ); ?> //PDO: <?php $servername = \"localhost\" ; $username = \"username\" ; $password = \"password\" ; $dbname = \"myDBPDO\" ; try { $conn = new PDO ( \"mysql:host= $servername ;dbname= $dbname \" , $username , $password ); // set the PDO error mode to exception $conn -> setAttribute ( PDO :: ATTR_ERRMODE , PDO :: ERRMODE_EXCEPTION ); $sql = \"INSERT INTO MyGuests (firstname, lastname, email) VALUES ('John', 'Doe', 'john@example.com')\" ; // use exec() because no results are returned $conn -> exec ( $sql ); echo \"New record created successfully\" ; } catch ( PDOException $e ) { echo $sql . \"<br>\" . $e -> getMessage (); } $conn = null ; ?>","title":"Insert Data"},{"location":"Adv/phpMySql/#get-id-of-the-last-inserted-record","text":"//MySQLi Object-Oriented: <?php $servername = \"localhost\" ; $username = \"username\" ; $password = \"password\" ; $dbname = \"myDB\" ; // Create connection $conn = new mysqli ( $servername , $username , $password , $dbname ); // Check connection if ( $conn -> connect_error ) { die ( \"Connection failed: \" . $conn -> connect_error ); } $sql = \"INSERT INTO MyGuests (firstname, lastname, email) VALUES ('John', 'Doe', 'john@example.com')\" ; if ( $conn -> query ( $sql ) === TRUE ) { $last_id = $conn -> insert_id ; echo \"New record created successfully. Last inserted ID is: \" . $last_id ; } else { echo \"Error: \" . $sql . \"<br>\" . $conn -> error ; } $conn -> close (); ?> //MySQLi Procedural: <?php $servername = \"localhost\" ; $username = \"username\" ; $password = \"password\" ; $dbname = \"myDB\" ; // Create connection $conn = mysqli_connect ( $servername , $username , $password , $dbname ); // Check connection if ( ! $conn ) { die ( \"Connection failed: \" . mysqli_connect_error ()); } $sql = \"INSERT INTO MyGuests (firstname, lastname, email) VALUES ('John', 'Doe', 'john@example.com')\" ; if ( mysqli_query ( $conn , $sql )) { $last_id = mysqli_insert_id ( $conn ); echo \"New record created successfully. Last inserted ID is: \" . $last_id ; } else { echo \"Error: \" . $sql . \"<br>\" . mysqli_error ( $conn ); } mysqli_close ( $conn ); ?> //PDO: <?php $servername = \"localhost\" ; $username = \"username\" ; $password = \"password\" ; $dbname = \"myDBPDO\" ; try { $conn = new PDO ( \"mysql:host= $servername ;dbname= $dbname \" , $username , $password ); // set the PDO error mode to exception $conn -> setAttribute ( PDO :: ATTR_ERRMODE , PDO :: ERRMODE_EXCEPTION ); $sql = \"INSERT INTO MyGuests (firstname, lastname, email) VALUES ('John', 'Doe', 'john@example.com')\" ; // use exec() because no results are returned $conn -> exec ( $sql ); $last_id = $conn -> lastInsertId (); echo \"New record created successfully. Last inserted ID is: \" . $last_id ; } catch ( PDOException $e ) { echo $sql . \"<br>\" . $e -> getMessage (); } $conn = null ; ?>","title":"Get ID of The Last Inserted Record"},{"location":"Adv/phpMySql/#insert-multiple-records","text":"//MySQLi Object-Oriented: <?php $servername = \"localhost\" ; $username = \"username\" ; $password = \"password\" ; $dbname = \"myDB\" ; // Create connection $conn = new mysqli ( $servername , $username , $password , $dbname ); // Check connection if ( $conn -> connect_error ) { die ( \"Connection failed: \" . $conn -> connect_error ); } $sql = \"INSERT INTO MyGuests (firstname, lastname, email) VALUES ('John', 'Doe', 'john@example.com');\" ; $sql .= \"INSERT INTO MyGuests (firstname, lastname, email) VALUES ('Mary', 'Moe', 'mary@example.com');\" ; $sql .= \"INSERT INTO MyGuests (firstname, lastname, email) VALUES ('Julie', 'Dooley', 'julie@example.com')\" ; if ( $conn -> multi_query ( $sql ) === TRUE ) { echo \"New records created successfully\" ; } else { echo \"Error: \" . $sql . \"<br>\" . $conn -> error ; } $conn -> close (); ?> Note that each SQL statement must be separated by a semicolon. //MySQLi Procedural: <?php $servername = \"localhost\" ; $username = \"username\" ; $password = \"password\" ; $dbname = \"myDB\" ; // Create connection $conn = mysqli_connect ( $servername , $username , $password , $dbname ); // Check connection if ( ! $conn ) { die ( \"Connection failed: \" . mysqli_connect_error ()); } $sql = \"INSERT INTO MyGuests (firstname, lastname, email) VALUES ('John', 'Doe', 'john@example.com');\" ; $sql .= \"INSERT INTO MyGuests (firstname, lastname, email) VALUES ('Mary', 'Moe', 'mary@example.com');\" ; $sql .= \"INSERT INTO MyGuests (firstname, lastname, email) VALUES ('Julie', 'Dooley', 'julie@example.com')\" ; if ( mysqli_multi_query ( $conn , $sql )) { echo \"New records created successfully\" ; } else { echo \"Error: \" . $sql . \"<br>\" . mysqli_error ( $conn ); } mysqli_close ( $conn ); ?> //PDO: <?php $servername = \"localhost\" ; $username = \"username\" ; $password = \"password\" ; $dbname = \"myDBPDO\" ; try { $conn = new PDO ( \"mysql:host= $servername ;dbname= $dbname \" , $username , $password ); // set the PDO error mode to exception $conn -> setAttribute ( PDO :: ATTR_ERRMODE , PDO :: ERRMODE_EXCEPTION ); // begin the transaction $conn -> beginTransaction (); // our SQL statements $conn -> exec ( \"INSERT INTO MyGuests (firstname, lastname, email) VALUES ('John', 'Doe', 'john@example.com')\" ); $conn -> exec ( \"INSERT INTO MyGuests (firstname, lastname, email) VALUES ('Mary', 'Moe', 'mary@example.com')\" ); $conn -> exec ( \"INSERT INTO MyGuests (firstname, lastname, email) VALUES ('Julie', 'Dooley', 'julie@example.com')\" ); // commit the transaction $conn -> commit (); echo \"New records created successfully\" ; } catch ( PDOException $e ) { // roll back the transaction if something failed $conn -> rollback (); echo \"Error: \" . $e -> getMessage (); } $conn = null ; ?>","title":"Insert Multiple Records"},{"location":"Adv/phpMySql/#prepared-statements","text":"Prepared statements are very useful against SQL injections. A prepared statement is a feature used to execute the same (or similar) SQL statements repeatedly with high efficiency. Prepared statements basically work like this: Prepare: An SQL statement template is created and sent to the database. Certain values are left unspecified, called parameters (labeled \"?\"). Example: INSERT INTO MyGuests VALUES(?, ?, ?) The database parses, compiles, and performs query optimization on the SQL statement template, and stores the result without executing it Execute: At a later time, the application binds the values to the parameters, and the database executes the statement. The application may execute the statement as many times as it wants with different values Compared to executing SQL statements directly, prepared statements have three main advantages: Prepared statements reduce parsing time as the preparation on the query is done only once (although the statement is executed multiple times) Bound parameters minimize bandwidth to the server as you need send only the parameters each time, and not the whole query Prepared statements are very useful against SQL injections, because parameter values, which are transmitted later using a different protocol, need not be correctly escaped. If the original statement template is not derived from external input, SQL injection cannot occur. //MySQLi Object-Oriented: <?php $servername = \"localhost\" ; $username = \"username\" ; $password = \"password\" ; $dbname = \"myDB\" ; // Create connection $conn = new mysqli ( $servername , $username , $password , $dbname ); // Check connection if ( $conn -> connect_error ) { die ( \"Connection failed: \" . $conn -> connect_error ); } // prepare and bind $stmt = $conn -> prepare ( \"INSERT INTO MyGuests (firstname, lastname, email) VALUES (?, ?, ?)\" ); $stmt -> bind_param ( \"sss\" , $firstname , $lastname , $email ); // set parameters and execute $firstname = \"John\" ; $lastname = \"Doe\" ; $email = \"john@example.com\" ; $stmt -> execute (); $firstname = \"Mary\" ; $lastname = \"Moe\" ; $email = \"mary@example.com\" ; $stmt -> execute (); $firstname = \"Julie\" ; $lastname = \"Dooley\" ; $email = \"julie@example.com\" ; $stmt -> execute (); echo \"New records created successfully\" ; $stmt -> close (); $conn -> close (); ?> $stmt->bind_param(\"sss\", $firstname, $lastname, $email); This function binds the parameters to the SQL query and tells the database what the parameters are. The \"sss\" argument lists the types of data that the parameters are. The s character tells mysql that the parameter is a string. The argument may be one of four types: i - integer d - double s - string b - BLOB We must have one of these for each parameter. By telling mysql what type of data to expect, we minimize the risk of SQL injections. If we want to insert any data from external sources (like user input), it is very important that the data is sanitized and validated. //PDO: <?php $servername = \"localhost\" ; $username = \"username\" ; $password = \"password\" ; $dbname = \"myDBPDO\" ; try { $conn = new PDO ( \"mysql:host= $servername ;dbname= $dbname \" , $username , $password ); // set the PDO error mode to exception $conn -> setAttribute ( PDO :: ATTR_ERRMODE , PDO :: ERRMODE_EXCEPTION ); // prepare sql and bind parameters $stmt = $conn -> prepare ( \"INSERT INTO MyGuests (firstname, lastname, email) VALUES (:firstname, :lastname, :email)\" ); $stmt -> bindParam ( ':firstname' , $firstname ); $stmt -> bindParam ( ':lastname' , $lastname ); $stmt -> bindParam ( ':email' , $email ); // insert a row $firstname = \"John\" ; $lastname = \"Doe\" ; $email = \"john@example.com\" ; $stmt -> execute (); // insert another row $firstname = \"Mary\" ; $lastname = \"Moe\" ; $email = \"mary@example.com\" ; $stmt -> execute (); // insert another row $firstname = \"Julie\" ; $lastname = \"Dooley\" ; $email = \"julie@example.com\" ; $stmt -> execute (); echo \"New records created successfully\" ; } catch ( PDOException $e ) { echo \"Error: \" . $e -> getMessage (); } $conn = null ; ?>","title":"Prepared Statements"},{"location":"Adv/phpMySql/#select-data","text":"//MySQLi Object-Oriented: <?php $servername = \"localhost\" ; $username = \"username\" ; $password = \"password\" ; $dbname = \"myDB\" ; // Create connection $conn = new mysqli ( $servername , $username , $password , $dbname ); // Check connection if ( $conn -> connect_error ) { die ( \"Connection failed: \" . $conn -> connect_error ); } $sql = \"SELECT id, firstname, lastname FROM MyGuests\" ; $result = $conn -> query ( $sql ); if ( $result -> num_rows > 0 ) { // output data of each row while ( $row = $result -> fetch_assoc ()) { echo \"id: \" . $row [ \"id\" ] . \" - Name: \" . $row [ \"firstname\" ] . \" \" . $row [ \"lastname\" ] . \"<br>\" ; } } else { echo \"0 results\" ; } $conn -> close (); ?> //MySQLi Procedural: <?php $servername = \"localhost\" ; $username = \"username\" ; $password = \"password\" ; $dbname = \"myDB\" ; // Create connection $conn = mysqli_connect ( $servername , $username , $password , $dbname ); // Check connection if ( ! $conn ) { die ( \"Connection failed: \" . mysqli_connect_error ()); } $sql = \"SELECT id, firstname, lastname FROM MyGuests\" ; $result = mysqli_query ( $conn , $sql ); if ( mysqli_num_rows ( $result ) > 0 ) { // output data of each row while ( $row = mysqli_fetch_assoc ( $result )) { echo \"id: \" . $row [ \"id\" ] . \" - Name: \" . $row [ \"firstname\" ] . \" \" . $row [ \"lastname\" ] . \"<br>\" ; } } else { echo \"0 results\" ; } mysqli_close ( $conn ); ?> //PDO: <?php echo \"<table style='border: solid 1px black;'>\" ; echo \"<tr><th>Id</th><th>Firstname</th><th>Lastname</th></tr>\" ; class TableRows extends RecursiveIteratorIterator { function __construct ( $it ) { parent :: __construct ( $it , self :: LEAVES_ONLY ); } function current () { return \"<td style='width:150px;border:1px solid black;'>\" . parent :: current () . \"</td>\" ; } function beginChildren () { echo \"<tr>\" ; } function endChildren () { echo \"</tr>\" . \" \\n \" ; } } $servername = \"localhost\" ; $username = \"username\" ; $password = \"password\" ; $dbname = \"myDBPDO\" ; try { $conn = new PDO ( \"mysql:host= $servername ;dbname= $dbname \" , $username , $password ); $conn -> setAttribute ( PDO :: ATTR_ERRMODE , PDO :: ERRMODE_EXCEPTION ); $stmt = $conn -> prepare ( \"SELECT id, firstname, lastname FROM MyGuests\" ); $stmt -> execute (); // set the resulting array to associative $result = $stmt -> setFetchMode ( PDO :: FETCH_ASSOC ); foreach ( new TableRows ( new RecursiveArrayIterator ( $stmt -> fetchAll ())) as $k => $v ) { echo $v ; } } catch ( PDOException $e ) { echo \"Error: \" . $e -> getMessage (); } $conn = null ; echo \"</table>\" ; ?>","title":"Select Data"},{"location":"Adv/phpMySql/#select-and-filter-data","text":"//MySQLi Object-Oriented: <?php $servername = \"localhost\" ; $username = \"username\" ; $password = \"password\" ; $dbname = \"myDB\" ; // Create connection $conn = new mysqli ( $servername , $username , $password , $dbname ); // Check connection if ( $conn -> connect_error ) { die ( \"Connection failed: \" . $conn -> connect_error ); } $sql = \"SELECT id, firstname, lastname FROM MyGuests WHERE lastname='Doe'\" ; $result = $conn -> query ( $sql ); if ( $result -> num_rows > 0 ) { // output data of each row while ( $row = $result -> fetch_assoc ()) { echo \"id: \" . $row [ \"id\" ] . \" - Name: \" . $row [ \"firstname\" ] . \" \" . $row [ \"lastname\" ] . \"<br>\" ; } } else { echo \"0 results\" ; } $conn -> close (); ?> //MySQLi Procedural: <?php $servername = \"localhost\" ; $username = \"username\" ; $password = \"password\" ; $dbname = \"myDB\" ; // Create connection $conn = mysqli_connect ( $servername , $username , $password , $dbname ); // Check connection if ( ! $conn ) { die ( \"Connection failed: \" . mysqli_connect_error ()); } $sql = \"SELECT id, firstname, lastname FROM MyGuests WHERE lastname='Doe'\" ; $result = mysqli_query ( $conn , $sql ); if ( mysqli_num_rows ( $result ) > 0 ) { // output data of each row while ( $row = mysqli_fetch_assoc ( $result )) { echo \"id: \" . $row [ \"id\" ] . \" - Name: \" . $row [ \"firstname\" ] . \" \" . $row [ \"lastname\" ] . \"<br>\" ; } } else { echo \"0 results\" ; } mysqli_close ( $conn ); ?> //PDO: <?php echo \"<table style='border: solid 1px black;'>\" ; echo \"<tr><th>Id</th><th>Firstname</th><th>Lastname</th></tr>\" ; class TableRows extends RecursiveIteratorIterator { function __construct ( $it ) { parent :: __construct ( $it , self :: LEAVES_ONLY ); } function current () { return \"<td style='width:150px;border:1px solid black;'>\" . parent :: current () . \"</td>\" ; } function beginChildren () { echo \"<tr>\" ; } function endChildren () { echo \"</tr>\" . \" \\n \" ; } } $servername = \"localhost\" ; $username = \"username\" ; $password = \"password\" ; $dbname = \"myDBPDO\" ; try { $conn = new PDO ( \"mysql:host= $servername ;dbname= $dbname \" , $username , $password ); $conn -> setAttribute ( PDO :: ATTR_ERRMODE , PDO :: ERRMODE_EXCEPTION ); $stmt = $conn -> prepare ( \"SELECT id, firstname, lastname FROM MyGuests WHERE lastname='Doe'\" ); $stmt -> execute (); // set the resulting array to associative $result = $stmt -> setFetchMode ( PDO :: FETCH_ASSOC ); foreach ( new TableRows ( new RecursiveArrayIterator ( $stmt -> fetchAll ())) as $k => $v ) { echo $v ; } } catch ( PDOException $e ) { echo \"Error: \" . $e -> getMessage (); } $conn = null ; echo \"</table>\" ; ?>","title":"Select and Filter Data"},{"location":"Adv/phpMySql/#select-and-order-data","text":"//MySQLi Object-Oriented: <?php $servername = \"localhost\" ; $username = \"username\" ; $password = \"password\" ; $dbname = \"myDB\" ; // Create connection $conn = new mysqli ( $servername , $username , $password , $dbname ); // Check connection if ( $conn -> connect_error ) { die ( \"Connection failed: \" . $conn -> connect_error ); } $sql = \"SELECT id, firstname, lastname FROM MyGuests ORDER BY lastname\" ; $result = $conn -> query ( $sql ); if ( $result -> num_rows > 0 ) { // output data of each row while ( $row = $result -> fetch_assoc ()) { echo \"id: \" . $row [ \"id\" ] . \" - Name: \" . $row [ \"firstname\" ] . \" \" . $row [ \"lastname\" ] . \"<br>\" ; } } else { echo \"0 results\" ; } $conn -> close (); ?> //MySQLi Procedural: <?php $servername = \"localhost\" ; $username = \"username\" ; $password = \"password\" ; $dbname = \"myDB\" ; // Create connection $conn = mysqli_connect ( $servername , $username , $password , $dbname ); // Check connection if ( ! $conn ) { die ( \"Connection failed: \" . mysqli_connect_error ()); } $sql = \"SELECT id, firstname, lastname FROM MyGuests ORDER BY lastname\" ; $result = mysqli_query ( $conn , $sql ); if ( mysqli_num_rows ( $result ) > 0 ) { // output data of each row while ( $row = mysqli_fetch_assoc ( $result )) { echo \"id: \" . $row [ \"id\" ] . \" - Name: \" . $row [ \"firstname\" ] . \" \" . $row [ \"lastname\" ] . \"<br>\" ; } } else { echo \"0 results\" ; } mysqli_close ( $conn ); ?> //PDO: <?php echo \"<table style='border: solid 1px black;'>\" ; echo \"<tr><th>Id</th><th>Firstname</th><th>Lastname</th></tr>\" ; class TableRows extends RecursiveIteratorIterator { function __construct ( $it ) { parent :: __construct ( $it , self :: LEAVES_ONLY ); } function current () { return \"<td style='width:150px;border:1px solid black;'>\" . parent :: current () . \"</td>\" ; } function beginChildren () { echo \"<tr>\" ; } function endChildren () { echo \"</tr>\" . \" \\n \" ; } } $servername = \"localhost\" ; $username = \"username\" ; $password = \"password\" ; $dbname = \"myDBPDO\" ; try { $conn = new PDO ( \"mysql:host= $servername ;dbname= $dbname \" , $username , $password ); $conn -> setAttribute ( PDO :: ATTR_ERRMODE , PDO :: ERRMODE_EXCEPTION ); $stmt = $conn -> prepare ( \"SELECT id, firstname, lastname FROM MyGuests ORDER BY lastname\" ); $stmt -> execute (); // set the resulting array to associative $result = $stmt -> setFetchMode ( PDO :: FETCH_ASSOC ); foreach ( new TableRows ( new RecursiveArrayIterator ( $stmt -> fetchAll ())) as $k => $v ) { echo $v ; } } catch ( PDOException $e ) { echo \"Error: \" . $e -> getMessage (); } $conn = null ; echo \"</table>\" ; ?>","title":"Select and Order Data"},{"location":"Adv/phpMySql/#limit-data","text":"MySQL provides a LIMIT clause that is used to specify the number of records to return. The LIMIT clause makes it easy to code multi page results or pagination with SQL, and is very useful on large tables. Returning a large number of records can impact on performance. Assume we wish to select all records from 1 - 30 (inclusive) from a table called \"Orders\". The SQL query would then look like this: $sql = \"SELECT * FROM Orders LIMIT 30\"; When the SQL query above is run, it will return the first 30 records. What if we want to select records 16 - 25 (inclusive)? Mysql also provides a way to handle this: by using OFFSET. The SQL query below says \"return only 10 records, start on record 16 (OFFSET 15)\": $sql = \"SELECT * FROM Orders LIMIT 10 OFFSET 15\"; You could also use a shorter syntax to achieve the same result: $sql = \"SELECT * FROM Orders LIMIT 15, 10\"; Notice that the numbers are reversed when you use a comma.","title":"Limit Data"},{"location":"Adv/phpMySql/#delete-data","text":"//MySQLi Object-Oriented: <?php $servername = \"localhost\" ; $username = \"username\" ; $password = \"password\" ; $dbname = \"myDB\" ; // Create connection $conn = new mysqli ( $servername , $username , $password , $dbname ); // Check connection if ( $conn -> connect_error ) { die ( \"Connection failed: \" . $conn -> connect_error ); } // sql to delete a record $sql = \"DELETE FROM MyGuests WHERE id=3\" ; if ( $conn -> query ( $sql ) === TRUE ) { echo \"Record deleted successfully\" ; } else { echo \"Error deleting record: \" . $conn -> error ; } $conn -> close (); ?> //MySQLi Procedural: <?php $servername = \"localhost\" ; $username = \"username\" ; $password = \"password\" ; $dbname = \"myDB\" ; // Create connection $conn = mysqli_connect ( $servername , $username , $password , $dbname ); // Check connection if ( ! $conn ) { die ( \"Connection failed: \" . mysqli_connect_error ()); } // sql to delete a record $sql = \"DELETE FROM MyGuests WHERE id=3\" ; if ( mysqli_query ( $conn , $sql )) { echo \"Record deleted successfully\" ; } else { echo \"Error deleting record: \" . mysqli_error ( $conn ); } mysqli_close ( $conn ); ?> //PDO: <?php $servername = \"localhost\" ; $username = \"username\" ; $password = \"password\" ; $dbname = \"myDBPDO\" ; try { $conn = new PDO ( \"mysql:host= $servername ;dbname= $dbname \" , $username , $password ); // set the PDO error mode to exception $conn -> setAttribute ( PDO :: ATTR_ERRMODE , PDO :: ERRMODE_EXCEPTION ); // sql to delete a record $sql = \"DELETE FROM MyGuests WHERE id=3\" ; // use exec() because no results are returned $conn -> exec ( $sql ); echo \"Record deleted successfully\" ; } catch ( PDOException $e ) { echo $sql . \"<br>\" . $e -> getMessage (); } $conn = null ; ?>","title":"Delete Data"},{"location":"Adv/phpMySql/#update-data","text":"//MySQLi Object-Oriented: <?php $servername = \"localhost\" ; $username = \"username\" ; $password = \"password\" ; $dbname = \"myDB\" ; // Create connection $conn = new mysqli ( $servername , $username , $password , $dbname ); // Check connection if ( $conn -> connect_error ) { die ( \"Connection failed: \" . $conn -> connect_error ); } $sql = \"UPDATE MyGuests SET lastname='Doe' WHERE id=2\" ; if ( $conn -> query ( $sql ) === TRUE ) { echo \"Record updated successfully\" ; } else { echo \"Error updating record: \" . $conn -> error ; } $conn -> close (); ?> //MySQLi Procedural: <?php $servername = \"localhost\" ; $username = \"username\" ; $password = \"password\" ; $dbname = \"myDB\" ; // Create connection $conn = mysqli_connect ( $servername , $username , $password , $dbname ); // Check connection if ( ! $conn ) { die ( \"Connection failed: \" . mysqli_connect_error ()); } $sql = \"UPDATE MyGuests SET lastname='Doe' WHERE id=2\" ; if ( mysqli_query ( $conn , $sql )) { echo \"Record updated successfully\" ; } else { echo \"Error updating record: \" . mysqli_error ( $conn ); } mysqli_close ( $conn ); ?> //PDO: <?php $servername = \"localhost\" ; $username = \"username\" ; $password = \"password\" ; $dbname = \"myDBPDO\" ; try { $conn = new PDO ( \"mysql:host= $servername ;dbname= $dbname \" , $username , $password ); // set the PDO error mode to exception $conn -> setAttribute ( PDO :: ATTR_ERRMODE , PDO :: ERRMODE_EXCEPTION ); $sql = \"UPDATE MyGuests SET lastname='Doe' WHERE id=2\" ; // Prepare statement $stmt = $conn -> prepare ( $sql ); // execute the query $stmt -> execute (); // echo a message to say the UPDATE succeeded echo $stmt -> rowCount () . \" records UPDATED successfully\" ; } catch ( PDOException $e ) { echo $sql . \"<br>\" . $e -> getMessage (); } $conn = null ; ?>","title":"Update Data"},{"location":"Adv/phpXML/","text":"The XML language is a way to structure data for sharing across websites. Several web technologies like RSS Feeds and Podcasts are written in XML. In PHP there are two major types of XML parsers: Tree-Based Parsers Event-Based Parsers Tree-Based Parsers Tree-based parsers holds the entire document in Memory and transforms the XML document into a Tree structure. It analyzes the whole document, and provides access to the Tree elements (DOM). This type of parser is a better option for smaller XML documents, but not for large XML document as it causes major performance issues. Example of tree-based parsers: SimpleXML DOM SimpleXML SimpleXML is a PHP extension that allows us to easily manipulate and get XML data. SimpleXML is a tree-based parser. SimpleXML provides an easy way of getting an element's name, attributes and textual content if you know the XML document's structure or layout. SimpleXML turns an XML document into a data structure you can iterate through like a collection of arrays and objects. Compared to DOM or the Expat parser, SimpleXML takes a fewer lines of code to read text data from an element. Read From String The PHP simplexml_load_string() function is used to read XML data from a string. <?php $myXMLData = \"<?xml version='1.0' encoding='UTF-8'?> <note> <to>Tove</to> <from>Jani</from> <heading>Reminder</heading> <body>Don't forget me this weekend!</body> </note>\" ; $xml = simplexml_load_string ( $myXMLData ) or die ( \"Error: Cannot create object\" ); print_r ( $xml ); ?> The output of the code above will be: SimpleXMLElement Object ( [to] => Tove [from] => Jani [heading] => Reminder [body] => Don't forget me this weekend! ) Error Handling Tip: Use the libxml functionality to retrieve all XML errors when loading the document and then iterate over the errors. The following example tries to load a broken XML string: <?php libxml_use_internal_errors ( true ); $myXMLData = \"<?xml version='1.0' encoding='UTF-8'?> <document> <user>John Doe</wronguser> <email>john@example.com</wrongemail> </document>\" ; $xml = simplexml_load_string ( $myXMLData ); if ( $xml === false ) { echo \"Failed loading XML: \" ; foreach ( libxml_get_errors () as $error ) { echo \"<br>\" , $error -> message ; } } else { print_r ( $xml ); } ?> The output of the code above will be: Failed loading XML: Opening and ending tag mismatch: user line 3 and wronguser Opening and ending tag mismatch: email line 4 and wrongemail Read From File The PHP simplexml_load_file() function is used to read XML data from a file. Assume we have an XML file called \"note.xml\". <?xml version=\"1.0\" encoding=\"UTF-8\"?> <note> <to> Tove </to> <from> Jani </from> <heading> Reminder </heading> <body> Don't forget me this weekend! </body> </note> The example below shows how to use the simplexml_load_file() function to read XML data from a file. <?php $xml = simplexml_load_file ( \"note.xml\" ) or die ( \"Error: Cannot create object\" ); print_r ( $xml ); ?> The output of the code above will be: SimpleXMLElement Object ( [to] => Tove [from] => Jani [heading] => Reminder [body] => Don't forget me this weekend! ) Get Node Values Get the node values from the \"note.xml\" file. <?php $xml = simplexml_load_file ( \"note.xml\" ) or die ( \"Error: Cannot create object\" ); echo $xml -> to . \"<br>\" ; echo $xml -> from . \"<br>\" ; echo $xml -> heading . \"<br>\" ; echo $xml -> body ; ?> The output of the code above will be: Tove Jani Reminder Don't forget me this weekend! Get Node Values of Specific Elements Assume we have an XML file called \"books.xml\", that looks like this: <?xml version=\"1.0\" encoding=\"utf-8\"?> <bookstore> <book category= \"COOKING\" > <title lang= \"en\" > Everyday Italian </title> <author> Giada De Laurentiis </author> <year> 2005 </year> <price> 30.00 </price> </book> <book category= \"CHILDREN\" > <title lang= \"en\" > Harry Potter </title> <author> J K. Rowling </author> <year> 2005 </year> <price> 29.99 </price> </book> <book category= \"WEB\" > <title lang= \"en-us\" > XQuery Kick Start </title> <author> James McGovern </author> <year> 2003 </year> <price> 49.99 </price> </book> <book category= \"WEB\" > <title lang= \"en-us\" > Learning XML </title> <author> Erik T. Ray </author> <year> 2003 </year> <price> 39.95 </price> </book> </bookstore> <?php $xml = simplexml_load_file ( \"books.xml\" ) or die ( \"Error: Cannot create object\" ); echo $xml -> book [ 0 ] -> title . \"<br>\" ; echo $xml -> book [ 1 ] -> title ; ?> The output of the code above will be: Everyday Italian Harry Potter Get Node Values - Loop The following example loops through all the book elements in the \"books.xml\" file, and gets the node values of the title, author, year, and price elements. <?php $xml = simplexml_load_file ( \"books.xml\" ) or die ( \"Error: Cannot create object\" ); foreach ( $xml -> children () as $books ) { echo $books -> title . \", \" ; echo $books -> author . \", \" ; echo $books -> year . \", \" ; echo $books -> price . \"<br>\" ; } ?> The output of the code above will be: Everyday Italian, Giada De Laurentiis, 2005, 30.00 Harry Potter, J K. Rowling, 2005, 29.99 XQuery Kick Start, James McGovern, 2003, 49.99 Learning XML, Erik T. Ray, 2003, 39.95 Get Attribute Values The following example gets the attribute value of the \"category\" attribute of the first book element and the attribute value of the \"lang\" attribute of the title element in the second book element. <?php $xml = simplexml_load_file ( \"books.xml\" ) or die ( \"Error: Cannot create object\" ); echo $xml -> book [ 0 ][ 'category' ] . \"<br>\" ; echo $xml -> book [ 1 ] -> title [ 'lang' ]; ?> The output of the code above will be: COOKING en Get Attribute Values - Loop The following example gets the attribute values of the title elements in the \"books.xml\" file. <?php $xml = simplexml_load_file ( \"books.xml\" ) or die ( \"Error: Cannot create object\" ); foreach ( $xml -> children () as $books ) { echo $books -> title [ 'lang' ]; echo \"<br>\" ; } ?> The output of the code above will be: en en en-us en-us XML DOM Parser The DOM parser is a tree-based parser. Look at the following XML document fraction: <?xml version=\"1.0\" encoding=\"UTF-8\"?> <from> Jani </from> The DOM sees the XML above as a tree structure: Level 1: XML Document Level 2: Root element: Level 3: Text element: \"Jani\" The XML file below (\"note.xml\") will be used in our example: <?xml version=\"1.0\" encoding=\"UTF-8\"?> <note> <to> Tove </to> <from> Jani </from> <heading> Reminder </heading> <body> Don't forget me this weekend! </body> </note> Load and Output XML We want to initialize the XML parser, load the xml, and output it: <?php $xmlDoc = new DOMDocument (); $xmlDoc -> load ( \"note.xml\" ); print $xmlDoc -> saveXML (); ?> The output of the code above will be: Tove Jani Reminder Don't forget me this weekend! If you select \"View source\" in the browser window, you will see the following HTML: <?xml version=\"1.0\" encoding=\"UTF-8\"?> <note> <to> Tove </to> <from> Jani </from> <heading> Reminder </heading> <body> Don't forget me this weekend! </body> </note> The example above creates a DOMDocument-Object and loads the XML from \"note.xml\" into it. Then the saveXML() function puts the internal XML document into a string, so we can output it. Looping through XML We want to initialize the XML parser, load the XML, and loop through all elements of the element: <?php $xmlDoc = new DOMDocument (); $xmlDoc -> load ( \"note.xml\" ); $x = $xmlDoc -> documentElement ; foreach ( $x -> childNodes AS $item ) { print $item -> nodeName . \" = \" . $item -> nodeValue . \"<br>\" ; } ?> The output of the code above will be: #text = to = Tove #text = from = Jani #text = heading = Reminder #text = body = Don't forget me this weekend! #text = In the example above you see that there are empty text nodes between each element. When XML generates, it often contains white-spaces between the nodes. The XML DOM parser treats these as ordinary elements, and if you are not aware of them, they sometimes cause problems. Event-Based Parsers Event-based parsers do not hold the entire document in Memory, instead, they read in one node at a time and allow you to interact with in real time. Once you move onto the next node, the old one is thrown away. This type of parser is well suited for large XML documents. It parses faster and consumes less memory. Example of event-based parsers: XMLReader XML Expat Parser XML Expat Parser The Expat parser is an event-based parser. Look at the following XML fraction: <from> Jani </from> An event-based parser reports the XML above as a series of three events: Start element: from Start CDATA section, value: Jani Close element: from The XML Expat Parser functions are part of the PHP core. There is no installation needed to use these functions. The XML file \"note.xml\" will be used in the example below: <?xml version=\"1.0\" encoding=\"UTF-8\"?> <note> <to> Tove </to> <from> Jani </from> <heading> Reminder </heading> <body> Don't forget me this weekend! </body> </note> Initializing the XML Expat Parser We want to initialize the XML Expat Parser in PHP, define some handlers for different XML events, and then parse the XML file. <?php // Initialize the XML parser $parser = xml_parser_create (); // Function to use at the start of an element function start ( $parser , $element_name , $element_attrs ) { switch ( $element_name ) { case \"NOTE\" : echo \"-- Note --<br>\" ; break ; case \"TO\" : echo \"To: \" ; break ; case \"FROM\" : echo \"From: \" ; break ; case \"HEADING\" : echo \"Heading: \" ; break ; case \"BODY\" : echo \"Message: \" ; } } // Function to use at the end of an element function stop ( $parser , $element_name ) { echo \"<br>\" ; } // Function to use when finding character data function char ( $parser , $data ) { echo $data ; } // Specify element handler xml_set_element_handler ( $parser , \"start\" , \"stop\" ); // Specify data handler xml_set_character_data_handler ( $parser , \"char\" ); // Open XML file $fp = fopen ( \"note.xml\" , \"r\" ); // Read data while ( $data = fread ( $fp , 4096 )) { xml_parse ( $parser , $data , feof ( $fp )) or die ( sprintf ( \"XML Error: %s at line %d\" , xml_error_string ( xml_get_error_code ( $parser )), xml_get_current_line_number ( $parser ))); } // Free the XML parser xml_parser_free ( $parser ); ?>","title":"XML"},{"location":"Adv/phpXML/#tree-based-parsers","text":"Tree-based parsers holds the entire document in Memory and transforms the XML document into a Tree structure. It analyzes the whole document, and provides access to the Tree elements (DOM). This type of parser is a better option for smaller XML documents, but not for large XML document as it causes major performance issues. Example of tree-based parsers: SimpleXML DOM","title":"Tree-Based Parsers"},{"location":"Adv/phpXML/#simplexml","text":"SimpleXML is a PHP extension that allows us to easily manipulate and get XML data. SimpleXML is a tree-based parser. SimpleXML provides an easy way of getting an element's name, attributes and textual content if you know the XML document's structure or layout. SimpleXML turns an XML document into a data structure you can iterate through like a collection of arrays and objects. Compared to DOM or the Expat parser, SimpleXML takes a fewer lines of code to read text data from an element.","title":"SimpleXML"},{"location":"Adv/phpXML/#read-from-string","text":"The PHP simplexml_load_string() function is used to read XML data from a string. <?php $myXMLData = \"<?xml version='1.0' encoding='UTF-8'?> <note> <to>Tove</to> <from>Jani</from> <heading>Reminder</heading> <body>Don't forget me this weekend!</body> </note>\" ; $xml = simplexml_load_string ( $myXMLData ) or die ( \"Error: Cannot create object\" ); print_r ( $xml ); ?> The output of the code above will be: SimpleXMLElement Object ( [to] => Tove [from] => Jani [heading] => Reminder [body] => Don't forget me this weekend! ) Error Handling Tip: Use the libxml functionality to retrieve all XML errors when loading the document and then iterate over the errors. The following example tries to load a broken XML string: <?php libxml_use_internal_errors ( true ); $myXMLData = \"<?xml version='1.0' encoding='UTF-8'?> <document> <user>John Doe</wronguser> <email>john@example.com</wrongemail> </document>\" ; $xml = simplexml_load_string ( $myXMLData ); if ( $xml === false ) { echo \"Failed loading XML: \" ; foreach ( libxml_get_errors () as $error ) { echo \"<br>\" , $error -> message ; } } else { print_r ( $xml ); } ?> The output of the code above will be: Failed loading XML: Opening and ending tag mismatch: user line 3 and wronguser Opening and ending tag mismatch: email line 4 and wrongemail","title":"Read From String"},{"location":"Adv/phpXML/#read-from-file","text":"The PHP simplexml_load_file() function is used to read XML data from a file. Assume we have an XML file called \"note.xml\". <?xml version=\"1.0\" encoding=\"UTF-8\"?> <note> <to> Tove </to> <from> Jani </from> <heading> Reminder </heading> <body> Don't forget me this weekend! </body> </note> The example below shows how to use the simplexml_load_file() function to read XML data from a file. <?php $xml = simplexml_load_file ( \"note.xml\" ) or die ( \"Error: Cannot create object\" ); print_r ( $xml ); ?> The output of the code above will be: SimpleXMLElement Object ( [to] => Tove [from] => Jani [heading] => Reminder [body] => Don't forget me this weekend! )","title":"Read From File"},{"location":"Adv/phpXML/#get-node-values","text":"Get the node values from the \"note.xml\" file. <?php $xml = simplexml_load_file ( \"note.xml\" ) or die ( \"Error: Cannot create object\" ); echo $xml -> to . \"<br>\" ; echo $xml -> from . \"<br>\" ; echo $xml -> heading . \"<br>\" ; echo $xml -> body ; ?> The output of the code above will be: Tove Jani Reminder Don't forget me this weekend!","title":"Get Node Values"},{"location":"Adv/phpXML/#get-node-values-of-specific-elements","text":"Assume we have an XML file called \"books.xml\", that looks like this: <?xml version=\"1.0\" encoding=\"utf-8\"?> <bookstore> <book category= \"COOKING\" > <title lang= \"en\" > Everyday Italian </title> <author> Giada De Laurentiis </author> <year> 2005 </year> <price> 30.00 </price> </book> <book category= \"CHILDREN\" > <title lang= \"en\" > Harry Potter </title> <author> J K. Rowling </author> <year> 2005 </year> <price> 29.99 </price> </book> <book category= \"WEB\" > <title lang= \"en-us\" > XQuery Kick Start </title> <author> James McGovern </author> <year> 2003 </year> <price> 49.99 </price> </book> <book category= \"WEB\" > <title lang= \"en-us\" > Learning XML </title> <author> Erik T. Ray </author> <year> 2003 </year> <price> 39.95 </price> </book> </bookstore> <?php $xml = simplexml_load_file ( \"books.xml\" ) or die ( \"Error: Cannot create object\" ); echo $xml -> book [ 0 ] -> title . \"<br>\" ; echo $xml -> book [ 1 ] -> title ; ?> The output of the code above will be: Everyday Italian Harry Potter","title":"Get Node Values of Specific Elements"},{"location":"Adv/phpXML/#get-node-values-loop","text":"The following example loops through all the book elements in the \"books.xml\" file, and gets the node values of the title, author, year, and price elements. <?php $xml = simplexml_load_file ( \"books.xml\" ) or die ( \"Error: Cannot create object\" ); foreach ( $xml -> children () as $books ) { echo $books -> title . \", \" ; echo $books -> author . \", \" ; echo $books -> year . \", \" ; echo $books -> price . \"<br>\" ; } ?> The output of the code above will be: Everyday Italian, Giada De Laurentiis, 2005, 30.00 Harry Potter, J K. Rowling, 2005, 29.99 XQuery Kick Start, James McGovern, 2003, 49.99 Learning XML, Erik T. Ray, 2003, 39.95","title":"Get Node Values - Loop"},{"location":"Adv/phpXML/#get-attribute-values","text":"The following example gets the attribute value of the \"category\" attribute of the first book element and the attribute value of the \"lang\" attribute of the title element in the second book element. <?php $xml = simplexml_load_file ( \"books.xml\" ) or die ( \"Error: Cannot create object\" ); echo $xml -> book [ 0 ][ 'category' ] . \"<br>\" ; echo $xml -> book [ 1 ] -> title [ 'lang' ]; ?> The output of the code above will be: COOKING en","title":"Get Attribute Values"},{"location":"Adv/phpXML/#get-attribute-values-loop","text":"The following example gets the attribute values of the title elements in the \"books.xml\" file. <?php $xml = simplexml_load_file ( \"books.xml\" ) or die ( \"Error: Cannot create object\" ); foreach ( $xml -> children () as $books ) { echo $books -> title [ 'lang' ]; echo \"<br>\" ; } ?> The output of the code above will be: en en en-us en-us","title":"Get Attribute Values - Loop"},{"location":"Adv/phpXML/#xml-dom-parser","text":"The DOM parser is a tree-based parser. Look at the following XML document fraction: <?xml version=\"1.0\" encoding=\"UTF-8\"?> <from> Jani </from> The DOM sees the XML above as a tree structure: Level 1: XML Document Level 2: Root element: Level 3: Text element: \"Jani\" The XML file below (\"note.xml\") will be used in our example: <?xml version=\"1.0\" encoding=\"UTF-8\"?> <note> <to> Tove </to> <from> Jani </from> <heading> Reminder </heading> <body> Don't forget me this weekend! </body> </note>","title":"XML DOM Parser"},{"location":"Adv/phpXML/#load-and-output-xml","text":"We want to initialize the XML parser, load the xml, and output it: <?php $xmlDoc = new DOMDocument (); $xmlDoc -> load ( \"note.xml\" ); print $xmlDoc -> saveXML (); ?> The output of the code above will be: Tove Jani Reminder Don't forget me this weekend! If you select \"View source\" in the browser window, you will see the following HTML: <?xml version=\"1.0\" encoding=\"UTF-8\"?> <note> <to> Tove </to> <from> Jani </from> <heading> Reminder </heading> <body> Don't forget me this weekend! </body> </note> The example above creates a DOMDocument-Object and loads the XML from \"note.xml\" into it. Then the saveXML() function puts the internal XML document into a string, so we can output it.","title":"Load and Output XML"},{"location":"Adv/phpXML/#looping-through-xml","text":"We want to initialize the XML parser, load the XML, and loop through all elements of the element: <?php $xmlDoc = new DOMDocument (); $xmlDoc -> load ( \"note.xml\" ); $x = $xmlDoc -> documentElement ; foreach ( $x -> childNodes AS $item ) { print $item -> nodeName . \" = \" . $item -> nodeValue . \"<br>\" ; } ?> The output of the code above will be: #text = to = Tove #text = from = Jani #text = heading = Reminder #text = body = Don't forget me this weekend! #text = In the example above you see that there are empty text nodes between each element. When XML generates, it often contains white-spaces between the nodes. The XML DOM parser treats these as ordinary elements, and if you are not aware of them, they sometimes cause problems.","title":"Looping through XML"},{"location":"Adv/phpXML/#event-based-parsers","text":"Event-based parsers do not hold the entire document in Memory, instead, they read in one node at a time and allow you to interact with in real time. Once you move onto the next node, the old one is thrown away. This type of parser is well suited for large XML documents. It parses faster and consumes less memory. Example of event-based parsers: XMLReader XML Expat Parser","title":"Event-Based Parsers"},{"location":"Adv/phpXML/#xml-expat-parser","text":"The Expat parser is an event-based parser. Look at the following XML fraction: <from> Jani </from> An event-based parser reports the XML above as a series of three events: Start element: from Start CDATA section, value: Jani Close element: from The XML Expat Parser functions are part of the PHP core. There is no installation needed to use these functions. The XML file \"note.xml\" will be used in the example below: <?xml version=\"1.0\" encoding=\"UTF-8\"?> <note> <to> Tove </to> <from> Jani </from> <heading> Reminder </heading> <body> Don't forget me this weekend! </body> </note>","title":"XML Expat Parser"},{"location":"Adv/phpXML/#initializing-the-xml-expat-parser","text":"We want to initialize the XML Expat Parser in PHP, define some handlers for different XML events, and then parse the XML file. <?php // Initialize the XML parser $parser = xml_parser_create (); // Function to use at the start of an element function start ( $parser , $element_name , $element_attrs ) { switch ( $element_name ) { case \"NOTE\" : echo \"-- Note --<br>\" ; break ; case \"TO\" : echo \"To: \" ; break ; case \"FROM\" : echo \"From: \" ; break ; case \"HEADING\" : echo \"Heading: \" ; break ; case \"BODY\" : echo \"Message: \" ; } } // Function to use at the end of an element function stop ( $parser , $element_name ) { echo \"<br>\" ; } // Function to use when finding character data function char ( $parser , $data ) { echo $data ; } // Specify element handler xml_set_element_handler ( $parser , \"start\" , \"stop\" ); // Specify data handler xml_set_character_data_handler ( $parser , \"char\" ); // Open XML file $fp = fopen ( \"note.xml\" , \"r\" ); // Read data while ( $data = fread ( $fp , 4096 )) { xml_parse ( $parser , $data , feof ( $fp )) or die ( sprintf ( \"XML Error: %s at line %d\" , xml_error_string ( xml_get_error_code ( $parser )), xml_get_current_line_number ( $parser ))); } // Free the XML parser xml_parser_free ( $parser ); ?>","title":"Initializing the XML Expat Parser"},{"location":"Adv/phpZip/","text":"Installation Linux Systems For these functions to work, you have to compile PHP with --enable-zip. PHP 5.6: Use the --with-libzip=DIR configure option to use a system libzip installation. libzip version 0.11 is required, with 0.11.2 or later recommended. PHP 7.3: Building against the bundled libzip is discouraged, but still possible by adding --without-libzip to the configuration. Windows Systems Before PHP 5.3: Users must enable \"php_zip.dll\" inside of \"php.ini\" for these functions to work. From PHP 5.3: The ZIP extension is built-in. PHP Zip Functions Function Description zip_close() Closes a ZIP file archive zip_entry_close() Closes a ZIP directory entry zip_entry_compressedsize() Returns the compressed file size of a ZIP directory entry zip_entry_compressionmethod() Returns the compression method of a ZIP directory entry zip_entry_filesize() Returns the actual file size of a ZIP directory entry zip_entry_name() Returns the name of a ZIP directory entry zip_entry_open() Opens a directory entry in a ZIP file for reading zip_entry_read() Reads from an open directory entry in the ZIP file zip_open() Opens a ZIP file archive zip_read() Reads the next file in a open ZIP file archive","title":"Zip"},{"location":"Adv/phpZip/#installation","text":"","title":"Installation"},{"location":"Adv/phpZip/#linux-systems","text":"For these functions to work, you have to compile PHP with --enable-zip. PHP 5.6: Use the --with-libzip=DIR configure option to use a system libzip installation. libzip version 0.11 is required, with 0.11.2 or later recommended. PHP 7.3: Building against the bundled libzip is discouraged, but still possible by adding --without-libzip to the configuration.","title":"Linux Systems"},{"location":"Adv/phpZip/#windows-systems","text":"Before PHP 5.3: Users must enable \"php_zip.dll\" inside of \"php.ini\" for these functions to work. From PHP 5.3: The ZIP extension is built-in.","title":"Windows Systems"},{"location":"Adv/phpZip/#php-zip-functions","text":"Function Description zip_close() Closes a ZIP file archive zip_entry_close() Closes a ZIP directory entry zip_entry_compressedsize() Returns the compressed file size of a ZIP directory entry zip_entry_compressionmethod() Returns the compression method of a ZIP directory entry zip_entry_filesize() Returns the actual file size of a ZIP directory entry zip_entry_name() Returns the name of a ZIP directory entry zip_entry_open() Opens a directory entry in a ZIP file for reading zip_entry_read() Reads from an open directory entry in the ZIP file zip_open() Opens a ZIP file archive zip_read() Reads the next file in a open ZIP file archive","title":"PHP Zip Functions"},{"location":"Classes/phpAbstract/","text":"Abstract classes and methods are when the parent class has a named method, but need its child class(es) to fill out the tasks. An abstract class is a class that contains at least one abstract method. An abstract method is a method that is declared, but not implemented in the code. An abstract class or method is defined with the abstract keyword. <?php abstract class ParentClass { abstract public function someMethod1 (); abstract public function someMethod2 ( $name , $color ); abstract public function someMethod3 () : string ; } ?> When inheriting from an abstract class, the child class method must be defined with the same name, and the same or a less restricted access modifier. So, if the abstract method is defined as protected, the child class method must be defined as either protected or public, but not private. Also, the type and number of required arguments must be the same. However, the child classes may have optional arguments in addition. So, when a child class is inherited from an abstract class, we have the following rules: The child class method must be defined with the same name and it redeclares the parent abstract method The child class method must be defined with the same or a less restricted access modifier The number of required arguments must be the same. However, the child class may have optional arguments in addition <?php // Parent class abstract class Car { public $name ; public function __construct ( $name ) { $this -> name = $name ; } abstract public function intro () : string ; } // Child classes class Audi extends Car { public function intro () : string { return \"Choose German quality! I'm an $this->name !\" ; } } class Volvo extends Car { public function intro () : string { return \"Proud to be Swedish! I'm a $this->name !\" ; } } class Citroen extends Car { public function intro () : string { return \"French extravagance! I'm a $this->name !\" ; } } // Create objects from the child classes $audi = new audi ( \"Audi\" ); echo $audi -> intro (); echo \"<br>\" ; $volvo = new volvo ( \"Volvo\" ); echo $volvo -> intro (); echo \"<br>\" ; $citroen = new citroen ( \"Citroen\" ); echo $citroen -> intro (); ?> <?php abstract class ParentClass { // Abstract method with an argument abstract protected function prefixName ( $name ); } class ChildClass extends ParentClass { public function prefixName ( $name ) { if ( $name == \"John Doe\" ) { $prefix = \"Mr.\" ; } elseif ( $name == \"Jane Doe\" ) { $prefix = \"Mrs.\" ; } else { $prefix = \"\" ; } return \" { $prefix } { $name } \" ; } } $class = new ChildClass ; echo $class -> prefixName ( \"John Doe\" ); echo \"<br>\" ; echo $class -> prefixName ( \"Jane Doe\" ); ?> <?php abstract class ParentClass { // Abstract method with an argument abstract protected function prefixName ( $name ); } class ChildClass extends ParentClass { // The child class may define optional arguments that are not in the parent's abstract method public function prefixName ( $name , $separator = \".\" , $greet = \"Dear\" ) { if ( $name == \"John Doe\" ) { $prefix = \"Mr\" ; } elseif ( $name == \"Jane Doe\" ) { $prefix = \"Mrs\" ; } else { $prefix = \"\" ; } return \" { $greet } { $prefix }{ $separator } { $name } \" ; } } $class = new ChildClass ; echo $class -> prefixName ( \"John Doe\" ); echo \"<br>\" ; echo $class -> prefixName ( \"Jane Doe\" ); ?>","title":"Abstract Classes"},{"location":"Classes/phpCls/","text":"Procedural programming is about writing procedures or functions that perform operations on the data, while object-oriented programming is about creating objects that contain both data and functions. Object-oriented programming has several advantages over procedural programming: OOP is faster and easier to execute OOP provides a clear structure for the programs OOP helps to keep the PHP code DRY \"Don't Repeat Yourself\", and makes the code easier to maintain, modify and debug OOP makes it possible to create full reusable applications with less code and shorter development time Classes A class is a template for objects, and an object is an instance of class. A class is defined by using the class keyword, followed by the name of the class and a pair of curly braces ({}). All its properties and methods go inside the braces. <?php class Person { // Properties public $name ; public $age ; // Methods public function __construct ( $name , $age ) { $this -> name = $name ; $this -> age = $age ; } public function greeting () { echo \"Hello, my name is \" . $this -> name ; } } ?> Objects We can create multiple objects from a class. Each object has all the properties and methods defined in the class, but they will have different property values. Objects of a class are created using the new keyword. $person1 = new Person(\"John\", 36); $person2 = new Person(\"Jane\", 30); $person1->greeting(); $person2->greeting(); $this keyword The $this keyword refers to the current object. <?php class Fruit { public $name ; function set_name ( $name ) { $this -> name = $name ; } } $apple = new Fruit (); $apple -> set_name ( \"Apple\" ); echo $apple -> name ; ?> <?php class Fruit { public $name ; } $apple = new Fruit (); $apple -> name = \"Apple\" ; echo $apple -> name ; ?> instanceof You can use the instanceof keyword to check if an object belongs to a specific class <?php class Fruit { public $name ; } $apple = new Fruit (); $apple -> name = \"Apple\" ; if ( $apple instanceof Fruit ) { echo \"Yes, $apple is an instance of Fruit\" ; } ?> PHP clone Keyword To clone an object, use the clone keyword. <?php class MyClass { public $color ; public $amount ; } $obj = new MyClass (); $obj -> color = \"red\" ; $obj -> amount = 5 ; $copy = clone $obj ; print_r ( $copy ); ?> If any of the properties was a reference to another variable or object, then only the reference is copied. Objects are always passed by reference, so if the original object has another object in its properties, the copy will point to the same object. This behavior can be changed by creating a __clone() method in the class. Create a copy of an object which has a reference: <?php class MyClass { public $amount ; } // Create an object with a reference $value = 5 ; $obj = new MyClass (); $obj -> amount = & $value ; // Clone the object $copy = clone $obj ; // Change the value in the original object $obj -> amount = 6 ; // The copy is changed print_r ( $copy ); ?>","title":"OOP"},{"location":"Classes/phpCls/#classes","text":"A class is a template for objects, and an object is an instance of class. A class is defined by using the class keyword, followed by the name of the class and a pair of curly braces ({}). All its properties and methods go inside the braces. <?php class Person { // Properties public $name ; public $age ; // Methods public function __construct ( $name , $age ) { $this -> name = $name ; $this -> age = $age ; } public function greeting () { echo \"Hello, my name is \" . $this -> name ; } } ?>","title":"Classes"},{"location":"Classes/phpCls/#objects","text":"We can create multiple objects from a class. Each object has all the properties and methods defined in the class, but they will have different property values. Objects of a class are created using the new keyword. $person1 = new Person(\"John\", 36); $person2 = new Person(\"Jane\", 30); $person1->greeting(); $person2->greeting();","title":"Objects"},{"location":"Classes/phpCls/#this-keyword","text":"The $this keyword refers to the current object. <?php class Fruit { public $name ; function set_name ( $name ) { $this -> name = $name ; } } $apple = new Fruit (); $apple -> set_name ( \"Apple\" ); echo $apple -> name ; ?> <?php class Fruit { public $name ; } $apple = new Fruit (); $apple -> name = \"Apple\" ; echo $apple -> name ; ?>","title":"$this keyword"},{"location":"Classes/phpCls/#instanceof","text":"You can use the instanceof keyword to check if an object belongs to a specific class <?php class Fruit { public $name ; } $apple = new Fruit (); $apple -> name = \"Apple\" ; if ( $apple instanceof Fruit ) { echo \"Yes, $apple is an instance of Fruit\" ; } ?>","title":"instanceof"},{"location":"Classes/phpCls/#php-clone-keyword","text":"To clone an object, use the clone keyword. <?php class MyClass { public $color ; public $amount ; } $obj = new MyClass (); $obj -> color = \"red\" ; $obj -> amount = 5 ; $copy = clone $obj ; print_r ( $copy ); ?> If any of the properties was a reference to another variable or object, then only the reference is copied. Objects are always passed by reference, so if the original object has another object in its properties, the copy will point to the same object. This behavior can be changed by creating a __clone() method in the class. Create a copy of an object which has a reference: <?php class MyClass { public $amount ; } // Create an object with a reference $value = 5 ; $obj = new MyClass (); $obj -> amount = & $value ; // Clone the object $copy = clone $obj ; // Change the value in the original object $obj -> amount = 6 ; // The copy is changed print_r ( $copy ); ?>","title":"PHP clone Keyword"},{"location":"Classes/phpConstants/","text":"Class constants can be useful if you need to define some constant data within a class. A class constant is declared inside a class with the const keyword. A constant cannot be changed once it is declared. Class constants are case-sensitive. However, it is recommended to name the constants in all uppercase letters. We can access a constant from outside the class by using the class name followed by the scope resolution operator (::) followed by the constant name. class MyClass { const MY_CONST = \"Hello\"; } echo MyClass::MY_CONST; Or, we can access a constant from inside the class by using the self keyword followed by the scope resolution operator (::) followed by the constant name. <?php class Goodbye { const LEAVING_MESSAGE = \"Thank you for visiting W3Schools.com!\" ; public function byebye () { echo self :: LEAVING_MESSAGE ; } } $goodbye = new Goodbye (); $goodbye -> byebye (); ?>","title":"Constants"},{"location":"Classes/phpConstructor/","text":"The __construct Function A constructor allows you to initialize an object's properties upon creation of the object. If you create a __construct() function, PHP will automatically call this function when you create an object from a class. <?php class Person { public $name ; public $age ; public function __construct ( $name , $age ) { $this -> name = $name ; $this -> age = $age ; } } ?> Calling the __construct Function <?php $person1 = new Person ( \"John\" , 36 ); $person2 = new Person ( \"Jane\" , 30 ); ?> The __destruct Function A destructor is called when the object is destructed or the script is stopped or exited. If you create a __destruct() function, PHP will automatically call this function at the end of the script. <?php class Person { public $name ; public $age ; public function __construct ( $name , $age ) { $this -> name = $name ; $this -> age = $age ; } public function __destruct () { echo \"The person named \" . $this -> name . \" is destructed.\" ; } } ?>","title":"Constructor"},{"location":"Classes/phpConstructor/#the-__construct-function","text":"A constructor allows you to initialize an object's properties upon creation of the object. If you create a __construct() function, PHP will automatically call this function when you create an object from a class. <?php class Person { public $name ; public $age ; public function __construct ( $name , $age ) { $this -> name = $name ; $this -> age = $age ; } } ?>","title":"The __construct Function"},{"location":"Classes/phpConstructor/#calling-the-__construct-function","text":"<?php $person1 = new Person ( \"John\" , 36 ); $person2 = new Person ( \"Jane\" , 30 ); ?>","title":"Calling the __construct Function"},{"location":"Classes/phpConstructor/#the-__destruct-function","text":"A destructor is called when the object is destructed or the script is stopped or exited. If you create a __destruct() function, PHP will automatically call this function at the end of the script. <?php class Person { public $name ; public $age ; public function __construct ( $name , $age ) { $this -> name = $name ; $this -> age = $age ; } public function __destruct () { echo \"The person named \" . $this -> name . \" is destructed.\" ; } } ?>","title":"The __destruct Function"},{"location":"Classes/phpInheritance/","text":"Inheritance in OOP = When a class derives from another class. The child class will inherit all the public and protected properties and methods from the parent class. In addition, it can have its own properties and methods. An inherited class is defined by using the extends keyword. <?php class Fruit { public $name ; public $color ; public function __construct ( $name , $color ) { $this -> name = $name ; $this -> color = $color ; } public function intro () { echo \"The fruit is { $this -> name } and the color is { $this -> color } .\" ; } } // Strawberry is inherited from Fruit class Strawberry extends Fruit { public function message () { echo \"Am I a fruit or a berry? \" ; } } $strawberry = new Strawberry ( \"Strawberry\" , \"red\" ); $strawberry -> message (); $strawberry -> intro (); ?> Protected Access Modifier <?php class Fruit { public $name ; public $color ; public function __construct ( $name , $color ) { $this -> name = $name ; $this -> color = $color ; } protected function intro () { echo \"The fruit is { $this -> name } and the color is { $this -> color } .\" ; } } class Strawberry extends Fruit { public function message () { echo \"Am I a fruit or a berry? \" ; // Call protected method from within derived class - OK $this -> intro (); } } $strawberry = new Strawberry ( \"Strawberry\" , \"red\" ); // OK. __construct() is public $strawberry -> message (); // OK. message() is public and it calls intro() (which is protected) from within the derived class ?> Overriding Inherited Methods Inherited methods can be overridden by redefining the methods (use the same name) in the child class. <?php class Fruit { public $name ; public $color ; public function __construct ( $name , $color ) { $this -> name = $name ; $this -> color = $color ; } public function intro () { echo \"The fruit is { $this -> name } and the color is { $this -> color } .\" ; } } class Strawberry extends Fruit { public $weight ; public function __construct ( $name , $color , $weight ) { $this -> name = $name ; $this -> color = $color ; $this -> weight = $weight ; } public function intro () { echo \"The fruit is { $this -> name } , the color is { $this -> color } , and the weight is { $this -> weight } gram.\" ; } } $strawberry = new Strawberry ( \"Strawberry\" , \"red\" , 50 ); $strawberry -> intro (); ?> The final Keyword The final keyword can be used to prevent class inheritance. <?php final class Fruit { // some code } // will result in error class Strawberry extends Fruit { // some code } ?> or to prevent method overriding. <?php class Fruit { final public function intro () { // some code } } class Strawberry extends Fruit { // will result in error public function intro () { // some code } } ?>","title":"Inheritance"},{"location":"Classes/phpInheritance/#protected-access-modifier","text":"<?php class Fruit { public $name ; public $color ; public function __construct ( $name , $color ) { $this -> name = $name ; $this -> color = $color ; } protected function intro () { echo \"The fruit is { $this -> name } and the color is { $this -> color } .\" ; } } class Strawberry extends Fruit { public function message () { echo \"Am I a fruit or a berry? \" ; // Call protected method from within derived class - OK $this -> intro (); } } $strawberry = new Strawberry ( \"Strawberry\" , \"red\" ); // OK. __construct() is public $strawberry -> message (); // OK. message() is public and it calls intro() (which is protected) from within the derived class ?>","title":"Protected Access Modifier"},{"location":"Classes/phpInheritance/#overriding-inherited-methods","text":"Inherited methods can be overridden by redefining the methods (use the same name) in the child class. <?php class Fruit { public $name ; public $color ; public function __construct ( $name , $color ) { $this -> name = $name ; $this -> color = $color ; } public function intro () { echo \"The fruit is { $this -> name } and the color is { $this -> color } .\" ; } } class Strawberry extends Fruit { public $weight ; public function __construct ( $name , $color , $weight ) { $this -> name = $name ; $this -> color = $color ; $this -> weight = $weight ; } public function intro () { echo \"The fruit is { $this -> name } , the color is { $this -> color } , and the weight is { $this -> weight } gram.\" ; } } $strawberry = new Strawberry ( \"Strawberry\" , \"red\" , 50 ); $strawberry -> intro (); ?>","title":"Overriding Inherited Methods"},{"location":"Classes/phpInheritance/#the-final-keyword","text":"The final keyword can be used to prevent class inheritance. <?php final class Fruit { // some code } // will result in error class Strawberry extends Fruit { // some code } ?> or to prevent method overriding. <?php class Fruit { final public function intro () { // some code } } class Strawberry extends Fruit { // will result in error public function intro () { // some code } } ?>","title":"The final Keyword"},{"location":"Classes/phpInterfaces/","text":"Interfaces allow you to specify what methods a class should implement. Interfaces make it easy to use a variety of different classes in the same way. When one or more classes use the same interface, it is referred to as \"polymorphism\". Interfaces are declared with the interface keyword. <?php interface InterfaceName { public function someMethod1 (); public function someMethod2 ( $name , $color ); public function someMethod3 () : string ; } ?> Interfaces vs. Abstract Classes Interface are similar to abstract classes. The difference between interfaces and abstract classes are: Interfaces cannot have properties, while abstract classes can All interface methods must be public, while abstract class methods is public or protected All methods in an interface are abstract, so they cannot be implemented in code and the abstract keyword is not necessary Classes can implement an interface while inheriting from another class at the same time Using Interfaces To implement an interface, a class must use the implements keyword. A class that implements an interface must implement all of the interface's methods. The implements keyword is used to declare that a class must have the methods described in the specified interface. This is called polymorphism. Polymorphism makes it easy to use a variety of different objects in the same way. <?php interface Animal { public function makeSound (); } class Cat implements Animal { public function makeSound () { echo \"Meow\" ; } } $animal = new Cat (); $animal -> makeSound (); ?> <?php // Interface definition interface Animal { public function makeSound (); } // Class definitions class Cat implements Animal { public function makeSound () { echo \" Meow \" ; } } class Dog implements Animal { public function makeSound () { echo \" Bark \" ; } } class Mouse implements Animal { public function makeSound () { echo \" Squeak \" ; } } // Create a list of animals $cat = new Cat (); $dog = new Dog (); $mouse = new Mouse (); $animals = array ( $cat , $dog , $mouse ); // Tell the animals to make a sound foreach ( $animals as $animal ) { $animal -> makeSound (); } ?>","title":"Interfaces"},{"location":"Classes/phpInterfaces/#interfaces-vs-abstract-classes","text":"Interface are similar to abstract classes. The difference between interfaces and abstract classes are: Interfaces cannot have properties, while abstract classes can All interface methods must be public, while abstract class methods is public or protected All methods in an interface are abstract, so they cannot be implemented in code and the abstract keyword is not necessary Classes can implement an interface while inheriting from another class at the same time","title":"Interfaces vs. Abstract Classes"},{"location":"Classes/phpInterfaces/#using-interfaces","text":"To implement an interface, a class must use the implements keyword. A class that implements an interface must implement all of the interface's methods. The implements keyword is used to declare that a class must have the methods described in the specified interface. This is called polymorphism. Polymorphism makes it easy to use a variety of different objects in the same way. <?php interface Animal { public function makeSound (); } class Cat implements Animal { public function makeSound () { echo \"Meow\" ; } } $animal = new Cat (); $animal -> makeSound (); ?> <?php // Interface definition interface Animal { public function makeSound (); } // Class definitions class Cat implements Animal { public function makeSound () { echo \" Meow \" ; } } class Dog implements Animal { public function makeSound () { echo \" Bark \" ; } } class Mouse implements Animal { public function makeSound () { echo \" Squeak \" ; } } // Create a list of animals $cat = new Cat (); $dog = new Dog (); $mouse = new Mouse (); $animals = array ( $cat , $dog , $mouse ); // Tell the animals to make a sound foreach ( $animals as $animal ) { $animal -> makeSound (); } ?>","title":"Using Interfaces"},{"location":"Classes/phpModifiers/","text":"There are three access modifiers: public - the property or method can be accessed from everywhere. This is default protected - the property or method can be accessed within the class and by classes derived from that class private - the property or method can ONLY be accessed within the class <?php class Fruit { public $name ; protected $color ; private $weight ; } $mango = new Fruit (); $mango -> name = 'Mango' ; // OK $mango -> color = 'Yellow' ; // ERROR $mango -> weight = '300' ; // ERROR ?> <?php class Fruit { public $name ; public $color ; public $weight ; function set_name ( $n ) { // a public function (default) $this -> name = $n ; } protected function set_color ( $n ) { // a protected function $this -> color = $n ; } private function set_weight ( $n ) { // a private function $this -> weight = $n ; } } $mango = new Fruit (); $mango -> set_name ( 'Mango' ); // OK $mango -> set_color ( 'Yellow' ); // ERROR $mango -> set_weight ( '300' ); // ERROR ?>","title":"Access Modifiers"},{"location":"Classes/phpNamespaces/","text":"Declaring a Namespace Namespaces are declared at the beginning of a file using the namespace keyword. <?php namespace Html ; ?> A namespace declaration must be the first thing in the PHP file. The following code would be invalid. Constants, classes and functions declared in this file will belong to the Html namespace: <?php namespace Html ; class Table { public $title = \"\" ; public $numRows = 0 ; public function message () { echo \"<p>Table ' { $this -> title } ' has { $this -> numRows } rows.</p>\" ; } } $table = new Table (); $table -> title = \"My table\" ; $table -> numRows = 5 ; ?> <!DOCTYPE html> <html> <body> <?php $table -> message (); ?> </body> </html> Nested Namespaces Namespaces can be nested. <?php namespace Code\\Html ; ?> Using Namespaces Any code that follows a namespace declaration is operating inside the namespace, so classes that belong to the namespace can be instantiated without any qualifiers. To access classes from outside a namespace, the class needs to have the namespace attached to it. <?php $table = new Html\\Table (); $row = new Html\\Row (); ?> When many classes from the same namespace are being used at the same time, it is easier to use the namespace keyword. <?php namespace Html ; $table = new Table (); $row = new Row (); ?> Namespace Alias It can be useful to give a namespace or class an alias to make it easier to write. This is done with the use keyword. <?php use Html as H ; $table = new H\\Table (); ?> <?php use Html\\Table as T ; $table = new T (); ?>","title":"Namespaces"},{"location":"Classes/phpNamespaces/#declaring-a-namespace","text":"Namespaces are declared at the beginning of a file using the namespace keyword. <?php namespace Html ; ?> A namespace declaration must be the first thing in the PHP file. The following code would be invalid. Constants, classes and functions declared in this file will belong to the Html namespace: <?php namespace Html ; class Table { public $title = \"\" ; public $numRows = 0 ; public function message () { echo \"<p>Table ' { $this -> title } ' has { $this -> numRows } rows.</p>\" ; } } $table = new Table (); $table -> title = \"My table\" ; $table -> numRows = 5 ; ?> <!DOCTYPE html> <html> <body> <?php $table -> message (); ?> </body> </html>","title":"Declaring a Namespace"},{"location":"Classes/phpNamespaces/#nested-namespaces","text":"Namespaces can be nested. <?php namespace Code\\Html ; ?>","title":"Nested Namespaces"},{"location":"Classes/phpNamespaces/#using-namespaces","text":"Any code that follows a namespace declaration is operating inside the namespace, so classes that belong to the namespace can be instantiated without any qualifiers. To access classes from outside a namespace, the class needs to have the namespace attached to it. <?php $table = new Html\\Table (); $row = new Html\\Row (); ?> When many classes from the same namespace are being used at the same time, it is easier to use the namespace keyword. <?php namespace Html ; $table = new Table (); $row = new Row (); ?>","title":"Using Namespaces"},{"location":"Classes/phpNamespaces/#namespace-alias","text":"It can be useful to give a namespace or class an alias to make it easier to write. This is done with the use keyword. <?php use Html as H ; $table = new H\\Table (); ?> <?php use Html\\Table as T ; $table = new T (); ?>","title":"Namespace Alias"},{"location":"Classes/phpStatic/","text":"Static Methods Static methods can be called directly - without creating an instance of the class first. Static methods are declared with the static keyword. <?php class greeting { public static function welcome () { echo \"Hello World!\" ; } } // Call static method greeting :: welcome (); ?> To access a static method use the class name, double colon (::), and the method name. A class can have both static and non-static methods. A static method can be accessed from a method in the same class using the self keyword and double colon (::). <?php class greeting { public static function welcome () { echo \"Hello World!\" ; } public function __construct () { self :: welcome (); } } new greeting (); ?> Static methods can also be called from methods in other classes. To do this, the static method should be public. <?php class A { public static function welcome () { echo \"Hello World!\" ; } } class B { public function message () { A :: welcome (); } } $obj = new B (); echo $obj -> message (); ?> To call a static method from a child class, use the parent keyword inside the child class. Here, the static method can be public or protected. <?php class domain { protected static function getWebsiteName () { return \"W3Schools.com\" ; } } class domainW3 extends domain { public $websiteName ; public function __construct () { $this -> websiteName = parent :: getWebsiteName (); } } $domainW3 = new domainW3 ; echo $domainW3 -> websiteName ; ?> Static Properties Static properties can be called directly - without creating an instance of a class. Static properties are declared with the static keyword. <?php class pi { public static $value = 3.14159 ; } // Get static property echo pi :: $value ; ?> A class can have both static and non-static properties. A static property can be accessed from a method in the same class using the self keyword and double colon (::). <?php class pi { public static $value = 3.14159 ; public function staticValue () { return self :: $value ; } } $pi = new pi (); echo $pi -> staticValue (); ?> To call a static property from a child class, use the parent keyword inside the child class. <?php class pi { public static $value = 3.14159 ; } class x extends pi { public function xStatic () { return parent :: $value ; } } // Get value of static property directly via child class echo x :: $value ; // or get value of static property via xStatic() method $x = new x (); echo $x -> xStatic (); ?>","title":"Static"},{"location":"Classes/phpStatic/#static-methods","text":"Static methods can be called directly - without creating an instance of the class first. Static methods are declared with the static keyword. <?php class greeting { public static function welcome () { echo \"Hello World!\" ; } } // Call static method greeting :: welcome (); ?> To access a static method use the class name, double colon (::), and the method name. A class can have both static and non-static methods. A static method can be accessed from a method in the same class using the self keyword and double colon (::). <?php class greeting { public static function welcome () { echo \"Hello World!\" ; } public function __construct () { self :: welcome (); } } new greeting (); ?> Static methods can also be called from methods in other classes. To do this, the static method should be public. <?php class A { public static function welcome () { echo \"Hello World!\" ; } } class B { public function message () { A :: welcome (); } } $obj = new B (); echo $obj -> message (); ?> To call a static method from a child class, use the parent keyword inside the child class. Here, the static method can be public or protected. <?php class domain { protected static function getWebsiteName () { return \"W3Schools.com\" ; } } class domainW3 extends domain { public $websiteName ; public function __construct () { $this -> websiteName = parent :: getWebsiteName (); } } $domainW3 = new domainW3 ; echo $domainW3 -> websiteName ; ?>","title":"Static Methods"},{"location":"Classes/phpStatic/#static-properties","text":"Static properties can be called directly - without creating an instance of a class. Static properties are declared with the static keyword. <?php class pi { public static $value = 3.14159 ; } // Get static property echo pi :: $value ; ?> A class can have both static and non-static properties. A static property can be accessed from a method in the same class using the self keyword and double colon (::). <?php class pi { public static $value = 3.14159 ; public function staticValue () { return self :: $value ; } } $pi = new pi (); echo $pi -> staticValue (); ?> To call a static property from a child class, use the parent keyword inside the child class. <?php class pi { public static $value = 3.14159 ; } class x extends pi { public function xStatic () { return parent :: $value ; } } // Get value of static property directly via child class echo x :: $value ; // or get value of static property via xStatic() method $x = new x (); echo $x -> xStatic (); ?>","title":"Static Properties"},{"location":"Classes/phpTraits/","text":"PHP only supports single inheritance: a child class can inherit only from one single parent. So, what if a class needs to inherit multiple behaviors? OOP traits solve this problem. Traits are used to declare methods that can be used in multiple classes. Traits can have methods and abstract methods that can be used in multiple classes, and the methods can have any access modifier (public, private, or protected). Traits are declared with the trait keyword. <?php trait message1 { public function msg1 () { echo \"OOP is fun! \" ; } } class Welcome { use message1 ; } $obj = new Welcome (); $obj -> msg1 (); ?> Using Multiple Traits <?php trait message1 { public function msg1 () { echo \"OOP is fun! \" ; } } trait message2 { public function msg2 () { echo \"OOP reduces code duplication!\" ; } } class Welcome { use message1 ; } class Welcome2 { use message1 , message2 ; } $obj = new Welcome (); $obj -> msg1 (); echo \"<br>\" ; $obj2 = new Welcome2 (); $obj2 -> msg1 (); $obj2 -> msg2 (); ?> Trait Alias <?php trait message1 { public function msg1 () { echo \"OOP is fun! \" ; } } class Welcome { use message1 { message1 :: msg1 as msg ; } } $obj = new Welcome (); $obj -> msg (); ?> The insteadof Keyword The insteadof keyword allows you to select from which trait a method should be taken if more than one trait has a method with the same name. <?php trait message1 { public function msgA () { echo \"My favorite color is red. \" ; } public function msgB () { echo \"My favorite number is 5. \" ; } } trait message2 { public function msgA () { echo \"My favorite color is blue. \" ; } public function msgB () { echo \"My favorite number is 7. \" ; } } class MyClass { use message1 , message2 { message1 :: msgA insteadof message2 ; message2 :: msgB insteadof message1 ; } } $obj = new MyClass (); $obj -> msgA (); $obj -> msgB (); ?>","title":"Traits"},{"location":"Classes/phpTraits/#using-multiple-traits","text":"<?php trait message1 { public function msg1 () { echo \"OOP is fun! \" ; } } trait message2 { public function msg2 () { echo \"OOP reduces code duplication!\" ; } } class Welcome { use message1 ; } class Welcome2 { use message1 , message2 ; } $obj = new Welcome (); $obj -> msg1 (); echo \"<br>\" ; $obj2 = new Welcome2 (); $obj2 -> msg1 (); $obj2 -> msg2 (); ?>","title":"Using Multiple Traits"},{"location":"Classes/phpTraits/#trait-alias","text":"<?php trait message1 { public function msg1 () { echo \"OOP is fun! \" ; } } class Welcome { use message1 { message1 :: msg1 as msg ; } } $obj = new Welcome (); $obj -> msg (); ?>","title":"Trait Alias"},{"location":"Classes/phpTraits/#the-insteadof-keyword","text":"The insteadof keyword allows you to select from which trait a method should be taken if more than one trait has a method with the same name. <?php trait message1 { public function msgA () { echo \"My favorite color is red. \" ; } public function msgB () { echo \"My favorite number is 5. \" ; } } trait message2 { public function msgA () { echo \"My favorite color is blue. \" ; } public function msgB () { echo \"My favorite number is 7. \" ; } } class MyClass { use message1 , message2 { message1 :: msgA insteadof message2 ; message2 :: msgB insteadof message1 ; } } $obj = new MyClass (); $obj -> msgA (); $obj -> msgB (); ?>","title":"The insteadof Keyword"},{"location":"DS/phpArray/","text":"An array stores multiple values in one single variable. In PHP, numerical arrays are associative arrays, and associative arrays are numerical arrays. So which kind are they really? Both and neither. The line between them constantly blurs back and forth from one to another. <?php $cars = array ( \"Volvo\" , \"BMW\" , \"Toyota\" ); echo \"I like \" . $cars [ 0 ] . \", \" . $cars [ 1 ] . \" and \" . $cars [ 2 ] . \".\" ; ?> Create an Array in PHP In PHP, the array() function is used to create an array: array(); In PHP, there are three types of arrays: Indexed arrays - Arrays with a numeric index Associative arrays - Arrays with named keys Multidimensional arrays - Arrays containing one or more arrays PHP Indexed Arrays There are two ways to create indexed arrays: The index can be assigned automatically (index always starts at 0), like this: $cars = array(\"Volvo\", \"BMW\", \"Toyota\"); or the index can be assigned manually: $cars[0] = \"Volvo\"; $cars[1] = \"BMW\"; $cars[2] = \"Toyota\"; <?php $cars = array ( \"Volvo\" , \"BMW\" , \"Toyota\" ); echo \"I like \" . $cars [ 0 ] . \", \" . $cars [ 1 ] . \" and \" . $cars [ 2 ] . \".\" ; ?> <?php $cars = array ( \"Volvo\" , \"BMW\" , \"Toyota\" ); $arrlength = count ( $cars ); for ( $x = 0 ; $x < $arrlength ; $x ++ ) { echo $cars [ $x ]; echo \"<br>\" ; } ?> Specifying an Array Not Beginning at Element 0 When specifying an array, you can specify the array not beginning at element 0. <?php $presidents = array ( 1 => 'Washington' , 'Adams' , 'Jefferson' , 'Madison' ); ?> PHP even allows you to use negative numbers in the array() call. (In fact, this method works for noninteger keys, too.) What you\u2019ll get is technically an associative array, although as we said, the line between numeric arrays and associative arrays is often blurred in PHP; this is just another one of these cases: <?php $us_leaders = array ( - 1 => 'George II' , 'George III' , 'Washington' ); // alternatively, $us_leaders = [ - 1 => 'George II' , 'George III' , 'Washington' ]; ?> Of course, you can mix and match numeric and string keys in one array() definition, but it\u2019s confusing and very rarely needed: <?php $presidents = array ( 1 => 'Washington' , 'Adams' , 'Honest' => 'Lincoln' , 'Jefferson' ); // alternatively, $presidents = [ 1 => 'Washington' , 'Adams' , 'Honest' => 'Lincoln' , 'Jefferson' ]; ?> <?php $presidents [ 1 ] = 'Washington' ; // Key is 1 $presidents [] = 'Adams' ; // Key is 1 + 1 => 2 $presidents [ 'Honest' ] = 'Lincoln' ; // Key is 'Honest' $presidents [] = 'Jefferson' ; // Key is 2 + 1 => 3 ?> PHP Associative Arrays Associative arrays are arrays with named keys. There are two ways to create an associative array: $age = array(\"Peter\"=>\"35\", \"Ben\"=>\"37\", \"Joe\"=>\"43\"); or: $age['Peter'] = \"35\"; $age['Ben'] = \"37\"; $age['Joe'] = \"43\"; <?php $age = array ( \"Peter\" => \"35\" , \"Ben\" => \"37\" , \"Joe\" => \"43\" ); echo \"Peter is \" . $age [ 'Peter' ] . \" years old.\" ; ?> <?php $age = array ( \"Peter\" => \"35\" , \"Ben\" => \"37\" , \"Joe\" => \"43\" ); foreach ( $age as $x => $x_value ) { echo \"Key=\" . $x . \", Value=\" . $x_value ; echo \"<br>\" ; } ?> PHP Multidimensional Arrays Multidimensional arrays are arrays containing one or more arrays. <?php $cars = array ( array ( \"Volvo\" , 22 , 18 ), array ( \"BMW\" , 15 , 13 ), array ( \"Saab\" , 5 , 2 ), array ( \"Land Rover\" , 17 , 15 ) ); echo $cars [ 0 ][ 0 ] . \": In stock: \" . $cars [ 0 ][ 1 ] . \", sold: \" . $cars [ 0 ][ 2 ] . \".<br>\" ; echo $cars [ 1 ][ 0 ] . \": In stock: \" . $cars [ 1 ][ 1 ] . \", sold: \" . $cars [ 1 ][ 2 ] . \".<br>\" ; echo $cars [ 2 ][ 0 ] . \": In stock: \" . $cars [ 2 ][ 1 ] . \", sold: \" . $cars [ 2 ][ 2 ] . \".<br>\" ; echo $cars [ 3 ][ 0 ] . \": In stock: \" . $cars [ 3 ][ 1 ] . \", sold: \" . $cars [ 3 ][ 2 ] . \".<br>\" ; ?> <?php for ( $row = 0 ; $row < 4 ; $row ++ ) { echo \"<p><b>Row number $row </b></p>\" ; echo \"<ul>\" ; for ( $col = 0 ; $col < 3 ; $col ++ ) { echo \"<li>\" . $cars [ $row ][ $col ] . \"</li>\" ; } echo \"</ul>\" ; } ?> The Array Functions The PHP array functions are used to perform operations on arrays. Modifying Arrays Function Description array() Creates an array array_chunk() Splits an array into chunks of arrays array_combine() Creates an array by using the elements from one \"keys\" array and one \"values\" array array_merge() Merges one or more arrays into one array array_merge_recursive() Merges one or more arrays into one array recursively array_pad() Inserts a specified number of items, with a specified value, to an array array_pop() Deletes the last element of an array array_push() Inserts one or more elements to the end of an array array_shift() Removes the first element from an array, and returns the value of the removed element array_splice() Removes and replaces specified elements of an array array_unique() Removes duplicate values from an array array_unshift() Adds one or more elements to the beginning of an array compact() Create array containing variables and their values range() Creates an array containing a range of elements array_merge The array_merge() function works with both predefined arrays and arrays defined in place using array(): <?php $p_languages = array ( 'Perl' , 'PHP' ); $p_languages = array_merge ( $p_languages , array ( 'Python' )); print_r ( $p_languages ); Array ( [ 0 ] => Perl [ 1 ] => PHP [ 2 ] => Python ) ?> Accordingly, merged arrays can be either preexisting arrays, as with $p_languages, or anonymous arrays, as with array('Python'). You can\u2019t use array_push(), because PHP won\u2019t automatically flatten out the array into a series of independent variables, and you\u2019ll end up with a nested array. <?php array_push ( $p_languages , array ( 'Python' )); print_r ( $p_languages ); Array ( [ 0 ] => Perl [ 1 ] => PHP [ 2 ] => Array ( [ 0 ] => Python ) ) ?> Merging arrays with only numerical keys causes the arrays to get renumbered, so values aren\u2019t lost. Merging arrays with string keys causes the second array to overwrite the value of any duplicated keys. Arrays with both types of keys exhibit both types of behavior. <?php $lc = array ( 'a' , 'b' => 'b' ); // lowercase letters as values $uc = array ( 'A' , 'b' => 'B' ); // uppercase letters as values $ac = array_merge ( $lc , $uc ); // all-cases? print_r ( $ac ); Array ( [ 0 ] => a [ b ] => B [ 1 ] => A ) ?> The uppercase A has been renumbered from index 0 to index 1, to avoid a collision, and merged onto the end. The uppercase B has overwritten the lowercase b and replaced it in the original place within the array. The + operator can also merge arrays. For any identically named keys found in both arrays, the value from the left will be used. It doesn\u2019t do any reordering to prevent collisions. <?php print_r ( $uc + $lc ); print_r ( $lc + $uc ); Array ( [ 0 ] => A [ b ] => B ) Array ( [ 0 ] => a [ b ] => b ) ?> Because a and A both have a key of 0, and b and B both have a key of b, you end up with a total of only two elements in the merged arrays. In the first case, $a + $b becomes just $b, and in the other, $b + $a becomes $a. However, if you had two distinctly keyed arrays, this wouldn\u2019t be a problem, and the new array would be the union of the two arrays. array_pad When you want to modify the size of an array, either by making it larger or smaller than its current size. Arrays aren\u2019t a predeclared size in PHP, so you can resize them on the fly. Use array_pad() to make an array grow: <?php // start at three $array = array ( 'apple' , 'banana' , 'coconut' ); // grow to five $array = array_pad ( $array , 5 , '' ); ?> Now, count($array) is 5, and the last two elements, $array[3] and $array[4], contain the empty string. To reduce an array, you can use array_splice(): <?php // no assignment to $array array_splice ( $array , 2 ); ?> This removes all but the first two elements from $array. array_splice The array_splice() function removes and replaces specified elements of an array. The array_splice() function removes selected elements from an array and replaces it with new elements. The function also returns an array with the removed elements. Tip: If the function does not remove any elements (length=0), the replaced array will be inserted from the position of the start parameter (See Example 2). Note: The keys in the replaced array are not preserved. <?php $a1 = array ( \"a\" => \"red\" , \"b\" => \"green\" , \"c\" => \"blue\" , \"d\" => \"yellow\" ); $a2 = array ( \"a\" => \"purple\" , \"b\" => \"orange\" ); array_splice ( $a1 , 0 , 2 , $a2 ); print_r ( $a1 ); ?> <?php $a1 = array ( \"0\" => \"red\" , \"1\" => \"green\" ); $a2 = array ( \"0\" => \"purple\" , \"1\" => \"orange\" ); array_splice ( $a1 , 1 , 0 , $a2 ); print_r ( $a1 ); ?> If you unset() an element, PHP adjusts the array so that looping still works correctly. It doesn\u2019t compact the array to fill in the missing holes. This is what we mean when we say that all arrays are associative, even when they appear to be numeric. Here\u2019s an example: <?php // create a \"numeric\" array $animals = array ( 'ant' , 'bee' , 'cat' , 'dog' , 'elk' , 'fox' ); print $animals [ 1 ]; // prints 'bee' print $animals [ 2 ]; // prints 'cat' count ( $animals ); // returns 6 // unset() unset ( $animals [ 1 ]); // removes element $animals[1] = 'bee' print $animals [ 1 ]; // prints nothing and throws an E_NOTICE error print $animals [ 2 ]; // still prints 'cat' count ( $animals ); // returns 5, even though $array[5] is 'fox' // add new element $animals [] = 'gnu' ; // add new element (not Unix) print $animals [ 1 ]; // prints nothing, still throws an E_NOTICE error print $animals [ 6 ]; // prints 'gnu', this is where 'gnu' ended up count ( $animals ); // returns 6 // assign '' $animals [ 2 ] = '' ; // zero out value print $animals [ 2 ]; // prints '' count ( $animals ); // returns 6, count does not decrease ?> To compact the array into a densely filled numeric array, use array_values(): <?php $animals = array_values ( $animals ); ?> Alternatively, array_splice() automatically reindexes arrays to avoid leaving holes: <?php // create a \"numeric\" array $animals = array ( 'ant' , 'bee' , 'cat' , 'dog' , 'elk' , 'fox' ); array_splice ( $animals , 2 , 2 ); print_r ( $animals ); ?> Array ( [0] => ant [1] => bee [2] => elk [3] => fox ) This is useful if you\u2019re using the array as a queue and want to remove items from the queue while still allowing random access. To safely remove the first or last element from an array, use array_shift() and array_pop(), respectively. range The range() function creates an array containing a range of elements. <?php $numbers = range ( 1 , 10 ); print_r ( $numbers ); ?> The advantage of using range() is its brevity, but this technique has a disadvantage: a large array can take up unnecessary memory. If you want range to skip steps, provide a third argument indicating how big each step should be. For example, range(1, 10, 2) returns an array containing 1, 3, 5, 7,9. It\u2019s also valid for $start to be larger than $end. In this case, the numbers returned by range() are in descending order. range() can also be used to retrieve character sequences: <?php print_r ( range ( 'l' , 'p' )); ?> <?php Array ( [ 0 ] => l [ 1 ] => m [ 2 ] => n [ 3 ] => o [ 4 ] => p ) ?> array_unique When you want to eliminate duplicates from an array. <?php $numbers = array ( 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ); $unique_numbers = array_unique ( $numbers ); print_r ( $unique_numbers ); ?> If the array is already complete, use array_unique(), which returns a new array that contains no duplicate values. If you create the array while processing results, here is a technique for numerical arrays: <?php $numbers = array ( 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ); $unique_numbers = array (); foreach ( $numbers as $number ) { if ( ! in_array ( $number , $unique_numbers )) { $unique_numbers [] = $number ; } } print_r ( $unique_numbers ); ?> Here\u2019s one for associative arrays: <?php foreach ( $_GET [ 'fruits' ] as $fruit ) { $array [ $fruit ] = $fruit ; } ?> An even faster method than using in_array() is to create a hybrid array in which the key and the value for each element are the same. This eliminates the linear check of in_array() but still allows you to take advantage of the array family of functions that operate over the values of an array instead of the keys. In fact, it\u2019s faster to use the associative array method and then call array_values() on the result (or, for that matter, array_keys(), but array_values() is slightly faster) than to create a numeric array directly with the overhead of in_array(). Update Information in Arrays Function Description array_change_key_case() Changes all keys in an array to lowercase or uppercase array_fill() Fills an array with values array_fill_keys() Fills an array with values, specifying keys array_flip() Flips/Exchanges all keys with their associated values in an array array_map() Sends each value of an array to a user-made function, which returns new values array_replace() Replaces the values of the first array with the values from following arrays array_replace_recursive() Replaces the values of the first array with the values from following arrays recursively array_walk() Applies a user function to every member of an array array_walk_recursive() Applies a user function recursively to every member of an array list() Assigns variables as if they were an array Deleting Elements from an Array When you want to remove one or more elements from an array. To delete one element, use unset() : <?php unset ( $array [ 3 ]); unset ( $array [ 'foo' ]); ?> To delete multiple noncontiguous elements, also use unset() : <?php unset ( $array [ 3 ], $array [ 5 ]); unset ( $array [ 'foo' ], $array [ 'bar' ]); ?> To delete multiple contiguous elements, use array_splice(): <?php array_splice ( $array , $offset , $length ); ?> The list Function The list() function is used to create an array from a list of variables. If there are not enough elements in the array it will output a notice and assign null to the remaining variables. <?php list ( $a , $b , $c ) = [ 1 , 2 , 3 ]; echo \" $a is \" . $a . \"<br>\" ; echo \" $b is \" . $b . \"<br>\" ; echo \" $c is \" . $c . \"<br>\" ; ?> Since PHP 7.1.0, which elements are assigned to the variables can be selected using arrow => syntax. <?php list ( 2 => $a , 0 => $b , 1 => $c ) = [ 1 , 2 , 3 ]; echo \" $a is \" . $a . \"<br>\" ; echo \" $b is \" . $b . \"<br>\" ; echo \" $c is \" . $c . \"<br>\" ; ?> When you want to exchange the values in two variables without using additional variables for storage. <?php $a = 'Alice' ; $b = 'Bob' ; list ( $a , $b ) = array ( $b , $a ); // now $a is Bob and $b is Alice ?> PHP\u2019s list() language construct lets you assign values from an array to individual variables. Its counterpart on the right side of the expression, array(), lets you construct arrays from individual values. Assigning the array that array() returns to the variables in the list() lets you juggle the order of those values. This works with more than two values, as well: <?php $yesterday = 'pleasure' ; $today = 'sorrow' ; $tomorrow = 'celebrate' ; list ( $yesterday , $today , $tomorrow ) = array ( $today , $tomorrow , $yesterday ); // now $yesterday is 'sorrow', $today is 'celebrate' // and $tomorrow is 'pleasure' ?> This method isn\u2019t faster than using temporary variables, so you should use it for clarity, but not speed. array_map() Use array_map() to hand off each element to a function for processing: <?php // lowercase all words $lc = array_map ( 'strtolower' , $words ); ?> The first argument to array_map() is a function to modify an individual element, and the second is the array to be iterated through. array_walk() Use array_walk() to hand off each element to a function for processing. When you want to apply a function or method to each element in an array. This allows you to transform the input data for the entire set all at once. <?php // uppercase all words array_walk ( $words , 'strtoupper' ); ?> This function takes an array and a callback function, which is the function that processes the elements of the array. The callback function takes two parameters: a value and a key. It can also take an optional third parameter, which is any additional data you wish to expose within the callback. Because array_walk operates in-place instead of returning a modified copy of the array, you must pass in values by reference when you want to modify the elements. array_walk_recursive() When you have a series of nested arrays, use the array_walk_recursive() function to iterate through them. <?php // uppercase all words array_walk_recursive ( $words , 'strtoupper' ); ?> The array_walk_recursive() function only passes nonarray elements to the callback, so you don\u2019t need to modify a callback when switching from array_walk(). Extracting Information from Arrays Function Description array_column() Returns the values from a single column in the input array array_count_values() Counts all the values of an array array_filter() Filters the values of an array using a callback function array_key_exists() Checks if the specified key exists in the array array_keys() Returns all the keys of an array array_product() Calculates the product of the values in an array array_rand() Returns one or more random keys from an array array_reduce() Returns an array as a string, using a user-defined function array_search() Searches an array for a given value and returns the key array_slice() Returns selected parts of an array current() Returns the current element in an array key() Returns the current key in an array array_sum() Returns the sum of the values in an array array_values() Returns all the values of an array count() Returns the number of elements in an array sizeof() Alias of count() each() Deprecated from PHP 7.2. Returns the current key and value pair from an array extract() Imports variables into the current symbol table from an array in_array() Checks if a specified value exists in an array Finding the Largest or Smallest Valued Element in an Array When you have an array of elements, and you want to find the largest or smallest valued element. For example, you want to find the appropriate scale when creating a histogram. <?php //To find the largest element, use max(): $largest = max ( $array ); //To find the smallest element, use min(): $smallest = min ( $array ); ?> Normally, max() returns the larger of two elements, but if you pass it an array, it searches the entire array instead. Unfortunately, there\u2019s no way to find the index of the largest element using max(). To do that, you must sort the array in reverse order to put the largest element in position 0. <?php arsort ( $array ); //The value of the largest element is $array[0] ?> array_filter() The array_filter() function is used to remove elements from an array that don\u2019t pass a certain test. When you want to locate entries in an array that meet certain requirements. //Use a foreach loop: <?php $movies = array ( /*...*/ ); foreach ( $movies as $movie ) { if ( $movie [ 'box_office_gross' ] < 5000000 ) { $flops [] = $movie ; } } //Or array_filter(): $movies = array ( /* ... */ ); $flops = array_filter ( $movies , function ( $movie ) { return ( $movie [ 'box_office_gross' ] < 5000000 ) ? 1 : 0 ; }); ?> With array_filter(), however, you first create an anonymous function that returns true for values you want to keep and false for values you don\u2019t. Using array_filter(), you then instruct PHP to process the array as you do in the foreach. array_key_exists() The array_key_exists() function is used to check if the specified key exists in the array. Use array_key_exists() to check for a key no matter what the associated value is. <?php $cars = array ( \"Volvo\" , \"BMW\" , \"Toyota\" ); if ( array_key_exists ( 1 , $cars )) { echo \"Key 1 exists!\" ; } ?> The array_key_exists() function completely ignores array values\u2014it just reports whether there is an element in the array with a particular key. The isset() function is used to check if the specified key exists in the array. Use isset() to find a key whose associated value is anything but null. <?php $cars = array ( \"Volvo\" , \"BMW\" , \"Toyota\" ); if ( isset ( $cars [ 1 ])) { echo \"Key exists!\" ; } ?> isset(), however, behaves the same way on array keys as it does with other variables. A null value causes is set() to return false. array_search() The array_search() function is used to search for a specified value in an array. Use array_search() to find a value in an array no matter what the associated key is. It returns the key of the found value. If the value is not in the array, it returns false. <?php $cars = array ( \"Volvo\" , \"BMW\" , \"Toyota\" ); $found = array_search ( \"BMW\" , $cars ); echo $found ; ?> Use in_array() to find if an array contains a value; use array_search() to discover where that value is located. However, because array_search() gracefully handles searches in which the value isn\u2019t found, it\u2019s better to use array_search() instead of in_array(). The speed difference is minute, and the extra information is potentially useful. <?php $favorite_foods = array ( 1 => 'artichokes' , 'bread' , 'cauliflower' , 'deviled eggs' ); $food = 'cauliflower' ; $position = array_search ( $food , $favorite_foods ); if ( $position !== false ) { echo \"My # $position favorite food is $food \" ; } else { echo \"Blech! I hate $food !\" ; } ?> Use the !== check against false because if your string is found in the array at position 0, the if evaluates to a logical false, which isn\u2019t what is meant or wanted. If a value is in the array multiple times, array_search() is only guaranteed to return one of the instances, not the first instance. array_values() The array_values() function is used to return all the values of an array. <?php $cars = array ( \"Volvo\" , \"BMW\" , \"Toyota\" ); print_r ( array_values ( $cars )); ?> count() The count() function is used to return the length (the number of elements) of an array. <?php $cars = array ( \"Volvo\" , \"BMW\" , \"Toyota\" ); echo count ( $cars ); ?> Iterating Through an Array When you want to cycle though an array and operate on all or some of the elements inside. Use foreach: foreach ($array as $value) { // Act on $value } Or to get an array\u2019s keys and values: foreach ($array as $key => $value) { // Act II } Another technique is to use for: for ($key = 0, $size = count($array); $key < $size; $key++) { // Act III } Finally, you can use each() in combination with list() and while: reset($array); // reset internal pointer to beginning of array while (list($key, $value) = each ($array)) { // Final Act } each() The each() function is used to return the current key and value pair from an array. With foreach, PHP iterates over a copy of the array instead of the actual array. In contrast, when using each() and for, PHP iterates over the original array. So if you modify the array inside the loop, you may (or may not) get the behavior you expect. <?php foreach ( $items as $item => $cost ) { if ( ! in_stock ( $item )) { unset ( $items [ $item ]); // address the array directly } } ?> The variables returned by foreach() aren\u2019t aliases for the original values in the array: they\u2019re copies, so if you modify them, it\u2019s not reflected in the array. That\u2019s why you need to modify \\(items[\\) item] instead of $cost. When using each(), PHP keeps track of where you are inside the loop. After completing a first pass through, to begin again at the start, call reset() to move the pointer back to the front of the array. Otherwise, each() returns false. The for loop works only for arrays with consecutive integer keys. Unless you\u2019re modifying the size of your array, it\u2019s inefficient to recompute the count() of $items each time through the loop, so we always use a $size variable to hold the array\u2019s size: <?php for ( $item = 0 , $size = count ( $items ); $item < $size ; $item ++ ) { // ... } ?> If you prefer to count efficiently with one variable, count backward: <?php for ( $item = count ( $items ) - 1 ; $item >= 0 ; $item -- ) { // ... } ?> The associative array version of the for loop is: <?php for ( reset ( $array ); $key = key ( $array ); next ( $array ) ) { // ... } ?> This fails if any element holds a string that evaluates to false, so a perfectly normal value such as 0 causes the loop to end early. Therefore, this syntax is rarely used, and is included only to help you understand older PHP code. in_array() The in_array() function is used to check if a value exists in an array. <?php $book_collection = array ( 'Emma' , 'Pride and Prejudice' , 'Northhanger Abbey' ); $book = 'Sense and Sensibility' ; if ( in_array ( $book , $book_collection )) { echo 'Own it.' ; } else { echo 'Need it.' ; } ?> The default behavior of in_array() is to compare items using the == operator. To use the strict equality check, ===, pass true as the third parameter to in_array(). <?php $array = array ( 1 , '2' , 'three' ); in_array ( 0 , $array ); // true! in_array ( 0 , $array , true ); // false in_array ( 1 , $array ); // true in_array ( 1 , $array , true ); // true in_array ( 2 , $array ); // true in_array ( 2 , $array , true ); // false ?> The first check, in_array(0, $array), evaluates to true because to compare the number 0 against the string three, PHP casts three to an integer. Because three isn\u2019t a numeric string, as is 2, it becomes 0. Therefore, in_array() thinks there\u2019s a match. Consequently, when comparing numbers against data that may contain strings, it\u2019s safest to use a strict comparison. If you find yourself calling in_array() multiple times on the same array, it may be better to use an associative array, with the original array elements as the keys in the new associative array. Looking up entries using in_array() takes linear time; with an associative array, it takes constant time. array_flip() If you can\u2019t create the associative array directly but need to convert from a traditional one with integer keys, use array_flip() to swap the keys and values of an array. <?php $book_collection = array ( 'Emma' , 'Pride and Prejudice' , 'Northhanger Abbey' ); // convert from numeric array to associative array $book_collection = array_flip ( $book_collection ); $book = 'Sense and Sensibility' ; if ( isset ( $book_collection [ $book ])) { echo 'Own it.' ; } else { echo 'Need it.' ; } ?> Note that doing this condenses multiple keys with the same value into one element in the flipped array. Comparing Arrays When you have a pair of arrays, and you want to find their union (all the elements), intersection (elements in both, not just one), or difference (in one but not both). Function Description array_diff() Compare arrays, and returns the differences (compare values only) array_diff_assoc() Compare arrays, and returns the differences (compare keys and values) array_diff_key() Compare arrays, and returns the differences (compare keys only) array_diff_uassoc() Compare arrays, and returns the differences (compare keys and values, using a user-defined key comparison function) array_diff_ukey() Compare arrays, and returns the differences (compare keys only, using a user-defined key comparison function) array_intersect() Compare arrays, and returns the matches (compare values only) array_intersect_assoc() Compare arrays and returns the matches (compare keys and values) array_intersect_key() Compare arrays, and returns the matches (compare keys only) array_intersect_uassoc() Compare arrays, and returns the matches (compare keys and values, using a user-defined key comparison function) array_intersect_ukey() Compare arrays, and returns the matches (compare keys only, using a user-defined key comparison function) array_udiff() Compare arrays, and returns the differences (compare values only, using a user-defined key comparison function) array_udiff_assoc() Compare arrays, and returns the differences (compare keys and values, using a built-in function to compare the keys and a user-defined function to compare the values) array_udiff_uassoc() Compare arrays, and returns the differences (compare keys and values, using two user-defined key comparison functions) array_uintersect() Compare arrays, and returns the matches (compare values only, using a user-defined key comparison function) array_uintersect_assoc() Compare arrays, and returns the matches (compare keys and values, using a built-in function to compare the keys and a user-defined function to compare the values) array_uintersect_uassoc() Compare arrays, and returns the matches (compare keys and values, using two user-defined key comparison functions) //To compute the union: $union = array_unique(array_merge($a, $b)); //To compute the intersection: $intersection = array_intersect($a, $b); //To find the simple difference: $difference = array_diff($a, $b); //And for the symmetric difference: $difference = array_merge(array_diff($a, $b), array_diff($b, $a)); Many necessary components for these calculations are built into PHP; it\u2019s just a matter of combining them in the proper sequence. To find the union, you merge the two arrays to create one giant array with all of the values. But array_merge() allows duplicate values when merging two numeric arrays, so you call array_unique() to filter them out. This can leave gaps between entries because array_unique() doesn\u2019t compact the array. It isn\u2019t a problem, however, because foreach and each() handle sparsely filled arrays without a hitch. The function to calculate the intersection is simply named array_intersect() and requires no additional work on your part. array_diff() The array_diff() function returns an array containing all the unique elements in $old that aren\u2019t in $new. This is known as the simple difference: $old = array('To', 'be', 'or', 'not', 'to', 'be'); $new = array('To', 'be', 'or', 'whatever'); $difference = array_diff($old, $new); print_r($difference); The resulting array, $difference, contains 'not' and 'to' because array_diff() is case sensitive. It doesn\u2019t contain 'whatever' because it doesn\u2019t appear in $old. To get a reverse difference, or in other words, to find the unique elements in $new that are lacking in $old, flip the arguments: $old = array('To', 'be', 'or', 'not', 'to', 'be'); $new = array('To', 'be', 'or', 'whatever'); $difference = array_diff($new, $old); print_r($difference); The $reverse_diff array contains only 'whatever'. If you want to apply a function or other filter to array_diff(), roll your own difference algorithm: // implement case-insensitive diff; diff -i $seen = array(); foreach ($new as $n) { $seen[strtolower($n)]++; } foreach ($old as $o) { $o = strtolower($o); if (!$seen[$o]) { $diff[$o] = $o; } } The first foreach builds an associative array lookup table. You then loop through $old and, if you can\u2019t find an entry in your lookup, add the element to $diff. It can be a little faster to combine array_diff() with array_map(): $old = array('To', 'be', 'or', 'not', 'to', 'be'); $new = array('To', 'be', 'or', 'whatever'); $diff = array_diff(array_map('strtolower', $old), array_map('strtolower', $new)); print_r($diff); The symmetric difference is what\u2019s in $a but not $b, and what\u2019s in $b but not $a: $old = array('To', 'be', 'or', 'not', 'to', 'be'); $new = array('To', 'be', 'or', 'whatever'); $symmetric_diff = array_merge(array_diff($a, $b), array_diff($b, $a)); print_r($symmetric_diff); Once stated, the algorithm is straightforward. You call array_diff() twice and find the two differences. Then you merge them together into one array. There\u2019s no need to call array_unique() because you\u2019ve intentionally constructed these arrays to have nothing in common. Pointer Functions Function Description current() Returns the current element in an array pos() Alias of current() key() Returns the current key in an array next() Advances the internal array pointer of an array prev() Rewinds the internal array pointer reset() Sets the internal pointer of an array to its first element end() Sets the internal pointer of an array to its last element Sorting Arrays Function Description array_multisort() Sorts multiple or multi-dimensional arrays array_reverse() Returns an array in the reverse order arsort() Sorts an associative array in descending order, according to the value asort() Sorts an associative array in ascending order, according to the value krsort() Sorts an associative array in descending order, according to the key ksort() Sorts an associative array in ascending order, according to the key natcasesort() Sorts an array using a case insensitive \"natural order\" algorithm natsort() Sorts an array using a \"natural order\" algorithm rsort() Sorts an indexed array in descending order shuffle() Shuffles an array sort() Sorts an indexed array in ascending order uasort() Sorts an array by values using a user-defined comparison function and maintains the index association uksort() Sorts an array by keys using a user-defined comparison function usort() Sorts an array by values using a user-defined comparison function sort() The sort() function sorts an array alphabetically. <?php $cars = array ( \"Volvo\" , \"BMW\" , \"Toyota\" ); sort ( $cars ); echo $cars [ 0 ]; ?> To sort numerically, pass SORT_NUMERIC as the second argument to sort(). <?php $scores = array ( 1 , 10 , 2 , 20 ); sort ( $scores , SORT_NUMERIC ); ?> This resorts the numbers in ascending order (1, 2, 10, 20) instead of lexicographical order (1, 10, 2, 20). rsort() The rsort() function sorts an array in descending order. <?php $cars = array ( \"Volvo\" , \"BMW\" , \"Toyota\" ); rsort ( $cars ); echo $cars [ 0 ]; ?> asort() The asort() function sorts an associative array in ascending order, according to the value. The sort() function doesn\u2019t preserve the key/value association between elements; instead, entries are reindexed starting at 0 and going upward. To preserve the key/value links, use asort(). The asort() function is normally used for associative arrays, but it can also be useful when the indexes of the entries are meaningful. <?php $states = array ( 1 => 'Delaware' , 'Pennsylvania' , 'New Jersey' ); asort ( $states ); while ( list ( $rank , $state ) = each ( $states )) { print \" $state was the # $rank state to join the United States \\n \" ; } ?> <?php $age = array ( \"Peter\" => \"35\" , \"Ben\" => \"37\" , \"Joe\" => \"43\" ); asort ( $age ); foreach ( $age as $x => $x_value ) { echo \"Key=\" . $x . \", Value=\" . $x_value ; echo \"<br>\" ; } ?> natsort() The natsort() function sorts an array using a \"natural order\" algorithm. Use natsort() to sort the array using a natural sorting algorithm. Under natural sorting, you can mix strings and numbers inside your elements and still get the right answer: <?php $tests = array ( 'test1.php' , 'test10.php' , 'test11.php' , 'test2.php' ); natsort ( $tests ); print_r ( $tests ); ?> The elements are now ordered 'test1.php', 'test2.php', 'test10.php', and 'test11.php'. With natural sorting, the number 10 comes after the number 2; the opposite occurs under traditional sorting. For case-insensitive natural sorting, use natcasesort(). ksort() The ksort() function sorts an associative array in ascending order, according to the key. <?php $age = array ( \"Peter\" => \"35\" , \"Ben\" => \"37\" , \"Joe\" => \"43\" ); ksort ( $age ); foreach ( $age as $x => $x_value ) { echo \"Key=\" . $x . \", Value=\" . $x_value ; echo \"<br>\" ; } ?> arsort() The arsort() function sorts an associative array in descending order, according to the value. <?php $age = array ( \"Peter\" => \"35\" , \"Ben\" => \"37\" , \"Joe\" => \"43\" ); arsort ( $age ); foreach ( $age as $x => $x_value ) { echo \"Key=\" . $x . \", Value=\" . $x_value ; echo \"<br>\" ; } ?> krsort() The krsort() function sorts an associative array in descending order, according to the key. <?php $age = array ( \"Peter\" => \"35\" , \"Ben\" => \"37\" , \"Joe\" => \"43\" ); krsort ( $age ); foreach ( $age as $x => $x_value ) { echo \"Key=\" . $x . \", Value=\" . $x_value ; echo \"<br>\" ; } ?> Sorting an Array by a Computable Field Use usort() in combination with a custom comparison function: <?php $tests = array ( 'test1.php' , 'test10.php' , 'test11.php' , 'test2.php' ); // sort in reverse natural order usort ( $tests , function ( $a , $b ) { return strnatcmp ( $b , $a ); }); print_r ( $tests ); ?> When you want to define a custom sorting routine to order an array. However, instead of using a function, you want to use an object method. As with a custom sort function, the object method needs to take two input arguments and return 1, 0, or \u22121, depending on whether the first parameter is larger than, equal to, or less than the second. <?php class sort { // reverse-order string comparison static function strrcmp ( $a , $b ) { return strcmp ( $b , $a ); } } usort ( $words , array ( 'sort' , 'strrcmp' )); ?> It must also be declared as static. Alternatively, you can use an instantiated object: <?php class Dates { public function compare ( $a , $b ) { /* compare here */ } } $dates = new Dates ; usort ( $access_times , array ( $dates , 'compare' )); ?> array_multisort() The array_multisort() function sorts an array of values using multiple keys. When you want to sort multiple arrays or an array with multiple dimensions. <?php $colors = array ( 'Red' , 'White' , 'Blue' ); $cities = array ( 'Boston' , 'New York' , 'Chicago' ); array_multisort ( $colors , $cities ); print_r ( $colors ); print_r ( $cities ); Array ( [ 0 ] => Blue [ 1 ] => Red [ 2 ] => White ) Array ( [ 0 ] => Chicago [ 1 ] => Boston [ 2 ] => New York ) //To sort multiple dimensions within a single array, pass the specific array elements: $stuff = array ( 'colors' => array ( 'Red' , 'White' , 'Blue' ), 'cities' => array ( 'Boston' , 'New York' , 'Chicago' )); array_multisort ( $stuff [ 'colors' ], $stuff [ 'cities' ]); print_r ( $stuff ); Array ( [ colors ] => Array ( [ 0 ] => Blue [ 1 ] => Red [ 2 ] => White ) [ cities ] => Array ( [ 0 ] => Chicago [ 1 ] => Boston [ 2 ] => New York ) ) ?> To modify the sort type, as in sort(), pass in SORT_REGULAR, SORT_NUMERIC, or SORT_STRING after the array. To modify the sort order, unlike in sort(), pass in SORT_ASC or SORT_DESC after the array. You can also pass in both a sort type and a sort order after the array. The array_multisort() function can sort several arrays at once or a multidimensional array by one or more dimensions. The arrays are treated as columns of a table to be sorted by rows. The first array is the main one to sort by; all the items in the other arrays are reordered based on the sorted order of the first array. If items in the first array compare as equal, the sort order is determined by the second array, and so on. The default sorting values are SORT_REGULAR and SORT_ASC, and they\u2019re reset after each array, so there\u2019s no reason to pass either of these two values, except for clarity: <?php $numbers = array ( 0 , 1 , 2 , 3 ); $letters = array ( 'a' , 'b' , 'c' , 'd' ); array_multisort ( $numbers , SORT_NUMERIC , SORT_DESC , $letters , SORT_STRING , SORT_DESC ); ?> This example reverses the arrays. shuffle() When you want to scramble the elements of an array in a random order. <?php $colors = array ( 'Red' , 'White' , 'Blue' ); shuffle ( $colors ); print_r ( $colors ); ?>","title":"Array"},{"location":"DS/phpArray/#create-an-array-in-php","text":"In PHP, the array() function is used to create an array: array(); In PHP, there are three types of arrays: Indexed arrays - Arrays with a numeric index Associative arrays - Arrays with named keys Multidimensional arrays - Arrays containing one or more arrays","title":"Create an Array in PHP"},{"location":"DS/phpArray/#php-indexed-arrays","text":"There are two ways to create indexed arrays: The index can be assigned automatically (index always starts at 0), like this: $cars = array(\"Volvo\", \"BMW\", \"Toyota\"); or the index can be assigned manually: $cars[0] = \"Volvo\"; $cars[1] = \"BMW\"; $cars[2] = \"Toyota\"; <?php $cars = array ( \"Volvo\" , \"BMW\" , \"Toyota\" ); echo \"I like \" . $cars [ 0 ] . \", \" . $cars [ 1 ] . \" and \" . $cars [ 2 ] . \".\" ; ?> <?php $cars = array ( \"Volvo\" , \"BMW\" , \"Toyota\" ); $arrlength = count ( $cars ); for ( $x = 0 ; $x < $arrlength ; $x ++ ) { echo $cars [ $x ]; echo \"<br>\" ; } ?>","title":"PHP Indexed Arrays"},{"location":"DS/phpArray/#specifying-an-array-not-beginning-at-element-0","text":"When specifying an array, you can specify the array not beginning at element 0. <?php $presidents = array ( 1 => 'Washington' , 'Adams' , 'Jefferson' , 'Madison' ); ?> PHP even allows you to use negative numbers in the array() call. (In fact, this method works for noninteger keys, too.) What you\u2019ll get is technically an associative array, although as we said, the line between numeric arrays and associative arrays is often blurred in PHP; this is just another one of these cases: <?php $us_leaders = array ( - 1 => 'George II' , 'George III' , 'Washington' ); // alternatively, $us_leaders = [ - 1 => 'George II' , 'George III' , 'Washington' ]; ?> Of course, you can mix and match numeric and string keys in one array() definition, but it\u2019s confusing and very rarely needed: <?php $presidents = array ( 1 => 'Washington' , 'Adams' , 'Honest' => 'Lincoln' , 'Jefferson' ); // alternatively, $presidents = [ 1 => 'Washington' , 'Adams' , 'Honest' => 'Lincoln' , 'Jefferson' ]; ?> <?php $presidents [ 1 ] = 'Washington' ; // Key is 1 $presidents [] = 'Adams' ; // Key is 1 + 1 => 2 $presidents [ 'Honest' ] = 'Lincoln' ; // Key is 'Honest' $presidents [] = 'Jefferson' ; // Key is 2 + 1 => 3 ?>","title":"Specifying an Array Not Beginning at Element 0"},{"location":"DS/phpArray/#php-associative-arrays","text":"Associative arrays are arrays with named keys. There are two ways to create an associative array: $age = array(\"Peter\"=>\"35\", \"Ben\"=>\"37\", \"Joe\"=>\"43\"); or: $age['Peter'] = \"35\"; $age['Ben'] = \"37\"; $age['Joe'] = \"43\"; <?php $age = array ( \"Peter\" => \"35\" , \"Ben\" => \"37\" , \"Joe\" => \"43\" ); echo \"Peter is \" . $age [ 'Peter' ] . \" years old.\" ; ?> <?php $age = array ( \"Peter\" => \"35\" , \"Ben\" => \"37\" , \"Joe\" => \"43\" ); foreach ( $age as $x => $x_value ) { echo \"Key=\" . $x . \", Value=\" . $x_value ; echo \"<br>\" ; } ?>","title":"PHP Associative Arrays"},{"location":"DS/phpArray/#php-multidimensional-arrays","text":"Multidimensional arrays are arrays containing one or more arrays. <?php $cars = array ( array ( \"Volvo\" , 22 , 18 ), array ( \"BMW\" , 15 , 13 ), array ( \"Saab\" , 5 , 2 ), array ( \"Land Rover\" , 17 , 15 ) ); echo $cars [ 0 ][ 0 ] . \": In stock: \" . $cars [ 0 ][ 1 ] . \", sold: \" . $cars [ 0 ][ 2 ] . \".<br>\" ; echo $cars [ 1 ][ 0 ] . \": In stock: \" . $cars [ 1 ][ 1 ] . \", sold: \" . $cars [ 1 ][ 2 ] . \".<br>\" ; echo $cars [ 2 ][ 0 ] . \": In stock: \" . $cars [ 2 ][ 1 ] . \", sold: \" . $cars [ 2 ][ 2 ] . \".<br>\" ; echo $cars [ 3 ][ 0 ] . \": In stock: \" . $cars [ 3 ][ 1 ] . \", sold: \" . $cars [ 3 ][ 2 ] . \".<br>\" ; ?> <?php for ( $row = 0 ; $row < 4 ; $row ++ ) { echo \"<p><b>Row number $row </b></p>\" ; echo \"<ul>\" ; for ( $col = 0 ; $col < 3 ; $col ++ ) { echo \"<li>\" . $cars [ $row ][ $col ] . \"</li>\" ; } echo \"</ul>\" ; } ?>","title":"PHP Multidimensional Arrays"},{"location":"DS/phpArray/#the-array-functions","text":"The PHP array functions are used to perform operations on arrays.","title":"The Array Functions"},{"location":"DS/phpArray/#modifying-arrays","text":"Function Description array() Creates an array array_chunk() Splits an array into chunks of arrays array_combine() Creates an array by using the elements from one \"keys\" array and one \"values\" array array_merge() Merges one or more arrays into one array array_merge_recursive() Merges one or more arrays into one array recursively array_pad() Inserts a specified number of items, with a specified value, to an array array_pop() Deletes the last element of an array array_push() Inserts one or more elements to the end of an array array_shift() Removes the first element from an array, and returns the value of the removed element array_splice() Removes and replaces specified elements of an array array_unique() Removes duplicate values from an array array_unshift() Adds one or more elements to the beginning of an array compact() Create array containing variables and their values range() Creates an array containing a range of elements","title":"Modifying Arrays"},{"location":"DS/phpArray/#array_merge","text":"The array_merge() function works with both predefined arrays and arrays defined in place using array(): <?php $p_languages = array ( 'Perl' , 'PHP' ); $p_languages = array_merge ( $p_languages , array ( 'Python' )); print_r ( $p_languages ); Array ( [ 0 ] => Perl [ 1 ] => PHP [ 2 ] => Python ) ?> Accordingly, merged arrays can be either preexisting arrays, as with $p_languages, or anonymous arrays, as with array('Python'). You can\u2019t use array_push(), because PHP won\u2019t automatically flatten out the array into a series of independent variables, and you\u2019ll end up with a nested array. <?php array_push ( $p_languages , array ( 'Python' )); print_r ( $p_languages ); Array ( [ 0 ] => Perl [ 1 ] => PHP [ 2 ] => Array ( [ 0 ] => Python ) ) ?> Merging arrays with only numerical keys causes the arrays to get renumbered, so values aren\u2019t lost. Merging arrays with string keys causes the second array to overwrite the value of any duplicated keys. Arrays with both types of keys exhibit both types of behavior. <?php $lc = array ( 'a' , 'b' => 'b' ); // lowercase letters as values $uc = array ( 'A' , 'b' => 'B' ); // uppercase letters as values $ac = array_merge ( $lc , $uc ); // all-cases? print_r ( $ac ); Array ( [ 0 ] => a [ b ] => B [ 1 ] => A ) ?> The uppercase A has been renumbered from index 0 to index 1, to avoid a collision, and merged onto the end. The uppercase B has overwritten the lowercase b and replaced it in the original place within the array. The + operator can also merge arrays. For any identically named keys found in both arrays, the value from the left will be used. It doesn\u2019t do any reordering to prevent collisions. <?php print_r ( $uc + $lc ); print_r ( $lc + $uc ); Array ( [ 0 ] => A [ b ] => B ) Array ( [ 0 ] => a [ b ] => b ) ?> Because a and A both have a key of 0, and b and B both have a key of b, you end up with a total of only two elements in the merged arrays. In the first case, $a + $b becomes just $b, and in the other, $b + $a becomes $a. However, if you had two distinctly keyed arrays, this wouldn\u2019t be a problem, and the new array would be the union of the two arrays.","title":"array_merge"},{"location":"DS/phpArray/#array_pad","text":"When you want to modify the size of an array, either by making it larger or smaller than its current size. Arrays aren\u2019t a predeclared size in PHP, so you can resize them on the fly. Use array_pad() to make an array grow: <?php // start at three $array = array ( 'apple' , 'banana' , 'coconut' ); // grow to five $array = array_pad ( $array , 5 , '' ); ?> Now, count($array) is 5, and the last two elements, $array[3] and $array[4], contain the empty string. To reduce an array, you can use array_splice(): <?php // no assignment to $array array_splice ( $array , 2 ); ?> This removes all but the first two elements from $array.","title":"array_pad"},{"location":"DS/phpArray/#array_splice","text":"The array_splice() function removes and replaces specified elements of an array. The array_splice() function removes selected elements from an array and replaces it with new elements. The function also returns an array with the removed elements. Tip: If the function does not remove any elements (length=0), the replaced array will be inserted from the position of the start parameter (See Example 2). Note: The keys in the replaced array are not preserved. <?php $a1 = array ( \"a\" => \"red\" , \"b\" => \"green\" , \"c\" => \"blue\" , \"d\" => \"yellow\" ); $a2 = array ( \"a\" => \"purple\" , \"b\" => \"orange\" ); array_splice ( $a1 , 0 , 2 , $a2 ); print_r ( $a1 ); ?> <?php $a1 = array ( \"0\" => \"red\" , \"1\" => \"green\" ); $a2 = array ( \"0\" => \"purple\" , \"1\" => \"orange\" ); array_splice ( $a1 , 1 , 0 , $a2 ); print_r ( $a1 ); ?> If you unset() an element, PHP adjusts the array so that looping still works correctly. It doesn\u2019t compact the array to fill in the missing holes. This is what we mean when we say that all arrays are associative, even when they appear to be numeric. Here\u2019s an example: <?php // create a \"numeric\" array $animals = array ( 'ant' , 'bee' , 'cat' , 'dog' , 'elk' , 'fox' ); print $animals [ 1 ]; // prints 'bee' print $animals [ 2 ]; // prints 'cat' count ( $animals ); // returns 6 // unset() unset ( $animals [ 1 ]); // removes element $animals[1] = 'bee' print $animals [ 1 ]; // prints nothing and throws an E_NOTICE error print $animals [ 2 ]; // still prints 'cat' count ( $animals ); // returns 5, even though $array[5] is 'fox' // add new element $animals [] = 'gnu' ; // add new element (not Unix) print $animals [ 1 ]; // prints nothing, still throws an E_NOTICE error print $animals [ 6 ]; // prints 'gnu', this is where 'gnu' ended up count ( $animals ); // returns 6 // assign '' $animals [ 2 ] = '' ; // zero out value print $animals [ 2 ]; // prints '' count ( $animals ); // returns 6, count does not decrease ?> To compact the array into a densely filled numeric array, use array_values(): <?php $animals = array_values ( $animals ); ?> Alternatively, array_splice() automatically reindexes arrays to avoid leaving holes: <?php // create a \"numeric\" array $animals = array ( 'ant' , 'bee' , 'cat' , 'dog' , 'elk' , 'fox' ); array_splice ( $animals , 2 , 2 ); print_r ( $animals ); ?> Array ( [0] => ant [1] => bee [2] => elk [3] => fox ) This is useful if you\u2019re using the array as a queue and want to remove items from the queue while still allowing random access. To safely remove the first or last element from an array, use array_shift() and array_pop(), respectively.","title":"array_splice"},{"location":"DS/phpArray/#range","text":"The range() function creates an array containing a range of elements. <?php $numbers = range ( 1 , 10 ); print_r ( $numbers ); ?> The advantage of using range() is its brevity, but this technique has a disadvantage: a large array can take up unnecessary memory. If you want range to skip steps, provide a third argument indicating how big each step should be. For example, range(1, 10, 2) returns an array containing 1, 3, 5, 7,9. It\u2019s also valid for $start to be larger than $end. In this case, the numbers returned by range() are in descending order. range() can also be used to retrieve character sequences: <?php print_r ( range ( 'l' , 'p' )); ?> <?php Array ( [ 0 ] => l [ 1 ] => m [ 2 ] => n [ 3 ] => o [ 4 ] => p ) ?>","title":"range"},{"location":"DS/phpArray/#array_unique","text":"When you want to eliminate duplicates from an array. <?php $numbers = array ( 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ); $unique_numbers = array_unique ( $numbers ); print_r ( $unique_numbers ); ?> If the array is already complete, use array_unique(), which returns a new array that contains no duplicate values. If you create the array while processing results, here is a technique for numerical arrays: <?php $numbers = array ( 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ); $unique_numbers = array (); foreach ( $numbers as $number ) { if ( ! in_array ( $number , $unique_numbers )) { $unique_numbers [] = $number ; } } print_r ( $unique_numbers ); ?> Here\u2019s one for associative arrays: <?php foreach ( $_GET [ 'fruits' ] as $fruit ) { $array [ $fruit ] = $fruit ; } ?> An even faster method than using in_array() is to create a hybrid array in which the key and the value for each element are the same. This eliminates the linear check of in_array() but still allows you to take advantage of the array family of functions that operate over the values of an array instead of the keys. In fact, it\u2019s faster to use the associative array method and then call array_values() on the result (or, for that matter, array_keys(), but array_values() is slightly faster) than to create a numeric array directly with the overhead of in_array().","title":"array_unique"},{"location":"DS/phpArray/#update-information-in-arrays","text":"Function Description array_change_key_case() Changes all keys in an array to lowercase or uppercase array_fill() Fills an array with values array_fill_keys() Fills an array with values, specifying keys array_flip() Flips/Exchanges all keys with their associated values in an array array_map() Sends each value of an array to a user-made function, which returns new values array_replace() Replaces the values of the first array with the values from following arrays array_replace_recursive() Replaces the values of the first array with the values from following arrays recursively array_walk() Applies a user function to every member of an array array_walk_recursive() Applies a user function recursively to every member of an array list() Assigns variables as if they were an array","title":"Update Information in Arrays"},{"location":"DS/phpArray/#deleting-elements-from-an-array","text":"When you want to remove one or more elements from an array. To delete one element, use unset() : <?php unset ( $array [ 3 ]); unset ( $array [ 'foo' ]); ?> To delete multiple noncontiguous elements, also use unset() : <?php unset ( $array [ 3 ], $array [ 5 ]); unset ( $array [ 'foo' ], $array [ 'bar' ]); ?> To delete multiple contiguous elements, use array_splice(): <?php array_splice ( $array , $offset , $length ); ?>","title":"Deleting Elements from an Array"},{"location":"DS/phpArray/#the-list-function","text":"The list() function is used to create an array from a list of variables. If there are not enough elements in the array it will output a notice and assign null to the remaining variables. <?php list ( $a , $b , $c ) = [ 1 , 2 , 3 ]; echo \" $a is \" . $a . \"<br>\" ; echo \" $b is \" . $b . \"<br>\" ; echo \" $c is \" . $c . \"<br>\" ; ?> Since PHP 7.1.0, which elements are assigned to the variables can be selected using arrow => syntax. <?php list ( 2 => $a , 0 => $b , 1 => $c ) = [ 1 , 2 , 3 ]; echo \" $a is \" . $a . \"<br>\" ; echo \" $b is \" . $b . \"<br>\" ; echo \" $c is \" . $c . \"<br>\" ; ?> When you want to exchange the values in two variables without using additional variables for storage. <?php $a = 'Alice' ; $b = 'Bob' ; list ( $a , $b ) = array ( $b , $a ); // now $a is Bob and $b is Alice ?> PHP\u2019s list() language construct lets you assign values from an array to individual variables. Its counterpart on the right side of the expression, array(), lets you construct arrays from individual values. Assigning the array that array() returns to the variables in the list() lets you juggle the order of those values. This works with more than two values, as well: <?php $yesterday = 'pleasure' ; $today = 'sorrow' ; $tomorrow = 'celebrate' ; list ( $yesterday , $today , $tomorrow ) = array ( $today , $tomorrow , $yesterday ); // now $yesterday is 'sorrow', $today is 'celebrate' // and $tomorrow is 'pleasure' ?> This method isn\u2019t faster than using temporary variables, so you should use it for clarity, but not speed.","title":"The list Function"},{"location":"DS/phpArray/#array_map","text":"Use array_map() to hand off each element to a function for processing: <?php // lowercase all words $lc = array_map ( 'strtolower' , $words ); ?> The first argument to array_map() is a function to modify an individual element, and the second is the array to be iterated through.","title":"array_map()"},{"location":"DS/phpArray/#array_walk","text":"Use array_walk() to hand off each element to a function for processing. When you want to apply a function or method to each element in an array. This allows you to transform the input data for the entire set all at once. <?php // uppercase all words array_walk ( $words , 'strtoupper' ); ?> This function takes an array and a callback function, which is the function that processes the elements of the array. The callback function takes two parameters: a value and a key. It can also take an optional third parameter, which is any additional data you wish to expose within the callback. Because array_walk operates in-place instead of returning a modified copy of the array, you must pass in values by reference when you want to modify the elements.","title":"array_walk()"},{"location":"DS/phpArray/#array_walk_recursive","text":"When you have a series of nested arrays, use the array_walk_recursive() function to iterate through them. <?php // uppercase all words array_walk_recursive ( $words , 'strtoupper' ); ?> The array_walk_recursive() function only passes nonarray elements to the callback, so you don\u2019t need to modify a callback when switching from array_walk().","title":"array_walk_recursive()"},{"location":"DS/phpArray/#extracting-information-from-arrays","text":"Function Description array_column() Returns the values from a single column in the input array array_count_values() Counts all the values of an array array_filter() Filters the values of an array using a callback function array_key_exists() Checks if the specified key exists in the array array_keys() Returns all the keys of an array array_product() Calculates the product of the values in an array array_rand() Returns one or more random keys from an array array_reduce() Returns an array as a string, using a user-defined function array_search() Searches an array for a given value and returns the key array_slice() Returns selected parts of an array current() Returns the current element in an array key() Returns the current key in an array array_sum() Returns the sum of the values in an array array_values() Returns all the values of an array count() Returns the number of elements in an array sizeof() Alias of count() each() Deprecated from PHP 7.2. Returns the current key and value pair from an array extract() Imports variables into the current symbol table from an array in_array() Checks if a specified value exists in an array","title":"Extracting Information from Arrays"},{"location":"DS/phpArray/#finding-the-largest-or-smallest-valued-element-in-an-array","text":"When you have an array of elements, and you want to find the largest or smallest valued element. For example, you want to find the appropriate scale when creating a histogram. <?php //To find the largest element, use max(): $largest = max ( $array ); //To find the smallest element, use min(): $smallest = min ( $array ); ?> Normally, max() returns the larger of two elements, but if you pass it an array, it searches the entire array instead. Unfortunately, there\u2019s no way to find the index of the largest element using max(). To do that, you must sort the array in reverse order to put the largest element in position 0. <?php arsort ( $array ); //The value of the largest element is $array[0] ?>","title":"Finding the Largest or Smallest Valued Element in an Array"},{"location":"DS/phpArray/#array_filter","text":"The array_filter() function is used to remove elements from an array that don\u2019t pass a certain test. When you want to locate entries in an array that meet certain requirements. //Use a foreach loop: <?php $movies = array ( /*...*/ ); foreach ( $movies as $movie ) { if ( $movie [ 'box_office_gross' ] < 5000000 ) { $flops [] = $movie ; } } //Or array_filter(): $movies = array ( /* ... */ ); $flops = array_filter ( $movies , function ( $movie ) { return ( $movie [ 'box_office_gross' ] < 5000000 ) ? 1 : 0 ; }); ?> With array_filter(), however, you first create an anonymous function that returns true for values you want to keep and false for values you don\u2019t. Using array_filter(), you then instruct PHP to process the array as you do in the foreach.","title":"array_filter()"},{"location":"DS/phpArray/#array_key_exists","text":"The array_key_exists() function is used to check if the specified key exists in the array. Use array_key_exists() to check for a key no matter what the associated value is. <?php $cars = array ( \"Volvo\" , \"BMW\" , \"Toyota\" ); if ( array_key_exists ( 1 , $cars )) { echo \"Key 1 exists!\" ; } ?> The array_key_exists() function completely ignores array values\u2014it just reports whether there is an element in the array with a particular key. The isset() function is used to check if the specified key exists in the array. Use isset() to find a key whose associated value is anything but null. <?php $cars = array ( \"Volvo\" , \"BMW\" , \"Toyota\" ); if ( isset ( $cars [ 1 ])) { echo \"Key exists!\" ; } ?> isset(), however, behaves the same way on array keys as it does with other variables. A null value causes is set() to return false.","title":"array_key_exists()"},{"location":"DS/phpArray/#array_search","text":"The array_search() function is used to search for a specified value in an array. Use array_search() to find a value in an array no matter what the associated key is. It returns the key of the found value. If the value is not in the array, it returns false. <?php $cars = array ( \"Volvo\" , \"BMW\" , \"Toyota\" ); $found = array_search ( \"BMW\" , $cars ); echo $found ; ?> Use in_array() to find if an array contains a value; use array_search() to discover where that value is located. However, because array_search() gracefully handles searches in which the value isn\u2019t found, it\u2019s better to use array_search() instead of in_array(). The speed difference is minute, and the extra information is potentially useful. <?php $favorite_foods = array ( 1 => 'artichokes' , 'bread' , 'cauliflower' , 'deviled eggs' ); $food = 'cauliflower' ; $position = array_search ( $food , $favorite_foods ); if ( $position !== false ) { echo \"My # $position favorite food is $food \" ; } else { echo \"Blech! I hate $food !\" ; } ?> Use the !== check against false because if your string is found in the array at position 0, the if evaluates to a logical false, which isn\u2019t what is meant or wanted. If a value is in the array multiple times, array_search() is only guaranteed to return one of the instances, not the first instance.","title":"array_search()"},{"location":"DS/phpArray/#array_values","text":"The array_values() function is used to return all the values of an array. <?php $cars = array ( \"Volvo\" , \"BMW\" , \"Toyota\" ); print_r ( array_values ( $cars )); ?>","title":"array_values()"},{"location":"DS/phpArray/#count","text":"The count() function is used to return the length (the number of elements) of an array. <?php $cars = array ( \"Volvo\" , \"BMW\" , \"Toyota\" ); echo count ( $cars ); ?>","title":"count()"},{"location":"DS/phpArray/#iterating-through-an-array","text":"When you want to cycle though an array and operate on all or some of the elements inside. Use foreach: foreach ($array as $value) { // Act on $value } Or to get an array\u2019s keys and values: foreach ($array as $key => $value) { // Act II } Another technique is to use for: for ($key = 0, $size = count($array); $key < $size; $key++) { // Act III } Finally, you can use each() in combination with list() and while: reset($array); // reset internal pointer to beginning of array while (list($key, $value) = each ($array)) { // Final Act }","title":"Iterating Through an Array"},{"location":"DS/phpArray/#each","text":"The each() function is used to return the current key and value pair from an array. With foreach, PHP iterates over a copy of the array instead of the actual array. In contrast, when using each() and for, PHP iterates over the original array. So if you modify the array inside the loop, you may (or may not) get the behavior you expect. <?php foreach ( $items as $item => $cost ) { if ( ! in_stock ( $item )) { unset ( $items [ $item ]); // address the array directly } } ?> The variables returned by foreach() aren\u2019t aliases for the original values in the array: they\u2019re copies, so if you modify them, it\u2019s not reflected in the array. That\u2019s why you need to modify \\(items[\\) item] instead of $cost. When using each(), PHP keeps track of where you are inside the loop. After completing a first pass through, to begin again at the start, call reset() to move the pointer back to the front of the array. Otherwise, each() returns false. The for loop works only for arrays with consecutive integer keys. Unless you\u2019re modifying the size of your array, it\u2019s inefficient to recompute the count() of $items each time through the loop, so we always use a $size variable to hold the array\u2019s size: <?php for ( $item = 0 , $size = count ( $items ); $item < $size ; $item ++ ) { // ... } ?> If you prefer to count efficiently with one variable, count backward: <?php for ( $item = count ( $items ) - 1 ; $item >= 0 ; $item -- ) { // ... } ?> The associative array version of the for loop is: <?php for ( reset ( $array ); $key = key ( $array ); next ( $array ) ) { // ... } ?> This fails if any element holds a string that evaluates to false, so a perfectly normal value such as 0 causes the loop to end early. Therefore, this syntax is rarely used, and is included only to help you understand older PHP code.","title":"each()"},{"location":"DS/phpArray/#in_array","text":"The in_array() function is used to check if a value exists in an array. <?php $book_collection = array ( 'Emma' , 'Pride and Prejudice' , 'Northhanger Abbey' ); $book = 'Sense and Sensibility' ; if ( in_array ( $book , $book_collection )) { echo 'Own it.' ; } else { echo 'Need it.' ; } ?> The default behavior of in_array() is to compare items using the == operator. To use the strict equality check, ===, pass true as the third parameter to in_array(). <?php $array = array ( 1 , '2' , 'three' ); in_array ( 0 , $array ); // true! in_array ( 0 , $array , true ); // false in_array ( 1 , $array ); // true in_array ( 1 , $array , true ); // true in_array ( 2 , $array ); // true in_array ( 2 , $array , true ); // false ?> The first check, in_array(0, $array), evaluates to true because to compare the number 0 against the string three, PHP casts three to an integer. Because three isn\u2019t a numeric string, as is 2, it becomes 0. Therefore, in_array() thinks there\u2019s a match. Consequently, when comparing numbers against data that may contain strings, it\u2019s safest to use a strict comparison. If you find yourself calling in_array() multiple times on the same array, it may be better to use an associative array, with the original array elements as the keys in the new associative array. Looking up entries using in_array() takes linear time; with an associative array, it takes constant time.","title":"in_array()"},{"location":"DS/phpArray/#array_flip","text":"If you can\u2019t create the associative array directly but need to convert from a traditional one with integer keys, use array_flip() to swap the keys and values of an array. <?php $book_collection = array ( 'Emma' , 'Pride and Prejudice' , 'Northhanger Abbey' ); // convert from numeric array to associative array $book_collection = array_flip ( $book_collection ); $book = 'Sense and Sensibility' ; if ( isset ( $book_collection [ $book ])) { echo 'Own it.' ; } else { echo 'Need it.' ; } ?> Note that doing this condenses multiple keys with the same value into one element in the flipped array.","title":"array_flip()"},{"location":"DS/phpArray/#comparing-arrays","text":"When you have a pair of arrays, and you want to find their union (all the elements), intersection (elements in both, not just one), or difference (in one but not both). Function Description array_diff() Compare arrays, and returns the differences (compare values only) array_diff_assoc() Compare arrays, and returns the differences (compare keys and values) array_diff_key() Compare arrays, and returns the differences (compare keys only) array_diff_uassoc() Compare arrays, and returns the differences (compare keys and values, using a user-defined key comparison function) array_diff_ukey() Compare arrays, and returns the differences (compare keys only, using a user-defined key comparison function) array_intersect() Compare arrays, and returns the matches (compare values only) array_intersect_assoc() Compare arrays and returns the matches (compare keys and values) array_intersect_key() Compare arrays, and returns the matches (compare keys only) array_intersect_uassoc() Compare arrays, and returns the matches (compare keys and values, using a user-defined key comparison function) array_intersect_ukey() Compare arrays, and returns the matches (compare keys only, using a user-defined key comparison function) array_udiff() Compare arrays, and returns the differences (compare values only, using a user-defined key comparison function) array_udiff_assoc() Compare arrays, and returns the differences (compare keys and values, using a built-in function to compare the keys and a user-defined function to compare the values) array_udiff_uassoc() Compare arrays, and returns the differences (compare keys and values, using two user-defined key comparison functions) array_uintersect() Compare arrays, and returns the matches (compare values only, using a user-defined key comparison function) array_uintersect_assoc() Compare arrays, and returns the matches (compare keys and values, using a built-in function to compare the keys and a user-defined function to compare the values) array_uintersect_uassoc() Compare arrays, and returns the matches (compare keys and values, using two user-defined key comparison functions) //To compute the union: $union = array_unique(array_merge($a, $b)); //To compute the intersection: $intersection = array_intersect($a, $b); //To find the simple difference: $difference = array_diff($a, $b); //And for the symmetric difference: $difference = array_merge(array_diff($a, $b), array_diff($b, $a)); Many necessary components for these calculations are built into PHP; it\u2019s just a matter of combining them in the proper sequence. To find the union, you merge the two arrays to create one giant array with all of the values. But array_merge() allows duplicate values when merging two numeric arrays, so you call array_unique() to filter them out. This can leave gaps between entries because array_unique() doesn\u2019t compact the array. It isn\u2019t a problem, however, because foreach and each() handle sparsely filled arrays without a hitch. The function to calculate the intersection is simply named array_intersect() and requires no additional work on your part.","title":"Comparing Arrays"},{"location":"DS/phpArray/#array_diff","text":"The array_diff() function returns an array containing all the unique elements in $old that aren\u2019t in $new. This is known as the simple difference: $old = array('To', 'be', 'or', 'not', 'to', 'be'); $new = array('To', 'be', 'or', 'whatever'); $difference = array_diff($old, $new); print_r($difference); The resulting array, $difference, contains 'not' and 'to' because array_diff() is case sensitive. It doesn\u2019t contain 'whatever' because it doesn\u2019t appear in $old. To get a reverse difference, or in other words, to find the unique elements in $new that are lacking in $old, flip the arguments: $old = array('To', 'be', 'or', 'not', 'to', 'be'); $new = array('To', 'be', 'or', 'whatever'); $difference = array_diff($new, $old); print_r($difference); The $reverse_diff array contains only 'whatever'. If you want to apply a function or other filter to array_diff(), roll your own difference algorithm: // implement case-insensitive diff; diff -i $seen = array(); foreach ($new as $n) { $seen[strtolower($n)]++; } foreach ($old as $o) { $o = strtolower($o); if (!$seen[$o]) { $diff[$o] = $o; } } The first foreach builds an associative array lookup table. You then loop through $old and, if you can\u2019t find an entry in your lookup, add the element to $diff. It can be a little faster to combine array_diff() with array_map(): $old = array('To', 'be', 'or', 'not', 'to', 'be'); $new = array('To', 'be', 'or', 'whatever'); $diff = array_diff(array_map('strtolower', $old), array_map('strtolower', $new)); print_r($diff); The symmetric difference is what\u2019s in $a but not $b, and what\u2019s in $b but not $a: $old = array('To', 'be', 'or', 'not', 'to', 'be'); $new = array('To', 'be', 'or', 'whatever'); $symmetric_diff = array_merge(array_diff($a, $b), array_diff($b, $a)); print_r($symmetric_diff); Once stated, the algorithm is straightforward. You call array_diff() twice and find the two differences. Then you merge them together into one array. There\u2019s no need to call array_unique() because you\u2019ve intentionally constructed these arrays to have nothing in common.","title":"array_diff()"},{"location":"DS/phpArray/#pointer-functions","text":"Function Description current() Returns the current element in an array pos() Alias of current() key() Returns the current key in an array next() Advances the internal array pointer of an array prev() Rewinds the internal array pointer reset() Sets the internal pointer of an array to its first element end() Sets the internal pointer of an array to its last element","title":"Pointer Functions"},{"location":"DS/phpArray/#sorting-arrays","text":"Function Description array_multisort() Sorts multiple or multi-dimensional arrays array_reverse() Returns an array in the reverse order arsort() Sorts an associative array in descending order, according to the value asort() Sorts an associative array in ascending order, according to the value krsort() Sorts an associative array in descending order, according to the key ksort() Sorts an associative array in ascending order, according to the key natcasesort() Sorts an array using a case insensitive \"natural order\" algorithm natsort() Sorts an array using a \"natural order\" algorithm rsort() Sorts an indexed array in descending order shuffle() Shuffles an array sort() Sorts an indexed array in ascending order uasort() Sorts an array by values using a user-defined comparison function and maintains the index association uksort() Sorts an array by keys using a user-defined comparison function usort() Sorts an array by values using a user-defined comparison function","title":"Sorting Arrays"},{"location":"DS/phpArray/#sort","text":"The sort() function sorts an array alphabetically. <?php $cars = array ( \"Volvo\" , \"BMW\" , \"Toyota\" ); sort ( $cars ); echo $cars [ 0 ]; ?> To sort numerically, pass SORT_NUMERIC as the second argument to sort(). <?php $scores = array ( 1 , 10 , 2 , 20 ); sort ( $scores , SORT_NUMERIC ); ?> This resorts the numbers in ascending order (1, 2, 10, 20) instead of lexicographical order (1, 10, 2, 20).","title":"sort()"},{"location":"DS/phpArray/#rsort","text":"The rsort() function sorts an array in descending order. <?php $cars = array ( \"Volvo\" , \"BMW\" , \"Toyota\" ); rsort ( $cars ); echo $cars [ 0 ]; ?>","title":"rsort()"},{"location":"DS/phpArray/#asort","text":"The asort() function sorts an associative array in ascending order, according to the value. The sort() function doesn\u2019t preserve the key/value association between elements; instead, entries are reindexed starting at 0 and going upward. To preserve the key/value links, use asort(). The asort() function is normally used for associative arrays, but it can also be useful when the indexes of the entries are meaningful. <?php $states = array ( 1 => 'Delaware' , 'Pennsylvania' , 'New Jersey' ); asort ( $states ); while ( list ( $rank , $state ) = each ( $states )) { print \" $state was the # $rank state to join the United States \\n \" ; } ?> <?php $age = array ( \"Peter\" => \"35\" , \"Ben\" => \"37\" , \"Joe\" => \"43\" ); asort ( $age ); foreach ( $age as $x => $x_value ) { echo \"Key=\" . $x . \", Value=\" . $x_value ; echo \"<br>\" ; } ?>","title":"asort()"},{"location":"DS/phpArray/#natsort","text":"The natsort() function sorts an array using a \"natural order\" algorithm. Use natsort() to sort the array using a natural sorting algorithm. Under natural sorting, you can mix strings and numbers inside your elements and still get the right answer: <?php $tests = array ( 'test1.php' , 'test10.php' , 'test11.php' , 'test2.php' ); natsort ( $tests ); print_r ( $tests ); ?> The elements are now ordered 'test1.php', 'test2.php', 'test10.php', and 'test11.php'. With natural sorting, the number 10 comes after the number 2; the opposite occurs under traditional sorting. For case-insensitive natural sorting, use natcasesort().","title":"natsort()"},{"location":"DS/phpArray/#ksort","text":"The ksort() function sorts an associative array in ascending order, according to the key. <?php $age = array ( \"Peter\" => \"35\" , \"Ben\" => \"37\" , \"Joe\" => \"43\" ); ksort ( $age ); foreach ( $age as $x => $x_value ) { echo \"Key=\" . $x . \", Value=\" . $x_value ; echo \"<br>\" ; } ?>","title":"ksort()"},{"location":"DS/phpArray/#arsort","text":"The arsort() function sorts an associative array in descending order, according to the value. <?php $age = array ( \"Peter\" => \"35\" , \"Ben\" => \"37\" , \"Joe\" => \"43\" ); arsort ( $age ); foreach ( $age as $x => $x_value ) { echo \"Key=\" . $x . \", Value=\" . $x_value ; echo \"<br>\" ; } ?>","title":"arsort()"},{"location":"DS/phpArray/#krsort","text":"The krsort() function sorts an associative array in descending order, according to the key. <?php $age = array ( \"Peter\" => \"35\" , \"Ben\" => \"37\" , \"Joe\" => \"43\" ); krsort ( $age ); foreach ( $age as $x => $x_value ) { echo \"Key=\" . $x . \", Value=\" . $x_value ; echo \"<br>\" ; } ?>","title":"krsort()"},{"location":"DS/phpArray/#sorting-an-array-by-a-computable-field","text":"Use usort() in combination with a custom comparison function: <?php $tests = array ( 'test1.php' , 'test10.php' , 'test11.php' , 'test2.php' ); // sort in reverse natural order usort ( $tests , function ( $a , $b ) { return strnatcmp ( $b , $a ); }); print_r ( $tests ); ?> When you want to define a custom sorting routine to order an array. However, instead of using a function, you want to use an object method. As with a custom sort function, the object method needs to take two input arguments and return 1, 0, or \u22121, depending on whether the first parameter is larger than, equal to, or less than the second. <?php class sort { // reverse-order string comparison static function strrcmp ( $a , $b ) { return strcmp ( $b , $a ); } } usort ( $words , array ( 'sort' , 'strrcmp' )); ?> It must also be declared as static. Alternatively, you can use an instantiated object: <?php class Dates { public function compare ( $a , $b ) { /* compare here */ } } $dates = new Dates ; usort ( $access_times , array ( $dates , 'compare' )); ?>","title":"Sorting an Array by a Computable Field"},{"location":"DS/phpArray/#array_multisort","text":"The array_multisort() function sorts an array of values using multiple keys. When you want to sort multiple arrays or an array with multiple dimensions. <?php $colors = array ( 'Red' , 'White' , 'Blue' ); $cities = array ( 'Boston' , 'New York' , 'Chicago' ); array_multisort ( $colors , $cities ); print_r ( $colors ); print_r ( $cities ); Array ( [ 0 ] => Blue [ 1 ] => Red [ 2 ] => White ) Array ( [ 0 ] => Chicago [ 1 ] => Boston [ 2 ] => New York ) //To sort multiple dimensions within a single array, pass the specific array elements: $stuff = array ( 'colors' => array ( 'Red' , 'White' , 'Blue' ), 'cities' => array ( 'Boston' , 'New York' , 'Chicago' )); array_multisort ( $stuff [ 'colors' ], $stuff [ 'cities' ]); print_r ( $stuff ); Array ( [ colors ] => Array ( [ 0 ] => Blue [ 1 ] => Red [ 2 ] => White ) [ cities ] => Array ( [ 0 ] => Chicago [ 1 ] => Boston [ 2 ] => New York ) ) ?> To modify the sort type, as in sort(), pass in SORT_REGULAR, SORT_NUMERIC, or SORT_STRING after the array. To modify the sort order, unlike in sort(), pass in SORT_ASC or SORT_DESC after the array. You can also pass in both a sort type and a sort order after the array. The array_multisort() function can sort several arrays at once or a multidimensional array by one or more dimensions. The arrays are treated as columns of a table to be sorted by rows. The first array is the main one to sort by; all the items in the other arrays are reordered based on the sorted order of the first array. If items in the first array compare as equal, the sort order is determined by the second array, and so on. The default sorting values are SORT_REGULAR and SORT_ASC, and they\u2019re reset after each array, so there\u2019s no reason to pass either of these two values, except for clarity: <?php $numbers = array ( 0 , 1 , 2 , 3 ); $letters = array ( 'a' , 'b' , 'c' , 'd' ); array_multisort ( $numbers , SORT_NUMERIC , SORT_DESC , $letters , SORT_STRING , SORT_DESC ); ?> This example reverses the arrays.","title":"array_multisort()"},{"location":"DS/phpArray/#shuffle","text":"When you want to scramble the elements of an array in a random order. <?php $colors = array ( 'Red' , 'White' , 'Blue' ); shuffle ( $colors ); print_r ( $colors ); ?>","title":"shuffle()"},{"location":"DS/phpIterables/","text":"An iterable is any value which can be looped through with a foreach() loop. The iterable pseudo-type was introduced in PHP 7.1, and it can be used as a data type for function arguments and function return values. Using Iterables The iterable keyword can be used as a data type of a function argument or as the return type of a function. <?php function printIterable ( iterable $myIterable ) { foreach ( $myIterable as $item ) { echo $item ; } } $arr = [ \"a\" , \"b\" , \"c\" ]; printIterable ( $arr ); ?> <?php function getIterable () : iterable { return [ \"a\" , \"b\" , \"c\" ]; } $myIterable = getIterable (); foreach ( $myIterable as $item ) { echo $item ; } ?> Creating Iterables Arrays All arrays are iterables, so any array can be used as an argument of a function that requires an iterable. Iterators Any object that implements the Iterator interface can be used as an argument of a function that requires an iterable. An iterator contains a list of items and provides methods to loop through them. It keeps a pointer to one of the elements in the list. Each item in the list should have a key which can be used to find the item. An iterator must have these methods: current() - Returns the element that the pointer is currently pointing to. It can be any data type key() Returns the key associated with the current element in the list. It can only be an integer, float, boolean or string next() Moves the pointer to the next element in the list rewind() Moves the pointer to the first element in the list valid() If the internal pointer is not pointing to any element (for example, if next() was called at the end of the list), this should return false. It returns true in any other case <?php // Create an Iterator class MyIterator implements Iterator { private $items = []; private $pointer = 0 ; public function __construct ( $items ) { // array_values() makes sure that the keys are numbers $this -> items = array_values ( $items ); } public function current () { return $this -> items [ $this -> pointer ]; } public function key () { return $this -> pointer ; } public function next () { $this -> pointer ++ ; } public function rewind () { $this -> pointer = 0 ; } public function valid () { // count() indicates how many items are in the list return $this -> pointer < count ( $this -> items ); } } // A function that uses iterables function printIterable ( iterable $myIterable ) { foreach ( $myIterable as $item ) { echo $item ; } } // Use the iterator as an iterable $iterator = new MyIterator ([ \"a\" , \"b\" , \"c\" ]); printIterable ( $iterator ); ?>","title":"Iterables"},{"location":"DS/phpIterables/#using-iterables","text":"The iterable keyword can be used as a data type of a function argument or as the return type of a function. <?php function printIterable ( iterable $myIterable ) { foreach ( $myIterable as $item ) { echo $item ; } } $arr = [ \"a\" , \"b\" , \"c\" ]; printIterable ( $arr ); ?> <?php function getIterable () : iterable { return [ \"a\" , \"b\" , \"c\" ]; } $myIterable = getIterable (); foreach ( $myIterable as $item ) { echo $item ; } ?>","title":"Using Iterables"},{"location":"DS/phpIterables/#creating-iterables","text":"","title":"Creating Iterables"},{"location":"DS/phpIterables/#arrays","text":"All arrays are iterables, so any array can be used as an argument of a function that requires an iterable.","title":"Arrays"},{"location":"DS/phpIterables/#iterators","text":"Any object that implements the Iterator interface can be used as an argument of a function that requires an iterable. An iterator contains a list of items and provides methods to loop through them. It keeps a pointer to one of the elements in the list. Each item in the list should have a key which can be used to find the item. An iterator must have these methods: current() - Returns the element that the pointer is currently pointing to. It can be any data type key() Returns the key associated with the current element in the list. It can only be an integer, float, boolean or string next() Moves the pointer to the next element in the list rewind() Moves the pointer to the first element in the list valid() If the internal pointer is not pointing to any element (for example, if next() was called at the end of the list), this should return false. It returns true in any other case <?php // Create an Iterator class MyIterator implements Iterator { private $items = []; private $pointer = 0 ; public function __construct ( $items ) { // array_values() makes sure that the keys are numbers $this -> items = array_values ( $items ); } public function current () { return $this -> items [ $this -> pointer ]; } public function key () { return $this -> pointer ; } public function next () { $this -> pointer ++ ; } public function rewind () { $this -> pointer = 0 ; } public function valid () { // count() indicates how many items are in the list return $this -> pointer < count ( $this -> items ); } } // A function that uses iterables function printIterable ( iterable $myIterable ) { foreach ( $myIterable as $item ) { echo $item ; } } // Use the iterator as an iterable $iterator = new MyIterator ([ \"a\" , \"b\" , \"c\" ]); printIterable ( $iterator ); ?>","title":"Iterators"},{"location":"Func/phpAll/","text":"PHP has over 1000 built-in functions that can be called directly, from within a script, to perform a specific task. Category Libraries Time and Date * Date Calendar File Management * Filesystem Directory Zip Error and Exception Handling * Error Exception Output Control Network * FTP Mail Network Text Processing * String RegEx Filter Text Formats * JSON XML Parser SimpleXML Database * MySQLi Other * Math Var Handling Misc","title":"All"},{"location":"Func/phpArrowFunc/","text":"The fn keyword is used to create arrow functions. Arrow functions are only available in PHP versions 7.4 and up. Arrow functions have access to all variables from the scope in which they were created. The general syntax of an arrow function is: fn(arguments) => expression to be returned; <?php // This only works in PHP 7.4 and above $str = \"Hello World\" ; $my_function = fn ( $a ) => $str . $a ; echo $my_function ( \"!\" ); ?>","title":"Arrow Function"},{"location":"Func/phpCalendar/","text":"The calendar extension contains functions that simplifies converting between different calendar formats. It is based on the Julian Day Count, which is a count of days starting from January 1st, 4713 B.C. Note: To convert between calendar formats, you must first convert to Julian Day Count, then to the calendar of your choice. Note: The Julian Day Count is not the same as the Julian Calendar! PHP Calendar Functions Function Description cal_days_in_month() Returns the number of days in a month for a specified year and calendar cal_from_jd() Converts a Julian Day Count into a date of a specified calendar cal_info() Returns information about a specified calendar cal_to_jd() Converts a date in a specified calendar to Julian Day Count easter_date() Returns the Unix timestamp for midnight on Easter of a specified year easter_days() Returns the number of days after March 21, that the Easter Day is in a specified year frenchtojd() Converts a French Republican date to a Julian Day Count gregoriantojd() Converts a Gregorian date to a Julian Day Count jddayofweek() Returns the day of the week jdmonthname() Returns a month name jdtofrench() Converts a Julian Day Count to a French Republican date jdtogregorian() Converts a Julian Day Count to a Gregorian date jdtojewish() Converts a Julian Day Count to a Jewish date jdtojulian() Converts a Julian Day Count to a Julian date jdtounix() Converts Julian Day Count to Unix timestamp jewishtojd() Converts a Jewish date to a Julian Day Count juliantojd() Converts a Julian date to a Julian Day Count unixtojd() Converts Unix timestamp to Julian Day Count PHP Predefined Calendar Constants Constant Type PHP Version CAL_GREGORIAN Integer PHP 4 CAL_JULIAN Integer PHP 4 CAL_JEWISH Integer PHP 4 CAL_FRENCH Integer PHP 4 CAL_NUM_CALS Integer PHP 4 CAL_DOW_DAYNO Integer PHP 4 CAL_DOW_SHORT Integer PHP 4 CAL_DOW_LONG Integer PHP 4 CAL_MONTH_GREGORIAN_SHORT Integer PHP 4 CAL_MONTH_GREGORIAN_LONG Integer PHP 4 CAL_MONTH_JULIAN_SHORT Integer PHP 4 CAL_MONTH_JULIAN_LONG Integer PHP 4 CAL_MONTH_JEWISH Integer PHP 4 CAL_MONTH_FRENCH Integer PHP 4 CAL_EASTER_DEFAULT Integer PHP 4.3 CAL_EASTER_ROMAN Integer PHP 4.3 CAL_EASTER_ALWAYS_GREGORIAN Integer PHP 4.3 CAL_EASTER_ALWAYS_JULIAN Integer PHP 4.3 CAL_JEWISH_ADD_ALAFIM_GERESH Integer PHP 5.0 CAL_JEWISH_ADD_ALAFIM Integer PHP 5.0 CAL_JEWISH_ADD_GERESHAYIM Integer PHP 5.0","title":"Calendar"},{"location":"Func/phpCalendar/#php-calendar-functions","text":"Function Description cal_days_in_month() Returns the number of days in a month for a specified year and calendar cal_from_jd() Converts a Julian Day Count into a date of a specified calendar cal_info() Returns information about a specified calendar cal_to_jd() Converts a date in a specified calendar to Julian Day Count easter_date() Returns the Unix timestamp for midnight on Easter of a specified year easter_days() Returns the number of days after March 21, that the Easter Day is in a specified year frenchtojd() Converts a French Republican date to a Julian Day Count gregoriantojd() Converts a Gregorian date to a Julian Day Count jddayofweek() Returns the day of the week jdmonthname() Returns a month name jdtofrench() Converts a Julian Day Count to a French Republican date jdtogregorian() Converts a Julian Day Count to a Gregorian date jdtojewish() Converts a Julian Day Count to a Jewish date jdtojulian() Converts a Julian Day Count to a Julian date jdtounix() Converts Julian Day Count to Unix timestamp jewishtojd() Converts a Jewish date to a Julian Day Count juliantojd() Converts a Julian date to a Julian Day Count unixtojd() Converts Unix timestamp to Julian Day Count","title":"PHP Calendar Functions"},{"location":"Func/phpCalendar/#php-predefined-calendar-constants","text":"Constant Type PHP Version CAL_GREGORIAN Integer PHP 4 CAL_JULIAN Integer PHP 4 CAL_JEWISH Integer PHP 4 CAL_FRENCH Integer PHP 4 CAL_NUM_CALS Integer PHP 4 CAL_DOW_DAYNO Integer PHP 4 CAL_DOW_SHORT Integer PHP 4 CAL_DOW_LONG Integer PHP 4 CAL_MONTH_GREGORIAN_SHORT Integer PHP 4 CAL_MONTH_GREGORIAN_LONG Integer PHP 4 CAL_MONTH_JULIAN_SHORT Integer PHP 4 CAL_MONTH_JULIAN_LONG Integer PHP 4 CAL_MONTH_JEWISH Integer PHP 4 CAL_MONTH_FRENCH Integer PHP 4 CAL_EASTER_DEFAULT Integer PHP 4.3 CAL_EASTER_ROMAN Integer PHP 4.3 CAL_EASTER_ALWAYS_GREGORIAN Integer PHP 4.3 CAL_EASTER_ALWAYS_JULIAN Integer PHP 4.3 CAL_JEWISH_ADD_ALAFIM_GERESH Integer PHP 5.0 CAL_JEWISH_ADD_ALAFIM Integer PHP 5.0 CAL_JEWISH_ADD_GERESHAYIM Integer PHP 5.0","title":"PHP Predefined Calendar Constants"},{"location":"Func/phpCallback/","text":"A callback function (often referred to as just \"callback\") is a function which is passed as an argument into another function. Any existing function can be used as a callback function. To use a function as a callback function, pass a string containing the name of the function as the argument of another function: <?php function my_callback ( $item ) { return strlen ( $item ); } $strings = [ \"apple\" , \"orange\" , \"banana\" , \"coconut\" ]; $lengths = array_map ( \"my_callback\" , $strings ); print_r ( $lengths ); ?> Starting with version 7, PHP can pass anonymous functions as callback functions: <?php $strings = [ \"apple\" , \"orange\" , \"banana\" , \"coconut\" ]; $lengths = array_map ( function ( $item ) { return strlen ( $item ); } , $strings ); print_r ( $lengths ); ?> Callbacks in User Defined Functions User-defined functions and methods can also take callback functions as arguments. To use callback functions inside a user-defined function or method, call it by adding parentheses to the variable and pass arguments as with normal functions: <?php function exclaim ( $str ) { return $str . \"! \" ; } function ask ( $str ) { return $str . \"? \" ; } function printFormatted ( $str , $format ) { // Calling the $format callback function echo $format ( $str ); } // Pass \"exclaim\" and \"ask\" as callback functions to printFormatted() printFormatted ( \"Hello world\" , \"exclaim\" ); printFormatted ( \"Hello world\" , \"ask\" ); ?> PHP callable Keyword Use callable to require a callback function as an argument. The callable keyword is used to force a function argument to be a reference to a function. A callable can be one of the following: An anonymous function A string containing the name of a function An array describing a static class method An array describing an object method <?php function printFormatted ( callable $format , $str ) { echo $format ( $str ); echo \"<br>\" ; } function exclaim ( $str ) { return $str . \"!\" ; } printFormatted ( \"exclaim\" , \"Hello World\" ); ?> <?php function printFormatted ( callable $format , $str ) { echo $format ( $str ); echo \"<br>\" ; } class MyClass { public static function ask ( $str ) { return $str . \"?\" ; } public function brackets ( $str ) { return \"[ $str ]\" ; } } // An anonymous function $func = function ( $str ) { return substr ( $str , 0 , 5 ); }; printFormatted ( $func , \"Hello World\" ); // A string containing the name of a function printFormatted ( \"strtoupper\" , \"Hello World\" ); // An array describing a static class method printFormatted ([ \"MyClass\" , \"ask\" ], \"Hello World\" ); // An array describing an object method $obj = new MyClass (); printFormatted ([ $obj , \"brackets\" ], \"Hello World\" ); ?>","title":"Callback"},{"location":"Func/phpCallback/#callbacks-in-user-defined-functions","text":"User-defined functions and methods can also take callback functions as arguments. To use callback functions inside a user-defined function or method, call it by adding parentheses to the variable and pass arguments as with normal functions: <?php function exclaim ( $str ) { return $str . \"! \" ; } function ask ( $str ) { return $str . \"? \" ; } function printFormatted ( $str , $format ) { // Calling the $format callback function echo $format ( $str ); } // Pass \"exclaim\" and \"ask\" as callback functions to printFormatted() printFormatted ( \"Hello world\" , \"exclaim\" ); printFormatted ( \"Hello world\" , \"ask\" ); ?>","title":"Callbacks in User Defined Functions"},{"location":"Func/phpCallback/#php-callable-keyword","text":"Use callable to require a callback function as an argument. The callable keyword is used to force a function argument to be a reference to a function. A callable can be one of the following: An anonymous function A string containing the name of a function An array describing a static class method An array describing an object method <?php function printFormatted ( callable $format , $str ) { echo $format ( $str ); echo \"<br>\" ; } function exclaim ( $str ) { return $str . \"!\" ; } printFormatted ( \"exclaim\" , \"Hello World\" ); ?> <?php function printFormatted ( callable $format , $str ) { echo $format ( $str ); echo \"<br>\" ; } class MyClass { public static function ask ( $str ) { return $str . \"?\" ; } public function brackets ( $str ) { return \"[ $str ]\" ; } } // An anonymous function $func = function ( $str ) { return substr ( $str , 0 , 5 ); }; printFormatted ( $func , \"Hello World\" ); // A string containing the name of a function printFormatted ( \"strtoupper\" , \"Hello World\" ); // An array describing a static class method printFormatted ([ \"MyClass\" , \"ask\" ], \"Hello World\" ); // An array describing an object method $obj = new MyClass (); printFormatted ([ $obj , \"brackets\" ], \"Hello World\" ); ?>","title":"PHP callable Keyword"},{"location":"Func/phpConfVar/","text":"Reading Configuration Variables When you want to get the value of a PHP configuration setting. Use ini_get(): echo ini_get('magic_quotes_gpc'); // find out the include path: $include_path = ini_get('include_path'); To get all the configuration variable values in one step, call ini_get_all(). It returns the variables in an associative array, and each array element is itself an associative array. The second array has three elements: a global value for the setting, a local value, and an access code: // Put all config values in an associative array $vars = ini_get_all(); print_r($vars['date.timezone']); Array ( [global_value] => UTC [local_value] => UTC [access] => 7 ) The global_value is the value set from the php.ini file; the local_value is adjusted to account for any changes made in the web server\u2019s configuration file, any relevant .htaccess files, and the current script. The value of access is a numeric constant representing the places where this value can be altered. Access values Value PHP constant Meaning 1 PHP_INI_USER Any script, using ini_set() 2 PHP_INI_PERDIR Directory level, using .htaccess 4 PHP_INI_SYSTEM System level, using php.ini or httpd.conf 7 PHP_INI_ALL Everywhere: scripts, directories, and the system A value of 6 means the setting can be changed in both the directory and system level, as 2 + 4 = 6. In practice, there are no variables modifiable only in PHP_INI_USER or PHP_INI_PERDIR, and all variables are modifiable in PHP_INI_SYSTEM, so everything has a value of 4, 6, or 7. You can also get variables belonging to a specific extension by passing the extension name to ini_get_all(): // return just the session module specific variables $session = ini_get_all('session'); By convention, the variables for an extension are prefixed with the extension name and a period. So all the session variables begin with session. and all the PDO variables begin with pdo, for example. Because ini_get() returns the current value for a configuration directive, if you want to check the original value from the php.ini file, use get_cfg_var(): $original = get_cfg_var('sendmail_from'); // have we changed our address? The value returned by get_cfg_var() is the same as what appears in the global_val ue element of the array returned by ini_get_all(). Setting Configuration Variables When you want to change the value of a PHP configuration setting. Use ini_set(): // add a directory to the include path ini_set('include_path', ini_get('include_path') . ':/home/fezzik/php'); Configuration variables are not permanently changed by ini_set(). The new value lasts only for the duration of the request in which ini_set() is called. To make a persistent modification, alter the values stored in the php.ini file. It isn\u2019t meaningful to alter certain variables, such as asp_tags, because by the time you call ini_set() to modify the setting, it\u2019s too late to change the behavior the setting affects. If a variable can\u2019t be changed, ini_set() returns false. However, it is useful to alter configuration variables in certain pages. For example, if you\u2019re running a script from the command line, set html_errors to off. To reset a variable back to its original setting, use ini_restore() and pass the variable name as an argument: ini_restore('sendmail_from'); // go back to the default value","title":"Config Variables"},{"location":"Func/phpConfVar/#reading-configuration-variables","text":"When you want to get the value of a PHP configuration setting. Use ini_get(): echo ini_get('magic_quotes_gpc'); // find out the include path: $include_path = ini_get('include_path'); To get all the configuration variable values in one step, call ini_get_all(). It returns the variables in an associative array, and each array element is itself an associative array. The second array has three elements: a global value for the setting, a local value, and an access code: // Put all config values in an associative array $vars = ini_get_all(); print_r($vars['date.timezone']); Array ( [global_value] => UTC [local_value] => UTC [access] => 7 ) The global_value is the value set from the php.ini file; the local_value is adjusted to account for any changes made in the web server\u2019s configuration file, any relevant .htaccess files, and the current script. The value of access is a numeric constant representing the places where this value can be altered.","title":"Reading Configuration Variables"},{"location":"Func/phpConfVar/#access-values","text":"Value PHP constant Meaning 1 PHP_INI_USER Any script, using ini_set() 2 PHP_INI_PERDIR Directory level, using .htaccess 4 PHP_INI_SYSTEM System level, using php.ini or httpd.conf 7 PHP_INI_ALL Everywhere: scripts, directories, and the system A value of 6 means the setting can be changed in both the directory and system level, as 2 + 4 = 6. In practice, there are no variables modifiable only in PHP_INI_USER or PHP_INI_PERDIR, and all variables are modifiable in PHP_INI_SYSTEM, so everything has a value of 4, 6, or 7. You can also get variables belonging to a specific extension by passing the extension name to ini_get_all(): // return just the session module specific variables $session = ini_get_all('session'); By convention, the variables for an extension are prefixed with the extension name and a period. So all the session variables begin with session. and all the PDO variables begin with pdo, for example. Because ini_get() returns the current value for a configuration directive, if you want to check the original value from the php.ini file, use get_cfg_var(): $original = get_cfg_var('sendmail_from'); // have we changed our address? The value returned by get_cfg_var() is the same as what appears in the global_val ue element of the array returned by ini_get_all().","title":"Access values"},{"location":"Func/phpConfVar/#setting-configuration-variables","text":"When you want to change the value of a PHP configuration setting. Use ini_set(): // add a directory to the include path ini_set('include_path', ini_get('include_path') . ':/home/fezzik/php'); Configuration variables are not permanently changed by ini_set(). The new value lasts only for the duration of the request in which ini_set() is called. To make a persistent modification, alter the values stored in the php.ini file. It isn\u2019t meaningful to alter certain variables, such as asp_tags, because by the time you call ini_set() to modify the setting, it\u2019s too late to change the behavior the setting affects. If a variable can\u2019t be changed, ini_set() returns false. However, it is useful to alter configuration variables in certain pages. For example, if you\u2019re running a script from the command line, set html_errors to off. To reset a variable back to its original setting, use ini_restore() and pass the variable name as an argument: ini_restore('sendmail_from'); // go back to the default value","title":"Setting Configuration Variables"},{"location":"Func/phpCookie/","text":"A cookie is often used to identify a user. A cookie is a small file that the server embeds on the user's computer. Each time the same computer requests a page with a browser, it will send the cookie too. With PHP, you can both create and retrieve cookie values. HTTP requests aren\u2019t \u201cstateful\u201d; each request isn\u2019t connected to a previous one. A cookie, however, can link different requests by the same user. This makes it easier to build features such as shopping carts or to keep track of a user\u2019s search history. setcookie() When you want to set a cookie so that your website can recognize subsequent requests from the same web browser. Call setcookie() with a cookie name and value: setcookie($name, $value = \"\", $expire = \"\", $path = \"\", $domain = \"\", $secure = \"\", $httponly = \"\"); Only the name parameter is required. All other parameters are optional. Cookies are sent with the HTTP headers, so if you\u2019re not using output buffering, set cookie() must be called before any output is generated. . The third argument to setcookie() is an expiration time, expressed as an epoch timestamp. For example, this cookie expires at noon GMT on December 3, 2014: setcookie('flavor','chocolate chip',1417608000); If the third argument to setcookie() is missing (or empty), the cookie expires when the browser is closed. Also, many systems can\u2019t handle a cookie expiration time greater than 2147483647, because that\u2019s the largest epoch timestamp that fits in a 32-bit integer. The fourth argument to setcookie() is a path. The cookie is sent back to the server only when pages whose path begin with the specified string are requested. For example, a cookie sent back only to pages whose path begins with /products/: setcookie('flavor','chocolate chip',1417608000,'/products/'); The page that\u2019s setting the cookie doesn\u2019t have to have a URL whose path component begins with /products/, but the cookie is sent back only to pages that do. The fifth argument to setcookie() is a domain. The cookie is sent back to the server only when pages whose hostname ends with the specified domain are requested. Here the first cookie is sent back to all hosts in the example.com domain, but the second cookie is sent only with requests to the host carlos.example.com: setcookie('flavor','chocolate chip',1417608000,'/products/','example.com'); setcookie('flavor','chocolate chip',1417608000,'/products/','carlos.example.com'); If the first cookie\u2019s domain was just example.com instead of .example.com, it would be sent only to the single host example.com (and not www.example.com or carlos.example.com). If a domain is not specified when setcookie() is called, the browser sends back the cookie only with requests to the same hostname as the request in which the cookie was set. The last optional argument to setcookie() is a flag that, if set to true, instructs the browser only to send the cookie over an SSL connection. This can be useful if the cookie contains sensitive information, but remember that the data in the cookie is stored as unencrypted plain text on the user\u2019s computer. Different browsers handle cookies in slightly different ways, especially with regard to how strictly they match path and domain strings and how they determine priority between different cookies of the same name. Create/Retrieve a Cookie The following example creates a cookie named \"user\" with the value \"John Doe\". The cookie will expire after 30 days (86400 * 30). The \"/\" means that the cookie is available in entire website (otherwise, select the directory you prefer). We then retrieve the value of the cookie \"user\" (using the global variable $_COOKIE). We also use the isset() function to find out if the cookie is set: <?php $cookie_name = \"user\" ; $cookie_value = \"John Doe\" ; setcookie ( $cookie_name , $cookie_value , time () + ( 86400 * 30 ), \"/\" ); // 86400 = 1 day ?> <html> <body> <?php if ( ! isset ( $_COOKIE [ $cookie_name ])) { echo \"Cookie named '\" . $cookie_name . \"' is not set!\" ; } else { echo \"Cookie '\" . $cookie_name . \"' is set!<br>\" ; echo \"Value is: \" . $_COOKIE [ $cookie_name ]; } ?> </body> </html> The setcookie() function must appear BEFORE the html tag. The value of the cookie is automatically URLencoded when sending the cookie, and automatically decoded when received (to prevent URLencoding, use setrawcookie() instead). A cookie\u2019s value isn\u2019t available in $_COOKIE during the request in which the cookie is set. In other words, calling the setcookie() function doesn\u2019t alter the value of $_COOKIE. On subsequent requests, however, each cookie sent back to the server is stored in $_COOKIE. When a browser sends a cookie back to the server, it sends only the value. You can\u2019t access the cookie\u2019s domain, path, expiration time, or secure status through $_COOKIE because the browser doesn\u2019t send that to the server. To print the names and values of all cookies sent in a particular request, loop through the $_COOKIE array: <?php foreach ( $_COOKIE as $cookie_name => $cookie_value ) { print \" $cookie_name = $cookie_value <br/>\" ; } ?> Modify a Cookie Value To modify a cookie, just set (again) the cookie using the setcookie() function: <?php $cookie_name = \"user\" ; $cookie_value = \"Alex Porter\" ; setcookie ( $cookie_name , $cookie_value , time () + ( 86400 * 30 ), \"/\" ); ?> <html> <body> <?php if ( ! isset ( $_COOKIE [ $cookie_name ])) { echo \"Cookie named '\" . $cookie_name . \"' is not set!\" ; } else { echo \"Cookie '\" . $cookie_name . \"' is set!<br>\" ; echo \"Value is: \" . $_COOKIE [ $cookie_name ]; } ?> </body> </html> Delete a Cookie When you want to delete a cookie so a browser doesn\u2019t send it back to the server. For example, you\u2019re using cookies to track whether a user is logged in to your website, and a user logs out. To delete a cookie, use the setcookie() function with an expiration date in the past: <?php // set the expiration date to one hour ago setcookie ( \"user\" , \"\" , time () - 3600 ); ?> <html> <body> <?php echo \"Cookie 'user' is deleted.\" ; ?> </body> </html> Check if Cookies are Enabled The following example creates a small script that checks whether cookies are enabled. First, try to create a test cookie with the setcookie() function, then count the $_COOKIE array variable: <?php setcookie ( \"test_cookie\" , \"test\" , time () + 3600 , '/' ); ?> <html> <body> <?php if ( count ( $_COOKIE ) > 0 ) { echo \"Cookies are enabled.\" ; } else { echo \"Cookies are disabled.\" ; } ?> </body> </html> Using Cookie Authentication When you want more control over the user login procedure, such as presenting your own login form. Store authentication status in a cookie or as part of a session. When a user logs in successfully, put her username (or another unique value) in a cookie. Also include a hash of the username and a secret word so a user can\u2019t just make up an authentication cookie with a username in it: <?php $secret_word = 'if i ate spinach' ; if ( validate ( $_POST [ 'username' ], $_POST [ 'password' ])) { setcookie ( 'login' , $_POST [ 'username' ] . ',' . md5 ( $_POST [ 'username' ] . $secret_word )); } ?>","title":"Cookies"},{"location":"Func/phpCookie/#setcookie","text":"When you want to set a cookie so that your website can recognize subsequent requests from the same web browser. Call setcookie() with a cookie name and value: setcookie($name, $value = \"\", $expire = \"\", $path = \"\", $domain = \"\", $secure = \"\", $httponly = \"\"); Only the name parameter is required. All other parameters are optional. Cookies are sent with the HTTP headers, so if you\u2019re not using output buffering, set cookie() must be called before any output is generated. . The third argument to setcookie() is an expiration time, expressed as an epoch timestamp. For example, this cookie expires at noon GMT on December 3, 2014: setcookie('flavor','chocolate chip',1417608000); If the third argument to setcookie() is missing (or empty), the cookie expires when the browser is closed. Also, many systems can\u2019t handle a cookie expiration time greater than 2147483647, because that\u2019s the largest epoch timestamp that fits in a 32-bit integer. The fourth argument to setcookie() is a path. The cookie is sent back to the server only when pages whose path begin with the specified string are requested. For example, a cookie sent back only to pages whose path begins with /products/: setcookie('flavor','chocolate chip',1417608000,'/products/'); The page that\u2019s setting the cookie doesn\u2019t have to have a URL whose path component begins with /products/, but the cookie is sent back only to pages that do. The fifth argument to setcookie() is a domain. The cookie is sent back to the server only when pages whose hostname ends with the specified domain are requested. Here the first cookie is sent back to all hosts in the example.com domain, but the second cookie is sent only with requests to the host carlos.example.com: setcookie('flavor','chocolate chip',1417608000,'/products/','example.com'); setcookie('flavor','chocolate chip',1417608000,'/products/','carlos.example.com'); If the first cookie\u2019s domain was just example.com instead of .example.com, it would be sent only to the single host example.com (and not www.example.com or carlos.example.com). If a domain is not specified when setcookie() is called, the browser sends back the cookie only with requests to the same hostname as the request in which the cookie was set. The last optional argument to setcookie() is a flag that, if set to true, instructs the browser only to send the cookie over an SSL connection. This can be useful if the cookie contains sensitive information, but remember that the data in the cookie is stored as unencrypted plain text on the user\u2019s computer. Different browsers handle cookies in slightly different ways, especially with regard to how strictly they match path and domain strings and how they determine priority between different cookies of the same name.","title":"setcookie()"},{"location":"Func/phpCookie/#createretrieve-a-cookie","text":"The following example creates a cookie named \"user\" with the value \"John Doe\". The cookie will expire after 30 days (86400 * 30). The \"/\" means that the cookie is available in entire website (otherwise, select the directory you prefer). We then retrieve the value of the cookie \"user\" (using the global variable $_COOKIE). We also use the isset() function to find out if the cookie is set: <?php $cookie_name = \"user\" ; $cookie_value = \"John Doe\" ; setcookie ( $cookie_name , $cookie_value , time () + ( 86400 * 30 ), \"/\" ); // 86400 = 1 day ?> <html> <body> <?php if ( ! isset ( $_COOKIE [ $cookie_name ])) { echo \"Cookie named '\" . $cookie_name . \"' is not set!\" ; } else { echo \"Cookie '\" . $cookie_name . \"' is set!<br>\" ; echo \"Value is: \" . $_COOKIE [ $cookie_name ]; } ?> </body> </html> The setcookie() function must appear BEFORE the html tag. The value of the cookie is automatically URLencoded when sending the cookie, and automatically decoded when received (to prevent URLencoding, use setrawcookie() instead). A cookie\u2019s value isn\u2019t available in $_COOKIE during the request in which the cookie is set. In other words, calling the setcookie() function doesn\u2019t alter the value of $_COOKIE. On subsequent requests, however, each cookie sent back to the server is stored in $_COOKIE. When a browser sends a cookie back to the server, it sends only the value. You can\u2019t access the cookie\u2019s domain, path, expiration time, or secure status through $_COOKIE because the browser doesn\u2019t send that to the server. To print the names and values of all cookies sent in a particular request, loop through the $_COOKIE array: <?php foreach ( $_COOKIE as $cookie_name => $cookie_value ) { print \" $cookie_name = $cookie_value <br/>\" ; } ?>","title":"Create/Retrieve a Cookie"},{"location":"Func/phpCookie/#modify-a-cookie-value","text":"To modify a cookie, just set (again) the cookie using the setcookie() function: <?php $cookie_name = \"user\" ; $cookie_value = \"Alex Porter\" ; setcookie ( $cookie_name , $cookie_value , time () + ( 86400 * 30 ), \"/\" ); ?> <html> <body> <?php if ( ! isset ( $_COOKIE [ $cookie_name ])) { echo \"Cookie named '\" . $cookie_name . \"' is not set!\" ; } else { echo \"Cookie '\" . $cookie_name . \"' is set!<br>\" ; echo \"Value is: \" . $_COOKIE [ $cookie_name ]; } ?> </body> </html>","title":"Modify a Cookie Value"},{"location":"Func/phpCookie/#delete-a-cookie","text":"When you want to delete a cookie so a browser doesn\u2019t send it back to the server. For example, you\u2019re using cookies to track whether a user is logged in to your website, and a user logs out. To delete a cookie, use the setcookie() function with an expiration date in the past: <?php // set the expiration date to one hour ago setcookie ( \"user\" , \"\" , time () - 3600 ); ?> <html> <body> <?php echo \"Cookie 'user' is deleted.\" ; ?> </body> </html>","title":"Delete a Cookie"},{"location":"Func/phpCookie/#check-if-cookies-are-enabled","text":"The following example creates a small script that checks whether cookies are enabled. First, try to create a test cookie with the setcookie() function, then count the $_COOKIE array variable: <?php setcookie ( \"test_cookie\" , \"test\" , time () + 3600 , '/' ); ?> <html> <body> <?php if ( count ( $_COOKIE ) > 0 ) { echo \"Cookies are enabled.\" ; } else { echo \"Cookies are disabled.\" ; } ?> </body> </html>","title":"Check if Cookies are Enabled"},{"location":"Func/phpCookie/#using-cookie-authentication","text":"When you want more control over the user login procedure, such as presenting your own login form. Store authentication status in a cookie or as part of a session. When a user logs in successfully, put her username (or another unique value) in a cookie. Also include a hash of the username and a secret word so a user can\u2019t just make up an authentication cookie with a username in it: <?php $secret_word = 'if i ate spinach' ; if ( validate ( $_POST [ 'username' ], $_POST [ 'password' ])) { setcookie ( 'login' , $_POST [ 'username' ] . ',' . md5 ( $_POST [ 'username' ] . $secret_word )); } ?>","title":"Using Cookie Authentication"},{"location":"Func/phpDate/","text":"The PHP date() function is used to format a date and/or a time. The function date() (and the DateTime object) can produce a variety of formatted time and date strings. Date() Function The PHP date() function formats a timestamp to a more readable date and time. date(format,timestamp) Parameter Description format Required. Specifies the format of the timestamp timestamp Optional. Specifies a timestamp. Default is the current date and time. A timestamp is a sequence of characters, denoting the date and/or time at which a certain event occurred. Get a Date The required format parameter of the date() function specifies how to format the date (or time). Here are some characters that are commonly used for dates: d - Represents the day of the month (01 to 31) m - Represents a month (01 to 12) Y - Represents a year (in four digits) l (lowercase 'L') - Represents the day of the week Other characters, like\"/\", \".\", or \"-\" can also be inserted between the characters to add additional formatting. <?php echo \"Today is \" . date ( \"Y/m/d\" ) . \"<br>\" ; echo \"Today is \" . date ( \"Y.m.d\" ) . \"<br>\" ; echo \"Today is \" . date ( \"Y-m-d\" ) . \"<br>\" ; echo \"Today is \" . date ( \"l\" ); & copy ; 2010 -<? php echo date ( \"Y\" ); ?> #Automatic Copyright Year ?> Get a Time Here are some characters that are commonly used for times: H - 24-hour format of an hour (00 to 23) h - 12-hour format of an hour with leading zeros (01 to 12) i - Minutes with leading zeros (00 to 59) s - Seconds with leading zeros (00 to 59) a - Lowercase Ante meridiem and Post meridiem (am or pm) <?php echo \"The time is \" . date ( \"h:i:sa\" ); ?> PHP date() function will return the current date/time of the server. Get Your Time Zone If the time you got back from the code is not correct, it's probably because your server is in another country or set up for a different timezone. So, if you need the time to be correct according to a specific location, you can set the timezone you want to use. <?php date_default_timezone_set ( 'America/New_York' ); echo \"The time is \" . date ( \"h:i:sa\" ); ?> DateTime Object The DateTime object can be used to format a date and/or a time. <?php $d = new DateTime (); echo $d -> format ( 'Y-m-d H:i:s' ); ?> Use getdate() or localtime() if you want time parts. <?php $now_1 = getdate (); $now_2 = localtime (); print \" { $now_1 [ 'hours' ] } : { $now_1 [ 'minutes' ] } : { $now_1 [ 'seconds' ] } \\n \" ; print \" $now_2[2] : $now_2[1] : $now_2[0] \" ; ?> 18:23:45 18:23:45 Use DateTime::createFromFormat() if you want date parts. <?php // 7:45:03 PM on March 10, 1975, in a particular timezone $then = DateTime :: createFromFormat ( DateTime :: ATOM , \"1975-03-10T19:45:03-04:00\" ); ?> The createFromFormat() method of the DateTime class behaves more flexibly. Instead of accepting already-chopped-up time parts, you give it a formatted time or date string and tell it the structure of that string. It then decomposes the parts properly and calculates the correct timestamp. In addition to the format strings listed in Recipe 3.4 that the date() function understands, createFromFormat() also uses the characters listed below. Character Meaning space or tab # Any one of the separation bytes ;, :, /, ., ,, -, (, ) ;, :, /, ., ,, -, (, ) Literal character ? Any byte (not a character, just one byte) * Any number of bytes until the next digit or separation character ! Resetall fieldsto\u201cstartof Unixepoch\u201dvalues(without this,anyunspecifiedfieldswillbeset tothecurrent date/time) | Reset any unparsed fields to \u201cstart of Unix epoch\u201d values + Treat unparsed trailing data as a warning rather than an error <?php $text = \"Birthday: May 11, 1918.\" ; $when = DateTime :: createFromFormat ( \"*: F j, Y.|\" , $text ); // $formatted is \"Saturday, 11-May-18 00:00:00 UTC\" $formatted = $when -> format ( DateTime :: RFC850 ); ?> <?php $when = new DateTime ( \"@163727100\" ); $when -> setTimezone ( new DateTimeZone ( 'America/Los_Angeles' )); $parts = explode ( '/' , $when -> format ( 'Y/m/d/H/i/s' )); // Year, month, day, hour, minute, second // $parts is array('1975', '03','10', '16','45', '00')) ?> The @ character tells DateTime that the rest of the argument to the constructor is an epoch timestamp. When specifying a timestamp as the initial value, DateTime ignores any time zone also passed to the constructor, so setting that requires an additional call to setTimezone(). Once that\u2019s done, format() can generate any parts you need. getdate() Both localtime() and getdate() return arrays whose elements are the different pieces of the specified date and time. The associative array getdate() returns the key/value pairs listed below. Key Value seconds Seconds minutes Minutes hours Hours mday Day of the month wday Day of the week, numeric (Sunday is 0, Saturday is 6) mon Month, numeric year Year, numeric (4 digits) yday Day of the year, numeric (e.g., 299) weekday Day of the week, textual, full (e.g., \u201cFriday\u201d) month Month, textual, full (e.g., \u201cJanuary\u201d) 0 Seconds since epoch (what time() returns) <?php //Finding the month, day, and year $a = getdate (); printf ( '%s %d, %d' , $a [ 'month' ], $a [ 'mday' ], $a [ 'year' ]); ?> January 10, 2023 localtime() The function localtime() also returns an array of time and date parts. It also takes an epoch timestamp as an optional first argument, as well as a boolean as an optional second argument. If that second argument is true, localtime() returns an associative array instead of a numerically indexed array. The keys of that array are the same as the members of the tm_struct structure that the C function localtime() returns, as shown below. Numeric position Key Value 0 tm_sec Second 1 tm_min Minutes 2 tm_hour Hour 3 tm_mday Day of the month 4 tm_mon Month of the year (January is 0) 5 tm_year Years since 1900 6 tm_wday Day of the week (Sunday is 0) 7 tm_yday Day of the year 8 tm_isdst Is daylight saving time in effect? <?php $a = localtime (); $a [ 4 ] += 1 ; $a [ 5 ] += 1900 ; print \" $a[4] / $a[3] / $a[5] \" ; ?> 1/10/2023 The month is incremented by 1 before printing because localtime() starts counting months with 0 for January, but we want to display 1 if the current month is January. Similarly, the year is incremented by 1900 because localtime() starts counting years with 0 for 1900. The functions getdate() and localtime() both use the same internal implementation to generate the returned date and time parts. They differ only in the format of the returned arrays and in some of the information they return. (For example, local time() includes whether DST is in effect at the specified time.) mktime() The optional timestamp parameter in the date() function specifies a timestamp. If omitted, the current date and time will be used (as in the examples above). The PHP mktime() function returns the Unix timestamp for a date. The Unix timestamp contains the number of seconds between the Unix Epoch (January 1 1970 00:00:00 GMT) and the time specified. Use mktime() if your time and date parts are in the local time zone. Syntax mktime(hour, minute, second, month, day, year) <?php $d = mktime ( 11 , 14 , 54 , 8 , 12 , 2014 ); echo \"Created date is \" . date ( \"Y-m-d h:i:sa\" , $d ); ?> The functions mktime() and gmmktime() each take a date and time\u2019s parts (hour, minute, second, month, day, year) and return the appropriate Unix epoch timestamp. The components are treated as local time by mktime(), while gmmktime() treats them as a date and time in UTC. gmktime() Use gmmktime() if your time and date parts are in the GMT time zone. <?php // 7:45:03 PM on March 10, 1975, in GMT $then = gmmktime ( 19 , 45 , 3 , 3 , 10 , 1975 ); ?> Create a Date From a String With strtotime() The PHP strtotime() function is used to convert a human readable date string into a Unix timestamp (the number of seconds since January 1 1970 00:00:00 GMT). Syntax strtotime(time, now) <?php $d = strtotime ( \"10:30pm April 15 2014\" ); echo \"Created date is \" . date ( \"Y-m-d h:i:sa\" , $d ); ?> <?php $d = strtotime ( \"tomorrow\" ); echo date ( \"Y-m-d h:i:sa\" , $d ) . \"<br>\" ; $d = strtotime ( \"next Saturday\" ); echo date ( \"Y-m-d h:i:sa\" , $d ) . \"<br>\" ; $d = strtotime ( \"+3 Months\" ); echo date ( \"Y-m-d h:i:sa\" , $d ) . \"<br>\" ; ?> <?php $d = strtotime ( \"last Sunday\" ); echo date ( \"Y-m-d h:i:sa\" , $d ) . \"<br>\" ; $startdate = strtotime ( \"Saturday\" ); $enddate = strtotime ( \"+6 weeks\" , $startdate ); while ( $startdate < $enddate ) { echo date ( \"M d\" , $startdate ) . \"<br>\" ; $startdate = strtotime ( \"+1 week\" , $startdate ); } ?> <?php $d1 = strtotime ( \"July 04\" ); $d2 = ceil (( $d1 - time ()) / 60 / 60 / 24 ); echo \"There are \" . $d2 . \" days until 4th of July.\" ; ?> If you find yourself with a date or time string with a known format, but that is not parseable by strtotime(), you can still create DateTime objects based on the string by using DateTime::createFromFormat(). <?php $dates = array ( '01/02/2015' , '03/06/2015' , '09/08/2015' ); foreach ( $dates as $date ) { $default = new DateTime ( $date ); $day_first = DateTime :: createFromFormat ( 'd/m/Y|' , $date ); printf ( \"The default interpretation is %s \\n but day-first is %s. \\n \" , $default -> format ( DateTime :: RFC850 ), $day_first -> format ( DateTime :: RFC850 )); } ?> The default interpretation is Friday, 02-Jan-15 00:00:00 UTC but day-first is Sunday, 01-Feb-15 00:00:00 UTC. The default interpretation is Friday, 06-Mar-15 00:00:00 UTC but day-first is Wednesday, 03-Jun-15 00:00:00 UTC. The default interpretation is Tuesday, 08-Sep-15 00:00:00 UTC but day-first is Sunday, 09-Aug-15 00:00:00 UTC. Printing a Date or Time in a Specified Format Both date() and DateTime::format() use the same code internally for generating formatted time and date strings. They are flexible functions that can produce a formatted time string with a variety of components. The format characters for these functions are listed below. Type Character Description Range or examples Hour H Hour, numeric, 24-hour clock, leading zero 00\u201323 Hour h Hour, numeric, 12-hour clock, leading zero 01\u201312 Hour G Hour, numeric, 24-hour clock 0\u201323 Hour g Hour, numeric, 12-hour clock 1\u201312 Hour A Ante/Post Meridiem designation AM, PM Hour a Ante/Post Meridiem designation am, pm Minute i Minute, numeric 00\u201359 Second s Second, numeric 00\u201359 Second u Microseconds, string 000000\u2013999999 Day d Day of the month, numeric, leading zero 01\u201331 Day j Day of the month, numeric 1\u201331 Day z Day of the year, numeric 0\u2013365 Day N Day of the week, numeric (Monday is 1) 1\u20137 Day w Day of the week, numeric (Sunday is 0) 0\u20136 Day S Englishordinalsuffixfordayofthemonth,textual \u201cst,\u201d \u201cth,\u201d \u201cnd,\u201d \u201crd\u201d Week D Abbreviated weekday name Mon, Tue, Wed, Thu, Fri, Sat, Sun Week l Full weekday name Monday, Tuesday, Wednesday Thursday, Friday, Saturday, Sunday Week W ISO8601:1988 week number in the year,numeric, week 1 is the first week that has at least 4 days in the current year, Monday is the first day of the week 1\u201353 Month F Full month name January\u2013December Month M Abbreviated month name Jan\u2013Dec Month m Month, numeric, leading zero 01\u201312 Month n Month, numeric 1\u201312 Month t Month length in days, numeric 28, 29, 30, 31 Year Y Year, numeric, including century e.g., 2016 Year y Year without century, numeric e.g., 16 Year o ISO 8601 year with century; numeric; the fourdigityearcorrespondingtotheISOweek number; sameas Y exceptiftheISOweek number belongs to the previous or next year, that year is used instead e.g. 2016 Year L Leap year flag (yes is 1) 0, 1 Time zone O Hour offset from GMT, \u00b1HHMM (e.g., \u22120400, +0230) \u22121200\u2013+1200 Time zone P Like O, but with a colon \u221212:00 \u2013+12:00 Time zone Z Seconds offset from GMT; west of GMT is negative, east of GMT is positive -43200\u201350400 Time zone e Time zone identifier e.g., America/New_York Time zone T Time zone abbreviation e.g., EDT Time zone I Daylight saving time flag (yes is 1) 0, 1 Compound c ISO 8601\u2013formatted date and time e.g., 2012-09-06T15:29:34+0000 Compound r RFC 2822\u2013formatted date e.g., Thu, 22 Aug 2002 16:01:07 +0200 Other U Seconds since the Unix epoch 0\u22122147483647 Other B Swatch Internet time 000\u2013999 Format characters such as F, M, or D, which generate words, not numbers, produce output in English. There are also some handy constants for common date formats that represent the format string to be passed to date() or DateTime::format(). These constants are listed below. Constant Class constant Value Example Usage DATE_ATOM DateTime::ATOM Y-m-d TH:i:sP 2013-02-22 T20:25:31+00:00 Atom Syndication format DATE_ISO8601 DateTime::ISO8601 Y-m-d TH:i:sO 2013-02-22 T20:25:31+0000 ISO 8601 DATE_RFC822 DateTime::RFC822 D, d M y H:i:s O Fri, 22 Feb 13 20:25:31 +0000 Email messages DATE_RFC850 DateTime::RFC850 l, d-M-y H:i:s T Friday, 22-Feb-13 20:25:31 UTC Usenet messages DATE_RFC1036 DateTime::RFC1036 D, d M y H:i:s O Fri, 22 Feb 13 20:25:31 +0000 Usenet messages DATE_RFC1123 DateTime::RFC1123 D, d M Y H:i:s O Fri, 22 Feb 2013 20:25:31 +0000 DATE_RFC2822 DateTime::RFC2822 D, d M Y H:i:s O Fri, 22 Feb 2013 20:25:31 +0000 E-mail messages DATE_RFC3339 DateTime::RFC3339 Y-m-d TH:i:sP 2013-02-22 T20:25:31+00:00 DATE_RSS DateTime::RSS D, d M Y H:i:s O Fri, 22 Feb 2013 20:25:31 +0000 RSS feeds DATE_W3C DateTime::W3C Y-m-d TH:i:sP 2013-02-22 T20:25:31+00:00 Calculating the difference between two dates <?php // 7:32:56 pm on May 10, 1965 $first = new DateTime ( \"1965-05-10 7:32:56pm\" , new DateTimeZone ( 'America/New_York' )); // 4:29:11 am on November 20, 1962 $second = new DateTime ( \"1962-11-20 4:29:11am\" , new DateTimeZone ( 'America/New_York' )); $diff = $second -> diff ( $first ); printf ( \"The two dates have %d weeks, %s days, \" . \"%d hours, %d minutes, and %d seconds \" . \"elapsed between them.\" , floor ( $diff -> format ( '%a' ) / 7 ), $diff -> format ( '%a' ) % 7 , $diff -> format ( '%h' ), $diff -> format ( '%i' ), $diff -> format ( '%s' )); ?> The two dates have 128 weeks, 6 days, 15 hours, 3 minutes, and 45 seconds elapsed between them. <?php //Calculating the elapsed-time difference between two dates // 7:32:56 pm on May 10, 1965 $first_local = new DateTime ( \"1965-05-10 7:32:56pm\" , new DateTimeZone ( 'America/New_York' )); // 4:29:11 am on November 20, 1962 $second_local = new DateTime ( \"1962-11-20 4:29:11am\" , new DateTimeZone ( 'America/New_York' )); $first = new DateTime ( '@' . $first_local -> getTimestamp ()); $second = new DateTime ( '@' . $second_local -> getTimestamp ()); $diff = $second -> diff ( $first ); printf ( \"The two dates have %d weeks, %s days, \" . \"%d hours, %d minutes, and %d seconds \" . \"elapsed between them.\" , floor ( $diff -> format ( '%a' ) / 7 ), $diff -> format ( '%a' ) % 7 , $diff -> format ( '%h' ), $diff -> format ( '%i' ), $diff -> format ( '%s' )); ?> The two dates have 128 weeks, 6 days, 14 hours, 3 minutes, and 45 seconds elapsed between them. The DateTime objects created with a format string of @ plus an epoch timestamp always have a time zone of UTC, so their difference is not affected by any daylight saving time or other local time adjustments. Adding and subtracting a date interval The add() and sub() methods of DateTime modify the DateTime method they are called on by whatever amount is specified in the interval. The average human gestation time is 40 weeks, so an interval of P40W walks back the birthday to 40 weeks earlier, approximating conception time. <?php $birthday = new DateTime ( 'March 10, 1975' ); // When is 40 weeks before $birthday? $human_gestation = new DateInterval ( 'P40W' ); $birthday -> sub ( $human_gestation ); print $birthday -> format ( DateTime :: RFC850 ); print \" \\n \" ; // What if it was an elephant, not a human? $elephant_gestation = new DateInterval ( 'P616D' ); $birthday -> add ( $elephant_gestation ); print $birthday -> format ( DateTime :: RFC850 ); ?> A DateTime object\u2019s modify() method accepts, instead of a DateInterval object, a string that strtotime() understands. This provides an easy way to find relative dates like \u201cnext Tuesday\u201d from a given object. <?php $year = 2016 ; $when = new DateTime ( \"November 1, $year \" ); if ( $when -> format ( 'D' ) != 'Mon' ) { $when -> modify ( \"next Monday\" ); } $when -> modify ( \"next Tuesday\" ); print \"In $year , US election day is on the \" . $when -> format ( 'jS' ) . ' day of November.' ; ?> Finding the Day in a Week, Month, or Year When you want to know the day or week of the year, the day of the week, or the day of the month. For example, you want to print a special message every Monday, or on the first of every month. <?php print \"Today is day \" . date ( 'd' ) . ' of the month and ' . date ( 'z' ) . ' of the year.' ; print \" \\n \" ; $birthday = new DateTime ( 'January 17, 1706' , new DateTimeZone ( 'America/New_York' )); print \"Benjamin Franklin was born on a \" . $birthday -> format ( 'l' ) . \", \" . \"day \" . $birthday -> format ( 'N' ) . \" of the week.\" ; ?> The functions date() and DateTime::format() use the same format characters. Type Character Description Range Day d Day of the month, numeric, leading zero 01\u201331 Day j Day of the month, numeric 1\u201331 Day z Day of the year, numeric 0\u2013365 Day N Day of the week, numeric (Monday is 1) 1\u20137 Day w Day of the week, numeric (Sunday is 0) 0\u20136 Day S English ordinal suffix for day of the month, textual st, th,nd, rd Week D Abbreviated weekday name Mon, Tue, Wed, Thu, Fri, Sat, Sun Week l Full weekday name Monday, Tuesday, Wednesday, Thursday, Friday, Saturday,Sunday Week W ISO 8601:1988 week number in the year, numeric, week 1 is the first week that has at least 4 days in the current year, Monday is the first day of the week 1\u201353 Validating Dates The function checkdate() returns true if $month is between 1 and 12, $year is between 1 and 32767, and $day is between 1 and the correct maximum number of days for $month and $year. Leap years are correctly handled by checkdate(), and dates are rendered using the Gregorian calendar. <?php // $ok is true - March 10, 1993 is a valid date $ok = checkdate ( 3 , 10 , 1993 ); // $not_ok is false - February 30, 1962 is not a valid date $not_ok = checkdate ( 2 , 30 , 1962 ); ?> <?php checkbirthdate () function checkbirthdate ( $month , $day , $year ) { $min_age = 18 ; $max_age = 122 ; if ( ! checkdate ( $month , $day , $year )) { return false ; } $now = new DateTime (); $then_formatted = sprintf ( \"%d-%d-%d\" , $year , $month , $day ); $then = DateTime :: createFromFormat ( \"Y-n-j|\" , $then_formatted ); $age = $now -> diff ( $then ); if (( $age -> y < $min_age ) || ( $age -> y > $max_age )) { return FALSE ; } else { return TRUE ; } } // check December 3, 1974 if ( checkbirthdate ( 12 , 3 , 1974 )) { print \"You may use this web site.\" ; } else { print \"You are too young (or too old!!) to proceed.\" ; } ?> Generating a High-Precision Time When you need to measure time with finer than one-second resolution\u2014for example, to gen\u2010 erate a unique ID or benchmark a function call. <?php $start = microtime ( true ); for ( $i = 0 ; $i < 1000 ; $i ++ ) { preg_match ( '/age=\\d{1,5}/' , $_SERVER [ 'QUERY_STRING' ]); } $end = microtime ( true ); $elapsed = $end - $start ; ?> Generating Time Ranges When you need to generate a range of dates or times. Use the DatePeriod class, available starting with PHP 5.3.0. Its constructor accepts a flexible combination of options that lets you control the range length, time between items in the range, and how many items there are in the range. <?php // Start on August 1 $start = new DateTime ( 'August 1, 2014' ); // End date is exclusive, so this will stop on August 31 $end = new DateTime ( 'September 1, 2014' ); // Go 1 day at a time $interval = new DateInterval ( 'P1D' ); $range1 = new DatePeriod ( $start , $interval , $end ); ?> Here\u2019s another way to do the same thing: <?php // Start on August 1 $start = new DateTime ( 'August 1, 2014' ); // Go 1 day at a time $interval = new DateInterval ( 'P1D' ); // Recur 30 times more after the first occurrence. $recurrences = 30 ; $range2 = new DatePeriod ( $start , $interval , $recurrences ); ?> and a third way: <?php // using the ISO 8601 specified format for describing date ranges $range3 = new DatePeriod ( 'R30/2014-08-01T00:00:00Z/P1D' ); foreach ( $range1 as $d ) { print \"A day in August is \" . $d -> format ( 'd' ) . \" \\n \" ; } ?>","title":"Date/Time"},{"location":"Func/phpDate/#date-function","text":"The PHP date() function formats a timestamp to a more readable date and time. date(format,timestamp) Parameter Description format Required. Specifies the format of the timestamp timestamp Optional. Specifies a timestamp. Default is the current date and time. A timestamp is a sequence of characters, denoting the date and/or time at which a certain event occurred.","title":"Date() Function"},{"location":"Func/phpDate/#get-a-date","text":"The required format parameter of the date() function specifies how to format the date (or time). Here are some characters that are commonly used for dates: d - Represents the day of the month (01 to 31) m - Represents a month (01 to 12) Y - Represents a year (in four digits) l (lowercase 'L') - Represents the day of the week Other characters, like\"/\", \".\", or \"-\" can also be inserted between the characters to add additional formatting. <?php echo \"Today is \" . date ( \"Y/m/d\" ) . \"<br>\" ; echo \"Today is \" . date ( \"Y.m.d\" ) . \"<br>\" ; echo \"Today is \" . date ( \"Y-m-d\" ) . \"<br>\" ; echo \"Today is \" . date ( \"l\" ); & copy ; 2010 -<? php echo date ( \"Y\" ); ?> #Automatic Copyright Year ?>","title":"Get a Date"},{"location":"Func/phpDate/#get-a-time","text":"Here are some characters that are commonly used for times: H - 24-hour format of an hour (00 to 23) h - 12-hour format of an hour with leading zeros (01 to 12) i - Minutes with leading zeros (00 to 59) s - Seconds with leading zeros (00 to 59) a - Lowercase Ante meridiem and Post meridiem (am or pm) <?php echo \"The time is \" . date ( \"h:i:sa\" ); ?> PHP date() function will return the current date/time of the server.","title":"Get a Time"},{"location":"Func/phpDate/#get-your-time-zone","text":"If the time you got back from the code is not correct, it's probably because your server is in another country or set up for a different timezone. So, if you need the time to be correct according to a specific location, you can set the timezone you want to use. <?php date_default_timezone_set ( 'America/New_York' ); echo \"The time is \" . date ( \"h:i:sa\" ); ?>","title":"Get Your Time Zone"},{"location":"Func/phpDate/#datetime-object","text":"The DateTime object can be used to format a date and/or a time. <?php $d = new DateTime (); echo $d -> format ( 'Y-m-d H:i:s' ); ?> Use getdate() or localtime() if you want time parts. <?php $now_1 = getdate (); $now_2 = localtime (); print \" { $now_1 [ 'hours' ] } : { $now_1 [ 'minutes' ] } : { $now_1 [ 'seconds' ] } \\n \" ; print \" $now_2[2] : $now_2[1] : $now_2[0] \" ; ?> 18:23:45 18:23:45 Use DateTime::createFromFormat() if you want date parts. <?php // 7:45:03 PM on March 10, 1975, in a particular timezone $then = DateTime :: createFromFormat ( DateTime :: ATOM , \"1975-03-10T19:45:03-04:00\" ); ?> The createFromFormat() method of the DateTime class behaves more flexibly. Instead of accepting already-chopped-up time parts, you give it a formatted time or date string and tell it the structure of that string. It then decomposes the parts properly and calculates the correct timestamp. In addition to the format strings listed in Recipe 3.4 that the date() function understands, createFromFormat() also uses the characters listed below. Character Meaning space or tab # Any one of the separation bytes ;, :, /, ., ,, -, (, ) ;, :, /, ., ,, -, (, ) Literal character ? Any byte (not a character, just one byte) * Any number of bytes until the next digit or separation character ! Resetall fieldsto\u201cstartof Unixepoch\u201dvalues(without this,anyunspecifiedfieldswillbeset tothecurrent date/time) | Reset any unparsed fields to \u201cstart of Unix epoch\u201d values + Treat unparsed trailing data as a warning rather than an error <?php $text = \"Birthday: May 11, 1918.\" ; $when = DateTime :: createFromFormat ( \"*: F j, Y.|\" , $text ); // $formatted is \"Saturday, 11-May-18 00:00:00 UTC\" $formatted = $when -> format ( DateTime :: RFC850 ); ?> <?php $when = new DateTime ( \"@163727100\" ); $when -> setTimezone ( new DateTimeZone ( 'America/Los_Angeles' )); $parts = explode ( '/' , $when -> format ( 'Y/m/d/H/i/s' )); // Year, month, day, hour, minute, second // $parts is array('1975', '03','10', '16','45', '00')) ?> The @ character tells DateTime that the rest of the argument to the constructor is an epoch timestamp. When specifying a timestamp as the initial value, DateTime ignores any time zone also passed to the constructor, so setting that requires an additional call to setTimezone(). Once that\u2019s done, format() can generate any parts you need.","title":"DateTime Object"},{"location":"Func/phpDate/#getdate","text":"Both localtime() and getdate() return arrays whose elements are the different pieces of the specified date and time. The associative array getdate() returns the key/value pairs listed below. Key Value seconds Seconds minutes Minutes hours Hours mday Day of the month wday Day of the week, numeric (Sunday is 0, Saturday is 6) mon Month, numeric year Year, numeric (4 digits) yday Day of the year, numeric (e.g., 299) weekday Day of the week, textual, full (e.g., \u201cFriday\u201d) month Month, textual, full (e.g., \u201cJanuary\u201d) 0 Seconds since epoch (what time() returns) <?php //Finding the month, day, and year $a = getdate (); printf ( '%s %d, %d' , $a [ 'month' ], $a [ 'mday' ], $a [ 'year' ]); ?> January 10, 2023","title":"getdate()"},{"location":"Func/phpDate/#localtime","text":"The function localtime() also returns an array of time and date parts. It also takes an epoch timestamp as an optional first argument, as well as a boolean as an optional second argument. If that second argument is true, localtime() returns an associative array instead of a numerically indexed array. The keys of that array are the same as the members of the tm_struct structure that the C function localtime() returns, as shown below. Numeric position Key Value 0 tm_sec Second 1 tm_min Minutes 2 tm_hour Hour 3 tm_mday Day of the month 4 tm_mon Month of the year (January is 0) 5 tm_year Years since 1900 6 tm_wday Day of the week (Sunday is 0) 7 tm_yday Day of the year 8 tm_isdst Is daylight saving time in effect? <?php $a = localtime (); $a [ 4 ] += 1 ; $a [ 5 ] += 1900 ; print \" $a[4] / $a[3] / $a[5] \" ; ?> 1/10/2023 The month is incremented by 1 before printing because localtime() starts counting months with 0 for January, but we want to display 1 if the current month is January. Similarly, the year is incremented by 1900 because localtime() starts counting years with 0 for 1900. The functions getdate() and localtime() both use the same internal implementation to generate the returned date and time parts. They differ only in the format of the returned arrays and in some of the information they return. (For example, local time() includes whether DST is in effect at the specified time.)","title":"localtime()"},{"location":"Func/phpDate/#mktime","text":"The optional timestamp parameter in the date() function specifies a timestamp. If omitted, the current date and time will be used (as in the examples above). The PHP mktime() function returns the Unix timestamp for a date. The Unix timestamp contains the number of seconds between the Unix Epoch (January 1 1970 00:00:00 GMT) and the time specified. Use mktime() if your time and date parts are in the local time zone. Syntax mktime(hour, minute, second, month, day, year) <?php $d = mktime ( 11 , 14 , 54 , 8 , 12 , 2014 ); echo \"Created date is \" . date ( \"Y-m-d h:i:sa\" , $d ); ?> The functions mktime() and gmmktime() each take a date and time\u2019s parts (hour, minute, second, month, day, year) and return the appropriate Unix epoch timestamp. The components are treated as local time by mktime(), while gmmktime() treats them as a date and time in UTC.","title":"mktime()"},{"location":"Func/phpDate/#gmktime","text":"Use gmmktime() if your time and date parts are in the GMT time zone. <?php // 7:45:03 PM on March 10, 1975, in GMT $then = gmmktime ( 19 , 45 , 3 , 3 , 10 , 1975 ); ?>","title":"gmktime()"},{"location":"Func/phpDate/#create-a-date-from-a-string-with-strtotime","text":"The PHP strtotime() function is used to convert a human readable date string into a Unix timestamp (the number of seconds since January 1 1970 00:00:00 GMT). Syntax strtotime(time, now) <?php $d = strtotime ( \"10:30pm April 15 2014\" ); echo \"Created date is \" . date ( \"Y-m-d h:i:sa\" , $d ); ?> <?php $d = strtotime ( \"tomorrow\" ); echo date ( \"Y-m-d h:i:sa\" , $d ) . \"<br>\" ; $d = strtotime ( \"next Saturday\" ); echo date ( \"Y-m-d h:i:sa\" , $d ) . \"<br>\" ; $d = strtotime ( \"+3 Months\" ); echo date ( \"Y-m-d h:i:sa\" , $d ) . \"<br>\" ; ?> <?php $d = strtotime ( \"last Sunday\" ); echo date ( \"Y-m-d h:i:sa\" , $d ) . \"<br>\" ; $startdate = strtotime ( \"Saturday\" ); $enddate = strtotime ( \"+6 weeks\" , $startdate ); while ( $startdate < $enddate ) { echo date ( \"M d\" , $startdate ) . \"<br>\" ; $startdate = strtotime ( \"+1 week\" , $startdate ); } ?> <?php $d1 = strtotime ( \"July 04\" ); $d2 = ceil (( $d1 - time ()) / 60 / 60 / 24 ); echo \"There are \" . $d2 . \" days until 4th of July.\" ; ?> If you find yourself with a date or time string with a known format, but that is not parseable by strtotime(), you can still create DateTime objects based on the string by using DateTime::createFromFormat(). <?php $dates = array ( '01/02/2015' , '03/06/2015' , '09/08/2015' ); foreach ( $dates as $date ) { $default = new DateTime ( $date ); $day_first = DateTime :: createFromFormat ( 'd/m/Y|' , $date ); printf ( \"The default interpretation is %s \\n but day-first is %s. \\n \" , $default -> format ( DateTime :: RFC850 ), $day_first -> format ( DateTime :: RFC850 )); } ?> The default interpretation is Friday, 02-Jan-15 00:00:00 UTC but day-first is Sunday, 01-Feb-15 00:00:00 UTC. The default interpretation is Friday, 06-Mar-15 00:00:00 UTC but day-first is Wednesday, 03-Jun-15 00:00:00 UTC. The default interpretation is Tuesday, 08-Sep-15 00:00:00 UTC but day-first is Sunday, 09-Aug-15 00:00:00 UTC.","title":"Create a Date From a String With strtotime()"},{"location":"Func/phpDate/#printing-a-date-or-time-in-a-specified-format","text":"Both date() and DateTime::format() use the same code internally for generating formatted time and date strings. They are flexible functions that can produce a formatted time string with a variety of components. The format characters for these functions are listed below. Type Character Description Range or examples Hour H Hour, numeric, 24-hour clock, leading zero 00\u201323 Hour h Hour, numeric, 12-hour clock, leading zero 01\u201312 Hour G Hour, numeric, 24-hour clock 0\u201323 Hour g Hour, numeric, 12-hour clock 1\u201312 Hour A Ante/Post Meridiem designation AM, PM Hour a Ante/Post Meridiem designation am, pm Minute i Minute, numeric 00\u201359 Second s Second, numeric 00\u201359 Second u Microseconds, string 000000\u2013999999 Day d Day of the month, numeric, leading zero 01\u201331 Day j Day of the month, numeric 1\u201331 Day z Day of the year, numeric 0\u2013365 Day N Day of the week, numeric (Monday is 1) 1\u20137 Day w Day of the week, numeric (Sunday is 0) 0\u20136 Day S Englishordinalsuffixfordayofthemonth,textual \u201cst,\u201d \u201cth,\u201d \u201cnd,\u201d \u201crd\u201d Week D Abbreviated weekday name Mon, Tue, Wed, Thu, Fri, Sat, Sun Week l Full weekday name Monday, Tuesday, Wednesday Thursday, Friday, Saturday, Sunday Week W ISO8601:1988 week number in the year,numeric, week 1 is the first week that has at least 4 days in the current year, Monday is the first day of the week 1\u201353 Month F Full month name January\u2013December Month M Abbreviated month name Jan\u2013Dec Month m Month, numeric, leading zero 01\u201312 Month n Month, numeric 1\u201312 Month t Month length in days, numeric 28, 29, 30, 31 Year Y Year, numeric, including century e.g., 2016 Year y Year without century, numeric e.g., 16 Year o ISO 8601 year with century; numeric; the fourdigityearcorrespondingtotheISOweek number; sameas Y exceptiftheISOweek number belongs to the previous or next year, that year is used instead e.g. 2016 Year L Leap year flag (yes is 1) 0, 1 Time zone O Hour offset from GMT, \u00b1HHMM (e.g., \u22120400, +0230) \u22121200\u2013+1200 Time zone P Like O, but with a colon \u221212:00 \u2013+12:00 Time zone Z Seconds offset from GMT; west of GMT is negative, east of GMT is positive -43200\u201350400 Time zone e Time zone identifier e.g., America/New_York Time zone T Time zone abbreviation e.g., EDT Time zone I Daylight saving time flag (yes is 1) 0, 1 Compound c ISO 8601\u2013formatted date and time e.g., 2012-09-06T15:29:34+0000 Compound r RFC 2822\u2013formatted date e.g., Thu, 22 Aug 2002 16:01:07 +0200 Other U Seconds since the Unix epoch 0\u22122147483647 Other B Swatch Internet time 000\u2013999 Format characters such as F, M, or D, which generate words, not numbers, produce output in English. There are also some handy constants for common date formats that represent the format string to be passed to date() or DateTime::format(). These constants are listed below. Constant Class constant Value Example Usage DATE_ATOM DateTime::ATOM Y-m-d TH:i:sP 2013-02-22 T20:25:31+00:00 Atom Syndication format DATE_ISO8601 DateTime::ISO8601 Y-m-d TH:i:sO 2013-02-22 T20:25:31+0000 ISO 8601 DATE_RFC822 DateTime::RFC822 D, d M y H:i:s O Fri, 22 Feb 13 20:25:31 +0000 Email messages DATE_RFC850 DateTime::RFC850 l, d-M-y H:i:s T Friday, 22-Feb-13 20:25:31 UTC Usenet messages DATE_RFC1036 DateTime::RFC1036 D, d M y H:i:s O Fri, 22 Feb 13 20:25:31 +0000 Usenet messages DATE_RFC1123 DateTime::RFC1123 D, d M Y H:i:s O Fri, 22 Feb 2013 20:25:31 +0000 DATE_RFC2822 DateTime::RFC2822 D, d M Y H:i:s O Fri, 22 Feb 2013 20:25:31 +0000 E-mail messages DATE_RFC3339 DateTime::RFC3339 Y-m-d TH:i:sP 2013-02-22 T20:25:31+00:00 DATE_RSS DateTime::RSS D, d M Y H:i:s O Fri, 22 Feb 2013 20:25:31 +0000 RSS feeds DATE_W3C DateTime::W3C Y-m-d TH:i:sP 2013-02-22 T20:25:31+00:00","title":"Printing a Date or Time in a Specified Format"},{"location":"Func/phpDate/#calculating-the-difference-between-two-dates","text":"<?php // 7:32:56 pm on May 10, 1965 $first = new DateTime ( \"1965-05-10 7:32:56pm\" , new DateTimeZone ( 'America/New_York' )); // 4:29:11 am on November 20, 1962 $second = new DateTime ( \"1962-11-20 4:29:11am\" , new DateTimeZone ( 'America/New_York' )); $diff = $second -> diff ( $first ); printf ( \"The two dates have %d weeks, %s days, \" . \"%d hours, %d minutes, and %d seconds \" . \"elapsed between them.\" , floor ( $diff -> format ( '%a' ) / 7 ), $diff -> format ( '%a' ) % 7 , $diff -> format ( '%h' ), $diff -> format ( '%i' ), $diff -> format ( '%s' )); ?> The two dates have 128 weeks, 6 days, 15 hours, 3 minutes, and 45 seconds elapsed between them. <?php //Calculating the elapsed-time difference between two dates // 7:32:56 pm on May 10, 1965 $first_local = new DateTime ( \"1965-05-10 7:32:56pm\" , new DateTimeZone ( 'America/New_York' )); // 4:29:11 am on November 20, 1962 $second_local = new DateTime ( \"1962-11-20 4:29:11am\" , new DateTimeZone ( 'America/New_York' )); $first = new DateTime ( '@' . $first_local -> getTimestamp ()); $second = new DateTime ( '@' . $second_local -> getTimestamp ()); $diff = $second -> diff ( $first ); printf ( \"The two dates have %d weeks, %s days, \" . \"%d hours, %d minutes, and %d seconds \" . \"elapsed between them.\" , floor ( $diff -> format ( '%a' ) / 7 ), $diff -> format ( '%a' ) % 7 , $diff -> format ( '%h' ), $diff -> format ( '%i' ), $diff -> format ( '%s' )); ?> The two dates have 128 weeks, 6 days, 14 hours, 3 minutes, and 45 seconds elapsed between them. The DateTime objects created with a format string of @ plus an epoch timestamp always have a time zone of UTC, so their difference is not affected by any daylight saving time or other local time adjustments.","title":"Calculating the difference between two dates"},{"location":"Func/phpDate/#adding-and-subtracting-a-date-interval","text":"The add() and sub() methods of DateTime modify the DateTime method they are called on by whatever amount is specified in the interval. The average human gestation time is 40 weeks, so an interval of P40W walks back the birthday to 40 weeks earlier, approximating conception time. <?php $birthday = new DateTime ( 'March 10, 1975' ); // When is 40 weeks before $birthday? $human_gestation = new DateInterval ( 'P40W' ); $birthday -> sub ( $human_gestation ); print $birthday -> format ( DateTime :: RFC850 ); print \" \\n \" ; // What if it was an elephant, not a human? $elephant_gestation = new DateInterval ( 'P616D' ); $birthday -> add ( $elephant_gestation ); print $birthday -> format ( DateTime :: RFC850 ); ?> A DateTime object\u2019s modify() method accepts, instead of a DateInterval object, a string that strtotime() understands. This provides an easy way to find relative dates like \u201cnext Tuesday\u201d from a given object. <?php $year = 2016 ; $when = new DateTime ( \"November 1, $year \" ); if ( $when -> format ( 'D' ) != 'Mon' ) { $when -> modify ( \"next Monday\" ); } $when -> modify ( \"next Tuesday\" ); print \"In $year , US election day is on the \" . $when -> format ( 'jS' ) . ' day of November.' ; ?>","title":"Adding and subtracting a date interval"},{"location":"Func/phpDate/#finding-the-day-in-a-week-month-or-year","text":"When you want to know the day or week of the year, the day of the week, or the day of the month. For example, you want to print a special message every Monday, or on the first of every month. <?php print \"Today is day \" . date ( 'd' ) . ' of the month and ' . date ( 'z' ) . ' of the year.' ; print \" \\n \" ; $birthday = new DateTime ( 'January 17, 1706' , new DateTimeZone ( 'America/New_York' )); print \"Benjamin Franklin was born on a \" . $birthday -> format ( 'l' ) . \", \" . \"day \" . $birthday -> format ( 'N' ) . \" of the week.\" ; ?> The functions date() and DateTime::format() use the same format characters. Type Character Description Range Day d Day of the month, numeric, leading zero 01\u201331 Day j Day of the month, numeric 1\u201331 Day z Day of the year, numeric 0\u2013365 Day N Day of the week, numeric (Monday is 1) 1\u20137 Day w Day of the week, numeric (Sunday is 0) 0\u20136 Day S English ordinal suffix for day of the month, textual st, th,nd, rd Week D Abbreviated weekday name Mon, Tue, Wed, Thu, Fri, Sat, Sun Week l Full weekday name Monday, Tuesday, Wednesday, Thursday, Friday, Saturday,Sunday Week W ISO 8601:1988 week number in the year, numeric, week 1 is the first week that has at least 4 days in the current year, Monday is the first day of the week 1\u201353","title":"Finding the Day in a Week, Month, or Year"},{"location":"Func/phpDate/#validating-dates","text":"The function checkdate() returns true if $month is between 1 and 12, $year is between 1 and 32767, and $day is between 1 and the correct maximum number of days for $month and $year. Leap years are correctly handled by checkdate(), and dates are rendered using the Gregorian calendar. <?php // $ok is true - March 10, 1993 is a valid date $ok = checkdate ( 3 , 10 , 1993 ); // $not_ok is false - February 30, 1962 is not a valid date $not_ok = checkdate ( 2 , 30 , 1962 ); ?> <?php checkbirthdate () function checkbirthdate ( $month , $day , $year ) { $min_age = 18 ; $max_age = 122 ; if ( ! checkdate ( $month , $day , $year )) { return false ; } $now = new DateTime (); $then_formatted = sprintf ( \"%d-%d-%d\" , $year , $month , $day ); $then = DateTime :: createFromFormat ( \"Y-n-j|\" , $then_formatted ); $age = $now -> diff ( $then ); if (( $age -> y < $min_age ) || ( $age -> y > $max_age )) { return FALSE ; } else { return TRUE ; } } // check December 3, 1974 if ( checkbirthdate ( 12 , 3 , 1974 )) { print \"You may use this web site.\" ; } else { print \"You are too young (or too old!!) to proceed.\" ; } ?>","title":"Validating Dates"},{"location":"Func/phpDate/#generating-a-high-precision-time","text":"When you need to measure time with finer than one-second resolution\u2014for example, to gen\u2010 erate a unique ID or benchmark a function call. <?php $start = microtime ( true ); for ( $i = 0 ; $i < 1000 ; $i ++ ) { preg_match ( '/age=\\d{1,5}/' , $_SERVER [ 'QUERY_STRING' ]); } $end = microtime ( true ); $elapsed = $end - $start ; ?>","title":"Generating a High-Precision Time"},{"location":"Func/phpDate/#generating-time-ranges","text":"When you need to generate a range of dates or times. Use the DatePeriod class, available starting with PHP 5.3.0. Its constructor accepts a flexible combination of options that lets you control the range length, time between items in the range, and how many items there are in the range. <?php // Start on August 1 $start = new DateTime ( 'August 1, 2014' ); // End date is exclusive, so this will stop on August 31 $end = new DateTime ( 'September 1, 2014' ); // Go 1 day at a time $interval = new DateInterval ( 'P1D' ); $range1 = new DatePeriod ( $start , $interval , $end ); ?> Here\u2019s another way to do the same thing: <?php // Start on August 1 $start = new DateTime ( 'August 1, 2014' ); // Go 1 day at a time $interval = new DateInterval ( 'P1D' ); // Recur 30 times more after the first occurrence. $recurrences = 30 ; $range2 = new DatePeriod ( $start , $interval , $recurrences ); ?> and a third way: <?php // using the ISO 8601 specified format for describing date ranges $range3 = new DatePeriod ( 'R30/2014-08-01T00:00:00Z/P1D' ); foreach ( $range1 as $d ) { print \"A day in August is \" . $d -> format ( 'd' ) . \" \\n \" ; } ?>","title":"Generating Time Ranges"},{"location":"Func/phpDeclare/","text":"The declare keyword sets an execution directive for a block of code. If the declare statement is not followed by a block then the directive applies to the rest of the code in the file. There are three directives which can be declared: ticks, encoding and strict_types. The ticks directive will send a tick event each time a specified number of instructions have been executed. A tick function can be registered which will run each time a tick event fires. The encoding directive is used to indicate what character encoding the file is using. It cannot be used on a block, it has to apply to the whole file. When the strict_types directive is set, values of the wrong type passed into function arguments with type hints will throw a fatal error instead of being cast to the correct type. //Run a function after each instruction <?php $count = 0 ; function example () { global $count ; $count ++ ; echo \" $count instructions executed<br>\" ; } register_tick_function ( 'example' ); declare ( ticks = 1 ) { $cars = [ \"Ford\" , \"Volvo\" , \"BMW\" ]; foreach ( $cars as $car ) { echo \" $car <br>\" ; } } ?> //Run a function after each instruction <?php declare ( strict_types = 1 ); function sum ( int $a , int $b ) { return $a + $b ; } // Throws a fatal error because '5' is a string instead of a number sum ( \"5\" , 1 ); ?> enddeclare The enddeclare keyword is used to close a declare block which was started using the declare(...): syntax. <?php $count = 0 ; function example () { global $count ; $count ++ ; echo \" $count instructions executed<br>\" ; } register_tick_function ( 'example' ); declare ( ticks = 1 ) : $cars = [ \"Ford\" , \"Volvo\" , \"BMW\" ]; foreach ( $cars as $car ) { echo \" $car <br>\" ; } enddeclare ; ?>","title":"Declare"},{"location":"Func/phpDeclare/#enddeclare","text":"The enddeclare keyword is used to close a declare block which was started using the declare(...): syntax. <?php $count = 0 ; function example () { global $count ; $count ++ ; echo \" $count instructions executed<br>\" ; } register_tick_function ( 'example' ); declare ( ticks = 1 ) : $cars = [ \"Ford\" , \"Volvo\" , \"BMW\" ]; foreach ( $cars as $car ) { echo \" $car <br>\" ; } enddeclare ; ?>","title":"enddeclare"},{"location":"Func/phpEmpty/","text":"The empty keyword acts as a function which returns true if a variable does not exist, or if its value is considered empty. The empty keyword also evaluates expressions which are not in a variable. A value is considered empty if its value is any of the following: An empty string An empty array The integer 0 The floating point number 0.0 The string \"0\" Boolean false null <?php // A variable that does not exist if ( empty ( $x )) { echo '$x does not exist<br>' ; } // An empty integer if ( empty ( 0 )) { echo '0 is empty<br>' ; } // An empty float if ( empty ( 0.0 )) { echo '0.0 is empty<br>' ; } // An empty string if ( empty ( \"\" )) { echo '\"\" is an empty string<br>' ; } // null if ( empty ( null )) { echo 'null is empty<br>' ; } // A value that is not empty if ( empty ( 'A' )) { echo '\"A\" is empty<br>' ; } else { echo '\"A\" is not empty<br>' ; } ?> isset() function The isset() function checks whether a variable is set, which means that it has to be declared and is not NULL. This function returns true if the variable exists and is not NULL, otherwise it returns false. Note: If multiple variables are supplied, then this function will return true only if all of the variables are set. Tip: A variable can be unset with the unset() function. <?php $a = 0 ; // True because $a is set if ( isset ( $a )) { echo \"Variable 'a' is set.<br>\" ; } $b = null ; // False because $b is NULL if ( isset ( $b )) { echo \"Variable 'b' is set.\" ; } ?> When you want to assign a default value to a variable that doesn\u2019t already have a value. It often happens that you want a hardcoded default value for a variable that can be overridden from form input or through an environment variable. Use isset() to assign a default to a variable that may already have a value: <?php if ( ! isset ( $cars )) { $cars = $default_cars ; } ?> Use the ternary (a ? b : c) operator to give a new variable a (possibly default) value: <?php $cars = isset ( $_GET [ 'cars' ]) ? $_GET [ 'cars' ] : $default_cars ; ?> Using isset() is essential when assigning default values. Without it, the nondefault value can\u2019t be 0 or anything else that evaluates to false. Consider this assignment: <?php $cars = isset ( $_GET [ 'cars' ]) ? $_GET [ 'cars' ] : $default_cars ; ?> If $_GET['cars'] is 0, cars is set to default_cars even though 0 may be a valid value for cars. An alternative syntax for checking arrays is the array_key_exists() function: <?php $cars = array_key_exists ( 'cars' , $_GET ) ? $_GET [ 'cars' ] : $default_cars ; ?> The one difference between isset() and array_key_exists() is that when a key exists but its value is null, then array_key_exists() returns true, whereas isset() returns false: <?php $vehicles = array ( 'cars' => null ); // array_key_exists() returns TRUE because the key is present. $ake_result = array_key_exists ( 'cars' , $vehicles ); // isset() returns values because the key's value is NULL $isset_result = isset ( $vehicles [ 'cars' ]); ?> Use an array of defaults to set multiple default values easily. The keys in the defaults array are variable names, and the values in the array are the defaults for each variable: <?php $defaults = array ( 'emperors' => array ( 'Rudolf II' , 'Caligula' ), 'vegetable' => 'celery' , 'acres' => 15 ); foreach ( $defaults as $k => $v ) { if ( ! isset ( $GLOBALS [ $k ])) { $GLOBALS [ $k ] = $v ; } } ?> Because the variables are set in the global namespace, the previous code doesn\u2019t work for setting default variables private within a function. To do that, use variable variables: <?php foreach ( $defaults as $k => $v ) { if ( ! isset ( $$k )) { $$k = $v ; } } ?> In this example, the first time through the loop, $k is emperors, so $$k is $emperors.","title":"Empty"},{"location":"Func/phpEmpty/#isset-function","text":"The isset() function checks whether a variable is set, which means that it has to be declared and is not NULL. This function returns true if the variable exists and is not NULL, otherwise it returns false. Note: If multiple variables are supplied, then this function will return true only if all of the variables are set. Tip: A variable can be unset with the unset() function. <?php $a = 0 ; // True because $a is set if ( isset ( $a )) { echo \"Variable 'a' is set.<br>\" ; } $b = null ; // False because $b is NULL if ( isset ( $b )) { echo \"Variable 'b' is set.\" ; } ?> When you want to assign a default value to a variable that doesn\u2019t already have a value. It often happens that you want a hardcoded default value for a variable that can be overridden from form input or through an environment variable. Use isset() to assign a default to a variable that may already have a value: <?php if ( ! isset ( $cars )) { $cars = $default_cars ; } ?> Use the ternary (a ? b : c) operator to give a new variable a (possibly default) value: <?php $cars = isset ( $_GET [ 'cars' ]) ? $_GET [ 'cars' ] : $default_cars ; ?> Using isset() is essential when assigning default values. Without it, the nondefault value can\u2019t be 0 or anything else that evaluates to false. Consider this assignment: <?php $cars = isset ( $_GET [ 'cars' ]) ? $_GET [ 'cars' ] : $default_cars ; ?> If $_GET['cars'] is 0, cars is set to default_cars even though 0 may be a valid value for cars. An alternative syntax for checking arrays is the array_key_exists() function: <?php $cars = array_key_exists ( 'cars' , $_GET ) ? $_GET [ 'cars' ] : $default_cars ; ?> The one difference between isset() and array_key_exists() is that when a key exists but its value is null, then array_key_exists() returns true, whereas isset() returns false: <?php $vehicles = array ( 'cars' => null ); // array_key_exists() returns TRUE because the key is present. $ake_result = array_key_exists ( 'cars' , $vehicles ); // isset() returns values because the key's value is NULL $isset_result = isset ( $vehicles [ 'cars' ]); ?> Use an array of defaults to set multiple default values easily. The keys in the defaults array are variable names, and the values in the array are the defaults for each variable: <?php $defaults = array ( 'emperors' => array ( 'Rudolf II' , 'Caligula' ), 'vegetable' => 'celery' , 'acres' => 15 ); foreach ( $defaults as $k => $v ) { if ( ! isset ( $GLOBALS [ $k ])) { $GLOBALS [ $k ] = $v ; } } ?> Because the variables are set in the global namespace, the previous code doesn\u2019t work for setting default variables private within a function. To do that, use variable variables: <?php foreach ( $defaults as $k => $v ) { if ( ! isset ( $$k )) { $$k = $v ; } } ?> In this example, the first time through the loop, $k is emperors, so $$k is $emperors.","title":"isset() function"},{"location":"Func/phpError/","text":"The error functions are used to deal with error handling and logging. The error functions allow us to define own error handling rules, and modify the way the errors can be logged. The logging functions allow us to send messages directly to other machines, emails, or system logs. The error reporting functions allow us to customize what level and kind of error feedback is given. Runtime Configuration The behavior of the error functions is affected by settings in php.ini. Errors and logging configuration options: Name Default Description Changeable error_reporting NULL Sets the error reporting level (either an integer or named constants) PHP_INI_ALL display_errors \"1\" Specifies whether errors should be printed to the screen, or if they should be hidden from the user. Note: This feature should never be used on production systems (only to support your development) PHP_INI_ALL display_startup_errors \"0\" Even when display_errors is on, errors that occur during PHP's startup sequence are not displayed Note: It is strongly recommended to keep display_startup_errors off, except for debugging PHP_INI_ALL log_errors \"0\" Defines whether script error messages should be logged to the server's error log or error_log. Note: It is strongly advised to use error logging instead of error displaying on production web sites PHP_INI_ALL log_errors_max_len \"1024\" Sets the maximum length of log_errors in bytes. The value \"0\" can be used to not apply any maximum length at all. This length is applied to logged errors, displayed errors, and also to $php_errormsg (available since PHP 4.3) PHP_INI_ALL ignore_repeated_errors \"0\" Specifies whether to log repeated error messages. When set to \"1\" it will not log errors with repeated errors from the same file on the same line (available since PHP 4.3) PHP_INI_ALL ignore_repeated_source \"0\" Specifies whether to log repeated error messages. When set to \"1\" it will not log errors with repeated errors from different files or source lines (available since PHP 4.3) PHP_INI_ALL report_memleaks \"1\" If set to \"1\" (the default), this parameter will show a report of memory leaks detected by the Zend memory manager (available since PHP 4.3) PHP_INI_ALL track_errors \"0\" If set to \"1\", the last error message will always be present in the variable $php_errormsg PHP_INI_ALL html_errors \"1\" Turns off HTML tags in error messages PHP_INI_ALL PHP_INI_SYSTEM in PHP <= 4.2.3. xmlrpc_errors \"0\" Turns off normal error reporting and formats errors as XML-RPC error message (available since PHP 4.1) PHP_INI_SYSTEM xmlrpc_error_number \"0\" Used as the value of the XML-RPC faultCode element (available since PHP 4.1) PHP_INI_ALL docref_root \"\" (available since PHP 4.3) PHP_INI_ALL docref_ext \"\" (available since PHP 4.3.2) PHP_INI_ALL error_prepend_string NULL Specifies a string to output before an error message PHP_INI_ALL error_append_string NULL Specifies a string to output after an error message PHP_INI_ALL error_log NULL Specifies the name of the file where script errors should be logged. The file should be writable by the web server's user. If the special value syslog is used, the errors are sent to the system logger instead PHP_INI_ALL PHP Error and Logging Functions Function Description debug_backtrace() Generates a backtrace debug_print_backtrace() Prints a backtrace error_clear_last() Clears the last error error_get_last() Returns the last error that occurred error_log() Sends an error message to a log, to a file, or to a mail account error_reporting() Specifies which errors are reported restore_error_handler() Restores the previous error handler restore_exception_handler() Restores the previous exception handler set_error_handler() Sets a user-defined error handler function set_exception_handler() Sets a user-defined exception handler function trigger_error() Creates a user-level error message user_error() Alias of trigger_error() debug_print_backtrace() The handy debug_print_backtrace() function allows you to quickly get a sense of what has been been going on in your application immediately before you called a particular function. The output from debug_print_backtrace() includes, by default, the arguments passed to each function. If those arguments are big arrays or complicated objects, it can make the output unwieldy. You can pass the constant DEBUG_BACKTRACE_IGNORE_ARGS as a first argument to debug_print_backtrace() to have arguments eliminated from the output. If you only need to keep track of the sequence of functions called, this is perfect. debug_backtrace() A companion to debug_print_backtrace() is debug_backtrace(). Instead of outputting the backtrace, debug_backtrace() returns it as an array, one element per stackframe. This is useful if you only need to print certain elements of the backtrace, or you want to manipulate it programmatically. function print_parsed_backtrace() { $backtrace = debug_backtrace(); for ($i = 1, $j = count($backtrace); $i < $j; $i++) { $frame = $backtrace[$i]; if (isset($frame['class'])) { $function = $frame['class'] . $frame['type'] . $frame['function']; } else { $function = $frame['function']; } print $function . '()'; if ($i != ($j - 1)) { print ', '; } } } function stooges() { print \"woo woo woo!\\n\"; Fine::larry(); } class Fine { static function larry() { $brothers = new Howard; $brothers->curly(); } } class Howard { function curly() { $this->moe(); } function moe() { print_parsed_backtrace(); } } stooges(); woo woo woo! Howard->moe(), Howard->curly(), Fine::larry(), stooges() Hiding Error Messages from Users When you don\u2019t want PHP error messages to be visible to users. Set the following values in your php.ini or web server configuration file: display_errors =off log_errors =on You can also set these values using ini_set() if you don\u2019t have access to edit your server\u2019s php.ini file: ini_set('display_errors', 'off'); ini_set('log_errors', 'on'); These settings tell PHP not to display errors as HTML to the browser but to put them in the server\u2019s error log. When log_errors is set to on, error messages are written to the server\u2019s error log. If you want PHP errors to be written to a separate file, set the error_log configuration directive with the name of that file: error_log = /var/log/php.error.log or: ini_set('error_log', '/var/log/php.error.log'); If error_log is set to syslog, PHP error messages are sent to the system logger using syslog(3) on Unix and to the Event Log on Windows. If error_log is not set, error messages are sent to a default location, usually your web server\u2019s error log file. (For the command-line PHP program, the default error location is the standard error output stream.) There are lots of error messages you want to show your users, such as telling them they\u2019ve filled in a form incorrectly, but you should shield your users from internal errors that may reflect a problem with your code. There are two reasons for this. First, these errors appear unprofessional (to expert users) and confusing (to novice users). If something goes wrong when saving form input to a database, check the return code from the database query and display a message to your users apologizing and asking them to come back later. Showing them a cryptic error message straight from PHP doesn\u2019t inspire confidence in your website. Second, displaying these errors to users is a security risk. Depending on your database and the type of error, the error message may contain information about how to log in to your database or server and how it is structured. Malicious users can use this information to mount an attack on your website. For example, if your database server is down, and you attempt to connect to it with mysql_connect(), PHP generates the following warning: < br > < b > Warning </ b > : Can't connect to MySQL server on 'db.example.com' (111) in < b > /www/docroot/example.php </ b > on line < b > 3 </ b >< br > If this warning message is sent to a user\u2019s browser, he learns that your database server is called db.example.com and can focus his cracking efforts on it. Tuning Error Handling When you want to alter the error-logging sensitivity on a particular page. This lets you control what types of errors are reported. To adjust the types of errors PHP complains about, use error_reporting(): error_reporting(E_ALL); // everything error_reporting(E_ERROR | E_PARSE); // only major problems error_reporting(E_ALL & ~E_NOTICE); // everything but notices Every error generated has an error type associated with it. For example, if you try to array_pop() a string, PHP complains that \u201cThis argument needs to be an array\u201d because you can only pop arrays. The error type associated with this message is E_NOTICE, a nonfatal runtime problem. By default, the error reporting level is E_ALL & ~E_NOTICE, which means all error types except notices. The & is a logical AND, and the ~ is a logical NOT. However, the php.inirecommended configuration file sets the error reporting level to E_ALL, which is all error types. PHP 5.0 introduced a new error level, E_STRICT. Enabling E_STRICT during development has the benefit of PHP alerting you of ways your code could be improved. You will receive warnings about the use of deprecated functions, along with tips to nudge you in the direction of the latest and greatest suggested methods of coding. For PHP 5.0\u20135.3, E_STRICT is the only error level not included in E_ALL; for maximum coverage during development, set the error reporting level to E_ALL | E_STRICT. Starting with PHP 5.4, E_STRICT is included in E_ALL. Error messages flagged as notices are runtime problems that are less serious than warnings. They\u2019re not necessarily wrong, but they indicate a potential problem. One example of an E_NOTICE is \u201cUndefined variable,\u201d which occurs if you try to use a variable without previously assigning it a value: // Generates an E_NOTICE foreach ($array as $value) { $html .= $value; } // Doesn't generate any error message $html = ''; foreach ($array as $value) { $html .= $value; } In the first case, the first time through the foreach, $html is undefined. So when you append to it, PHP lets you know you\u2019re appending to an undefined variable. In the second case, the empty string is assigned to $html above the loop to avoid the E_NOTICE. The previous two code snippets generate identical code because the default value of a variable is the empty string. The E_NOTICE can be helpful because, for example, you may have misspelled a variable name: foreach ($array as $value) { $hmtl .= $value; // oops! that should be $html } $html = ''; foreach ($array as $value) { $hmtl .= $value; // oops! that should be $html } A custom error-handling function can parse errors based on their type and take an appropriate action. PHP Predefined Error and Logging Constants Value Constant Description 1 E_ERROR Fatal run-time errors. Errors that cannot be recovered from. Execution of the script is halted 2 E_WARNING Run-time warnings (non-fatal errors). Execution of the script is not halted 4 E_PARSE Compile-time parse errors. Parse errors should only be generated by the parser 8 E_NOTICE Run-time notices. The script found something that might be an error, but could also happen when running a script normally 16 E_CORE_ERROR Fatal errors at PHP startup. This is like E_ERROR, except it is generated by the core of PHP 32 E_CORE_WARNING Non-fatal errors at PHP startup. This is like E_WARNING, except it is generated by the core of PHP 64 E_COMPILE_ERROR Fatal compile-time errors. This is like E_ERROR, except it is generated by the Zend Scripting Engine 128 E_COMPILE_WARNING Non-fatal compile-time errors. This is like E_WARNING, except it is generated by the Zend Scripting Engine 256 E_USER_ERROR Fatal user-generated error. This is like E_ERROR, except it is generated in PHP code by using the PHP function trigger_error() 512 E_USER_WARNING Non-fatal user-generated warning. This is like E_WARNING, except it is generated in PHP code by using the PHP function trigger_error() 1024 E_USER_NOTICE User-generated notice. This is like E_NOTICE, except it is generated in PHP code by using the PHP function trigger_error() 2048 E_STRICT Enable to have PHP suggest changes to your code which will ensure the best interoperability and forward compatibility of your code (Since PHP 5 but not included in E_ALL until PHP 5.4) 4096 E_RECOVERABLE_ERROR Catchable fatal error. Indicates that a probably dangerous error occurred, but did not leave the Engine in an unstable state. If the error is not caught by a user defined handle, the application aborts as it was an E_ERROR (Since PHP 5.2) 8192 E_DEPRECATED Run-time notices. Enable this to receive warnings about code that will not work in future versions (Since PHP 5.3) 16384 E_USER_DEPRECATED User-generated warning message. This is like E_DEPRECATED, except it is generated in PHP code by using the PHP function trigger_error() (Since PHP 5.3) 32767 E_ALL Enable all PHP errors and warnings (except E_STRICT in versions < 5.4) Using a Custom Error Handler When you want to create a custom error handler that lets you control how PHP reports errors. A custom error handling function can parse errors based on their type and take the appropriate action. Pass set_error_handler() the name of a function, and PHP forwards all errors to that function. The error handling function can take up to five parameters. The first parameter is the error type, such as 8 for E_NOTICE. The second is the message thrown by the error, such as \u201cUndefined variable: html.\u201d The third and fourth arguments are the name of the file and the line number in which PHP detected the error. The final parameter is an array holding all the variables defined in the current scope and their values. For example, in this code, $html is appended to without first being assigned an initial value: error_reporting(E_ALL); set_error_handler('pc_error_handler'); function pc_error_handler($errno, $error, $file, $line, $context) { $message = \"[ERROR][$errno][$error][$file:$line]\"; print \"$message\"; print_r($context); } $form = array('one','two'); foreach ($form as $line) { $html .= \"<b>$line</b>\"; } When the \u201cUndefined variable\u201d error is generated, pc_error_handler() prints: [ERROR][8][Undefined variable: html][err-all.php:16] After the initial error message, pc_error_handler() also prints a large array containing all the global, environment, request, and session variables. Errors labeled catchable can be processed by the function registered using set_error_handler(). The others indicate such a serious problem that they\u2019re not safe to be handled by users and PHP must take care of them. Logging Errors Logging errors facilitates debugging. Smart error logging makes it easier to fix bugs. Always log information about what caused the error: $r = mysql_query($sql); if (! $r) { $error = mysql_error(); error_log('[DB: query @'.$_SERVER['REQUEST_URI'].\"][$sql]: $error\"); } else { // process results } You\u2019re not getting all the debugging help you could be if you simply log that an error occurred without any supporting information: $r = mysql_query($sql); if (! $r) { error_log(\"bad query\"); } else { // process result } Another useful technique is to include the __FILE__, __LINE__, __FUNCTION__, __CLASS__, and __METHOD__ \u201cmagic\u201d constants in your error messages: error_log('['.__FILE__.']['.__LINE__.\"]: $error\"); The __FILE__ constant is the current filename, __LINE__ is the current line number, __FUNCTION__ is the current function name, __METHOD__ is the current method name (if any), and __CLASS__ is the current class name (if any). Starting with PHP 5.3.0, __DIR__ is the directory that __FILE__ is in and __NAMESPACE__ is the current name\u2010 space. Starting in PHP 5.4.0, __TRAIT__ is the current trait name (if any).","title":"Errors"},{"location":"Func/phpError/#runtime-configuration","text":"The behavior of the error functions is affected by settings in php.ini. Errors and logging configuration options: Name Default Description Changeable error_reporting NULL Sets the error reporting level (either an integer or named constants) PHP_INI_ALL display_errors \"1\" Specifies whether errors should be printed to the screen, or if they should be hidden from the user. Note: This feature should never be used on production systems (only to support your development) PHP_INI_ALL display_startup_errors \"0\" Even when display_errors is on, errors that occur during PHP's startup sequence are not displayed Note: It is strongly recommended to keep display_startup_errors off, except for debugging PHP_INI_ALL log_errors \"0\" Defines whether script error messages should be logged to the server's error log or error_log. Note: It is strongly advised to use error logging instead of error displaying on production web sites PHP_INI_ALL log_errors_max_len \"1024\" Sets the maximum length of log_errors in bytes. The value \"0\" can be used to not apply any maximum length at all. This length is applied to logged errors, displayed errors, and also to $php_errormsg (available since PHP 4.3) PHP_INI_ALL ignore_repeated_errors \"0\" Specifies whether to log repeated error messages. When set to \"1\" it will not log errors with repeated errors from the same file on the same line (available since PHP 4.3) PHP_INI_ALL ignore_repeated_source \"0\" Specifies whether to log repeated error messages. When set to \"1\" it will not log errors with repeated errors from different files or source lines (available since PHP 4.3) PHP_INI_ALL report_memleaks \"1\" If set to \"1\" (the default), this parameter will show a report of memory leaks detected by the Zend memory manager (available since PHP 4.3) PHP_INI_ALL track_errors \"0\" If set to \"1\", the last error message will always be present in the variable $php_errormsg PHP_INI_ALL html_errors \"1\" Turns off HTML tags in error messages PHP_INI_ALL PHP_INI_SYSTEM in PHP <= 4.2.3. xmlrpc_errors \"0\" Turns off normal error reporting and formats errors as XML-RPC error message (available since PHP 4.1) PHP_INI_SYSTEM xmlrpc_error_number \"0\" Used as the value of the XML-RPC faultCode element (available since PHP 4.1) PHP_INI_ALL docref_root \"\" (available since PHP 4.3) PHP_INI_ALL docref_ext \"\" (available since PHP 4.3.2) PHP_INI_ALL error_prepend_string NULL Specifies a string to output before an error message PHP_INI_ALL error_append_string NULL Specifies a string to output after an error message PHP_INI_ALL error_log NULL Specifies the name of the file where script errors should be logged. The file should be writable by the web server's user. If the special value syslog is used, the errors are sent to the system logger instead PHP_INI_ALL","title":"Runtime Configuration"},{"location":"Func/phpError/#php-error-and-logging-functions","text":"Function Description debug_backtrace() Generates a backtrace debug_print_backtrace() Prints a backtrace error_clear_last() Clears the last error error_get_last() Returns the last error that occurred error_log() Sends an error message to a log, to a file, or to a mail account error_reporting() Specifies which errors are reported restore_error_handler() Restores the previous error handler restore_exception_handler() Restores the previous exception handler set_error_handler() Sets a user-defined error handler function set_exception_handler() Sets a user-defined exception handler function trigger_error() Creates a user-level error message user_error() Alias of trigger_error()","title":"PHP Error and Logging Functions"},{"location":"Func/phpError/#debug_print_backtrace","text":"The handy debug_print_backtrace() function allows you to quickly get a sense of what has been been going on in your application immediately before you called a particular function. The output from debug_print_backtrace() includes, by default, the arguments passed to each function. If those arguments are big arrays or complicated objects, it can make the output unwieldy. You can pass the constant DEBUG_BACKTRACE_IGNORE_ARGS as a first argument to debug_print_backtrace() to have arguments eliminated from the output. If you only need to keep track of the sequence of functions called, this is perfect.","title":"debug_print_backtrace()"},{"location":"Func/phpError/#debug_backtrace","text":"A companion to debug_print_backtrace() is debug_backtrace(). Instead of outputting the backtrace, debug_backtrace() returns it as an array, one element per stackframe. This is useful if you only need to print certain elements of the backtrace, or you want to manipulate it programmatically. function print_parsed_backtrace() { $backtrace = debug_backtrace(); for ($i = 1, $j = count($backtrace); $i < $j; $i++) { $frame = $backtrace[$i]; if (isset($frame['class'])) { $function = $frame['class'] . $frame['type'] . $frame['function']; } else { $function = $frame['function']; } print $function . '()'; if ($i != ($j - 1)) { print ', '; } } } function stooges() { print \"woo woo woo!\\n\"; Fine::larry(); } class Fine { static function larry() { $brothers = new Howard; $brothers->curly(); } } class Howard { function curly() { $this->moe(); } function moe() { print_parsed_backtrace(); } } stooges(); woo woo woo! Howard->moe(), Howard->curly(), Fine::larry(), stooges()","title":"debug_backtrace()"},{"location":"Func/phpError/#hiding-error-messages-from-users","text":"When you don\u2019t want PHP error messages to be visible to users. Set the following values in your php.ini or web server configuration file: display_errors =off log_errors =on You can also set these values using ini_set() if you don\u2019t have access to edit your server\u2019s php.ini file: ini_set('display_errors', 'off'); ini_set('log_errors', 'on'); These settings tell PHP not to display errors as HTML to the browser but to put them in the server\u2019s error log. When log_errors is set to on, error messages are written to the server\u2019s error log. If you want PHP errors to be written to a separate file, set the error_log configuration directive with the name of that file: error_log = /var/log/php.error.log or: ini_set('error_log', '/var/log/php.error.log'); If error_log is set to syslog, PHP error messages are sent to the system logger using syslog(3) on Unix and to the Event Log on Windows. If error_log is not set, error messages are sent to a default location, usually your web server\u2019s error log file. (For the command-line PHP program, the default error location is the standard error output stream.) There are lots of error messages you want to show your users, such as telling them they\u2019ve filled in a form incorrectly, but you should shield your users from internal errors that may reflect a problem with your code. There are two reasons for this. First, these errors appear unprofessional (to expert users) and confusing (to novice users). If something goes wrong when saving form input to a database, check the return code from the database query and display a message to your users apologizing and asking them to come back later. Showing them a cryptic error message straight from PHP doesn\u2019t inspire confidence in your website. Second, displaying these errors to users is a security risk. Depending on your database and the type of error, the error message may contain information about how to log in to your database or server and how it is structured. Malicious users can use this information to mount an attack on your website. For example, if your database server is down, and you attempt to connect to it with mysql_connect(), PHP generates the following warning: < br > < b > Warning </ b > : Can't connect to MySQL server on 'db.example.com' (111) in < b > /www/docroot/example.php </ b > on line < b > 3 </ b >< br > If this warning message is sent to a user\u2019s browser, he learns that your database server is called db.example.com and can focus his cracking efforts on it.","title":"Hiding Error Messages from Users"},{"location":"Func/phpError/#tuning-error-handling","text":"When you want to alter the error-logging sensitivity on a particular page. This lets you control what types of errors are reported. To adjust the types of errors PHP complains about, use error_reporting(): error_reporting(E_ALL); // everything error_reporting(E_ERROR | E_PARSE); // only major problems error_reporting(E_ALL & ~E_NOTICE); // everything but notices Every error generated has an error type associated with it. For example, if you try to array_pop() a string, PHP complains that \u201cThis argument needs to be an array\u201d because you can only pop arrays. The error type associated with this message is E_NOTICE, a nonfatal runtime problem. By default, the error reporting level is E_ALL & ~E_NOTICE, which means all error types except notices. The & is a logical AND, and the ~ is a logical NOT. However, the php.inirecommended configuration file sets the error reporting level to E_ALL, which is all error types. PHP 5.0 introduced a new error level, E_STRICT. Enabling E_STRICT during development has the benefit of PHP alerting you of ways your code could be improved. You will receive warnings about the use of deprecated functions, along with tips to nudge you in the direction of the latest and greatest suggested methods of coding. For PHP 5.0\u20135.3, E_STRICT is the only error level not included in E_ALL; for maximum coverage during development, set the error reporting level to E_ALL | E_STRICT. Starting with PHP 5.4, E_STRICT is included in E_ALL. Error messages flagged as notices are runtime problems that are less serious than warnings. They\u2019re not necessarily wrong, but they indicate a potential problem. One example of an E_NOTICE is \u201cUndefined variable,\u201d which occurs if you try to use a variable without previously assigning it a value: // Generates an E_NOTICE foreach ($array as $value) { $html .= $value; } // Doesn't generate any error message $html = ''; foreach ($array as $value) { $html .= $value; } In the first case, the first time through the foreach, $html is undefined. So when you append to it, PHP lets you know you\u2019re appending to an undefined variable. In the second case, the empty string is assigned to $html above the loop to avoid the E_NOTICE. The previous two code snippets generate identical code because the default value of a variable is the empty string. The E_NOTICE can be helpful because, for example, you may have misspelled a variable name: foreach ($array as $value) { $hmtl .= $value; // oops! that should be $html } $html = ''; foreach ($array as $value) { $hmtl .= $value; // oops! that should be $html } A custom error-handling function can parse errors based on their type and take an appropriate action.","title":"Tuning Error Handling"},{"location":"Func/phpError/#php-predefined-error-and-logging-constants","text":"Value Constant Description 1 E_ERROR Fatal run-time errors. Errors that cannot be recovered from. Execution of the script is halted 2 E_WARNING Run-time warnings (non-fatal errors). Execution of the script is not halted 4 E_PARSE Compile-time parse errors. Parse errors should only be generated by the parser 8 E_NOTICE Run-time notices. The script found something that might be an error, but could also happen when running a script normally 16 E_CORE_ERROR Fatal errors at PHP startup. This is like E_ERROR, except it is generated by the core of PHP 32 E_CORE_WARNING Non-fatal errors at PHP startup. This is like E_WARNING, except it is generated by the core of PHP 64 E_COMPILE_ERROR Fatal compile-time errors. This is like E_ERROR, except it is generated by the Zend Scripting Engine 128 E_COMPILE_WARNING Non-fatal compile-time errors. This is like E_WARNING, except it is generated by the Zend Scripting Engine 256 E_USER_ERROR Fatal user-generated error. This is like E_ERROR, except it is generated in PHP code by using the PHP function trigger_error() 512 E_USER_WARNING Non-fatal user-generated warning. This is like E_WARNING, except it is generated in PHP code by using the PHP function trigger_error() 1024 E_USER_NOTICE User-generated notice. This is like E_NOTICE, except it is generated in PHP code by using the PHP function trigger_error() 2048 E_STRICT Enable to have PHP suggest changes to your code which will ensure the best interoperability and forward compatibility of your code (Since PHP 5 but not included in E_ALL until PHP 5.4) 4096 E_RECOVERABLE_ERROR Catchable fatal error. Indicates that a probably dangerous error occurred, but did not leave the Engine in an unstable state. If the error is not caught by a user defined handle, the application aborts as it was an E_ERROR (Since PHP 5.2) 8192 E_DEPRECATED Run-time notices. Enable this to receive warnings about code that will not work in future versions (Since PHP 5.3) 16384 E_USER_DEPRECATED User-generated warning message. This is like E_DEPRECATED, except it is generated in PHP code by using the PHP function trigger_error() (Since PHP 5.3) 32767 E_ALL Enable all PHP errors and warnings (except E_STRICT in versions < 5.4)","title":"PHP Predefined Error and Logging Constants"},{"location":"Func/phpError/#using-a-custom-error-handler","text":"When you want to create a custom error handler that lets you control how PHP reports errors. A custom error handling function can parse errors based on their type and take the appropriate action. Pass set_error_handler() the name of a function, and PHP forwards all errors to that function. The error handling function can take up to five parameters. The first parameter is the error type, such as 8 for E_NOTICE. The second is the message thrown by the error, such as \u201cUndefined variable: html.\u201d The third and fourth arguments are the name of the file and the line number in which PHP detected the error. The final parameter is an array holding all the variables defined in the current scope and their values. For example, in this code, $html is appended to without first being assigned an initial value: error_reporting(E_ALL); set_error_handler('pc_error_handler'); function pc_error_handler($errno, $error, $file, $line, $context) { $message = \"[ERROR][$errno][$error][$file:$line]\"; print \"$message\"; print_r($context); } $form = array('one','two'); foreach ($form as $line) { $html .= \"<b>$line</b>\"; } When the \u201cUndefined variable\u201d error is generated, pc_error_handler() prints: [ERROR][8][Undefined variable: html][err-all.php:16] After the initial error message, pc_error_handler() also prints a large array containing all the global, environment, request, and session variables. Errors labeled catchable can be processed by the function registered using set_error_handler(). The others indicate such a serious problem that they\u2019re not safe to be handled by users and PHP must take care of them.","title":"Using a Custom Error Handler"},{"location":"Func/phpError/#logging-errors","text":"Logging errors facilitates debugging. Smart error logging makes it easier to fix bugs. Always log information about what caused the error: $r = mysql_query($sql); if (! $r) { $error = mysql_error(); error_log('[DB: query @'.$_SERVER['REQUEST_URI'].\"][$sql]: $error\"); } else { // process results } You\u2019re not getting all the debugging help you could be if you simply log that an error occurred without any supporting information: $r = mysql_query($sql); if (! $r) { error_log(\"bad query\"); } else { // process result } Another useful technique is to include the __FILE__, __LINE__, __FUNCTION__, __CLASS__, and __METHOD__ \u201cmagic\u201d constants in your error messages: error_log('['.__FILE__.']['.__LINE__.\"]: $error\"); The __FILE__ constant is the current filename, __LINE__ is the current line number, __FUNCTION__ is the current function name, __METHOD__ is the current method name (if any), and __CLASS__ is the current class name (if any). Starting with PHP 5.3.0, __DIR__ is the directory that __FILE__ is in and __NAMESPACE__ is the current name\u2010 space. Starting in PHP 5.4.0, __TRAIT__ is the current trait name (if any).","title":"Logging Errors"},{"location":"Func/phpExceptions/","text":"An exception is an object that describes an error or unexpected behaviour of a PHP script. Exceptions are thrown by many PHP functions and classes. User defined functions and classes can also throw exceptions. Exceptions are a good way to stop a function when it comes across data that it cannot use. Throwing an Exception The throw statement allows a user defined function or method to throw an exception. When an exception is thrown, the code following it will not be executed. If an exception is not caught, a fatal error will occur with an \"Uncaught Exception\" message. <?php function divide ( $dividend , $divisor ) { if ( $divisor == 0 ) { throw new Exception ( \"Division by zero\" ); } return $dividend / $divisor ; } echo divide ( 5 , 0 ); ?> The result will look something like this: Fatal error: Uncaught Exception: Division by zero in C:\\webfolder\\test.php:4 Stack trace: #0 C:\\webfolder\\test.php(9): divide(5, 0) #1 {main} thrown in C:\\webfolder\\test.php on line 4 The try...catch Statement To avoid the error from the example above, we can use the try...catch statement to catch exceptions and continue the process. <?php function divide ( $dividend , $divisor ) { if ( $divisor == 0 ) { throw new Exception ( \"Division by zero\" ); } return $dividend / $divisor ; } try { echo divide ( 5 , 0 ); } catch ( Exception $e ) { echo \"Unable to divide.\" ; } ?> <?php try { $rand = rand ( 0 , 2 ); switch ( $rand ) { case 0 : throw new Exception (); case 1 : throw new OutOfBoundsException (); case 2 : throw new LogicException (); } } catch ( OutOfBoundsException $e ) { echo \"Caught an out of bounds exception\" ; } catch ( LogicException $e ) { echo \"Caught a logic exception\" ; } catch ( Exception $e ) { echo \"Caught an ordinary exception\" ; } ?> The catch block indicates what type of exception should be caught and the name of the variable which can be used to access the exception. In the example above, the type of exception is Exception and the variable name is $e. The try...catch...finally Statement The try...catch...finally statement can be used to catch exceptions. Code in the finally block will always run regardless of whether an exception was caught. If finally is present, the catch block is optional. <?php function divide ( $dividend , $divisor ) { if ( $divisor == 0 ) { throw new Exception ( \"Division by zero\" ); } return $dividend / $divisor ; } try { echo divide ( 5 , 0 ); } catch ( Exception $e ) { echo \"Unable to divide. \" ; } finally { echo \"Process complete.\" ; } ?> <?php function divide ( $dividend , $divisor ) { if ( $divisor == 0 ) { throw new Exception ( \"Division by zero\" ); } return $dividend / $divisor ; } try { echo divide ( 5 , 0 ); } finally { echo \"Process complete.\" ; } ?> The Exception Object The Exception Object contains information about the error or unexpected behaviour that the function encountered. Syntax new Exception(message, code, previous) Parameter Values Parameter Description message Optional. A string describing why the exception was thrown code Optional. An integer that can be used to easily distinguish this exception from others of the same type previous Optional. If this exception was thrown in a catch block of another exception, it is recommended to pass that exception into this parameter Methods When catching an exception, the following table shows some of the methods that can be used to get information about the exception: Method Description getMessage() Returns a string describing why the exception was thrown getPrevious() If this exception was triggered by another one, this method returns the previous exception. If not, then it returns null getCode() Returns the exception code getFile() Returns the full path of the file in which the exception was thrown getLine() Returns the line number of the line of code which threw the exception <?php function divide ( $dividend , $divisor ) { if ( $divisor == 0 ) { throw new Exception ( \"Division by zero\" , 1 ); } return $dividend / $divisor ; } try { echo divide ( 5 , 0 ); } catch ( Exception $ex ) { $code = $ex -> getCode (); $message = $ex -> getMessage (); $file = $ex -> getFile (); $line = $ex -> getLine (); echo \"Exception thrown in $file on line $line : [Code $code ] $message \" ; } ?>","title":"Exceptions"},{"location":"Func/phpExceptions/#throwing-an-exception","text":"The throw statement allows a user defined function or method to throw an exception. When an exception is thrown, the code following it will not be executed. If an exception is not caught, a fatal error will occur with an \"Uncaught Exception\" message. <?php function divide ( $dividend , $divisor ) { if ( $divisor == 0 ) { throw new Exception ( \"Division by zero\" ); } return $dividend / $divisor ; } echo divide ( 5 , 0 ); ?> The result will look something like this: Fatal error: Uncaught Exception: Division by zero in C:\\webfolder\\test.php:4 Stack trace: #0 C:\\webfolder\\test.php(9): divide(5, 0) #1 {main} thrown in C:\\webfolder\\test.php on line 4","title":"Throwing an Exception"},{"location":"Func/phpExceptions/#the-trycatch-statement","text":"To avoid the error from the example above, we can use the try...catch statement to catch exceptions and continue the process. <?php function divide ( $dividend , $divisor ) { if ( $divisor == 0 ) { throw new Exception ( \"Division by zero\" ); } return $dividend / $divisor ; } try { echo divide ( 5 , 0 ); } catch ( Exception $e ) { echo \"Unable to divide.\" ; } ?> <?php try { $rand = rand ( 0 , 2 ); switch ( $rand ) { case 0 : throw new Exception (); case 1 : throw new OutOfBoundsException (); case 2 : throw new LogicException (); } } catch ( OutOfBoundsException $e ) { echo \"Caught an out of bounds exception\" ; } catch ( LogicException $e ) { echo \"Caught a logic exception\" ; } catch ( Exception $e ) { echo \"Caught an ordinary exception\" ; } ?> The catch block indicates what type of exception should be caught and the name of the variable which can be used to access the exception. In the example above, the type of exception is Exception and the variable name is $e.","title":"The try...catch Statement"},{"location":"Func/phpExceptions/#the-trycatchfinally-statement","text":"The try...catch...finally statement can be used to catch exceptions. Code in the finally block will always run regardless of whether an exception was caught. If finally is present, the catch block is optional. <?php function divide ( $dividend , $divisor ) { if ( $divisor == 0 ) { throw new Exception ( \"Division by zero\" ); } return $dividend / $divisor ; } try { echo divide ( 5 , 0 ); } catch ( Exception $e ) { echo \"Unable to divide. \" ; } finally { echo \"Process complete.\" ; } ?> <?php function divide ( $dividend , $divisor ) { if ( $divisor == 0 ) { throw new Exception ( \"Division by zero\" ); } return $dividend / $divisor ; } try { echo divide ( 5 , 0 ); } finally { echo \"Process complete.\" ; } ?>","title":"The try...catch...finally Statement"},{"location":"Func/phpExceptions/#the-exception-object","text":"The Exception Object contains information about the error or unexpected behaviour that the function encountered.","title":"The Exception Object"},{"location":"Func/phpExceptions/#syntax","text":"new Exception(message, code, previous)","title":"Syntax"},{"location":"Func/phpExceptions/#parameter-values","text":"Parameter Description message Optional. A string describing why the exception was thrown code Optional. An integer that can be used to easily distinguish this exception from others of the same type previous Optional. If this exception was thrown in a catch block of another exception, it is recommended to pass that exception into this parameter","title":"Parameter Values"},{"location":"Func/phpExceptions/#methods","text":"When catching an exception, the following table shows some of the methods that can be used to get information about the exception: Method Description getMessage() Returns a string describing why the exception was thrown getPrevious() If this exception was triggered by another one, this method returns the previous exception. If not, then it returns null getCode() Returns the exception code getFile() Returns the full path of the file in which the exception was thrown getLine() Returns the line number of the line of code which threw the exception <?php function divide ( $dividend , $divisor ) { if ( $divisor == 0 ) { throw new Exception ( \"Division by zero\" , 1 ); } return $dividend / $divisor ; } try { echo divide ( 5 , 0 ); } catch ( Exception $ex ) { $code = $ex -> getCode (); $message = $ex -> getMessage (); $file = $ex -> getFile (); $line = $ex -> getLine (); echo \"Exception thrown in $file on line $line : [Code $code ] $message \" ; } ?>","title":"Methods"},{"location":"Func/phpFTP/","text":"The FTP functions give client access to file servers through the File Transfer Protocol (FTP). The FTP functions are used to open, login and close connections, as well as upload, download, rename, delete, and get information on files from file servers. Not all of the FTP functions will work with every server or return the same results. The FTP functions became available with PHP 3. If you only wish to read from or write to a file on an FTP server, consider using the ftp:// wrapper with the Filesystem functions which provide a simpler and more intuitive interface. FTP Functions Function Description ftp_alloc() Allocates space for a file to be uploaded to the FTP server ftp_cdup() Changes to the parent directory on the FTP server ftp_chdir() Changes the current directory on the FTP server ftp_chmod() Sets permissions on a file via FTP ftp_close() Closes an FTP connection ftp_connect() Opens an FTP connection ftp_delete() Deletes a file on the FTP server ftp_exec() Executes a command on the FTP server ftp_fget() Downloads a file from the FTP server and saves it into an open local file ftp_fput() Uploads from an open file and saves it to a file on the FTP server ftp_get() Downloads a file from the FTP server ftp_get_option() Returns runtime options of the FTP connection ftp_login() Logs in to the FTP connection ftp_mdtm() Returns the last modified time of a specified file ftp_mkdir() Creates a new directory on the FTP server ftp_mlsd() Returns the list of files in the specified directory ftp_nb_continue() Continues retrieving/sending a file (non-blocking) ftp_nb_fget() Downloads a file from the FTP server and saves it into an open file (non-blocking) ftp_nb_fput() Uploads from an open file and saves it to a file on the FTP server (non-blocking) ftp_nb_get() Downloads a file from the FTP server (non-blocking) ftp_nb_put() Uploads a file to the FTP server (non-blocking) ftp_nlist() Returns a list of files in the specified directory on the FTP server ftp_pasv() Turns passive mode on or off ftp_put() Uploads a file to the FTP server ftp_pwd() Returns the current directory name ftp_quit() Alias of ftp_close() ftp_raw() Sends a raw command to the FTP server ftp_rawlist() Returns a list of files with file information from a specified directory ftp_rename() Renames a file or directory on the FTP server ftp_rmdir() Deletes an empty directory on the FTP server ftp_set_option() Sets runtime options for the FTP connection ftp_site() Sends an FTP SITE command to the FTP server ftp_size() Returns the size of the specified file ftp_ssl_connect() Opens a secure SSL-FTP connection ftp_systype() Returns the system type identifier of the FTP server Predefined FTP Constants Constant Type Description FTP_ASCII Integer FTP_AUTOSEEK Integer FTP_AUTORESUME Integer FTP_BINARY Integer FTP_FAILED Integer Asynchronous transfer has failed FTP_FINISHED Integer Asynchronous transfer is completed FTP_IMAGE Integer Alias of FTP_BINARY FTP_MOREDATA Integer Asynchronous transfer is in progress FTP_TEXT Integer Alias of FTP_ASCII FTP_TIMEOUT_SEC Integer The timeout used for network operations FTP_USEPASVADDRESS Boolean","title":"FTP"},{"location":"Func/phpFTP/#ftp-functions","text":"Function Description ftp_alloc() Allocates space for a file to be uploaded to the FTP server ftp_cdup() Changes to the parent directory on the FTP server ftp_chdir() Changes the current directory on the FTP server ftp_chmod() Sets permissions on a file via FTP ftp_close() Closes an FTP connection ftp_connect() Opens an FTP connection ftp_delete() Deletes a file on the FTP server ftp_exec() Executes a command on the FTP server ftp_fget() Downloads a file from the FTP server and saves it into an open local file ftp_fput() Uploads from an open file and saves it to a file on the FTP server ftp_get() Downloads a file from the FTP server ftp_get_option() Returns runtime options of the FTP connection ftp_login() Logs in to the FTP connection ftp_mdtm() Returns the last modified time of a specified file ftp_mkdir() Creates a new directory on the FTP server ftp_mlsd() Returns the list of files in the specified directory ftp_nb_continue() Continues retrieving/sending a file (non-blocking) ftp_nb_fget() Downloads a file from the FTP server and saves it into an open file (non-blocking) ftp_nb_fput() Uploads from an open file and saves it to a file on the FTP server (non-blocking) ftp_nb_get() Downloads a file from the FTP server (non-blocking) ftp_nb_put() Uploads a file to the FTP server (non-blocking) ftp_nlist() Returns a list of files in the specified directory on the FTP server ftp_pasv() Turns passive mode on or off ftp_put() Uploads a file to the FTP server ftp_pwd() Returns the current directory name ftp_quit() Alias of ftp_close() ftp_raw() Sends a raw command to the FTP server ftp_rawlist() Returns a list of files with file information from a specified directory ftp_rename() Renames a file or directory on the FTP server ftp_rmdir() Deletes an empty directory on the FTP server ftp_set_option() Sets runtime options for the FTP connection ftp_site() Sends an FTP SITE command to the FTP server ftp_size() Returns the size of the specified file ftp_ssl_connect() Opens a secure SSL-FTP connection ftp_systype() Returns the system type identifier of the FTP server","title":"FTP Functions"},{"location":"Func/phpFTP/#predefined-ftp-constants","text":"Constant Type Description FTP_ASCII Integer FTP_AUTOSEEK Integer FTP_AUTORESUME Integer FTP_BINARY Integer FTP_FAILED Integer Asynchronous transfer has failed FTP_FINISHED Integer Asynchronous transfer is completed FTP_IMAGE Integer Alias of FTP_BINARY FTP_MOREDATA Integer Asynchronous transfer is in progress FTP_TEXT Integer Alias of FTP_ASCII FTP_TIMEOUT_SEC Integer The timeout used for network operations FTP_USEPASVADDRESS Boolean","title":"Predefined FTP Constants"},{"location":"Func/phpFilters/","text":"Validating data = Determine if the data is in proper form. Sanitizing data = Remove any illegal character from the data. PHP filters are used to validate and sanitize external input. The PHP filter extension has many of the functions needed for checking user input, and is designed to make data validation easier and quicker. The filter_list() function can be used to list what the PHP filter extension offers: <table> <tr> <td>Filter Name</td> <td>Filter ID</td> </tr> <?php foreach ( filter_list () as $id => $filter ) { echo '<tr><td>' . $filter . '</td><td>' . filter_id ( $filter ) . '</td></tr>' ; } ?> </table> Filter Name Filter ID int 257 boolean 258 float 259 validate_regexp 272 validate_domain 277 validate_url 273 validate_email 274 validate_ip 275 validate_mac 276 string 513 stripped 513 encoded 514 special_chars 515 full_special_chars 522 unsafe_raw 516 email 517 url 518 number_int 519 number_float 520 magic_quotes 521 callback 1024 Why Use Filters? Many web applications receive external input. External input/data can be: User input from a form Cookies Web services data Server variables Database query results Invalid submitted data can lead to security problems and break your webpage! By using PHP filters you can be sure your application gets the correct input! filter_var() The filter_var() function both validate and sanitize data. The filter_var() function filters a single variable with a specified filter. It takes two pieces of data: The variable you want to check The type of check to use Sanitize a String The following example uses the filter_var() function to remove all HTML tags from a string: <?php $input = \"<b>Hello!</b>\" ; $output = filter_var ( $input , FILTER_SANITIZE_STRING ); echo $output ; ?> Validate an Integer The following example uses the filter_var() function to check if the variable $int is an integer. If $int is an integer, the output of the code below will be: \"Integer is valid\". If $int is not an integer, the output will be: \"Integer is not valid\": <?php $int = 100 ; if ( ! filter_var ( $int , FILTER_VALIDATE_INT ) === false ) { echo ( \"Integer is valid\" ); } else { echo ( \"Integer is not valid\" ); } ?> filter_var() and Problem With 0 In the example above, if $int was set to 0, the function above will return \"Integer is not valid\". To solve this problem, use the code below: <?php $int = 0 ; if ( filter_var ( $int , FILTER_VALIDATE_INT ) === 0 || ! filter_var ( $int , FILTER_VALIDATE_INT ) === false ) { echo ( \"Integer is valid\" ); } else { echo ( \"Integer is not valid\" ); } ?> Validate an IP Address The following example uses the filter_var() function to check if the variable $ip is a valid IP address: <?php $ip = \"127.0.0.1\" ; if ( ! filter_var ( $ip , FILTER_VALIDATE_IP ) === false ) { echo ( \" $ip is a valid IP address\" ); } else { echo ( \" $ip is not a valid IP address\" ); } ?> Sanitize and Validate an Email Address The following example uses the filter_var() function to first remove all illegal characters from the $email variable, then check if it is a valid email address: <?php $email = \"john.doe@example.com\" ; // Remove all illegal characters from email $email = filter_var ( $email , FILTER_SANITIZE_EMAIL ); // Validate e-mail if ( ! filter_var ( $email , FILTER_VALIDATE_EMAIL ) === false ) { echo ( \" $email is a valid email address\" ); } else { echo ( \" $email is not a valid email address\" ); } ?> Sanitize and Validate a URL The following example uses the filter_var() function to first remove all illegal characters from a URL, then check if $url is a valid URL: <?php $url = \"https://www.example.com\" ; // Remove all illegal characters from a url $url = filter_var ( $url , FILTER_SANITIZE_URL ); // Validate url if ( ! filter_var ( $url , FILTER_VALIDATE_URL ) === false ) { echo ( \" $url is a valid URL\" ); } else { echo ( \" $url is not a valid URL\" ); } ?> Validate an Integer Within a Range The following example uses the filter_var() function to check if a variable is both of type INT, and between 1 and 200: <?php $int = 122 ; $min = 1 ; $max = 200 ; if ( filter_var ( $int , FILTER_VALIDATE_INT , array ( \"options\" => array ( \"min_range\" => $min , \"max_range\" => $max ))) === false ) { echo ( \"Variable value is not within the legal range\" ); } else { echo ( \"Variable value is within the legal range\" ); } ?> Validate IPv6 Address The following example uses the filter_var() function to check if the variable $ip is a valid IPv6 address: <?php $ip = \"2001:0db8:85a3:08d3:1319:8a2e:0370:7334\" ; if ( ! filter_var ( $ip , FILTER_VALIDATE_IP , FILTER_FLAG_IPV6 ) === false ) { echo ( \" $ip is a valid IPv6 address\" ); } else { echo ( \" $ip is not a valid IPv6 address\" ); } ?> Validate URL - Must Contain QueryString The following example uses the filter_var() function to check if the variable $url is a URL with a querystring: <?php $url = \"https://www.example.com?name=Alex\" ; if ( ! filter_var ( $url , FILTER_VALIDATE_URL , FILTER_FLAG_QUERY_REQUIRED ) === false ) { echo ( \" $url is a valid URL with a query string\" ); } else { echo ( \" $url is not a valid URL with a query string\" ); } ?> Remove Characters With ASCII Value > 127 The following example uses the filter_var() function to sanitize a string. It will both remove all HTML tags, and all characters with ASCII value > 127, from the string: <?php $str = \"<h1>Hello World\u00c6\u00d8\u00c5!</h1>\" ; $newstr = filter_var ( $str , FILTER_SANITIZE_STRING , FILTER_FLAG_STRIP_HIGH ); echo $newstr ; ?>","title":"Filters"},{"location":"Func/phpFilters/#why-use-filters","text":"Many web applications receive external input. External input/data can be: User input from a form Cookies Web services data Server variables Database query results Invalid submitted data can lead to security problems and break your webpage! By using PHP filters you can be sure your application gets the correct input!","title":"Why Use Filters?"},{"location":"Func/phpFilters/#filter_var","text":"The filter_var() function both validate and sanitize data. The filter_var() function filters a single variable with a specified filter. It takes two pieces of data: The variable you want to check The type of check to use","title":"filter_var()"},{"location":"Func/phpFilters/#sanitize-a-string","text":"The following example uses the filter_var() function to remove all HTML tags from a string: <?php $input = \"<b>Hello!</b>\" ; $output = filter_var ( $input , FILTER_SANITIZE_STRING ); echo $output ; ?>","title":"Sanitize a String"},{"location":"Func/phpFilters/#validate-an-integer","text":"The following example uses the filter_var() function to check if the variable $int is an integer. If $int is an integer, the output of the code below will be: \"Integer is valid\". If $int is not an integer, the output will be: \"Integer is not valid\": <?php $int = 100 ; if ( ! filter_var ( $int , FILTER_VALIDATE_INT ) === false ) { echo ( \"Integer is valid\" ); } else { echo ( \"Integer is not valid\" ); } ?> filter_var() and Problem With 0 In the example above, if $int was set to 0, the function above will return \"Integer is not valid\". To solve this problem, use the code below: <?php $int = 0 ; if ( filter_var ( $int , FILTER_VALIDATE_INT ) === 0 || ! filter_var ( $int , FILTER_VALIDATE_INT ) === false ) { echo ( \"Integer is valid\" ); } else { echo ( \"Integer is not valid\" ); } ?>","title":"Validate an Integer"},{"location":"Func/phpFilters/#validate-an-ip-address","text":"The following example uses the filter_var() function to check if the variable $ip is a valid IP address: <?php $ip = \"127.0.0.1\" ; if ( ! filter_var ( $ip , FILTER_VALIDATE_IP ) === false ) { echo ( \" $ip is a valid IP address\" ); } else { echo ( \" $ip is not a valid IP address\" ); } ?>","title":"Validate an IP Address"},{"location":"Func/phpFilters/#sanitize-and-validate-an-email-address","text":"The following example uses the filter_var() function to first remove all illegal characters from the $email variable, then check if it is a valid email address: <?php $email = \"john.doe@example.com\" ; // Remove all illegal characters from email $email = filter_var ( $email , FILTER_SANITIZE_EMAIL ); // Validate e-mail if ( ! filter_var ( $email , FILTER_VALIDATE_EMAIL ) === false ) { echo ( \" $email is a valid email address\" ); } else { echo ( \" $email is not a valid email address\" ); } ?>","title":"Sanitize and Validate an Email Address"},{"location":"Func/phpFilters/#sanitize-and-validate-a-url","text":"The following example uses the filter_var() function to first remove all illegal characters from a URL, then check if $url is a valid URL: <?php $url = \"https://www.example.com\" ; // Remove all illegal characters from a url $url = filter_var ( $url , FILTER_SANITIZE_URL ); // Validate url if ( ! filter_var ( $url , FILTER_VALIDATE_URL ) === false ) { echo ( \" $url is a valid URL\" ); } else { echo ( \" $url is not a valid URL\" ); } ?>","title":"Sanitize and Validate a URL"},{"location":"Func/phpFilters/#validate-an-integer-within-a-range","text":"The following example uses the filter_var() function to check if a variable is both of type INT, and between 1 and 200: <?php $int = 122 ; $min = 1 ; $max = 200 ; if ( filter_var ( $int , FILTER_VALIDATE_INT , array ( \"options\" => array ( \"min_range\" => $min , \"max_range\" => $max ))) === false ) { echo ( \"Variable value is not within the legal range\" ); } else { echo ( \"Variable value is within the legal range\" ); } ?>","title":"Validate an Integer Within a Range"},{"location":"Func/phpFilters/#validate-ipv6-address","text":"The following example uses the filter_var() function to check if the variable $ip is a valid IPv6 address: <?php $ip = \"2001:0db8:85a3:08d3:1319:8a2e:0370:7334\" ; if ( ! filter_var ( $ip , FILTER_VALIDATE_IP , FILTER_FLAG_IPV6 ) === false ) { echo ( \" $ip is a valid IPv6 address\" ); } else { echo ( \" $ip is not a valid IPv6 address\" ); } ?>","title":"Validate IPv6 Address"},{"location":"Func/phpFilters/#validate-url-must-contain-querystring","text":"The following example uses the filter_var() function to check if the variable $url is a URL with a querystring: <?php $url = \"https://www.example.com?name=Alex\" ; if ( ! filter_var ( $url , FILTER_VALIDATE_URL , FILTER_FLAG_QUERY_REQUIRED ) === false ) { echo ( \" $url is a valid URL with a query string\" ); } else { echo ( \" $url is not a valid URL with a query string\" ); } ?>","title":"Validate URL - Must Contain QueryString"},{"location":"Func/phpFilters/#remove-characters-with-ascii-value-127","text":"The following example uses the filter_var() function to sanitize a string. It will both remove all HTML tags, and all characters with ASCII value > 127, from the string: <?php $str = \"<h1>Hello World\u00c6\u00d8\u00c5!</h1>\" ; $newstr = filter_var ( $str , FILTER_SANITIZE_STRING , FILTER_FLAG_STRIP_HIGH ); echo $newstr ; ?>","title":"Remove Characters With ASCII Value &gt; 127"},{"location":"Func/phpGenerators/","text":"Generators provide an easy way to implement simple iterators without the overhead or complexity of implementing a class that implements the Iterator interface. A generator allows you to write code that uses foreach to iterate over a set of data without needing to build an array in memory, which may cause you to exceed a memory limit, or require a considerable amount of processing time to generate. Instead, you can write a generator function, which is the same as a normal function, except that instead of returning once, a generator can yield as many times as it needs to in order to provide the values to be iterated over. <?php function xrange ( $start , $limit , $step = 1 ) { if ( $start <= $limit ) { if ( $step <= 0 ) { throw new LogicException ( 'Step must be positive' ); } for ( $i = $start ; $i <= $limit ; $i += $step ) { yield $i ; } } else { if ( $step >= 0 ) { throw new LogicException ( 'Step must be negative' ); } for ( $i = $start ; $i >= $limit ; $i += $step ) { yield $i ; } } } /* * Note that both range() and xrange() result in the same * output below. */ echo 'Single digit odd numbers from range(): ' ; foreach ( range ( 1 , 9 , 2 ) as $number ) { echo \" $number \" ; } echo \" \\n \" ; echo 'Single digit odd numbers from xrange(): ' ; foreach ( xrange ( 1 , 9 , 2 ) as $number ) { echo \" $number \" ; } ?> Generator object When a generator function is called, a new object of the internal Generator class is returned. This object implements the Iterator interface in much the same way as a forward-only iterator object would, and provides methods that can be called to manipulate the state of the generator, including sending values to and returning values from it. The yield keyword The yield keyword is used to create a generator function. Generator functions act as iterators which can be looped through with a foreach loop. The value given by the yield keyword is used as a value in one of the iterations of the loop. <?php function countTo3 () { yield \"1\" ; yield \"2\" ; yield \"3\" ; } foreach ( countTo3 () as $number ) { echo $number ; echo \"<br>\" ; } ?> Yielding values with keys PHP also supports associative arrays, and generators are no different. In addition to yielding simple values, as shown above, you can also yield a key at the same time. <?php /* * The input is semi-colon separated fields, with the first * field being an ID to use as a key. */ $input = <<<' EOF ' 1;PHP;Likes dollar signs 2;Python;Likes whitespace 3;Ruby;Likes blocks EOF ; function input_parser ( $input ) { foreach ( explode ( \" \\n \" , $input ) as $line ) { $fields = explode ( ';' , $line ); $id = array_shift ( $fields ); yield $id => $fields ; } } foreach ( input_parser ( $input ) as $id => $fields ) { echo \" $id : \\n \" ; echo \" $fields[0] \\n \" ; echo \" $fields[1] \\n \" ; } ?> 1: PHP Likes dollar signs 2: Python Likes whitespace 3: Ruby Likes blocks Yielding null values Yield can be called without an argument to yield a null value with an automatic key. < <?php function gen_three_nulls () { foreach ( range ( 1 , 3 ) as $i ) { yield ; } } var_dump ( iterator_to_array ( gen_three_nulls ())); ?> array(3) { [0]=> NULL [1]=> NULL [2]=> NULL } function countTo2() { yield; yield; } Yielding by reference Generator functions are able to yield values by reference as well as by value. This is done in the same way as returning references from functions: by prepending an ampersand to the function name. <?php function & gen_reference () { $value = 3 ; while ( $value > 0 ) { yield $value ; } } /* * Note that we can change $number within the loop, and * because the generator is yielding references, $value * within gen_reference() changes. */ foreach ( gen_reference () as & $number ) { echo ( -- $number ) . '... ' ; } ?> 2... 1... 0... The yield from keyword The yield from keyword provides the values from an iterator one by one each time the generator function is called until there are no items left in the iterator, then the generator will move on to the next yield keyword. Generator delegation allows you to yield values from another generator, Traversable object, or array by using the yield from keyword. The outer generator will then yield all values from the inner generator, object, or array until that is no longer valid, after which execution will continue in the outer generator. If a generator is used with yield from, the yield from expression will also return any value returned by the inner generator. <?php function countTo4 () { yield from [ 1 , 2 , 3 ]; yield 4 ; } foreach ( countTo4 () as $number ) { echo $number ; echo \"<br>\" ; } ?> Comparing generators with Iterator objects The primary advantage of generators is their simplicity. Much less boilerplate code has to be written compared to implementing an Iterator class, and the code is generally much more readable. For example, the following function and class are equivalent: <?php function getLinesFromFile ( $fileName ) { if ( ! $fileHandle = fopen ( $fileName , 'r' )) { return ; } while ( false !== $line = fgets ( $fileHandle )) { yield $line ; } fclose ( $fileHandle ); } // versus... class LineIterator implements Iterator { protected $fileHandle ; protected $line ; protected $i ; public function __construct ( $fileName ) { if ( ! $this -> fileHandle = fopen ( $fileName , 'r' )) { throw new RuntimeException ( 'Couldn\\'t open file \"' . $fileName . '\"' ); } } public function rewind () { fseek ( $this -> fileHandle , 0 ); $this -> line = fgets ( $this -> fileHandle ); $this -> i = 0 ; } public function valid () { return false !== $this -> line ; } public function current () { return $this -> line ; } public function key () { return $this -> i ; } public function next () { if ( false !== $this -> line ) { $this -> line = fgets ( $this -> fileHandle ); $this -> i ++ ; } } public function __destruct () { fclose ( $this -> fileHandle ); } } ?> This flexibility does come at a cost, however: generators are forward-only iterators, and cannot be rewound once iteration has started. This also means that the same generator can't be iterated over multiple times: the generator will need to be rebuilt by calling the generator function again. Iterating Efficiently over Large or Expensive Datasets When you want to iterate through a list of items, but the entire list takes up a lot of memory or is very slow to generate. Use a generator: <?php function FileLineGenerator ( $file ) { if ( ! $fh = fopen ( $file , 'r' )) { return ; } while ( false !== ( $line = fgets ( $fh ))) { yield $line ; } fclose ( $fh ); } $file = FileLineGenerator ( 'log.txt' ); foreach ( $file as $line ) { if ( preg_match ( '/^rasmus: /' , $line )) { print $line ; } } ?> Generators provide a simple way to efficiently loop over items without the overhead and expense of loading all the data into an array. A perfect use of a generator is processing all the lines in a file. The simplest way is to use the file() function. This open the file, loads each line into an element of an array, and closes it. However, then you store the entire file in memory. <?php $file = file ( 'log.txt' ); foreach ( $file as $line ) { if ( preg_match ( '/^rasmus: /' , $line )) { print $line ; } } ?> Another option is to use the standard file reading functions, but then your code for reading from the file and acting on each line gets intertwined. This doesn\u2019t make for reusable or easy-to-read code: <?php function print_matching_lines ( $file , $regex ) { if ( ! $fh = fopen ( 'log.txt' , 'r' )) { return ; } while ( false !== ( $line = fgets ( $fh ))) { if ( preg_match ( $regex , $line )) { print $line ; } } fclose ( $fh ); } print_matching_lines ( 'log.txt' , '/^rasmus: /' ); ?> However, if you wrap the code to process the file into a generator, you get the best of both options\u2014a general function to efficiently iterate through lines of a file and then clean syntax as if all the data is stored in an array: <?php function FileLineGenerator ( $file ) { if ( ! $fh = fopen ( $file , 'r' )) { return ; } while ( false !== ( $line = fgets ( $fh ))) { yield $line ; } fclose ( $fh ); } $file = FileLineGenerator ( 'log.txt' ); foreach ( $file as $line ) { if ( preg_match ( '/^rasmus: /' , $line )) { print $line ; } } ?> In a generator, control passes back and forth between the loop and the function via the yield statement. The first time the generator is called, control begins at the top of the function and pauses when it reaches a yield statement, returning the value. In this example, the FileLineGenerator() generator function loops through lines of a file. After the file is opened, fgets() is called in a loop. As long as there are more lines, the loop yields $line back to the iterator. At the end of the file, the loop terminates, the file is closed, and the function terminates. Because nothing is yielded back, the foreach() exits. Now, FileLineGenerator() can be used any time you want to loop through a file. The previous example prints lines beginning with rasmus: . The following one prints a random line from the file: <?php $line_number = 0 ; foreach ( FileLineGenerator ( 'sayings.txt' ) as $line ) { $line_number ++ ; if ( mt_rand ( 0 , $line_number - 1 ) == 0 ) { $selected = $line ; } } print $selected . \" \\n \" ; ?> Despite a completely different use case, FileLineGenerator() is reusable without modifications. In this example, the generator is invoked from within the foreach loop instead of storing it in a variable. You cannot rewind a generator. They only iterate forward.","title":"Generators"},{"location":"Func/phpGenerators/#generator-object","text":"When a generator function is called, a new object of the internal Generator class is returned. This object implements the Iterator interface in much the same way as a forward-only iterator object would, and provides methods that can be called to manipulate the state of the generator, including sending values to and returning values from it.","title":"Generator object"},{"location":"Func/phpGenerators/#the-yield-keyword","text":"The yield keyword is used to create a generator function. Generator functions act as iterators which can be looped through with a foreach loop. The value given by the yield keyword is used as a value in one of the iterations of the loop. <?php function countTo3 () { yield \"1\" ; yield \"2\" ; yield \"3\" ; } foreach ( countTo3 () as $number ) { echo $number ; echo \"<br>\" ; } ?>","title":"The yield keyword"},{"location":"Func/phpGenerators/#yielding-values-with-keys","text":"PHP also supports associative arrays, and generators are no different. In addition to yielding simple values, as shown above, you can also yield a key at the same time. <?php /* * The input is semi-colon separated fields, with the first * field being an ID to use as a key. */ $input = <<<' EOF ' 1;PHP;Likes dollar signs 2;Python;Likes whitespace 3;Ruby;Likes blocks EOF ; function input_parser ( $input ) { foreach ( explode ( \" \\n \" , $input ) as $line ) { $fields = explode ( ';' , $line ); $id = array_shift ( $fields ); yield $id => $fields ; } } foreach ( input_parser ( $input ) as $id => $fields ) { echo \" $id : \\n \" ; echo \" $fields[0] \\n \" ; echo \" $fields[1] \\n \" ; } ?> 1: PHP Likes dollar signs 2: Python Likes whitespace 3: Ruby Likes blocks","title":"Yielding values with keys"},{"location":"Func/phpGenerators/#yielding-null-values","text":"Yield can be called without an argument to yield a null value with an automatic key. < <?php function gen_three_nulls () { foreach ( range ( 1 , 3 ) as $i ) { yield ; } } var_dump ( iterator_to_array ( gen_three_nulls ())); ?> array(3) { [0]=> NULL [1]=> NULL [2]=> NULL } function countTo2() { yield; yield; }","title":"Yielding null values"},{"location":"Func/phpGenerators/#yielding-by-reference","text":"Generator functions are able to yield values by reference as well as by value. This is done in the same way as returning references from functions: by prepending an ampersand to the function name. <?php function & gen_reference () { $value = 3 ; while ( $value > 0 ) { yield $value ; } } /* * Note that we can change $number within the loop, and * because the generator is yielding references, $value * within gen_reference() changes. */ foreach ( gen_reference () as & $number ) { echo ( -- $number ) . '... ' ; } ?> 2... 1... 0...","title":"Yielding by reference"},{"location":"Func/phpGenerators/#the-yield-from-keyword","text":"The yield from keyword provides the values from an iterator one by one each time the generator function is called until there are no items left in the iterator, then the generator will move on to the next yield keyword. Generator delegation allows you to yield values from another generator, Traversable object, or array by using the yield from keyword. The outer generator will then yield all values from the inner generator, object, or array until that is no longer valid, after which execution will continue in the outer generator. If a generator is used with yield from, the yield from expression will also return any value returned by the inner generator. <?php function countTo4 () { yield from [ 1 , 2 , 3 ]; yield 4 ; } foreach ( countTo4 () as $number ) { echo $number ; echo \"<br>\" ; } ?>","title":"The yield from keyword"},{"location":"Func/phpGenerators/#comparing-generators-with-iterator-objects","text":"The primary advantage of generators is their simplicity. Much less boilerplate code has to be written compared to implementing an Iterator class, and the code is generally much more readable. For example, the following function and class are equivalent: <?php function getLinesFromFile ( $fileName ) { if ( ! $fileHandle = fopen ( $fileName , 'r' )) { return ; } while ( false !== $line = fgets ( $fileHandle )) { yield $line ; } fclose ( $fileHandle ); } // versus... class LineIterator implements Iterator { protected $fileHandle ; protected $line ; protected $i ; public function __construct ( $fileName ) { if ( ! $this -> fileHandle = fopen ( $fileName , 'r' )) { throw new RuntimeException ( 'Couldn\\'t open file \"' . $fileName . '\"' ); } } public function rewind () { fseek ( $this -> fileHandle , 0 ); $this -> line = fgets ( $this -> fileHandle ); $this -> i = 0 ; } public function valid () { return false !== $this -> line ; } public function current () { return $this -> line ; } public function key () { return $this -> i ; } public function next () { if ( false !== $this -> line ) { $this -> line = fgets ( $this -> fileHandle ); $this -> i ++ ; } } public function __destruct () { fclose ( $this -> fileHandle ); } } ?> This flexibility does come at a cost, however: generators are forward-only iterators, and cannot be rewound once iteration has started. This also means that the same generator can't be iterated over multiple times: the generator will need to be rebuilt by calling the generator function again.","title":"Comparing generators with Iterator objects"},{"location":"Func/phpGenerators/#iterating-efficiently-over-large-or-expensive-datasets","text":"When you want to iterate through a list of items, but the entire list takes up a lot of memory or is very slow to generate. Use a generator: <?php function FileLineGenerator ( $file ) { if ( ! $fh = fopen ( $file , 'r' )) { return ; } while ( false !== ( $line = fgets ( $fh ))) { yield $line ; } fclose ( $fh ); } $file = FileLineGenerator ( 'log.txt' ); foreach ( $file as $line ) { if ( preg_match ( '/^rasmus: /' , $line )) { print $line ; } } ?> Generators provide a simple way to efficiently loop over items without the overhead and expense of loading all the data into an array. A perfect use of a generator is processing all the lines in a file. The simplest way is to use the file() function. This open the file, loads each line into an element of an array, and closes it. However, then you store the entire file in memory. <?php $file = file ( 'log.txt' ); foreach ( $file as $line ) { if ( preg_match ( '/^rasmus: /' , $line )) { print $line ; } } ?> Another option is to use the standard file reading functions, but then your code for reading from the file and acting on each line gets intertwined. This doesn\u2019t make for reusable or easy-to-read code: <?php function print_matching_lines ( $file , $regex ) { if ( ! $fh = fopen ( 'log.txt' , 'r' )) { return ; } while ( false !== ( $line = fgets ( $fh ))) { if ( preg_match ( $regex , $line )) { print $line ; } } fclose ( $fh ); } print_matching_lines ( 'log.txt' , '/^rasmus: /' ); ?> However, if you wrap the code to process the file into a generator, you get the best of both options\u2014a general function to efficiently iterate through lines of a file and then clean syntax as if all the data is stored in an array: <?php function FileLineGenerator ( $file ) { if ( ! $fh = fopen ( $file , 'r' )) { return ; } while ( false !== ( $line = fgets ( $fh ))) { yield $line ; } fclose ( $fh ); } $file = FileLineGenerator ( 'log.txt' ); foreach ( $file as $line ) { if ( preg_match ( '/^rasmus: /' , $line )) { print $line ; } } ?> In a generator, control passes back and forth between the loop and the function via the yield statement. The first time the generator is called, control begins at the top of the function and pauses when it reaches a yield statement, returning the value. In this example, the FileLineGenerator() generator function loops through lines of a file. After the file is opened, fgets() is called in a loop. As long as there are more lines, the loop yields $line back to the iterator. At the end of the file, the loop terminates, the file is closed, and the function terminates. Because nothing is yielded back, the foreach() exits. Now, FileLineGenerator() can be used any time you want to loop through a file. The previous example prints lines beginning with rasmus: . The following one prints a random line from the file: <?php $line_number = 0 ; foreach ( FileLineGenerator ( 'sayings.txt' ) as $line ) { $line_number ++ ; if ( mt_rand ( 0 , $line_number - 1 ) == 0 ) { $selected = $line ; } } print $selected . \" \\n \" ; ?> Despite a completely different use case, FileLineGenerator() is reusable without modifications. In this example, the generator is invoked from within the foreach loop instead of storing it in a variable. You cannot rewind a generator. They only iterate forward.","title":"Iterating Efficiently over Large or Expensive Datasets"},{"location":"Func/phpJSON/","text":"JSON stands for JavaScript Object Notation, and is a syntax for storing and exchanging data. Since the JSON format is a text-based format, it can easily be sent to and from a server, and used as a data format by any programming language. json_encode() The json_encode() function is used to encode a value to JSON format. <?php $age = array ( \"Peter\" => 35 , \"Ben\" => 37 , \"Joe\" => 43 ); echo json_encode ( $age ); ?> <?php $cars = array ( \"Volvo\" , \"BMW\" , \"Toyota\" ); echo json_encode ( $cars ); ?> json_decode() The json_decode() function is used to decode a JSON object into a PHP object or an associative array. <?php $jsonobj = '{\"Peter\":35,\"Ben\":37,\"Joe\":43}' ; var_dump ( json_decode ( $jsonobj )); ?> The json_decode() function returns an object by default. The json_decode() function has a second parameter, and when set to true, JSON objects are decoded into associative arrays. <?php $jsonobj = '{\"Peter\":35,\"Ben\":37,\"Joe\":43}' ; var_dump ( json_decode ( $jsonobj , true )); ?> Accessing the Decoded Values <?php $jsonobj = '{\"Peter\":35,\"Ben\":37,\"Joe\":43}' ; $obj = json_decode ( $jsonobj ); echo $obj -> Peter ; echo $obj -> Ben ; echo $obj -> Joe ; ?> <?php $jsonobj = '{\"Peter\":35,\"Ben\":37,\"Joe\":43}' ; $arr = json_decode ( $jsonobj , true ); echo $arr [ \"Peter\" ]; echo $arr [ \"Ben\" ]; echo $arr [ \"Joe\" ]; ?> Looping Through the Values You can also loop through the values with a foreach() loop: <?php $jsonobj = '{\"Peter\":35,\"Ben\":37,\"Joe\":43}' ; $obj = json_decode ( $jsonobj ); foreach ( $obj as $key => $value ) { echo $key . \" => \" . $value . \"<br>\" ; } ?> <?php $jsonobj = '{\"Peter\":35,\"Ben\":37,\"Joe\":43}' ; $arr = json_decode ( $jsonobj , true ); foreach ( $arr as $key => $value ) { echo $key . \" => \" . $value . \"<br>\" ; } ?>","title":"JSON"},{"location":"Func/phpJSON/#json_encode","text":"The json_encode() function is used to encode a value to JSON format. <?php $age = array ( \"Peter\" => 35 , \"Ben\" => 37 , \"Joe\" => 43 ); echo json_encode ( $age ); ?> <?php $cars = array ( \"Volvo\" , \"BMW\" , \"Toyota\" ); echo json_encode ( $cars ); ?>","title":"json_encode()"},{"location":"Func/phpJSON/#json_decode","text":"The json_decode() function is used to decode a JSON object into a PHP object or an associative array. <?php $jsonobj = '{\"Peter\":35,\"Ben\":37,\"Joe\":43}' ; var_dump ( json_decode ( $jsonobj )); ?> The json_decode() function returns an object by default. The json_decode() function has a second parameter, and when set to true, JSON objects are decoded into associative arrays. <?php $jsonobj = '{\"Peter\":35,\"Ben\":37,\"Joe\":43}' ; var_dump ( json_decode ( $jsonobj , true )); ?>","title":"json_decode()"},{"location":"Func/phpJSON/#accessing-the-decoded-values","text":"<?php $jsonobj = '{\"Peter\":35,\"Ben\":37,\"Joe\":43}' ; $obj = json_decode ( $jsonobj ); echo $obj -> Peter ; echo $obj -> Ben ; echo $obj -> Joe ; ?> <?php $jsonobj = '{\"Peter\":35,\"Ben\":37,\"Joe\":43}' ; $arr = json_decode ( $jsonobj , true ); echo $arr [ \"Peter\" ]; echo $arr [ \"Ben\" ]; echo $arr [ \"Joe\" ]; ?>","title":"Accessing the Decoded Values"},{"location":"Func/phpJSON/#looping-through-the-values","text":"You can also loop through the values with a foreach() loop: <?php $jsonobj = '{\"Peter\":35,\"Ben\":37,\"Joe\":43}' ; $obj = json_decode ( $jsonobj ); foreach ( $obj as $key => $value ) { echo $key . \" => \" . $value . \"<br>\" ; } ?> <?php $jsonobj = '{\"Peter\":35,\"Ben\":37,\"Joe\":43}' ; $arr = json_decode ( $jsonobj , true ); foreach ( $arr as $key => $value ) { echo $key . \" => \" . $value . \"<br>\" ; } ?>","title":"Looping Through the Values"},{"location":"Func/phpMail/","text":"The mail() function allows you to send emails directly from a script. The behavior of the mail functions is affected by settings in php.ini: Name Default Description Changeable mail.add_x_header \"0\" Add X-PHP-Originating-Script that will include UID of the script followed by the filename. For PHP 5.3.0 and above PHP_INI_PERDIR mail.log NULL The path to a log file that will log all mail() calls. Log include full path of script, line number, To address and headers. For PHP 5.3.0 and above PHP_INI_PERDIR SMTP \"localhost\" Windows only: The DNS name or IP address of the SMTP server PHP_INI_ALL smtp_port \"25\" Windows only: The SMTP port number. For PHP 4.3.0 and above PHP_INI_ALL sendmail_from NULL Windows only: Specifies the \"from\" address to be used when sending mail from mail() PHP_INI_ALL sendmail_path \"/usr/sbin/sendmail -t -i\" Specifies where the sendmail program can be found. This directive works also under Windows. If set, SMTP, smtp_port and sendmail_from are ignored PHP_INI_SYSTEM Mail Functions Function Description ezmlm_hash() Calculates the hash value needed by EZMLM mail() Allows you to send emails directly from a script ezmlm_hash() Calculate the hash value for an email address. The ezmlm_hash() function calculates the hash value needed when keeping EZMLM mailing lists in a MySQL database. This function accepts an email address, for which it calculates an integer hash value. This value is compatible with the EZMLM mailing list manager, and can then be used with the EZMLM database for user management. <?php $user = \"someone@example.com\" ; $hash = ezmlm_hash ( $user ); echo \"The hash value for $user is: $hash .\" ; ?> mail() Allows you to send emails directly from a script. // Send an email: <?php // the message $msg = \"First line of text \\n Second line of text\" ; // use wordwrap() if lines are longer than 70 characters $msg = wordwrap ( $msg , 70 ); // send email mail ( \"someone@example.com\" , \"My subject\" , $msg ); ?> Parameter Description to Required. Specifies the receiver / receivers of the email subject Required. Specifies the subject of the email. Note: This parameter cannot contain any newline characters message Required. Defines the message to be sent. Each line should be separated with a LF (\\n). Lines should not exceed 70 characters. Windows note: If a full stop is found on the beginning of a line in the message, it might be removed. To solve this problem, replace the full stop with a double dot: headers Optional. Specifies additional headers, like From, Cc, and Bcc. The additional headers should be separated with a CRLF (\\r\\n). Note: When sending an email, it must contain a From header. This can be set with this parameter or in the php.ini file. parameters Optional. Specifies an additional parameter to the sendmail program (the one defined in the sendmail_path configuration setting). (i.e. this can be used to set the envelope sender address when using sendmail with the -f sendmail option) // Send an email with extra headers: <?php $to = \"somebody@example.com\" ; $subject = \"My subject\" ; $txt = \"Hello world!\" ; $headers = \"From: webmaster@example.com\" . \" \\r\\n \" . \"CC: somebodyelse@example.com\" ; mail ( $to , $subject , $txt , $headers ); ?> Send an HTML email: <?php $to = \"somebody@example.com, somebodyelse@example.com\" ; $subject = \"HTML email\" ; $message = \" <html> <head> <title>HTML email</title> </head> <body> <p>This email contains HTML Tags!</p> <table> <tr> <th>Firstname</th> <th>Lastname</th> </tr> <tr> <td>John</td> <td>Doe</td> </tr> </table> </body> </html> \" ; // Always set content-type when sending HTML email $headers = \"MIME-Version: 1.0\" . \" \\r\\n \" ; $headers .= \"Content-type:text/html;charset=UTF-8\" . \" \\r\\n \" ; // More headers $headers .= 'From: <webmaster@example.com>' . \" \\r\\n \" ; $headers .= 'Cc: myboss@example.com' . \" \\r\\n \" ; mail ( $to , $subject , $message , $headers ); ?>","title":"Mail"},{"location":"Func/phpMail/#mail-functions","text":"Function Description ezmlm_hash() Calculates the hash value needed by EZMLM mail() Allows you to send emails directly from a script","title":"Mail Functions"},{"location":"Func/phpMail/#ezmlm_hash","text":"Calculate the hash value for an email address. The ezmlm_hash() function calculates the hash value needed when keeping EZMLM mailing lists in a MySQL database. This function accepts an email address, for which it calculates an integer hash value. This value is compatible with the EZMLM mailing list manager, and can then be used with the EZMLM database for user management. <?php $user = \"someone@example.com\" ; $hash = ezmlm_hash ( $user ); echo \"The hash value for $user is: $hash .\" ; ?>","title":"ezmlm_hash()"},{"location":"Func/phpMail/#mail","text":"Allows you to send emails directly from a script. // Send an email: <?php // the message $msg = \"First line of text \\n Second line of text\" ; // use wordwrap() if lines are longer than 70 characters $msg = wordwrap ( $msg , 70 ); // send email mail ( \"someone@example.com\" , \"My subject\" , $msg ); ?> Parameter Description to Required. Specifies the receiver / receivers of the email subject Required. Specifies the subject of the email. Note: This parameter cannot contain any newline characters message Required. Defines the message to be sent. Each line should be separated with a LF (\\n). Lines should not exceed 70 characters. Windows note: If a full stop is found on the beginning of a line in the message, it might be removed. To solve this problem, replace the full stop with a double dot: headers Optional. Specifies additional headers, like From, Cc, and Bcc. The additional headers should be separated with a CRLF (\\r\\n). Note: When sending an email, it must contain a From header. This can be set with this parameter or in the php.ini file. parameters Optional. Specifies an additional parameter to the sendmail program (the one defined in the sendmail_path configuration setting). (i.e. this can be used to set the envelope sender address when using sendmail with the -f sendmail option) // Send an email with extra headers: <?php $to = \"somebody@example.com\" ; $subject = \"My subject\" ; $txt = \"Hello world!\" ; $headers = \"From: webmaster@example.com\" . \" \\r\\n \" . \"CC: somebodyelse@example.com\" ; mail ( $to , $subject , $txt , $headers ); ?> Send an HTML email: <?php $to = \"somebody@example.com, somebodyelse@example.com\" ; $subject = \"HTML email\" ; $message = \" <html> <head> <title>HTML email</title> </head> <body> <p>This email contains HTML Tags!</p> <table> <tr> <th>Firstname</th> <th>Lastname</th> </tr> <tr> <td>John</td> <td>Doe</td> </tr> </table> </body> </html> \" ; // Always set content-type when sending HTML email $headers = \"MIME-Version: 1.0\" . \" \\r\\n \" ; $headers .= \"Content-type:text/html;charset=UTF-8\" . \" \\r\\n \" ; // More headers $headers .= 'From: <webmaster@example.com>' . \" \\r\\n \" ; $headers .= 'Cc: myboss@example.com' . \" \\r\\n \" ; mail ( $to , $subject , $message , $headers ); ?>","title":"mail()"},{"location":"Func/phpMisc/","text":"The behavior of the misc. functions is affected by settings in the php.ini file. Misc. configuration options: Name Description Default Changeable ignore_user_abort FALSE indicates that scripts will be terminated as soon as they try to output something after a client has aborted their connection \"0\" PHP_INI_ALL highlight.string Color for highlighting a string in PHP syntax \"#DD0000\" PHP_INI_ALL highlight.comment Color for highlighting PHP comments \"#FF8000\" PHP_INI_ALL highlight.keyword Color for syntax highlighting PHP keywords (e.g. parenthesis and semicolon) \"#007700\" highlight.default Default color for PHP syntax \"#0000BB\" PHP_INI_ALL highlight.html Color for HTML code \"#000000\" PHP_INI_ALL browscap Name and location of browser-capabilities file (e.g. browscap.ini) NULL PHP_INI_SYSTEM Miscellaneous Functions Function Description connection_aborted() Checks whether the client has disconnected connection_status() Returns the current connection status connection_timeout() Deprecated from PHP 4.0.5. Checks whether the script has timed out constant() Returns the value of a constant define() Defines a constant defined() Checks whether a constant exists die() Alias of exit() eval() Evaluates a string as PHP code exit() Prints a message and exits the current script get_browser() Returns the capabilities of the user's browser __halt_compiler() Halts the compiler execution highlight_file() Outputs a file with the PHP syntax highlighted highlight_string() Outputs a string with the PHP syntax highlighted hrtime() Returns the system's high resolution time ignore_user_abort() Sets whether a remote client can abort the running of a script pack() Packs data into a binary string php_strip_whitespace() Returns the source code of a file with PHP comments and whitespace removed show_source() Alias of highlight_file() sleep() Delays code execution for a number of seconds sys_getloadavg() Returns the system load average time_nanosleep() Delays code execution for a number of seconds and nanoseconds time_sleep_until() Makes a script sleep until the specified time uniqid() Generates a unique ID unpack() Unpacks data from a binary string usleep() Delays code execution for a number of microseconds Predefined Misc. Constants Constant Description CONNECTION_ABORTED Connection is aborted by user or network error CONNECTION_NORMAL Connection is running normally CONNECTION_TIMEOUT Connection timed out __COMPILER_HALT_OFFSET__","title":"Misc"},{"location":"Func/phpMisc/#miscellaneous-functions","text":"Function Description connection_aborted() Checks whether the client has disconnected connection_status() Returns the current connection status connection_timeout() Deprecated from PHP 4.0.5. Checks whether the script has timed out constant() Returns the value of a constant define() Defines a constant defined() Checks whether a constant exists die() Alias of exit() eval() Evaluates a string as PHP code exit() Prints a message and exits the current script get_browser() Returns the capabilities of the user's browser __halt_compiler() Halts the compiler execution highlight_file() Outputs a file with the PHP syntax highlighted highlight_string() Outputs a string with the PHP syntax highlighted hrtime() Returns the system's high resolution time ignore_user_abort() Sets whether a remote client can abort the running of a script pack() Packs data into a binary string php_strip_whitespace() Returns the source code of a file with PHP comments and whitespace removed show_source() Alias of highlight_file() sleep() Delays code execution for a number of seconds sys_getloadavg() Returns the system load average time_nanosleep() Delays code execution for a number of seconds and nanoseconds time_sleep_until() Makes a script sleep until the specified time uniqid() Generates a unique ID unpack() Unpacks data from a binary string usleep() Delays code execution for a number of microseconds","title":"Miscellaneous Functions"},{"location":"Func/phpMisc/#predefined-misc-constants","text":"Constant Description CONNECTION_ABORTED Connection is aborted by user or network error CONNECTION_NORMAL Connection is running normally CONNECTION_TIMEOUT Connection timed out __COMPILER_HALT_OFFSET__","title":"Predefined Misc. Constants"},{"location":"Func/phpOutput/","text":"PHP provides a set of functions that control what content is sent to the browser and when. This is referred to as output control. Output can come from any of the following sources: echo , print , printf, print_r... and other similar functions and statements Notices, warnings and errors from PHP Any content outside of the <?php ?> tags echo The echo statement sends output to the browser. <?php echo \"Hello, World!\" ; ?> //Use echo to output multiple strings: <?php echo \"Hello, World!\" , \"<br>\" ; echo \"I'm about to learn PHP\" ; ?> print The print keyword is used to output text. Unlike echo, print can only output one string at a time. Unlike echo, print has a return value, which is always 1. <?php print \"Hello, World!\" ; ?> PHP and the backend on which it is running may hold the output in a buffer before sending it to the user. The output control functions can create any number of output buffers. Output buffers catch output given by the program. Each new output buffer is placed on the top of a stack of output buffers, and any output it provides will be caught by the buffer below it. The output control functions handle only the topmost buffer, so the topmost buffer must be removed in order to control the buffers below it. The behavior of output control functions is affected by settings in php.ini: Name Default Description Version output_buffering \"0\" Enables output buffering for all PHP files by default 4 output_handler NULL Set the name of the default function which handles the output of all output buffers 4 implicit_flush \"0\" Enables implicit flush, which causes output to be sent directly to the browser on each output statement 4 url_rewriter.tags \"a=href,area=href, frame=src,form=,fieldset=\" Indicates which HTML tags and attributes can be modified by the URL rewriter (the output_add_rewrite_var() function.) 4.3 url_rewriter.hosts The current value of $_SERVER['HTTP_HOST'] URL rewriting is only done on the server's own URLs by default. To allow for rewriting URLs of other websites, set the hostnames of the other websites here. 7.1 PHP Output Control Functions Method Function flush() Attempts to send content from the system's output buffer to the browser ob_clean() Deletes all of the content from the topmost output buffer ob_end_clean() Deletes the topmost output buffer and all of its contents ob_end_flush() Deletes the topmost output buffer and outputs its contents ob_flush() Outputs the contents of the topmost output buffer and clears the buffer ob_get_clean() Returns all of the contents of the topmost output buffer and clears the buffer ob_get_contents() Returns the contents of the topmost output buffer ob_get_flush() Outputs and returns the contents of the topmost output buffer and then deletes the buffer ob_get_length() Returns the number of bytes of data that are in the topmost output buffer ob_get_level() Returns a number indicating how many output buffers are on the stack ob_get_status() Returns information about the output buffers ob_gzhandler() Used as a callback function for ob_start() to compress the contents of the buffer when sending it to the browser ob_implicit_flush() Turns implicit flushing on or off ob_list_handlers() Returns an array of callback function names that are being used by the topmost output buffer ob_start() Creates a new output buffer and adds it to the top of the stack output_add_rewrite_var() Used to append query string parameters to any URL in the output output_reset_rewrite_vars() Removes all variables added by output_add_rewrite_var() flush() Output a string to the browser before the script has finished running: <?php // Some browsers will not display the content if it is too short // We use str_pad() to make the output long enough echo str_pad ( \"Hello World!\" , 4096 ); // Use flush() to send the string to the browser flush (); // Display the rest of the content three seconds later sleep ( 3 ); echo \"<br>\" ; echo \"Hello World!\" ; ?> ob_clean() The ob_clean() function deletes all of the contents of the topmost output buffer, preventing them from getting sent to the browser. <?php ob_start (); echo \"This output will not be sent to the browser\" ; ob_clean (); echo \"This output will be sent to the browser\" ; ob_end_flush (); ?>","title":"Output Control"},{"location":"Func/phpOutput/#echo","text":"The echo statement sends output to the browser. <?php echo \"Hello, World!\" ; ?> //Use echo to output multiple strings: <?php echo \"Hello, World!\" , \"<br>\" ; echo \"I'm about to learn PHP\" ; ?>","title":"echo"},{"location":"Func/phpOutput/#print","text":"The print keyword is used to output text. Unlike echo, print can only output one string at a time. Unlike echo, print has a return value, which is always 1. <?php print \"Hello, World!\" ; ?> PHP and the backend on which it is running may hold the output in a buffer before sending it to the user. The output control functions can create any number of output buffers. Output buffers catch output given by the program. Each new output buffer is placed on the top of a stack of output buffers, and any output it provides will be caught by the buffer below it. The output control functions handle only the topmost buffer, so the topmost buffer must be removed in order to control the buffers below it. The behavior of output control functions is affected by settings in php.ini: Name Default Description Version output_buffering \"0\" Enables output buffering for all PHP files by default 4 output_handler NULL Set the name of the default function which handles the output of all output buffers 4 implicit_flush \"0\" Enables implicit flush, which causes output to be sent directly to the browser on each output statement 4 url_rewriter.tags \"a=href,area=href, frame=src,form=,fieldset=\" Indicates which HTML tags and attributes can be modified by the URL rewriter (the output_add_rewrite_var() function.) 4.3 url_rewriter.hosts The current value of $_SERVER['HTTP_HOST'] URL rewriting is only done on the server's own URLs by default. To allow for rewriting URLs of other websites, set the hostnames of the other websites here. 7.1","title":"print"},{"location":"Func/phpOutput/#php-output-control-functions","text":"Method Function flush() Attempts to send content from the system's output buffer to the browser ob_clean() Deletes all of the content from the topmost output buffer ob_end_clean() Deletes the topmost output buffer and all of its contents ob_end_flush() Deletes the topmost output buffer and outputs its contents ob_flush() Outputs the contents of the topmost output buffer and clears the buffer ob_get_clean() Returns all of the contents of the topmost output buffer and clears the buffer ob_get_contents() Returns the contents of the topmost output buffer ob_get_flush() Outputs and returns the contents of the topmost output buffer and then deletes the buffer ob_get_length() Returns the number of bytes of data that are in the topmost output buffer ob_get_level() Returns a number indicating how many output buffers are on the stack ob_get_status() Returns information about the output buffers ob_gzhandler() Used as a callback function for ob_start() to compress the contents of the buffer when sending it to the browser ob_implicit_flush() Turns implicit flushing on or off ob_list_handlers() Returns an array of callback function names that are being used by the topmost output buffer ob_start() Creates a new output buffer and adds it to the top of the stack output_add_rewrite_var() Used to append query string parameters to any URL in the output output_reset_rewrite_vars() Removes all variables added by output_add_rewrite_var()","title":"PHP Output Control Functions"},{"location":"Func/phpOutput/#flush","text":"Output a string to the browser before the script has finished running: <?php // Some browsers will not display the content if it is too short // We use str_pad() to make the output long enough echo str_pad ( \"Hello World!\" , 4096 ); // Use flush() to send the string to the browser flush (); // Display the rest of the content three seconds later sleep ( 3 ); echo \"<br>\" ; echo \"Hello World!\" ; ?>","title":"flush()"},{"location":"Func/phpOutput/#ob_clean","text":"The ob_clean() function deletes all of the contents of the topmost output buffer, preventing them from getting sent to the browser. <?php ob_start (); echo \"This output will not be sent to the browser\" ; ob_clean (); echo \"This output will be sent to the browser\" ; ob_end_flush (); ?>","title":"ob_clean()"},{"location":"Func/phpRegex/","text":"A regular expression is a sequence of characters that forms a search pattern. When you search for data in a text, you can use this search pattern to describe what you are searching for. Regular expressions are an intricate and powerful tool for matching patterns and manipulating text. Though not as fast as plain-vanilla string matching, regular expressions are extremely flexible. Think of a regular expression as a program in a very restrictive programming language. The only task of a regular expression program is to match a pattern in text. In regular expression patterns, most characters just match themselves. REF docs Regular Expressions Functions Function Description preg_filter() Returns a string or an array with pattern matches replaced, but only if matches were found preg_grep() Returns an array consisting only of elements from the input array which matched the pattern preg_last_error() Returns an error code indicating the reason that the most recent regular expression call failed preg_match() Returns 1 if the pattern was found in the string and 0 if not preg_match_all() Returns the number of times the pattern was found in the string, which may also be 0 preg_replace() Returns a new string where matched patterns have been replaced with another string preg_replace_callback() Given an expression and a callback, returns a string where all matches of the expression are replaced with the substring returned by the callback preg_replace_callback_array() Given an array associating expressions with callbacks, returns a string where all matches of each expression are replaced with the substring returned by the callback preg_split() Breaks a string into an array using matches of a regular expression as separators preg_quote() Escapes characters that have a special meaning in regular expressions by putting a backslash in front of them preg_replace_callback() When you want to process matched text with a PHP function. For example, you want to decode all HTML entities in captured subpatterns. Use preg_replace_callback(). Instead of a replacement pattern, give it a callback function. This callback function is passed an array of matched subpatterns and should return an appropriate replacement string. <?php // Generating replacement strings with a callback function $h = 'The &lt;b&gt; tag makes text bold: <code>&lt;b&gt;bold&lt;/b&gt;</code>' ; print preg_replace_callback ( '@<code>(.*?)</code>@' , 'decode' , $h ); // $matches[0] is the entire matched string // $matches[1] is the first captured subpattern function decode ( $matches ) { return html_entity_decode ( $matches [ 1 ]); } } ?> This prints: The <b> tag makes text bold: <b>bold</b> The second argument to preg_replace_callback() specifies the function that is to be called to calculate replacement strings. Like everywhere the PHP \u201ccallable\u201d pseudotype is used, this argument can be a string or an array. Use a string to specify a function name. To use an object instance method as a callback, pass an array whose first element is the object and whose second element is a string containing the method name. To use a static class method as a callback, pass an array of two strings: the class name and the method name. In PHP 5.4.0 and later, you can pass a variable containing an anonymous function, or define the function inline with the call to preg_replace_callback(). The callback function is passed one argument: an array of matches. Element 0 of this array is always the text that matched the entire pattern. If the pattern given to preg_replace_callback() has any parenthesized subpatterns, these are present in subsequent elements of the $matches array. The keys of the $matches array are numeric, even if there are named subpatterns in the pattern. If you are providing an anonymous function as a callback, it can be memory intensive if the function creation is inline with the call to preg_replace_callback() and inside a loop. If you want to use an anonymous function with preg_replace_callback(), store the anonymous function callback in a variable. Then, provide the variable to preg_replace_callback() as the callback function. <?php // Generating replacement strings with an anonymous function $callbackFunction = function ( $matches ) { return html_entity_decode ( $matches [ 1 ]); }; $fp = fopen ( __DIR__ . '/html-to-decode.html' , 'r' ); while ( ! feof ( $fp )) { $line = fgets ( $fp ); print preg_replace_callback ( '@<code>(.*?)</code>@' , $callbackFunction , $line ); } fclose ( $fp ); ?> preg_quote() Escapes characters that have a special meaning in regular expressions by putting a backslash in front of them. When you want to have characters such as * or + treated as literals, not as metacharacters, inside a regular expression. This is useful when allowing users to type in search strings you want to use inside a regular expression. <?php $pattern = preg_quote ( 'The Education of H*Y*M*A*N K*A*P*L*A*N' ) . ':(\\d+)' ; if ( preg_match ( \"/ $pattern /\" , $book_rank , $matches )) { print \"Leo Rosten's book ranked: \" . $matches [ 1 ]; } ?> Here are the characters that preg_quote() escapes: . \\ + * ? ^ $ [ ] () { } < > = ! | : It escapes the metacharacters with a backslash. You can also pass preg_quote() an additional character to escape as a second argument. It\u2019s useful to pass your pattern delimiter (usually /) as this argument so it also gets escaped. This is important if you incorporate user input into a regular expression pattern. The following code expects $_GET['search_term'] from a web form and searches for words beginning with $_GET['search_term'] in a string $s: <?php $search_term = preg_quote ( $_GET [ 'search_term' ], '/' ); if ( preg_match ( \"/\\b $search_term /i\" , $s )) { print 'match!' ; } ?> Using preg_quote() ensures the regular expression is interpreted properly if, for example, a Magnum, P.I. fan enters t.c as a search term. Without preg_quote(), this matches tic, tucker, and any other words whose first letter is t and third letter is c. Passing the pattern delimiter to preg_quote() as well makes sure that user input with forward slashes in it, such as CP/M, is also handled correctly. preg_grep() When you want to find all the lines in a file that match a pattern. There are two ways to do this. First example is faster, but uses more memory. It uses the file() function to put each line of the file into an array and preg_grep() to filter out the nonmatching lines. // Efficiently finding lines that match a pattern <?php $pattern = \"/\\bo'reilly\\b/i\" ; // only O'Reilly books $ora_books = preg_grep ( $pattern , file ( '/path/to/your/file.txt' )); ?> The next example is slower, but more memory efficient. It reads the file a line at a time and uses preg_match() to check each line after it\u2019s read. <?php //Efficiently finding lines that match a pattern $fh = fopen ( '/path/to/your/file.txt' , 'r' ) or die ( $php_errormsg ); while ( ! feof ( $fh )) { $line = fgets ( $fh ); if ( preg_match ( $pattern , $line )) { $ora_books [ ] = $line ; } } fclose ( $fh ); ?> Keep in mind that because both methods operate on individual lines of the file, they can\u2019t successfully use patterns that match text that spans multiple lines. preg_match() <?php $str = \"Visit arcelopera.github.io\" ; $pattern = \"/arce/i\" ; echo preg_match ( $pattern , $str ); // Outputs 1 ?> preg_match_all() <?php $str = \"The rain in SPAIN falls mainly on the plains.\" ; $pattern = \"/ain/i\" ; echo preg_match_all ( $pattern , $str ); // Outputs 4 ?> For example, when you want to capture text inside HTML tags, you can find all the heading tags in an HTML document. <?php // Capturing HTML headings $html = file_get_contents ( __DIR__ . '/example.html' ); preg_match_all ( '@<h([1-6])>(.+?)</h\\1>@is' , $html , $matches ); foreach ( $matches [ 2 ] as $text ) { print \"Heading: $text\\n \" ; } ?> Robust parsing of HTML is difficult using a simple regular expression. This is one advantage of using XHTML; it\u2019s significantly easier to validate and parse. Regular expressions can be moderately useful for parsing small amounts of HTML, especially if the structure of that HTML is reasonably constrained (or you\u2019re generating it yourself). For more generalized and robust HTML parsing, use the Tidy extension. It provides an interface to the popular libtidy HTML cleanup library. After Tidy has cleaned up your HTML, you can use its methods for getting at parts of the document. Or if you\u2019ve told Tidy to convert your HTML to XHTML, you can use all of the XML manipulation power of SimpleXML or the DOM extension to slice and dice your HTML document. preg_replace() <?php $str = \"Visit Microsoft!\" ; $pattern = \"/microsoft/i\" ; echo preg_replace ( $pattern , \"ME\" , $str ); // Outputs \"Visit ME!\" ?> preg_split() <?php $str = \"Hello World!\" ; $pattern = \"/ /\" ; echo preg_split ( $pattern , $str ); // Outputs array(\"Hello\", \"World!\") ?> When you want to read in records from a file, in which each record is separated by a pattern you can match with a regular expression. Read the entire file into a string and then split on the regular expression: <?php $contents = file_get_contents ( '/path/to/your/file.txt' ); $records = preg_split ( '/[0-9]+\\) /' , $contents ); ?> This breaks apart a numbered list and places the individual list items into array elements. So if you have a list like this: 1) G\u00f6del 2) Escher 3) Bach you end up with a four-element array, with an empty opening element. That\u2019s because preg_split() assumes the delimiters are between items, but in this case, the numbers are before items: array(4) { [0]=> string(0) \"\" [1]=> string(7) \"G\u00f6del \" [2]=> string(7) \"Escher \" [3]=> string(5) \"Bach \" } From one point of view, this can be a feature, not a bug, because the nth element holds the nth item. But, to compact the array, you can eliminate the first element: $records = preg_split('/[0-9]+\\) /', $contents); array_shift($records); Another modification you might want is to strip newlines from the elements and substitute the empty string instead: $records = preg_split('/[0-9]+\\) /', str_replace(\"\\n\",'',$contents)); array_shift($records); PHP doesn\u2019t allow you to change the input record separator to anything other than a newline, so this technique is also useful for breaking apart records divided by strings. However, if you find yourself splitting on a string instead of a regular expression, substitute explode() for preg_split() for a more efficient operation. Regular Expression Modifiers Modifier Description i Performs a case-insensitive search m Performs a multiline search (patterns that search for the beginning or end of a string will match the beginning or end of each line) u Enables correct matching of UTF-8 encoded patterns Regular Expression Patterns Brackets are used to find a range of characters: Expression Description [abc] Find one character from the options between the brackets [^abc] Find any character NOT between the brackets [0-9] Find one character from the range 0 to 9 Metacharacters Metacharacters are characters with a special meaning. Metacharacter Description | Find a match for any one of the patterns separated by | as in: cat|dog|fish . Find just one instance of any character ^ Finds a match as the beginning of a string as in: ^Hello $ Finds a match at the end of the string as in: World$ \\d Find a digit \\s Find a whitespace character \\b Find a match at the beginning of a word like this: \\bWORD, or at the end of a word like this: WORD\\b \\uxxxx Find the Unicode character specified by the hexadecimal number xxxx Quantifiers Quantifiers define quantities Quantifier Description n+ Find one or more n n* Find zero or more n n? Find zero or one n n{x} Matches any string that contains a sequence of X n's n{x,} Matches any string that contains a sequence of at least X n's n{,y} Matches any string that contains a sequence of up to Y n's n{x,y} Matches any string that contains a sequence of X to Y n's If your expression needs to search for one of the special characters you can use a backslash ( \\ ) to escape them. For example, to search for one or more question marks you can use the following expression: $pattern = '/\\?+/'; Grouping You can use parentheses ( ) to apply quantifiers to entire patterns. They also can be used to select parts of the pattern to be used as a match. <?php $str = \"Apples and bananas.\" ; $pattern = \"/ba(na){2}/i\" ; echo preg_match ( $pattern , $str ); // Outputs 1 ?> Finding the nth Occurrence of a Match Use preg_match_all() to pull all the matches into an array; then pick out the specific matches in which you\u2019re interested. <?php $todo = \"1. Get Dressed 2. Eat Jelly 3. Squash every week into a day\" ; preg_match_all ( \"/\\d\\. ([^\\d]+)/\" , $todo , $matches ); print \"The second item on the todo list is: \" ; // $matches[1] is an array of each substring captured by ([^\\d]+) print $matches [ 1 ][ 1 ] . \" \\n \" ; print \"The entire todo list is: \" ; foreach ( $matches [ 1 ] as $match ) { print \" $match\\n \" ; } ?> Because the preg_match() function stops after it finds one match, you need to use preg_match_all() instead if you\u2019re looking for additional matches. The preg_match_all() function returns the number of full pattern matches it finds. If it finds no matches, it returns 0. If it encounters an error, such as a syntax problem in the pattern, it returns false. The third argument to preg_match_all() is populated with an array holding information about the various substrings that the pattern has matched. . The first element holds an array of matches of the complete pattern. For example, this means that $matches[0] holds the parts of $todo that match /\\d. ([^\\d]+)/: 1. Get Dressed, 2. Eat Jelly, and 3. Squash every week into a day. Subsequent elements of the $matches array hold arrays of text matched by each parenthesized subpattern. The pattern in the example has just one subpattern ([^\\d]+). So $matches[1] is an array of strings that match that subpattern: Get Dressed, Eat Jelly, and Squash every week into a day. If there were a second subpattern, the substrings that it matched would be in $matches[2], a third subpattern\u2019s matches would be in $matches[3], and so on. Instead of returning an array divided into full matches and then submatches, preg_match_all() can return an array divided by matches, with each submatch inside. To trigger this, pass PREG_SET_ORDER in as the fourth argument. This is particularly useful when you\u2019ve got multiple captured subpatterns and you want to iterate through the subpattern groups one group at a time. <?php $todo = \" first=Get Dressed next=Eat Jelly last=Squash every week into a day \" ; preg_match_all ( \"/([a-zA-Z]+)=(.*)/\" , $todo , $matches , PREG_SET_ORDER ); foreach ( $matches as $match ) { print \"The { $match [ 1 ] } action is { $match [ 2 ] } \\n \" ; } ?> The first action is Get Dressed The next action is Eat Jelly The last action is Squash every week into a day With PREG_SET_ORDER, each value of $match in the foreach loop contains all the subpatterns: $match[0] is the entire matched string, $match[1] the bit before the =, and $match[2] the bit after the =. Choosing Greedy or Nongreedy Matches When you want your pattern to match the smallest possible string instead of the largest. Place a ? after a quantifier to alter that portion of the pattern. // find all <em>emphasized</em> sections preg_match_all('@<em>.+?</em>@', $html, $matches); Or use the U pattern-modifier ending to invert all quantifiers from greedy (\u201cmatch as many characters as possible\u201d) to nongreedy (\u201cmatch as few characters as possible\u201d). // find all <em>emphasized</em> sections preg_match_all('@<em>.+</em>@U', $html, $matches); By default, all regular expression quantifiers in PHP are greedy. For example, consider the pattern . , which matches \" , one or more characters, ,\u201d matching against the string I simply love your work . A greedy regular expression finds one match, because after it matches the opening , its .+ slurps up as much as possible, finally grinding to a halt at the final . The .+ matches love your work. A nongreedy regular expression, on the other hand, finds a pair of matches. The first is matched as before, but then .+ stops as soon as it can, only matching love. A second match then goes ahead: the next .+ matches work. $html = 'I simply <em>love</em> your <em>work</em>'; // Greedy $matchCount = preg_match_all('@<em>.+</em>@', $html, $matches); print \"Greedy count: \" . $matchCount . \"\\n\"; // Nongreedy $matchCount = preg_match_all('@<em>.+?</em>@', $html, $matches); print \"First non-greedy count: \" . $matchCount . \"\\n\"; // Nongreedy $matchCount = preg_match_all('@<em>.+</em>@U', $html, $matches); print \"Second non-greedy count: \" . $matchCount . \"\\n\"; Greedy count: 1 First non-greedy count: 2 Second non-greedy count: 1 Greedy matching is also known as maximal matching and nongreedy matching can be called minimal matching, because these methods match either the maximum or minimum number of characters possible. Although nongreedy matching is useful for simplistic HTML parsing, it can break down if your markup isn\u2019t 100 percent valid and there are, for example, stray tags lying around. If your goal is just to remove all (or some) HTML tags from a block of text, you\u2019re better off not using a regular expression. Instead, use the built-in function strip_tags(); it\u2019s faster and it works correctly. Finally, even though the idea of nongreedy matching comes from Perl, the U modifier is incompatible with Perl and is unique to PHP\u2019s Perl-compatible regular expressions. It inverts all quantifiers, turning them from greedy to nongreedy and also the reverse. So to get a greedy quantifier inside of a pattern operating under a trailing /U, just add a ? to the end, the same way you would normally turn a greedy quantifier into a non\u2010greedy one.","title":"Regex"},{"location":"Func/phpRegex/#regular-expressions-functions","text":"Function Description preg_filter() Returns a string or an array with pattern matches replaced, but only if matches were found preg_grep() Returns an array consisting only of elements from the input array which matched the pattern preg_last_error() Returns an error code indicating the reason that the most recent regular expression call failed preg_match() Returns 1 if the pattern was found in the string and 0 if not preg_match_all() Returns the number of times the pattern was found in the string, which may also be 0 preg_replace() Returns a new string where matched patterns have been replaced with another string preg_replace_callback() Given an expression and a callback, returns a string where all matches of the expression are replaced with the substring returned by the callback preg_replace_callback_array() Given an array associating expressions with callbacks, returns a string where all matches of each expression are replaced with the substring returned by the callback preg_split() Breaks a string into an array using matches of a regular expression as separators preg_quote() Escapes characters that have a special meaning in regular expressions by putting a backslash in front of them","title":"Regular Expressions Functions"},{"location":"Func/phpRegex/#preg_replace_callback","text":"When you want to process matched text with a PHP function. For example, you want to decode all HTML entities in captured subpatterns. Use preg_replace_callback(). Instead of a replacement pattern, give it a callback function. This callback function is passed an array of matched subpatterns and should return an appropriate replacement string. <?php // Generating replacement strings with a callback function $h = 'The &lt;b&gt; tag makes text bold: <code>&lt;b&gt;bold&lt;/b&gt;</code>' ; print preg_replace_callback ( '@<code>(.*?)</code>@' , 'decode' , $h ); // $matches[0] is the entire matched string // $matches[1] is the first captured subpattern function decode ( $matches ) { return html_entity_decode ( $matches [ 1 ]); } } ?> This prints: The <b> tag makes text bold: <b>bold</b> The second argument to preg_replace_callback() specifies the function that is to be called to calculate replacement strings. Like everywhere the PHP \u201ccallable\u201d pseudotype is used, this argument can be a string or an array. Use a string to specify a function name. To use an object instance method as a callback, pass an array whose first element is the object and whose second element is a string containing the method name. To use a static class method as a callback, pass an array of two strings: the class name and the method name. In PHP 5.4.0 and later, you can pass a variable containing an anonymous function, or define the function inline with the call to preg_replace_callback(). The callback function is passed one argument: an array of matches. Element 0 of this array is always the text that matched the entire pattern. If the pattern given to preg_replace_callback() has any parenthesized subpatterns, these are present in subsequent elements of the $matches array. The keys of the $matches array are numeric, even if there are named subpatterns in the pattern. If you are providing an anonymous function as a callback, it can be memory intensive if the function creation is inline with the call to preg_replace_callback() and inside a loop. If you want to use an anonymous function with preg_replace_callback(), store the anonymous function callback in a variable. Then, provide the variable to preg_replace_callback() as the callback function. <?php // Generating replacement strings with an anonymous function $callbackFunction = function ( $matches ) { return html_entity_decode ( $matches [ 1 ]); }; $fp = fopen ( __DIR__ . '/html-to-decode.html' , 'r' ); while ( ! feof ( $fp )) { $line = fgets ( $fp ); print preg_replace_callback ( '@<code>(.*?)</code>@' , $callbackFunction , $line ); } fclose ( $fp ); ?>","title":"preg_replace_callback()"},{"location":"Func/phpRegex/#preg_quote","text":"Escapes characters that have a special meaning in regular expressions by putting a backslash in front of them. When you want to have characters such as * or + treated as literals, not as metacharacters, inside a regular expression. This is useful when allowing users to type in search strings you want to use inside a regular expression. <?php $pattern = preg_quote ( 'The Education of H*Y*M*A*N K*A*P*L*A*N' ) . ':(\\d+)' ; if ( preg_match ( \"/ $pattern /\" , $book_rank , $matches )) { print \"Leo Rosten's book ranked: \" . $matches [ 1 ]; } ?> Here are the characters that preg_quote() escapes: . \\ + * ? ^ $ [ ] () { } < > = ! | : It escapes the metacharacters with a backslash. You can also pass preg_quote() an additional character to escape as a second argument. It\u2019s useful to pass your pattern delimiter (usually /) as this argument so it also gets escaped. This is important if you incorporate user input into a regular expression pattern. The following code expects $_GET['search_term'] from a web form and searches for words beginning with $_GET['search_term'] in a string $s: <?php $search_term = preg_quote ( $_GET [ 'search_term' ], '/' ); if ( preg_match ( \"/\\b $search_term /i\" , $s )) { print 'match!' ; } ?> Using preg_quote() ensures the regular expression is interpreted properly if, for example, a Magnum, P.I. fan enters t.c as a search term. Without preg_quote(), this matches tic, tucker, and any other words whose first letter is t and third letter is c. Passing the pattern delimiter to preg_quote() as well makes sure that user input with forward slashes in it, such as CP/M, is also handled correctly.","title":"preg_quote()"},{"location":"Func/phpRegex/#preg_grep","text":"When you want to find all the lines in a file that match a pattern. There are two ways to do this. First example is faster, but uses more memory. It uses the file() function to put each line of the file into an array and preg_grep() to filter out the nonmatching lines. // Efficiently finding lines that match a pattern <?php $pattern = \"/\\bo'reilly\\b/i\" ; // only O'Reilly books $ora_books = preg_grep ( $pattern , file ( '/path/to/your/file.txt' )); ?> The next example is slower, but more memory efficient. It reads the file a line at a time and uses preg_match() to check each line after it\u2019s read. <?php //Efficiently finding lines that match a pattern $fh = fopen ( '/path/to/your/file.txt' , 'r' ) or die ( $php_errormsg ); while ( ! feof ( $fh )) { $line = fgets ( $fh ); if ( preg_match ( $pattern , $line )) { $ora_books [ ] = $line ; } } fclose ( $fh ); ?> Keep in mind that because both methods operate on individual lines of the file, they can\u2019t successfully use patterns that match text that spans multiple lines.","title":"preg_grep()"},{"location":"Func/phpRegex/#preg_match","text":"<?php $str = \"Visit arcelopera.github.io\" ; $pattern = \"/arce/i\" ; echo preg_match ( $pattern , $str ); // Outputs 1 ?>","title":"preg_match()"},{"location":"Func/phpRegex/#preg_match_all","text":"<?php $str = \"The rain in SPAIN falls mainly on the plains.\" ; $pattern = \"/ain/i\" ; echo preg_match_all ( $pattern , $str ); // Outputs 4 ?> For example, when you want to capture text inside HTML tags, you can find all the heading tags in an HTML document. <?php // Capturing HTML headings $html = file_get_contents ( __DIR__ . '/example.html' ); preg_match_all ( '@<h([1-6])>(.+?)</h\\1>@is' , $html , $matches ); foreach ( $matches [ 2 ] as $text ) { print \"Heading: $text\\n \" ; } ?> Robust parsing of HTML is difficult using a simple regular expression. This is one advantage of using XHTML; it\u2019s significantly easier to validate and parse. Regular expressions can be moderately useful for parsing small amounts of HTML, especially if the structure of that HTML is reasonably constrained (or you\u2019re generating it yourself). For more generalized and robust HTML parsing, use the Tidy extension. It provides an interface to the popular libtidy HTML cleanup library. After Tidy has cleaned up your HTML, you can use its methods for getting at parts of the document. Or if you\u2019ve told Tidy to convert your HTML to XHTML, you can use all of the XML manipulation power of SimpleXML or the DOM extension to slice and dice your HTML document.","title":"preg_match_all()"},{"location":"Func/phpRegex/#preg_replace","text":"<?php $str = \"Visit Microsoft!\" ; $pattern = \"/microsoft/i\" ; echo preg_replace ( $pattern , \"ME\" , $str ); // Outputs \"Visit ME!\" ?>","title":"preg_replace()"},{"location":"Func/phpRegex/#preg_split","text":"<?php $str = \"Hello World!\" ; $pattern = \"/ /\" ; echo preg_split ( $pattern , $str ); // Outputs array(\"Hello\", \"World!\") ?> When you want to read in records from a file, in which each record is separated by a pattern you can match with a regular expression. Read the entire file into a string and then split on the regular expression: <?php $contents = file_get_contents ( '/path/to/your/file.txt' ); $records = preg_split ( '/[0-9]+\\) /' , $contents ); ?> This breaks apart a numbered list and places the individual list items into array elements. So if you have a list like this: 1) G\u00f6del 2) Escher 3) Bach you end up with a four-element array, with an empty opening element. That\u2019s because preg_split() assumes the delimiters are between items, but in this case, the numbers are before items: array(4) { [0]=> string(0) \"\" [1]=> string(7) \"G\u00f6del \" [2]=> string(7) \"Escher \" [3]=> string(5) \"Bach \" } From one point of view, this can be a feature, not a bug, because the nth element holds the nth item. But, to compact the array, you can eliminate the first element: $records = preg_split('/[0-9]+\\) /', $contents); array_shift($records); Another modification you might want is to strip newlines from the elements and substitute the empty string instead: $records = preg_split('/[0-9]+\\) /', str_replace(\"\\n\",'',$contents)); array_shift($records); PHP doesn\u2019t allow you to change the input record separator to anything other than a newline, so this technique is also useful for breaking apart records divided by strings. However, if you find yourself splitting on a string instead of a regular expression, substitute explode() for preg_split() for a more efficient operation.","title":"preg_split()"},{"location":"Func/phpRegex/#regular-expression-modifiers","text":"Modifier Description i Performs a case-insensitive search m Performs a multiline search (patterns that search for the beginning or end of a string will match the beginning or end of each line) u Enables correct matching of UTF-8 encoded patterns","title":"Regular Expression Modifiers"},{"location":"Func/phpRegex/#regular-expression-patterns","text":"Brackets are used to find a range of characters: Expression Description [abc] Find one character from the options between the brackets [^abc] Find any character NOT between the brackets [0-9] Find one character from the range 0 to 9","title":"Regular Expression Patterns"},{"location":"Func/phpRegex/#metacharacters","text":"Metacharacters are characters with a special meaning. Metacharacter Description | Find a match for any one of the patterns separated by | as in: cat|dog|fish . Find just one instance of any character ^ Finds a match as the beginning of a string as in: ^Hello $ Finds a match at the end of the string as in: World$ \\d Find a digit \\s Find a whitespace character \\b Find a match at the beginning of a word like this: \\bWORD, or at the end of a word like this: WORD\\b \\uxxxx Find the Unicode character specified by the hexadecimal number xxxx","title":"Metacharacters"},{"location":"Func/phpRegex/#quantifiers","text":"Quantifiers define quantities Quantifier Description n+ Find one or more n n* Find zero or more n n? Find zero or one n n{x} Matches any string that contains a sequence of X n's n{x,} Matches any string that contains a sequence of at least X n's n{,y} Matches any string that contains a sequence of up to Y n's n{x,y} Matches any string that contains a sequence of X to Y n's If your expression needs to search for one of the special characters you can use a backslash ( \\ ) to escape them. For example, to search for one or more question marks you can use the following expression: $pattern = '/\\?+/';","title":"Quantifiers"},{"location":"Func/phpRegex/#grouping","text":"You can use parentheses ( ) to apply quantifiers to entire patterns. They also can be used to select parts of the pattern to be used as a match. <?php $str = \"Apples and bananas.\" ; $pattern = \"/ba(na){2}/i\" ; echo preg_match ( $pattern , $str ); // Outputs 1 ?>","title":"Grouping"},{"location":"Func/phpRegex/#finding-the-nth-occurrence-of-a-match","text":"Use preg_match_all() to pull all the matches into an array; then pick out the specific matches in which you\u2019re interested. <?php $todo = \"1. Get Dressed 2. Eat Jelly 3. Squash every week into a day\" ; preg_match_all ( \"/\\d\\. ([^\\d]+)/\" , $todo , $matches ); print \"The second item on the todo list is: \" ; // $matches[1] is an array of each substring captured by ([^\\d]+) print $matches [ 1 ][ 1 ] . \" \\n \" ; print \"The entire todo list is: \" ; foreach ( $matches [ 1 ] as $match ) { print \" $match\\n \" ; } ?> Because the preg_match() function stops after it finds one match, you need to use preg_match_all() instead if you\u2019re looking for additional matches. The preg_match_all() function returns the number of full pattern matches it finds. If it finds no matches, it returns 0. If it encounters an error, such as a syntax problem in the pattern, it returns false. The third argument to preg_match_all() is populated with an array holding information about the various substrings that the pattern has matched. . The first element holds an array of matches of the complete pattern. For example, this means that $matches[0] holds the parts of $todo that match /\\d. ([^\\d]+)/: 1. Get Dressed, 2. Eat Jelly, and 3. Squash every week into a day. Subsequent elements of the $matches array hold arrays of text matched by each parenthesized subpattern. The pattern in the example has just one subpattern ([^\\d]+). So $matches[1] is an array of strings that match that subpattern: Get Dressed, Eat Jelly, and Squash every week into a day. If there were a second subpattern, the substrings that it matched would be in $matches[2], a third subpattern\u2019s matches would be in $matches[3], and so on. Instead of returning an array divided into full matches and then submatches, preg_match_all() can return an array divided by matches, with each submatch inside. To trigger this, pass PREG_SET_ORDER in as the fourth argument. This is particularly useful when you\u2019ve got multiple captured subpatterns and you want to iterate through the subpattern groups one group at a time. <?php $todo = \" first=Get Dressed next=Eat Jelly last=Squash every week into a day \" ; preg_match_all ( \"/([a-zA-Z]+)=(.*)/\" , $todo , $matches , PREG_SET_ORDER ); foreach ( $matches as $match ) { print \"The { $match [ 1 ] } action is { $match [ 2 ] } \\n \" ; } ?> The first action is Get Dressed The next action is Eat Jelly The last action is Squash every week into a day With PREG_SET_ORDER, each value of $match in the foreach loop contains all the subpatterns: $match[0] is the entire matched string, $match[1] the bit before the =, and $match[2] the bit after the =.","title":"Finding the nth Occurrence of a Match"},{"location":"Func/phpRegex/#choosing-greedy-or-nongreedy-matches","text":"When you want your pattern to match the smallest possible string instead of the largest. Place a ? after a quantifier to alter that portion of the pattern. // find all <em>emphasized</em> sections preg_match_all('@<em>.+?</em>@', $html, $matches); Or use the U pattern-modifier ending to invert all quantifiers from greedy (\u201cmatch as many characters as possible\u201d) to nongreedy (\u201cmatch as few characters as possible\u201d). // find all <em>emphasized</em> sections preg_match_all('@<em>.+</em>@U', $html, $matches); By default, all regular expression quantifiers in PHP are greedy. For example, consider the pattern . , which matches \" , one or more characters, ,\u201d matching against the string I simply love your work . A greedy regular expression finds one match, because after it matches the opening , its .+ slurps up as much as possible, finally grinding to a halt at the final . The .+ matches love your work. A nongreedy regular expression, on the other hand, finds a pair of matches. The first is matched as before, but then .+ stops as soon as it can, only matching love. A second match then goes ahead: the next .+ matches work. $html = 'I simply <em>love</em> your <em>work</em>'; // Greedy $matchCount = preg_match_all('@<em>.+</em>@', $html, $matches); print \"Greedy count: \" . $matchCount . \"\\n\"; // Nongreedy $matchCount = preg_match_all('@<em>.+?</em>@', $html, $matches); print \"First non-greedy count: \" . $matchCount . \"\\n\"; // Nongreedy $matchCount = preg_match_all('@<em>.+</em>@U', $html, $matches); print \"Second non-greedy count: \" . $matchCount . \"\\n\"; Greedy count: 1 First non-greedy count: 2 Second non-greedy count: 1 Greedy matching is also known as maximal matching and nongreedy matching can be called minimal matching, because these methods match either the maximum or minimum number of characters possible. Although nongreedy matching is useful for simplistic HTML parsing, it can break down if your markup isn\u2019t 100 percent valid and there are, for example, stray tags lying around. If your goal is just to remove all (or some) HTML tags from a block of text, you\u2019re better off not using a regular expression. Instead, use the built-in function strip_tags(); it\u2019s faster and it works correctly. Finally, even though the idea of nongreedy matching comes from Perl, the U modifier is incompatible with Perl and is unique to PHP\u2019s Perl-compatible regular expressions. It inverts all quantifiers, turning them from greedy to nongreedy and also the reverse. So to get a greedy quantifier inside of a pattern operating under a trailing /U, just add a ? to the end, the same way you would normally turn a greedy quantifier into a non\u2010greedy one.","title":"Choosing Greedy or Nongreedy Matches"},{"location":"Func/phpSessions/","text":"A session is a way to store information (in variables) to be used across multiple pages. Unlike a cookie, the information is not stored on the users computer. What is a PHP Session? When you work with an application, you open it, do some changes, and then you close it. This is much like a Session. The computer knows who you are. It knows when you start the application and when you end. But on the internet there is one problem: the web server does not know who you are or what you do, because the HTTP address doesn't maintain state. Session variables solve this problem by storing user information to be used across multiple pages (e.g. username, favorite color, etc). By default, session variables last until the user closes the browser. So; Session variables hold information about one single user, and are available to all pages in one application. If you need a permanent storage, you may want to store the data in a database. Start a PHP Session A session is started with the session_start() function. Session variables are set with the PHP global variable: $_SESSION. <?php // Start the session session_start (); ?> <!DOCTYPE html> <html> <body> <?php // Set session variables $_SESSION [ \"favcolor\" ] = \"green\" ; $_SESSION [ \"favanimal\" ] = \"cat\" ; echo \"Session variables are set.\" ; ?> </body> </html> The session_start() function must be the very first thing in your document. Before any HTML tags. Get PHP Session Variable Values Next, we create another page called \"demo_session2.php\". From this page, we will access the session information we set on the first page (\"demo_session1.php\"). Notice that session variables are not passed individually to each new page, instead they are retrieved from the session we open at the beginning of each page (session_start()). Also notice that all session variable values are stored in the global $_SESSION variable: <?php session_start (); ?> <!DOCTYPE html> <html> <body> <?php // Echo session variables that were set on previous page echo \"Favorite color is \" . $_SESSION [ \"favcolor\" ] . \".<br>\" ; echo \"Favorite animal is \" . $_SESSION [ \"favanimal\" ] . \".\" ; ?> </body> </html> Another way to show all the session variable values for a user session is to run the following code: <?php session_start (); ?> <!DOCTYPE html> <html> <body> <?php print_r ( $_SESSION ); ?> </body> </html> Most sessions set a user-key on the user's computer that looks something like this: 765487cf34ert8dede5a562e4f3a7e12. Then, when a session is opened on another page, it scans the computer for a user-key. If there is a match, it accesses that session, if not, it starts a new session. Modify a PHP Session Variable To change a session variable, just overwrite it: <?php session_start (); ?> <!DOCTYPE html> <html> <body> <?php // to change a session variable, just overwrite it $_SESSION [ \"favcolor\" ] = \"yellow\" ; print_r ( $_SESSION ); ?> </body> </html> Destroy a PHP Session To remove all global session variables and destroy the session, use session_unset() and session_destroy(): <?php session_start (); ?> <!DOCTYPE html> <html> <body> <?php // remove all session variables session_unset (); // destroy the session session_destroy (); ?> </body> </html>","title":"Sessions"},{"location":"Func/phpSessions/#what-is-a-php-session","text":"When you work with an application, you open it, do some changes, and then you close it. This is much like a Session. The computer knows who you are. It knows when you start the application and when you end. But on the internet there is one problem: the web server does not know who you are or what you do, because the HTTP address doesn't maintain state. Session variables solve this problem by storing user information to be used across multiple pages (e.g. username, favorite color, etc). By default, session variables last until the user closes the browser. So; Session variables hold information about one single user, and are available to all pages in one application. If you need a permanent storage, you may want to store the data in a database.","title":"What is a PHP Session?"},{"location":"Func/phpSessions/#start-a-php-session","text":"A session is started with the session_start() function. Session variables are set with the PHP global variable: $_SESSION. <?php // Start the session session_start (); ?> <!DOCTYPE html> <html> <body> <?php // Set session variables $_SESSION [ \"favcolor\" ] = \"green\" ; $_SESSION [ \"favanimal\" ] = \"cat\" ; echo \"Session variables are set.\" ; ?> </body> </html> The session_start() function must be the very first thing in your document. Before any HTML tags.","title":"Start a PHP Session"},{"location":"Func/phpSessions/#get-php-session-variable-values","text":"Next, we create another page called \"demo_session2.php\". From this page, we will access the session information we set on the first page (\"demo_session1.php\"). Notice that session variables are not passed individually to each new page, instead they are retrieved from the session we open at the beginning of each page (session_start()). Also notice that all session variable values are stored in the global $_SESSION variable: <?php session_start (); ?> <!DOCTYPE html> <html> <body> <?php // Echo session variables that were set on previous page echo \"Favorite color is \" . $_SESSION [ \"favcolor\" ] . \".<br>\" ; echo \"Favorite animal is \" . $_SESSION [ \"favanimal\" ] . \".\" ; ?> </body> </html> Another way to show all the session variable values for a user session is to run the following code: <?php session_start (); ?> <!DOCTYPE html> <html> <body> <?php print_r ( $_SESSION ); ?> </body> </html> Most sessions set a user-key on the user's computer that looks something like this: 765487cf34ert8dede5a562e4f3a7e12. Then, when a session is opened on another page, it scans the computer for a user-key. If there is a match, it accesses that session, if not, it starts a new session.","title":"Get PHP Session Variable Values"},{"location":"Func/phpSessions/#modify-a-php-session-variable","text":"To change a session variable, just overwrite it: <?php session_start (); ?> <!DOCTYPE html> <html> <body> <?php // to change a session variable, just overwrite it $_SESSION [ \"favcolor\" ] = \"yellow\" ; print_r ( $_SESSION ); ?> </body> </html>","title":"Modify a PHP Session Variable"},{"location":"Func/phpSessions/#destroy-a-php-session","text":"To remove all global session variables and destroy the session, use session_unset() and session_destroy(): <?php session_start (); ?> <!DOCTYPE html> <html> <body> <?php // remove all session variables session_unset (); // destroy the session session_destroy (); ?> </body> </html>","title":"Destroy a PHP Session"},{"location":"Func/phpUserFunc/","text":"A function is a block of statements that can be used repeatedly in a program. A function will not execute automatically when a page loads. A function will be executed by a call to the function. A PHP function is made of three things: Its code Its documentation (using PHPDoc) Its prototype In PHP, a function prototype (also called \u201csignature\u201d) is made of the name, arguments and, since PHP 7, its return type. Arguments can be typed, we call this \u201ctype-hint\u201d, and since PHP 7 we can type an argument with scalar types (bool, int, string\u2026), but since early PHP has objects, we can type-hint with a class. Also, arguments can have a default value. When you want to access the values passed to a function. <?php //Use the names from the function prototype: function commercial_sponsorship ( $letter , $number ) { print \"This episode of Sesame Street is brought to you by \" ; print \"the letter $letter and number $number . \\n \" ; } commercial_sponsorship ( 'G' , 3 ); $another_letter = 'X' ; $another_number = 15 ; commercial_sponsorship ( $another_letter , $another_number ); ?> Create a User Defined Function <?php function writeMsg () { echo \"Hello world!\" ; } writeMsg (); // call the function ?> Arguments Information can be passed to functions through arguments. Arguments are specified after the function name, inside the parentheses. You can add as many arguments as you want, just separate them with a comma. <?php function familyName ( $fname ) { echo \" $fname Refsnes.<br>\" ; } familyName ( \"Jani\" ); familyName ( \"Hege\" ); familyName ( \"Stale\" ); familyName ( \"Kai Jim\" ); familyName ( \"Borge\" ); ?> <?php function familyName ( $fname , $year ) { echo \" $fname Refsnes. Born in $year <br>\" ; } familyName ( \"Hege\" , \"1975\" ); familyName ( \"Stale\" , \"1978\" ); familyName ( \"Kai Jim\" , \"1983\" ); ?> PHP is a Loosely Typed Language In the example above, notice that we did not have to tell PHP which data type the variable is. PHP automatically associates a data type to the variable, depending on its value. Since the data types are not set in a strict sense, you can do things like adding a string to an integer without causing an error. In PHP 7, type declarations were added. This gives us an option to specify the expected data type when declaring a function, and by adding the strict declaration, it will throw a \"Fatal Error\" if the data type mismatches. <?php function addNumbers ( int $a , int $b ) { return $a + $b ; } echo addNumbers ( 5 , \"5 days\" ); // since strict is NOT enabled \"5 days\" is changed to int(5), and it will return 10 ?> To specify strict we need to set declare(strict_types=1);. This must be on the very first line of the PHP file. <?php declare ( strict_types = 1 ); // strict requirement function addNumbers ( int $a , int $b ) { return $a + $b ; } echo addNumbers ( 5 , \"5 days\" ); // since strict is enabled and \"5 days\" is not an integer, an error will be thrown ?> Default Parameter Values <?php declare ( strict_types = 1 ); // strict requirement function setHeight ( int $minheight = 50 ) { echo \"The height is : $minheight <br>\" ; } setHeight ( 350 ); setHeight (); // will use the default value of 50 setHeight ( 135 ); setHeight ( 80 ); ?> There are two important things to remember when assigning default values. First, all parameters with default values must appear after parameters without defaults. Otherwise, PHP can\u2019t tell which parameters are omitted and should take the default value and which arguments are overriding the default. <?php function wrap_in_html_tag ( $tag = 'strong' , $text ) { return \"< $tag > $text </ $tag >\" ; } echo wrap_in_html_tag ( 'p' , 'Hello World' ); echo wrap_in_html_tag ( 'em' , 'Hello World' ); ?> If you do this and pass wrap_in_html_tag() only a single argument, PHP assigns the value to $tag and issues a warning complaining of a missing second argument. Second, the assigned value must be a constant, such as a string or a number. It can\u2019t be a variable. Again, using wrap_in_html_tag(), such as our example, you can\u2019t do this: <?php $my_favorite_html_tag = 'blink' ; function wrap_in_html_tag ( $text , $tag = $my_favorite_html_tag ) { return \"< $tag > $text </ $tag >\" ; } echo wrap_in_html_tag ( 'Hello World' ); echo wrap_in_html_tag ( 'Hello World' , 'blink' ); ?> If you want to assign a default of nothing, one solution is to assign the empty string to your parameter: <?php function wrap_in_html_tag ( $text , $tag = '' ) { if ( empty ( $tag )) { return $text ; } return \"< $tag > $text </ $tag >\" ; } echo wrap_in_html_tag ( 'Hello World' ); echo wrap_in_html_tag ( 'Hello World' , 'blink' ); ?> This function returns the original string, if no value is passed in for the $tag. If a nonempty tag is passed in, it returns the string wrapped inside of tags. Returning values To let a function return a value, use the return statement <?php function sum ( int $x , int $y ) { return $x + $y ; } echo sum ( 5 , 5 ); ?> PHP Return Type Declarations PHP 7 also supports Type Declarations for the return statement. Like with the type declaration for function arguments, by enabling the strict requirement, it will throw a \"Fatal Error\" on a type mismatch. To declare a type for the function return, add a colon ( : ) and the type right before the opening curly ( /{ )bracket when declaring the function. <?php declare ( strict_types = 1 ); // strict requirement function addNumbers ( float $a , float $b ) : float { return $a + $b ; } echo addNumbers ( 1.2 , 5.2 ); ?> <?php declare ( strict_types = 1 ); // strict requirement function addNumbers ( float $a , float $b ) : int { return ( int )( $a + $b ); } echo addNumbers ( 1.2 , 5.2 ); ?> Passing Arguments by Reference In PHP, arguments are usually passed by value, which means that a copy of the value is used in the function and the variable that was passed into the function cannot be changed. When a function argument is passed by reference, changes to the argument also change the variable that was passed in. To turn a function argument into a reference, the & operator is used <?php function add_five ( & $value ) { $value += 5 ; } $num = 2 ; add_five ( $num ); echo $num ; ?> Returning Values by Reference When you want to return a value by reference, not by value. This allows you to avoid making a duplicate copy of a variable. The syntax for returning a variable by reference is similar to passing it by reference. However, instead of placing an & before the parameter, place it before the name of the function: <?php function & array_find_value ( $needle , & $haystack ) { foreach ( $haystack as $key => $value ) { if ( $needle == $value ) { return $haystack [ $key ]; } } } ?> Also, you must use the =& assignment operator instead of plain = when invoking the function: <?php $band =& array_find_value ( 'The Doors' , $artists ); echo $band ; ?> Returning More Than One Value Return an array and use list() to separate elements: <?php function array_stats ( $values ) { $min = min ( $values ); $max = max ( $values ); $mean = array_sum ( $values ) / count ( $values ); return array ( $min , $max , $mean ); } $values = array ( 1 , 3 , 5 , 9 , 13 , 1442 ); list ( $min , $max , $mean ) = array_stats ( $values ); echo \"Min: $min , Max: $max , Mean: $mean \" ; ?> PHP callable Keyword Use callable to require a callback function as an argument. The callable keyword is used to force a function argument to be a reference to a function. A callable can be one of the following: An anonymous function A string containing the name of a function An array describing a static class method An array describing an object method <?php function printFormatted ( callable $format , $str ) { echo $format ( $str ); echo \"<br>\" ; } function exclaim ( $str ) { return $str . \"!\" ; } printFormatted ( \"exclaim\" , \"Hello World\" ); ?> Creating Dynamic Functions When you want to create and define a function as your program is running. Use the closure syntax to define a function and store it in a variable: <?php $increment = 7 ; $add = function ( $i , $j ) use ( $increment ) { return $i + $j + $increment ; }; $sum = $add ( 1 , 2 ); echo $sum ; ?> $sum is now 10. If you are using a version of PHP earlier than 5.3.0, use create_function() instead: <?php $increment = 7 ; $add = create_function ( '$i,$j' , 'return $i+$j + ' . $increment . ';' ); $sum = $add ( 1 , 2 ); echo $sum ; ?>","title":"General"},{"location":"Func/phpUserFunc/#create-a-user-defined-function","text":"<?php function writeMsg () { echo \"Hello world!\" ; } writeMsg (); // call the function ?>","title":"Create a User Defined Function"},{"location":"Func/phpUserFunc/#arguments","text":"Information can be passed to functions through arguments. Arguments are specified after the function name, inside the parentheses. You can add as many arguments as you want, just separate them with a comma. <?php function familyName ( $fname ) { echo \" $fname Refsnes.<br>\" ; } familyName ( \"Jani\" ); familyName ( \"Hege\" ); familyName ( \"Stale\" ); familyName ( \"Kai Jim\" ); familyName ( \"Borge\" ); ?> <?php function familyName ( $fname , $year ) { echo \" $fname Refsnes. Born in $year <br>\" ; } familyName ( \"Hege\" , \"1975\" ); familyName ( \"Stale\" , \"1978\" ); familyName ( \"Kai Jim\" , \"1983\" ); ?>","title":"Arguments"},{"location":"Func/phpUserFunc/#php-is-a-loosely-typed-language","text":"In the example above, notice that we did not have to tell PHP which data type the variable is. PHP automatically associates a data type to the variable, depending on its value. Since the data types are not set in a strict sense, you can do things like adding a string to an integer without causing an error. In PHP 7, type declarations were added. This gives us an option to specify the expected data type when declaring a function, and by adding the strict declaration, it will throw a \"Fatal Error\" if the data type mismatches. <?php function addNumbers ( int $a , int $b ) { return $a + $b ; } echo addNumbers ( 5 , \"5 days\" ); // since strict is NOT enabled \"5 days\" is changed to int(5), and it will return 10 ?> To specify strict we need to set declare(strict_types=1);. This must be on the very first line of the PHP file. <?php declare ( strict_types = 1 ); // strict requirement function addNumbers ( int $a , int $b ) { return $a + $b ; } echo addNumbers ( 5 , \"5 days\" ); // since strict is enabled and \"5 days\" is not an integer, an error will be thrown ?>","title":"PHP is a Loosely Typed Language"},{"location":"Func/phpUserFunc/#default-parameter-values","text":"<?php declare ( strict_types = 1 ); // strict requirement function setHeight ( int $minheight = 50 ) { echo \"The height is : $minheight <br>\" ; } setHeight ( 350 ); setHeight (); // will use the default value of 50 setHeight ( 135 ); setHeight ( 80 ); ?> There are two important things to remember when assigning default values. First, all parameters with default values must appear after parameters without defaults. Otherwise, PHP can\u2019t tell which parameters are omitted and should take the default value and which arguments are overriding the default. <?php function wrap_in_html_tag ( $tag = 'strong' , $text ) { return \"< $tag > $text </ $tag >\" ; } echo wrap_in_html_tag ( 'p' , 'Hello World' ); echo wrap_in_html_tag ( 'em' , 'Hello World' ); ?> If you do this and pass wrap_in_html_tag() only a single argument, PHP assigns the value to $tag and issues a warning complaining of a missing second argument. Second, the assigned value must be a constant, such as a string or a number. It can\u2019t be a variable. Again, using wrap_in_html_tag(), such as our example, you can\u2019t do this: <?php $my_favorite_html_tag = 'blink' ; function wrap_in_html_tag ( $text , $tag = $my_favorite_html_tag ) { return \"< $tag > $text </ $tag >\" ; } echo wrap_in_html_tag ( 'Hello World' ); echo wrap_in_html_tag ( 'Hello World' , 'blink' ); ?> If you want to assign a default of nothing, one solution is to assign the empty string to your parameter: <?php function wrap_in_html_tag ( $text , $tag = '' ) { if ( empty ( $tag )) { return $text ; } return \"< $tag > $text </ $tag >\" ; } echo wrap_in_html_tag ( 'Hello World' ); echo wrap_in_html_tag ( 'Hello World' , 'blink' ); ?> This function returns the original string, if no value is passed in for the $tag. If a nonempty tag is passed in, it returns the string wrapped inside of tags.","title":"Default Parameter Values"},{"location":"Func/phpUserFunc/#returning-values","text":"To let a function return a value, use the return statement <?php function sum ( int $x , int $y ) { return $x + $y ; } echo sum ( 5 , 5 ); ?>","title":"Returning values"},{"location":"Func/phpUserFunc/#php-return-type-declarations","text":"PHP 7 also supports Type Declarations for the return statement. Like with the type declaration for function arguments, by enabling the strict requirement, it will throw a \"Fatal Error\" on a type mismatch. To declare a type for the function return, add a colon ( : ) and the type right before the opening curly ( /{ )bracket when declaring the function. <?php declare ( strict_types = 1 ); // strict requirement function addNumbers ( float $a , float $b ) : float { return $a + $b ; } echo addNumbers ( 1.2 , 5.2 ); ?> <?php declare ( strict_types = 1 ); // strict requirement function addNumbers ( float $a , float $b ) : int { return ( int )( $a + $b ); } echo addNumbers ( 1.2 , 5.2 ); ?>","title":"PHP Return Type Declarations"},{"location":"Func/phpUserFunc/#passing-arguments-by-reference","text":"In PHP, arguments are usually passed by value, which means that a copy of the value is used in the function and the variable that was passed into the function cannot be changed. When a function argument is passed by reference, changes to the argument also change the variable that was passed in. To turn a function argument into a reference, the & operator is used <?php function add_five ( & $value ) { $value += 5 ; } $num = 2 ; add_five ( $num ); echo $num ; ?>","title":"Passing Arguments by Reference"},{"location":"Func/phpUserFunc/#returning-values-by-reference","text":"When you want to return a value by reference, not by value. This allows you to avoid making a duplicate copy of a variable. The syntax for returning a variable by reference is similar to passing it by reference. However, instead of placing an & before the parameter, place it before the name of the function: <?php function & array_find_value ( $needle , & $haystack ) { foreach ( $haystack as $key => $value ) { if ( $needle == $value ) { return $haystack [ $key ]; } } } ?> Also, you must use the =& assignment operator instead of plain = when invoking the function: <?php $band =& array_find_value ( 'The Doors' , $artists ); echo $band ; ?>","title":"Returning Values by Reference"},{"location":"Func/phpUserFunc/#returning-more-than-one-value","text":"Return an array and use list() to separate elements: <?php function array_stats ( $values ) { $min = min ( $values ); $max = max ( $values ); $mean = array_sum ( $values ) / count ( $values ); return array ( $min , $max , $mean ); } $values = array ( 1 , 3 , 5 , 9 , 13 , 1442 ); list ( $min , $max , $mean ) = array_stats ( $values ); echo \"Min: $min , Max: $max , Mean: $mean \" ; ?>","title":"Returning More Than One Value"},{"location":"Func/phpUserFunc/#php-callable-keyword","text":"Use callable to require a callback function as an argument. The callable keyword is used to force a function argument to be a reference to a function. A callable can be one of the following: An anonymous function A string containing the name of a function An array describing a static class method An array describing an object method <?php function printFormatted ( callable $format , $str ) { echo $format ( $str ); echo \"<br>\" ; } function exclaim ( $str ) { return $str . \"!\" ; } printFormatted ( \"exclaim\" , \"Hello World\" ); ?>","title":"PHP callable Keyword"},{"location":"Func/phpUserFunc/#creating-dynamic-functions","text":"When you want to create and define a function as your program is running. Use the closure syntax to define a function and store it in a variable: <?php $increment = 7 ; $add = function ( $i , $j ) use ( $increment ) { return $i + $j + $increment ; }; $sum = $add ( 1 , 2 ); echo $sum ; ?> $sum is now 10. If you are using a version of PHP earlier than 5.3.0, use create_function() instead: <?php $increment = 7 ; $add = create_function ( '$i,$j' , 'return $i+$j + ' . $increment . ';' ); $sum = $add ( 1 , 2 ); echo $sum ; ?>","title":"Creating Dynamic Functions"},{"location":"Moodle/phpMoodle/","text":"Moodle is the premier Learning Management System (LMS) designed for seamless online education. With its user-friendly interface, advanced features, and versatile plugin system, Moodle empowers educators and institutions to create engaging and interactive learning experiences. Moodle is a global community that values innovation, collaboration, and effective online education. Key Features Open-Source Advantage Built on an open-source foundation, offering transparency and flexibility. Enjoy the freedom to customize and adapt Moodle to unique educational requirements. Intuitive Interface Streamlined navigation for educators and learners. Responsive design for optimal access across devices. Versatile Course Management Effortless course creation and organization. Supports diverse content types, from text to multimedia. Dynamic Collaboration Tools Robust communication features, including forums and chat. Facilitates group activities and collaborative projects. Efficient Assessment and Grading Customizable quizzes and automated grading. Provides detailed feedback for student improvement. Comprehensive Progress Tracking Real-time monitoring of individual and group progress. Analytics for data-driven insights into learner performance. Global Accessibility Multilingual support for a diverse user base. Customizable language preferences for personalized experiences. Developing with Moodle Developing a plugin for Moodle involves several steps, from setting up your development environment to coding and testing your plugin. Moodle plugins are essentially PHP scripts that extend the functionality of the Moodle learning management system. Below is a detailed guide to help you develop a Moodle plugin: Setting Up Your Development Environment Requirements PHP : Moodle is written in PHP, so you'll need PHP installed. Database : Moodle supports MySQL, PostgreSQL, MSSQL, and Oracle. You'll need one of these databases. Web Server : Apache or Nginx is commonly used. Moodle Installation : You need a local Moodle instance for development and testing. Understanding Moodle Plugin Types Moodle supports various types of plugins: Activity Modules : Add new activities (e.g., assignments, quizzes). Blocks : Add new blocks to the Moodle interface. Themes : Customize the look and feel of Moodle. Reports : Create new reports. Auth Plugins : Implement custom authentication methods. Enrol Plugins : Implement custom enrollment methods. Choose the plugin type based on the functionality you want to add. Creating the Plugin Skeleton Moodle provides a command-line tool and plugin to generate the initial plugin skeleton. You can also manually create the necessary files and folders. Writing Your Plugin Code Common Files version.php : Defines the plugin version and other metadata. db/install.xml : Defines database tables needed by your plugin. lang/en/yourpluginname.php : Contains language strings. index.php : Entry point for your plugin. view.php : Displays the main content. lib.php : Contains core functions used by your plugin. Adding Functionality Depending on your plugin type, you will add different functionalities. For an activity module, you might need to create forms for adding and updating records, views to display data, and so on. Utilize Moodle's API for database operations, form handling, and more. Example: Adding a Form <?php require_once ( \" $CFG->libdir /formslib.php\" ); class mod_yourpluginname_form extends moodleform { function definition () { $mform = $this -> _form ; $mform -> addElement ( 'text' , 'name' , get_string ( 'name' )); $mform -> setType ( 'name' , PARAM_NOTAGS ); $mform -> addRule ( 'name' , null , 'required' , null , 'client' ); $mform -> addElement ( 'editor' , 'intro' , get_string ( 'intro' )); $mform -> setType ( 'intro' , PARAM_RAW ); $this -> add_action_buttons (); } } Testing and Debugging Enable debugging in Moodle ( $CFG->debug = DEBUG_DEVELOPER; ) to see detailed error messages. Test your plugin thoroughly by creating different scenarios and ensuring all functionalities work as expected. Packaging and Distributing To distribute your plugin: Create a ZIP file of your plugin directory. Ensure all necessary files are included and version numbers are correct. Upload your plugin to the Moodle Plugin Directory for sharing with the Moodle community. Documentation and Maintenance Provide clear documentation for your plugin, including installation instructions, usage guides, and troubleshooting tips. Regularly maintain and update your plugin to ensure compatibility with new Moodle versions. Additional Resources Moodle Developer Documentation : Moodle Dev Docs Moodle API Documentation : Moodle API Moodle Forum : Moodle Community Developing a Moodle plugin can be a complex but rewarding process. By following these steps and utilizing the resources available, you can create powerful and flexible extensions to enhance the Moodle experience.","title":"Basics"},{"location":"Moodle/phpMoodle/#key-features","text":"Open-Source Advantage Built on an open-source foundation, offering transparency and flexibility. Enjoy the freedom to customize and adapt Moodle to unique educational requirements. Intuitive Interface Streamlined navigation for educators and learners. Responsive design for optimal access across devices. Versatile Course Management Effortless course creation and organization. Supports diverse content types, from text to multimedia. Dynamic Collaboration Tools Robust communication features, including forums and chat. Facilitates group activities and collaborative projects. Efficient Assessment and Grading Customizable quizzes and automated grading. Provides detailed feedback for student improvement. Comprehensive Progress Tracking Real-time monitoring of individual and group progress. Analytics for data-driven insights into learner performance. Global Accessibility Multilingual support for a diverse user base. Customizable language preferences for personalized experiences.","title":"Key Features"},{"location":"Moodle/phpMoodle/#developing-with-moodle","text":"Developing a plugin for Moodle involves several steps, from setting up your development environment to coding and testing your plugin. Moodle plugins are essentially PHP scripts that extend the functionality of the Moodle learning management system. Below is a detailed guide to help you develop a Moodle plugin:","title":"Developing with Moodle"},{"location":"Moodle/phpMoodle/#setting-up-your-development-environment","text":"Requirements PHP : Moodle is written in PHP, so you'll need PHP installed. Database : Moodle supports MySQL, PostgreSQL, MSSQL, and Oracle. You'll need one of these databases. Web Server : Apache or Nginx is commonly used. Moodle Installation : You need a local Moodle instance for development and testing.","title":"Setting Up Your Development Environment"},{"location":"Moodle/phpMoodle/#understanding-moodle-plugin-types","text":"Moodle supports various types of plugins: Activity Modules : Add new activities (e.g., assignments, quizzes). Blocks : Add new blocks to the Moodle interface. Themes : Customize the look and feel of Moodle. Reports : Create new reports. Auth Plugins : Implement custom authentication methods. Enrol Plugins : Implement custom enrollment methods. Choose the plugin type based on the functionality you want to add.","title":"Understanding Moodle Plugin Types"},{"location":"Moodle/phpMoodle/#creating-the-plugin-skeleton","text":"Moodle provides a command-line tool and plugin to generate the initial plugin skeleton. You can also manually create the necessary files and folders.","title":"Creating the Plugin Skeleton"},{"location":"Moodle/phpMoodle/#writing-your-plugin-code","text":"","title":"Writing Your Plugin Code"},{"location":"Moodle/phpMoodle/#common-files","text":"version.php : Defines the plugin version and other metadata. db/install.xml : Defines database tables needed by your plugin. lang/en/yourpluginname.php : Contains language strings. index.php : Entry point for your plugin. view.php : Displays the main content. lib.php : Contains core functions used by your plugin.","title":"Common Files"},{"location":"Moodle/phpMoodle/#adding-functionality","text":"Depending on your plugin type, you will add different functionalities. For an activity module, you might need to create forms for adding and updating records, views to display data, and so on. Utilize Moodle's API for database operations, form handling, and more.","title":"Adding Functionality"},{"location":"Moodle/phpMoodle/#example-adding-a-form","text":"<?php require_once ( \" $CFG->libdir /formslib.php\" ); class mod_yourpluginname_form extends moodleform { function definition () { $mform = $this -> _form ; $mform -> addElement ( 'text' , 'name' , get_string ( 'name' )); $mform -> setType ( 'name' , PARAM_NOTAGS ); $mform -> addRule ( 'name' , null , 'required' , null , 'client' ); $mform -> addElement ( 'editor' , 'intro' , get_string ( 'intro' )); $mform -> setType ( 'intro' , PARAM_RAW ); $this -> add_action_buttons (); } }","title":"Example: Adding a Form"},{"location":"Moodle/phpMoodle/#testing-and-debugging","text":"Enable debugging in Moodle ( $CFG->debug = DEBUG_DEVELOPER; ) to see detailed error messages. Test your plugin thoroughly by creating different scenarios and ensuring all functionalities work as expected.","title":"Testing and Debugging"},{"location":"Moodle/phpMoodle/#packaging-and-distributing","text":"To distribute your plugin: Create a ZIP file of your plugin directory. Ensure all necessary files are included and version numbers are correct. Upload your plugin to the Moodle Plugin Directory for sharing with the Moodle community.","title":"Packaging and Distributing"},{"location":"Moodle/phpMoodle/#documentation-and-maintenance","text":"Provide clear documentation for your plugin, including installation instructions, usage guides, and troubleshooting tips. Regularly maintain and update your plugin to ensure compatibility with new Moodle versions.","title":"Documentation and Maintenance"},{"location":"Moodle/phpMoodle/#additional-resources","text":"Moodle Developer Documentation : Moodle Dev Docs Moodle API Documentation : Moodle API Moodle Forum : Moodle Community Developing a Moodle plugin can be a complex but rewarding process. By following these steps and utilizing the resources available, you can create powerful and flexible extensions to enhance the Moodle experience.","title":"Additional Resources"},{"location":"Moodle/phpMoodleBehat/","text":"Behat is a framework for behavior driven development (BDD) which allows us to specify Moodle functionalities (aka features) as a human-readable list of steps. It parses these steps to executable actions to simulate user interaction against headless browsers (without JavaScript support, only curl-kind requests) or user simulation tools like Selenium, which interacts with browsers and allows JavaScript events simulation. Behat is a behavior-driven development (BDD) tool used in Moodle for automated functional testing. It simulates user interactions with the Moodle interface to ensure that features work as expected. Behat tests use plain language syntax (Gherkin) and provide a way to verify Moodle's web interface through predefined scenarios. Set Up Behat in Moodle Prerequisites: Ensure you have PHP installed with appropriate extensions like xml , curl , json . Ensure Selenium Server is set up if testing in real browsers (e.g., ChromeDriver or Geckodriver for Firefox). Use a dedicated testing database and data directory separate from your main Moodle site. Configure Moodle for Behat: Edit config.php to add Behat settings: // Behat configuration. if (defined('BEHAT_SITE_RUNNING') && BEHAT_SITE_RUNNING) { $CFG->behat_wwwroot = 'http://localhost/moodle'; // URL of your Moodle site. $CFG->behat_dataroot = '/path/to/moodledata_behat'; $CFG->behat_prefix = 'bht_'; // Optional prefix for tables in the test database. } Create and Initialize Behat Environment: Run the following command to initialize the Behat environment: php admin/tool/behat/cli/init.php This command does the following: - Configures the test site. - Sets up the test database and data directory. - Generates Behat feature context files and settings. Write Behat Tests Behat tests use the Gherkin language to describe scenarios. Tests are stored as .feature files within the tests/behat/ directories of core components or plugins. Basic Structure of a Behat Test: A .feature file contains: Feature : Human-readable list of scenarios that describes a feature. Scenario : Human-readable list of steps that describe a specific use case. Steps : Human-readable sentences that describe an action. There are 3 types of steps, Given describing the initial context, When the event that provokes a change and Then where the outcomes should be asserted. Explanation of Steps Given : Sets the initial context (e.g., user is logged in). And : Chains additional steps to the context. Then : Asserts an expected outcome. When : Performs an action. Example: Simple Behat Test Create a file named example.feature inside mod/quiz/tests/behat/ : @auth Feature: Login In order to login As a moodle user I need to be able to validate the username and password against moodle Scenario: Login as an existing user Given I am on \" login/index.php \" When I fill in \" username \" with \" admin \" And I fill in \" password \" with \" admin \" And I press \" loginbtn \" Then I should see \" Moodle 101: Course Name \" Scenario: Login as an non-existing user Given I am on \" login/index.php \" When I fill in \" username \" with \" admin \" And I fill in \" password \" with \" admin \" And I press \" loginbtn \" Then I should see \" Invalid login \" Other definitions Steps definitions : These are the PHP methods referenced by steps when matching its regular expression. The @Given , @When and @Then tags are descriptive and they are not taken into account when matching steps with steps definitions. The regular expressions placeholders are returned to the PHP method as arguments so methods can use them to tell the browser which button (for example) they want to click. /** - @When /^I click on the \"(.*)\" button$/ */ public function i_click_on_the_button($button) { // Simulates the user interaction (see Mink description below for more info) $this->getSession()->getPage()->pressButton($button); } Behat : PHP framework and CLI application that wraps the whole process of features files loading + features files parsing + execution of actions in the browser + results output (http://behat.org/) Gherkin : Human-readable language used to define features that can be parsed and translated into PHP methods. For more info, it's the same language used by Cucumber, the BDD Ruby framework (https://github.com/cucumber/cucumber/wiki/Gherkin) Context : In Behat scope a context is a PHP class that groups steps definitions (as methods) Mink : Is the component which interacts with browsers, simulating a real user interaction. It allows us to write PHP code (or use the available PHP methods) to send requests to the different browsers APIs through a common interface or extend it to allow browser-specific actions. The supported browsers includes Selenium, Selenium2, Sahi... http://mink.behat.org/ Selenium 2 : Web browser automation tool, applications like Mink can communicate with it through a RESTful API (http://code.google.com/p/selenium/wiki/JsonWireProtocol) to execute actions simulating user interaction. Selector type : Related with locator, is a way to select a node inside the page DOM Locator : Is what we are looking for inside the page DOM, it completely depends on the associated selector type, a few examples of it: Selector type = \"link\", Locator = \"Link text\" Selector type = \"field\", Locator = \"Field legend text\" Selector type = \"css\", Locator = \".css-class #id\" Selector type = \"xpath\", Locator = \"//input \" All these components are written in PHP, open sourced and packaged in a single and extensible framework. Quick view of the whole process Behat CLI execution Behat application initialization and loading of arguments (features files to execute, output format...) Reads the Behat config file (browser servers are specified here) Extensions overrides management Gherkin initialization Features files selection According to the arguments Gherkin looks for .features files It can use different features loaders (single file, a directory, the default directory...) The framework can be extended to allow multiple folders loading Features parsing (Gherkin) Loops through the loaded features files looking for scenarios Gets the list of steps of each scenario There are hooks at different levels https://docs.behat.org/en/latest/user_guide/context/hooks.html Steps parsing (Gherkin) Gherkin looks in the available steps definitions for a regular expression that matches the step text Step definition execution The step definition code is executed Steps definitions most of the time uses the Mink component to communicate with the browser API sending requests like \"click on that button\" or \"go to XXX page\" Scenario outcomes The scenario counts as failed if an exception is thrown when executing a step definition (for example trying to click a non-existing button) The scenario counts as passed if no exception is thrown during it's steps execution Finishing CLI execution A summary with all the scenario results is displayed It accepts different output formats (like JUnitXML) to it's execution in continuous integration systems (http://docs.behat.org/guides/6.cli.html#format-options) Moodle integration It follows the approach chosen with PHPUnit: It comes disabled by default, Behat is not included within Moodle and it has to be installed separately with the composer installer Moodle components (subsystems and plugins) can have a tests/behat/ folder The scenarios are executed in a test environment, the production database and dataroot are not affected by the tests modifications The scenarios specifies their own fixtures and it's execution is isolated from other scenarios and features, resetting the test database and the test dataroot before each scenario Moodle lists the features files and steps definitions of it's components in a behat.yml file, similar to the phpunit.xml manifest A basic behat.yml.dist config file has been included Running Behat Tests Running All Behat Tests: To execute all Behat tests, run: vendor/bin/behat --config /path/to/moodle/behat/behat.yml Running Specific Tests: Run a single .feature file: vendor/bin/behat --config /path/to/moodle/behat/behat.yml /path/to/example.feature Running Tests for a Specific Tag: Tags allow categorizing and filtering tests. For example: @quiz Feature: Create a quiz To run tests with the @quiz tag: vendor/bin/behat --config /path/to/moodle/behat/behat.yml --tags = @quiz Additional Options: Use Browser Profiles : --profile=chrome (if set up in your Behat configuration). Debugging : Add --format=pretty --out=std for more detailed output. Writing Effective Behat Steps and Contexts Using Predefined Steps: Moodle comes with a rich set of predefined Behat steps to interact with the UI. To see a list of available steps, run: vendor/bin/behat --definitions Writing Custom Steps: If existing steps do not cover your needs, you can define custom steps by creating a context class in tests/behat/ . Example: Create a Custom Context File : custom_context.php : use Behat\\Behat\\Context\\Context; use Behat\\Behat\\Context\\SnippetAcceptingContext; class custom_context implements Context, SnippetAcceptingContext { /** * @Given /^I print a custom message$/ */ public function i_print_a_custom_message() { echo \"This is a custom Behat step.\\n\"; } } Register the Context : Add it to your behat.yml file: default : suites : default : contexts : - custom_context Tips for Writing Good Behat Tests: Be Specific : Ensure each step is precise and unambiguous. Use Tags : Organize and filter your tests for better manageability. Reuse Steps : Avoid redundant steps by utilizing existing definitions. Write Atomic Tests : Keep scenarios small and focused on a single behavior. Advanced Behat Features in Moodle Use Data Tables for Form Fields: Data tables make it easy to fill forms: And I set the following fields: | Name | Quiz Test Name | | Description | This is a test quiz. | Use Backgrounds for Repeated Steps: Background steps run before each scenario in a feature: Feature: Quiz management Background: Given I log in as \" admin \" And I navigate to \" Course 1 \" course Scenario: Add a quiz And I add a \" Quiz \" to section \" 1 \" Use Hooks for Setup and Teardown: Hooks are methods that run before or after scenarios: public function before_scenario($event) { // Setup code. } Troubleshooting and Debugging Check Logs : Moodle's error logs can provide information if tests fail. Check Browser Output : Use the --format=pretty option for more readable output. Screenshot on Failure : Configure Behat to take screenshots on failure for debugging. Review Behat Configuration : Ensure behat.yml is correctly set up for your environment. Behat testing in Moodle ensures your code works well from a user's perspective. By following best practices for writing and running Behat tests, and utilizing Moodle's rich test ecosystem, you can enhance the quality and stability of your Moodle features.","title":"Behat"},{"location":"Moodle/phpMoodleBehat/#set-up-behat-in-moodle","text":"","title":"Set Up Behat in Moodle"},{"location":"Moodle/phpMoodleBehat/#write-behat-tests","text":"Behat tests use the Gherkin language to describe scenarios. Tests are stored as .feature files within the tests/behat/ directories of core components or plugins.","title":"Write Behat Tests"},{"location":"Moodle/phpMoodleBehat/#quick-view-of-the-whole-process","text":"","title":"Quick view of the whole process"},{"location":"Moodle/phpMoodleBehat/#moodle-integration","text":"It follows the approach chosen with PHPUnit: It comes disabled by default, Behat is not included within Moodle and it has to be installed separately with the composer installer Moodle components (subsystems and plugins) can have a tests/behat/ folder The scenarios are executed in a test environment, the production database and dataroot are not affected by the tests modifications The scenarios specifies their own fixtures and it's execution is isolated from other scenarios and features, resetting the test database and the test dataroot before each scenario Moodle lists the features files and steps definitions of it's components in a behat.yml file, similar to the phpunit.xml manifest A basic behat.yml.dist config file has been included","title":"Moodle integration"},{"location":"Moodle/phpMoodleBehat/#running-behat-tests","text":"","title":"Running Behat Tests"},{"location":"Moodle/phpMoodleBehat/#writing-effective-behat-steps-and-contexts","text":"","title":"Writing Effective Behat Steps and Contexts"},{"location":"Moodle/phpMoodleBehat/#advanced-behat-features-in-moodle","text":"","title":"Advanced Behat Features in Moodle"},{"location":"Moodle/phpMoodleBehat/#troubleshooting-and-debugging","text":"Check Logs : Moodle's error logs can provide information if tests fail. Check Browser Output : Use the --format=pretty option for more readable output. Screenshot on Failure : Configure Behat to take screenshots on failure for debugging. Review Behat Configuration : Ensure behat.yml is correctly set up for your environment. Behat testing in Moodle ensures your code works well from a user's perspective. By following best practices for writing and running Behat tests, and utilizing Moodle's rich test ecosystem, you can enhance the quality and stability of your Moodle features.","title":"Troubleshooting and Debugging"},{"location":"Moodle/phpMoodleInstall/","text":"For developers seeking an efficient and isolated environment, Moodle-Docker provides a convenient solution. Leveraging Docker containers, this setup streamlines the installation process, making development and testing seamless. Follow the steps below to set up Moodle with Moodle-Docker for a developer-friendly environment. Prerequisites: Install Docker: Ensure Docker and Docker Compose v2 is installed on your system. Visit Docker's official website for instructions. Add user group to run docker as a non-root user Create the docker group. sudo groupadd docker Add your user to the docker group. sudo usermod -aG docker $USER Log out and log back in so that your group membership is re-evaluated. If you're running Linux in a virtual machine, it may be necessary to restart the virtual machine for changes to take effect. You can also run the following command to activate the changes to groups: newgrp docker Verify that you can run docker commands without sudo. docker run hello-world More information about Docker post-install configuration can be found in the Docker documentation . Quick Install Clone Moodle-Docker Repository: Clone the Moodle-Docker repository from GitHub: git clone https://github.com/moodlehq/moodle-docker.git Set up path to Moodle code # For example: /home/user/moodle/ export MOODLE_DOCKER_WWWROOT = /path/to/moodle/code Choose a db server (Currently supported: pgsql, mariadb, mysql, mssql, oracle) export MOODLE_DOCKER_DB = pgsql Ensure customized config.php for the Docker containers is in place cp config.docker-template.php $MOODLE_DOCKER_WWWROOT /config.php Start up containers bin/moodle-docker-compose up -d prints: [ + ] Running 82 /5 \u2714 webserver 25 layers [ \u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff ] 0B/0B Pulled 364 .6s \u2714 exttests 14 layers [ \u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff ] 0B/0B Pulled 240 .1s \u2714 db 12 layers [ \u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff ] 0B/0B Pulled 207 .0s \u2714 mailpit 3 layers [ \u28ff\u28ff\u28ff ] 0B/0B Pulled 77 .7s \u2714 selenium 23 layers [ \u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff ] 0B/0B Pulled 240 .3s [ + ] Running 6 /6 \u2714 Network moodle-docker_default Created 20 .3s \u2714 Container moodle-docker-selenium-1 Started 94 .6s \u2714 Container moodle-docker-db-1 Started 94 .9s \u2714 Container moodle-docker-exttests-1 Started 94 .4s \u2714 Container moodle-docker-mailpit-1 Started 94 .8s \u2714 Container moodle-docker-webserver-1 Started 6 .6s Access Moodle Web Installer: Go to http://localhost:8000/admin/index.php and follow the instructions to install Moodle. Follow the Moodle web installer instructions to set up your site. Configure database details, administrator account, and other settings. Wait for DB to come up (important for oracle/mssql) bin/moodle-docker-wait-for-db Work with the containers (see Github wiki for more details) Stop and restart containers bin/moodle-docker-compose down stops and destroys the containers. If you want to use your containers continuously for manual testing or development without starting them up from scratch everytime you use them, you can also just stop without destroying them. With this approach, you can restart your containers sometime later, they will keep their data and won't be destroyed completely until you run: bin/moodle-docker-compose down Stop containers bin/moodle-docker-compose stop Restart containers bin/moodle-docker-compose start Shut down and destroy containers bin/moodle-docker-compose down Additional Notes: Accessing Docker Containers To access the Moodle Docker container's shell, use: docker exec -it moodle-docker_webserver_1 /bin/bash Congratulations! You've successfully set up Moodle using Moodle-Docker, creating an isolated and easily reproducible development environment. This Docker-based approach simplifies the process for developers, providing a consistent and efficient way to work on Moodle projects. Dive into development, customize your Moodle instance, and contribute to the vibrant Moodle community!","title":"Installation"},{"location":"Moodle/phpMoodleInstall/#prerequisites","text":"","title":"Prerequisites:"},{"location":"Moodle/phpMoodleInstall/#install-docker","text":"Ensure Docker and Docker Compose v2 is installed on your system. Visit Docker's official website for instructions.","title":"Install Docker:"},{"location":"Moodle/phpMoodleInstall/#add-user-group-to-run-docker-as-a-non-root-user","text":"Create the docker group. sudo groupadd docker Add your user to the docker group. sudo usermod -aG docker $USER Log out and log back in so that your group membership is re-evaluated. If you're running Linux in a virtual machine, it may be necessary to restart the virtual machine for changes to take effect. You can also run the following command to activate the changes to groups: newgrp docker Verify that you can run docker commands without sudo. docker run hello-world More information about Docker post-install configuration can be found in the Docker documentation .","title":"Add user group to run docker as a non-root user"},{"location":"Moodle/phpMoodleInstall/#quick-install","text":"","title":"Quick Install"},{"location":"Moodle/phpMoodleInstall/#clone-moodle-docker-repository","text":"Clone the Moodle-Docker repository from GitHub: git clone https://github.com/moodlehq/moodle-docker.git","title":"Clone Moodle-Docker Repository:"},{"location":"Moodle/phpMoodleInstall/#set-up-path-to-moodle-code","text":"# For example: /home/user/moodle/ export MOODLE_DOCKER_WWWROOT = /path/to/moodle/code","title":"Set up path to Moodle code"},{"location":"Moodle/phpMoodleInstall/#choose-a-db-server-currently-supported-pgsql-mariadb-mysql-mssql-oracle","text":"export MOODLE_DOCKER_DB = pgsql","title":"Choose a db server (Currently supported: pgsql, mariadb, mysql, mssql, oracle)"},{"location":"Moodle/phpMoodleInstall/#ensure-customized-configphp-for-the-docker-containers-is-in-place","text":"cp config.docker-template.php $MOODLE_DOCKER_WWWROOT /config.php","title":"Ensure customized config.php for the Docker containers is in place"},{"location":"Moodle/phpMoodleInstall/#start-up-containers","text":"bin/moodle-docker-compose up -d prints: [ + ] Running 82 /5 \u2714 webserver 25 layers [ \u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff ] 0B/0B Pulled 364 .6s \u2714 exttests 14 layers [ \u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff ] 0B/0B Pulled 240 .1s \u2714 db 12 layers [ \u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff ] 0B/0B Pulled 207 .0s \u2714 mailpit 3 layers [ \u28ff\u28ff\u28ff ] 0B/0B Pulled 77 .7s \u2714 selenium 23 layers [ \u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff ] 0B/0B Pulled 240 .3s [ + ] Running 6 /6 \u2714 Network moodle-docker_default Created 20 .3s \u2714 Container moodle-docker-selenium-1 Started 94 .6s \u2714 Container moodle-docker-db-1 Started 94 .9s \u2714 Container moodle-docker-exttests-1 Started 94 .4s \u2714 Container moodle-docker-mailpit-1 Started 94 .8s \u2714 Container moodle-docker-webserver-1 Started 6 .6s","title":"Start up containers"},{"location":"Moodle/phpMoodleInstall/#access-moodle-web-installer","text":"Go to http://localhost:8000/admin/index.php and follow the instructions to install Moodle. Follow the Moodle web installer instructions to set up your site. Configure database details, administrator account, and other settings.","title":"Access Moodle Web Installer:"},{"location":"Moodle/phpMoodleInstall/#wait-for-db-to-come-up-important-for-oraclemssql","text":"bin/moodle-docker-wait-for-db","title":"Wait for DB to come up (important for oracle/mssql)"},{"location":"Moodle/phpMoodleInstall/#work-with-the-containers","text":"(see Github wiki for more details)","title":"Work with the containers"},{"location":"Moodle/phpMoodleInstall/#stop-and-restart-containers","text":"bin/moodle-docker-compose down stops and destroys the containers. If you want to use your containers continuously for manual testing or development without starting them up from scratch everytime you use them, you can also just stop without destroying them. With this approach, you can restart your containers sometime later, they will keep their data and won't be destroyed completely until you run: bin/moodle-docker-compose down","title":"Stop and restart containers"},{"location":"Moodle/phpMoodleInstall/#stop-containers","text":"bin/moodle-docker-compose stop","title":"Stop containers"},{"location":"Moodle/phpMoodleInstall/#restart-containers","text":"bin/moodle-docker-compose start","title":"Restart containers"},{"location":"Moodle/phpMoodleInstall/#shut-down-and-destroy-containers","text":"bin/moodle-docker-compose down","title":"Shut down and destroy containers"},{"location":"Moodle/phpMoodleInstall/#additional-notes","text":"","title":"Additional Notes:"},{"location":"Moodle/phpMoodleInstall/#accessing-docker-containers","text":"To access the Moodle Docker container's shell, use: docker exec -it moodle-docker_webserver_1 /bin/bash Congratulations! You've successfully set up Moodle using Moodle-Docker, creating an isolated and easily reproducible development environment. This Docker-based approach simplifies the process for developers, providing a consistent and efficient way to work on Moodle projects. Dive into development, customize your Moodle instance, and contribute to the vibrant Moodle community!","title":"Accessing Docker Containers"},{"location":"Moodle/phpMoodlePluginFiles/","text":"Writing the code for a Moodle plugin involves creating and configuring several essential files that define the plugin's behavior, data structure, language strings, and core functionality. Basic Required Basic Optional Others Other Optional version.php db/install.xml lib.php locallib.php lang/en/yourpluginname.php db/upgrade.php db/access.php db/install.php db/services.php db/events.php db/messages.php settings.php db/tasks.php db/renamedclasses.php Autoloaded classes CLI scripts backup AMD styles.css YUI README pix/icon.svg upgrade.txt thirdpartylibs.xml CHANGES environment.xml readme_moodle.txt Basic version.php The version.php file is crucial for defining a Moodle plugin's metadata, including its version, dependencies, required Moodle version, and other important information. This file enables Moodle to recognize, manage, and update the plugin appropriately. Structure of version.php <?php defined ( 'MOODLE_INTERNAL' ) || die (); $plugin -> version = 2024053001 ; // Updated version for new release. $plugin -> requires = 2021051700 ; // Minimum Moodle version required. $plugin -> component = 'mod_yourpluginname' ; // Unique name of the plugin. $plugin -> maturity = MATURITY_STABLE ; // Indicates stability of the plugin. $plugin -> release = 'v1.1' ; // Human-readable version number. $plugin -> dependencies = [ 'mod_otherplugin' => 2023031500 , // This plugin depends on another plugin. 'mod_anotherplugin' => 2022010100 , // Another dependency. ]; File Guard - Required defined('MOODLE_INTERNAL') || die(); Ensures the file is accessed through the Moodle system and not directly via a URL, enhancing security. Always include this line at the beginning of your version.php file. Version - Required $plugin->version = 2024053000; Specifies the current version of your plugin. The format YYYYMMDDXX (Year, Month, Day, Incremental Sequence) is typically used. Update this value for every new release or update of your plugin. The format helps in sorting and identifying the latest version easily. Requires - Recommended $plugin->requires = 2021051700; Defines the minimum version of Moodle required for your plugin to work correctly. Set this to the earliest Moodle version that supports all the features and APIs used by your plugin. Always verify compatibility during testing. Component - Required $plugin->component = 'mod_yourpluginname'; Specifies the full name of the plugin, including its type and name. The format is usually type_pluginname (e.g., mod_yourpluginname for an activity plugin). The component value contains the name of the plugin in its full frankenstyle format. This name must be unique across all plugins in Moodle. It helps in identifying the plugin during installation, upgrade, and diagnostics. Maturity - Recommended $plugin->maturity = MATURITY_STABLE; Indicates the stability and readiness level of the plugin. Common values are MATURITY_ALPHA , MATURITY_BETA , MATURITY_RC (Release Candidate), and MATURITY_STABLE . Set this appropriately based on the development stage of your plugin. Use MATURITY_STABLE for production-ready versions, and other values for pre-release stages. Release - Recommended $plugin->release = 'v1.0'; Provides a human-readable version number for your plugin. This is useful for administrators and users to understand the versioning scheme and changes at a glance. Follow semantic versioning principles (e.g., v1.0 , v1.1 , v2.0 ) to indicate major, minor, and patch updates clearly. Peer Dependencies - Optional $plugin->dependencies = array( 'mod_otherplugin' => 2023031500, ); Specifies other plugins that your plugin depends on, including their required versions. This ensures that the necessary plugins are present and meet the required versions for your plugin to function correctly. List all dependencies with their respective minimum required versions. This helps prevent conflicts and ensures a smooth installation process. Supported versions - Optional A set of branch numbers to specify the lowest and highest branches of Moodle that the plugin supports. These value are inclusive. $plugin->supported = [ // Support from the Moodle 3.11 series. 311, // To the Moodle 4.0 series. 400, ]; Incompatible versions - Optional The earliest incompatible version of Moodle that the plugin cannot support the specified branch of Moodle. The plugin will not be installable on any versions of Moodle from this point on. $plugin->incompatible = [401]; lang/en/yourpluginname.php The lang/en/yourpluginname.php file is crucial for handling the language strings used by your Moodle plugin. This file contains all the text that will be displayed to users, allowing for easy translation and localization. Properly managing this file ensures that your plugin can support multiple languages and provides a consistent user experience. <?php $string [ 'modulename' ] = 'Your Plugin Name' ; $string [ 'modulenameplural' ] = 'Your Plugin Names' ; $string [ 'pluginname' ] = 'Your Plugin Name' ; $string [ 'modulename_help' ] = 'Use the Your Plugin Name module to do something useful.' ; $string [ 'yourpluginname:addinstance' ] = 'Add a new Your Plugin Name' ; $string [ 'yourpluginname:submit' ] = 'Submit Your Plugin Name' ; $string [ 'yourpluginname:view' ] = 'View Your Plugin Name' ; $string [ 'someadminsetting' ] = 'Some admin setting' ; $string [ 'someadminsetting_desc' ] = 'Description of some admin setting.' ; $string [ 'field_required' ] = 'This field is required.' ; $string [ 'error_invalidinput' ] = 'Invalid input provided.' ; $string [ 'welcome_message' ] = 'Welcome to Your Plugin Name!' ; $string [ 'goodbye_message' ] = 'Thank you for using Your Plugin Name.' ; The get_string API can be used to translate a string identifier back into a translated string. See the String API documentation for more information on language files. Module Name Every plugin must define the name of the plugin, or its pluginname. $string['modulename'] = 'Your Plugin Name'; $string['modulenameplural'] = 'Your Plugin Names'; $string['pluginname'] = 'Your Plugin Name'; Defines the name of your plugin and its plural form, which Moodle uses in various parts of the interface, such as the activity chooser. Choose a clear and descriptive name that conveys the functionality of your plugin. ACTIVITY MODULES ARE DIFFERENT Activity modules do not use the frankenstyle name as a filename, they use the plugin name. For example the forum activity plugin: // Plugin type: `mod` // Plugin name: `forum` // Frankenstyle plugin name: `mod_forum` // Plugin location: `mod/forum` // Language string location: `mod/forum/lang/en/forum.php` Help Strings $string['modulename_help'] = 'Use the Your Plugin Name module to do something useful.'; Provides help text or tooltips that offer additional information about your plugin. Write concise and informative help strings to assist users in understanding how to use the plugin. Capability Strings $string['yourpluginname:addinstance'] = 'Add a new Your Plugin Name'; $string['yourpluginname:submit'] = 'Submit Your Plugin Name'; $string['yourpluginname:view'] = 'View Your Plugin Name'; Defines capability strings that are used for permissions and roles in Moodle. These strings describe the actions that users can perform with your plugin. Clearly define the capabilities required for different user roles and ensure they are consistent with the plugin's functionality. Admin Settings Strings $string['someadminsetting'] = 'Some admin setting'; $string['someadminsetting_desc'] = 'Description of some admin setting.'; Defines language strings for admin settings, including descriptions that explain what each setting does. Provide clear and detailed descriptions to help administrators configure the plugin correctly. Form Validation and Error Messages $string['field_required'] = 'This field is required.'; $string['error_invalidinput'] = 'Invalid input provided.'; Provides language strings for form validation and error messages to inform users of required fields and input errors. Use straightforward and unambiguous language to ensure users understand what is required or what went wrong. Custom Messages $string['welcome_message'] = 'Welcome to Your Plugin Name!'; $string['goodbye_message'] = 'Thank you for using Your Plugin Name.'; Defines custom messages that can be displayed to users at various points in your plugin. Tailor these messages to enhance the user experience and provide helpful information. Best Practices for lang/en/yourpluginname.php Consistency : Ensure that the language keys ( $string['key'] ) are consistent and follow a clear naming convention, usually pluginname:key . Localization : Include all user-facing text in this file to support easy localization and translation into other languages. Clarity : Write clear and concise language strings that accurately describe the plugin's functionality and provide helpful information to users. Documentation : Document each string with comments if necessary to explain its purpose and context, especially if the string's usage might not be immediately obvious. Testing : Regularly test your plugin with different language packs to ensure that all strings are translated and displayed correctly. By following these guidelines, you can create a comprehensive and well-organized lang/en/yourpluginname.php file that supports effective localization and enhances the user experience of your Moodle plugin. lib.php The lib.php file contains core functions used by your plugin, such as adding, updating, and deleting instances, and other helper functions. File path: /lib.php The lib.php file is a legacy file which acts as a bridge between Moodle core, and the plugin. In recent plugins it should only be used to define callbacks and related functionality which currently is not supported as an auto-loadable class. For example, the navigationlib loads lib.php files for all plugin types that are able to inject their own nodes into the navigation tree (the file must be loaded to see if the corresponding *_extend_navigation() function is provided). PERFORMANCE IMPACT Moodle core often loads all the lib.php files of a given plugin types. For performance reasons, it is strongly recommended to keep this file as small as possible and have just required code implemented in it. All the plugin's internal logic should be implemented in the auto-loaded classes. The best advice is to put as much of your code as possible into classes, so you can use the automatic class loading locallib.php Global support functions used by all plugins. File path: /locallib.php The use of this file is no longer recommended, and new uses of it will not be permitted in core code. Rather than creating global functions in a global namespace in a locallib.php file, you should use autoloaded classes which are located in the classes/ directory. DB db/install.xml The install.xml file defines the database schema for your plugin. This file is used by Moodle to create the necessary database tables when the plugin is installed. Always remember that when creating or updating the install.xml you must use the built-in XMLDB editor within Moodle. Example Content <?xml version=\"1.0\" encoding=\"UTF-8\"?> <XMLDB PATH= \"mod/yourpluginname/db\" VERSION= \"2024053000\" COMMENT= \"Your Plugin Name activity module\" > <TABLES> <TABLE NAME= \"yourpluginname\" > <FIELDS> <FIELD NAME= \"id\" TYPE= \"int\" LENGTH= \"10\" NOTNULL= \"true\" SEQUENCE= \"true\" /> <FIELD NAME= \"course\" TYPE= \"int\" LENGTH= \"10\" NOTNULL= \"true\" /> <FIELD NAME= \"name\" TYPE= \"char\" LENGTH= \"255\" NOTNULL= \"true\" DEFAULT= \"\" /> <FIELD NAME= \"intro\" TYPE= \"text\" NOTNULL= \"false\" /> <FIELD NAME= \"introformat\" TYPE= \"int\" LENGTH= \"4\" NOTNULL= \"true\" DEFAULT= \"0\" /> <FIELD NAME= \"timecreated\" TYPE= \"int\" LENGTH= \"10\" NOTNULL= \"true\" DEFAULT= \"0\" /> <FIELD NAME= \"timemodified\" TYPE= \"int\" LENGTH= \"10\" NOTNULL= \"true\" DEFAULT= \"0\" /> </FIELDS> <KEYS> <KEY NAME= \"primary\" TYPE= \"primary\" FIELDS= \"id\" /> </KEYS> </TABLE> </TABLES> </XMLDB> db/upgrade.php File path: /db/upgrade.php The db/upgrade.php file contains upgrade steps, including database schema changes, changes to settings, and other steps which must be performed during upgrade. See the Upgrade API documentation for further information. GENERATING DATABASE SCHEMA CHANGES When making changes to the database schema you must use the build-in XMLDB editor within Moodle. This can be used to generate php upgrade steps. The install.xml schema must match the schema generated by the upgrade at all times. To create an upgrade step you must: Use the XMLDB editor to create the definition of the new fields Update the install.xml from the XMLDB editor Generate the PHP upgrade steps from within the XMLDB Editor Update the version number in your version.php In many cases you will be able to combine multiple upgrade steps into a single version change. When a version number increment is detected during an upgrade, the xmldb_[pluginname]_upgrade function is called with the old version number as the first argument. db/access.php - Plugin capabilities File path: /db/access.php The db/access.php file contains the initial configuration for a plugin's access control rules. Access control is handled in Moodle by the use of Roles, and Capabilities. You can read more about these in the Access API documentation . CHANGING INITIAL CONFIGURATION If you make changes to the initial configuration of existing access control rules, these will only take effect for new installations of your plugin. Any existing installation will not be updated with the latest configuration. Updating existing capability configuration for an installed site is not recommended as it may have already been modified by an administrator. $capabilities = [ // Ability to use the plugin. 'plugintype/pluginname:useplugininstance' => [ 'riskbitmask' => RISK_XSS, 'captype' => 'write', 'contextlevel' => CONTEXT_COURSE, 'archetypes' => [ 'manager' => CAP_ALLOW, 'editingteacher' => CAP_ALLOW, ], ], ]; Define Capabilities : Specifies the actions that users can perform within the plugin. Assign Roles : Associates capabilities with different Moodle roles (e.g., student, teacher, admin). Control Access : Manages who can access and execute specific functionalities within the plugin. db/install.php and db/uninstall.php Type db/install.php db/uninstall.php Hook Post-installation hook pre-uninstallation hook File path /CHANGES /db/uninstall.php Purpose Allows you to define a post-installation hook, which is called immediately after the initial creation of your database schema. Allows you to define a pre-uninstallation hook, which is called immediately before all table and data from your plugin are removed. CAUTION This file is not used at all after the initial installation of your plugin. It is not called during any upgrade. db/events.php - Event observers File path: /db/events.php Events are atomic pieces of information describing something that happened in Moodle. Events are primarily the result of user actions, but could also be the result of the cron process or administration actions undertaken via the command line. When an action takes place, an event is created by a core API or plugin. The Events system then disseminates this event information to observers registered for this event. In this way, the events system acts as a communication backbone throughout the Moodle system. Event observers can not modify event data or interrupt the dispatching of events, it is a one way communication channel. Moodle supports a feature known as Event observers to allow components to make changes when certain events take place. The db/events.php file allows you define any event subscriptions that your plugin needs to listen for. Event subscriptions are a convenient way to observe events generated elsewhere in Moodle. COMMUNICATION BETWEEN COMPONENTS You should not use event subscriptions to subscribe to events belonging to other plugins, without defining a dependency upon that plugin. See the Component communication principles documentation for a description of some of the risks of doing so. Any action in Moodle can trigger one or more events. In Moodle it is possible to register observers for events. An observer is notified when an event happens and receives the data related to that event. An observer can only act on the information in the event. It cannot modify the data for the event or prevent the action from occurring. The component containing the observer is communicating with the component that declared the event class. The normal rules for inter-component communication apply. In addition - event observers are a form of execution at a distance. It would be extremely difficult to read and maintain code heavily relying on event observers (especially if the observers perform actions that trigger more events). Additional rules for event observers: Events are not allowed to be observed by core or a core subsystem (there are some currently wrong observers in core that should be removed). Observers are described in db/events.php in the array $observers, the array is not indexed and contains a list of observers defined as an array with the following properties; eventname \u2013 fully qualified event class name or \"*\" indicating all events, ex.: \\plugintype_pluginname\\event\\something_happened. callback - PHP callable type. includefile - optional. File to be included before calling the observer. Path relative to dirroot. priority - optional. Defaults to 0. Observers with higher priority are notified first. internal - optional. Defaults to true. Non-internal observers are not called during database transactions, but instead after a successful commit of the transaction. $observers = [ [ 'eventname' => '\\core\\event\\course_module_created', 'callback' => '\\plugintype_pluginname\\event\\observer\\course_module_created::store', 'priority' => 1000, ], [ 'eventname' => '\\core\\event\\sample_executed', 'callback' => 'core_event_sample_observer::observe_one', ], [ 'eventname' => '\\core\\event\\sample_executed', 'callback' => 'core_event_sample_observer::external_observer', 'priority' => 200, 'internal' => false, ], [ 'eventname' => '*', 'callback' => 'core_event_sample_observer::observe_all', 'includefile' => null, 'internal' => true, 'priority' => 9999, ], ]; NOTE: Event observers are cached. If you add or change observers you need to purge the caches or they will not be recognised. Plugin developers need to bump up the version number to guarantee that the list of observers is reloaded during upgrade. db/messages.php - Message provider configuration File path: /db/messages.php See the Message API documentation for further information. Moodle components have the ability to send messages to users via the Moodle messaging system. Any type of component, for example a plugin or block, can register as a message producer then send messages to users. The db/messages.php file allows you to declare the messages that your plugin sends. The Message API code is contained within lib/messagelib.php and is automatically included for you during page setup. message_send() is the primary point of contact for the message API. Call it to send a message to a user. $messageproviders = [ 'things' => [ 'defaults' => [ 'airnotifier' => MESSAGE_PERMITTED + MESSAGE_DEFAULT_ENABLED, ], ], ]; mod/quiz/db/messages.php defined('MOODLE_INTERNAL') || die(); $messageproviders = [ // Notify teacher that a student has submitted a quiz attempt 'submission' => [ 'capability' => 'mod/quiz:emailnotifysubmission' ], // Confirm a student's quiz attempt 'confirmation' => [ 'capability' => 'mod/quiz:emailconfirmsubmission' ], ]; The quiz can send two kinds of messages, quiz \"submission\" and \"confirmation\" notifications. Each message type is only available to users with the appropriate capability. Please note that the capability is checked at the system level context. Users who have this capability will have this message listed in their messaging preferences. You can omit the capability section if your message should be visible for all users. For example forum post notifications are available to all users. db/services.php - Web service function declarations File path: /db/services.php The db/services.php file is used to describe the external functions available for use in web services. This includes web service functions defined for JavaScript, and for the Moodle Mobile App. NOTE Web services should be named following the naming convention for web services. For further information on external functions and web services, see: Adding a web service to a plugin External functions API $functions = [ 'plugintype_pluginname_create_things' => [ 'classname' => 'plugintype_pluginname\\external\\create_things', 'methodname' => 'execute', 'description' => 'Create a new thing', 'type' => 'write', 'capabilities' => 'plugintype/pluginname:create_things', 'ajax' => true, 'services' => [ MOODLE_OFFICIAL_MOBILE_SERVICE, ], ], ]; db/tasks.php - Task schedule configuration File path: /db/tasks.php The db/tasks.php file contains the initial schedule configuration for each of your plugins scheduled tasks. Adhoc tasks are not run on a regular schedule and therefore are not described in this file. EDITING THE SCHEDULE FOR AN EXISTING TASK If an existing task is edited, it will only be updated in the database if the administrator has not customised the schedule of that task in any way. If a plugin wants to configure scheduled task, two items are required: a class extending the \\core\\task\\scheduled_task class; and the db/tasks.php file containing its initial configuration. Task configuration entries entry type option description Classname string Required The classname contains the fully-qualified class name where the scheduled task is located. Blocking integer Optional Tasks can be configured to block the execution of all other tasks by setting the blocking property to a truthy value. disabled integer Optional Tasks can be configured to be disabled by setting the disabled property to 1. Unless the administrator manually enables your task, it will not run.This is useful if a task is only required in certain situations and shouldn't run on every server that has your plugin installed. Date and time fields String Optional A fixed random value can be selected by using a value of R. By specifying this option, a random day or time is chosen when the task is installed or updated. The same value will be used each time the task is scheduled. The following date and time fields are available: month day dayofweek hour month Each of these fields accepts one, or more values, and the format for each field is described as: <fieldlist> := <range>(/<step>)(,<fieldlist>) <step> := int <range> := <any>|<int>|<min-max>|<random> <any> := * <min-max> := int-int <random> := R RANDOM VALUES A fixed random value can be selected by using a value of R. By specifying this option, a random day or time is chosen when the task is installed or updated. The same value will be used each time the task is scheduled. If no value is specified then the following defaults are used: Month: * (Every month) Day: * (Every day) Day of the week: * (Every day of the week) Hour: * (Every hour) Minute: * (Every minute) DAY AND DAY OF THE WEEK If either field is set to * then use the other field, otherwise the soonest value is used. //Run at a fixed time each day, randomised during installation of the task $tasks = [ [ 'classname' => 'mod_example\\task\\do_something', // Every month. 'month' => '*', // Every day. 'day' => '*', // A fixed random hour and minute. 'hour' => 'R', 'month' => 'R', ], ]; Specifying multiple times in an hour $tasks = [ [ 'classname' => 'mod_example\\task\\do_something', // At two intervals in the hour. 'minute' => '5, 35', ], ]; db/renamedclasses.php - Renamed classes File path: /db/renamedclasses.php Details of classes that have been renamed to fit in with autoloading. Adding renamed or moved classes to renamedclasses.php is only necessary when the class is part of the component's API where it can be reused by other components, especially by third-party plugins. This is to maintain backwards-compatibility in addition to autoloading purposes. To move a class so that is it auto-loaded and no longer needs to be manually included you would: Create a new php within the classes directory named as auto-loading requires. Copy the class code from its current location to the new location. Delete the class from the old location (do not delete the file). Creator edit db/renamedclasses.php and add a line for your class mapping its old name to its new name. If the renamed or moved class is private/internal to the component and is not subject for external use, there is no need to add it to renamedclasses.php. defined('MOODLE_INTERNAL') || die; $renamedclasses = [ 'old_class_name' => 'fully_qualified\\\\new\\\\name', // Examples: 'assign_header' => 'mod_assign\\\\output\\\\header', '\\assign_header' => 'mod_assign\\\\output\\\\header', '\\assign' => 'mod_assign\\\\assignment', // Incorrect: // The new class name should _not_ have a leading \\. 'assign_header' => '\\\\mod_assign\\\\output\\\\header', ]; Other classes/ - Autoloaded classes File path: /classes/ Moodle supports, and recommends, the use of autoloaded PHP classes. By placing files within the classes directory or appropriate sub-directories, and with the correct PHP Namespace, and class name, Moodle is able to autoload classes without the need to manually require, or include them. Namespaces Formal namespaces are required for any new classes in Moodle. The following exceptions apply: There is no requirement to move existing non-namespaced classes to a namespace; and Where an existing mechanism exists for loading a class, and that mechanism does not support the use of a namespaced class, the existing Frankenstyle prefix on the class name will be allowed. The use of a Frankenstyle prefix on class names is deprecated and should only be used in the above exceptions. // A namespace for the `mod_forum` plugin. namespace mod_forum; class example { // Incorrect: class mod_forum_example } // A namespace for the `external` subsystem usage in the `mod_forum` plugin. namespace mod_forum\\external; class example { // Incorrect: class mod_forum_external_example } // A namespace for the `core_user` core subsystem. namespace core_user; class example { // Incorrect: class core_user_example } The use of namespaces must conform to the following rules: Classes belonging to a namespace must be created in a classes directory, for example: Classes in the mod_forum plugin classes should be placed in mod/forum/classes ; for core code, classes should be placed in lib/classes ; or for a core subsystem, classes should be placed in subsystemdir/classes . The classname and filename for all namespaced classes must conform to the automatic class loading rules. The use of formal PHP namespaces is required in all new code. Use at most one namespace declaration per file. More info of namespace rules can be found in the Documentation and Class naming documentation . Cli - CLI scripts File path: /cli/ For plugins which make use of CLI scripts , the convention is that these are placed into the cli folder to make their purpose clear, and easy to find. All CLI scripts must declare themselves as being a CLI script by defining the CLI_SCRIPT constant to true before including config.php. define('CLI_SCRIPT', true); require_once(__DIR__ . '/../../config.php'); require_once(\"{$CFG->libdir}/clilib.php\"); // Your CLI features go here. settings.php - Plugin settings File path: /settings.php You can define settings for your plugin that the administrator can configure by creating a settings.php file in the root of your plugins' directory. Settings must named in the following format: plugintype_pluginname/settingname By following the correct naming, all settings will automatically be stored in the config_plugins database table. Full details on how to create settings are available in the Admin settings documentation . amd/ - AMD JavaScript modules File path: /amd/ For plugins which make use of AMD JavaScript modules, the convention is that these are placed into the amd folder to make their purpose clear, and easy to find. JavaScript in Moodle is written in the ESM format, and transpiled into AMD modules for deployment. The Moodle JavaScript Guide has detailed information and examples on writing JavaScript in Moodle. Further information is also available in the JavaScript Modules documentation . Although the AMD module format is supported, all new JavaScript is written in the EcmaScript Module (ESM) format. yui/ - YUI JavaScript modules File path: /yui/ In older versions of Moodle, JavaScript was written in the YUI format. This is being phased out in favour of JavaScript Modules, although some older uses still remain in Moodle core. backup/ - Plugin Backup configuration File path: /backup/ If your plugin stores data then you may need to implement the Backup feature which allows the activity to backed up, restored, and duplicated. For more information on Backup and restore, see the following: Backup 2.0 for developers Restore 2.0 for developers styles.css - CSS style sheet for your plugin File path: /styles.css Plugins may define a '/styles.css' to provide plugin-specific styling. See the following for further documentation: Plugin contribution checklist#CSS styles CSS Coding Style AVOID CUSTOM STYLES WHERE POSSIBLE Rather than writing custom CSS for your plugin, where possible apply Bootstrap classes to the DOM elements in your output. These will be easier to maintain and will adopt most colour, branding, and other customisations applied to a theme. pix/icon.svg File path: /pix/ Plugins can provide icons in several formats, and most plugin types require that a default icon be provided. Where a browser supports it, the svg format is used, falling back to png formats when an SVG is unavailable. Full details of the correct naming, sizing, and design guidelines for icons in Moodle can be found in the Moodle icons documentation . thirdpartylibs.xml File path: /thirdpartylibs.xml Details of all third-party libraries should be declared in the thirdpartylibs.xml file. This information is used to generate ignore file configuration for linting tools. For Moodle core it is also used to generate library information as part of release notes and credits. Within the XML the location is a file, or directory, relative to your plugin's root. The license of any third-party code included in your plugin, and within the thirdpartylibs.xml file must be compatible with the GNU GPLv3. <?xml version=\"1.0\"?> <libraries> <library> <location> javascript/html5shiv.js </location> <name> Html5Shiv </name> <version> 3.6.2 </version> <license> Apache </license> <licenseversion> 2.0 </licenseversion> </library> <library> <location> vendor/guzzle/guzzle/ </location> <name> guzzle </name> <version> v3.9.3 </version> <license> MIT </license> <licenseversion></licenseversion> </library> </libraries> readme_moodle.txt Third-party library import instructions File path: /*/readme_moodle.txt When importing a third-party library into your plugin, it is advisable to create a readme_moodle.txt file detailing relevant information, including: Download URLs Build instructions upgrade.txt Significant changes for each version of your plugin File path: /*/upgrade.txt Each component and subsystem may make use of an upgrade.txt file in the top level folder. A section title is used to identify the Moodle version where the change was introduced, and significant changes for that version relating to that component or subsystem are noted. For example, given an API change is applied for the upcoming Moodle version 4.1 which is still in the main branch (4.1dev), the version number on the upgrade.txt's section title will be set to 4.1. == 4.1 == An API change to empower educators! environment.xml Plugin-specific environment requirements Upgradable File path: /environment.xml A plugin can declare its own environment requirements, in addition to those declared by Moodle core. These may includes features such as PHP extension requirements, version requirements, and similar items. Further information on this file and its format can be found in the Environment checking documentation . <?xml version=\"1.0\" encoding=\"UTF-8\" ?> <COMPATIBILITY_MATRIX> <PLUGIN name= \"plugintype_pluginname\" > <PHP_EXTENSIONS> <PHP_EXTENSION name= \"soap\" level= \"required\" > </PHP_EXTENSION> </PHP_EXTENSIONS> </PLUGIN> </COMPATIBILITY_MATRIX> README Plugin Information for Administrators File path: /README We recommend that you include any additional information for your plugin in a project readme file. Ideally this should act as an offline version of all information in your plugin's page in the Plugins directory. We recommend creating your readme file in either a README.md, or README.txt format. CHANGES Plugin changelog File path: /CHANGES If your plugin includes a changelog in its root directory, this will be used to automatically pre-fill the release notes field when uploading new versions of your plugin to the Plugins directory. This file can be in any of the following locations: CHANGES.md: as a markdown file; or CHANGES.txt: as a text file; or CHANGES.html: as an HTML file; or CHANGES: as a text file.","title":"Common Files"},{"location":"Moodle/phpMoodlePluginFiles/#basic","text":"","title":"Basic"},{"location":"Moodle/phpMoodlePluginFiles/#db","text":"","title":"DB"},{"location":"Moodle/phpMoodlePluginFiles/#other","text":"","title":"Other"},{"location":"Moodle/phpMoodlePluginSkeleton/","text":"Creating a plugin skeleton for a Moodle plugin can be done in two primary ways. One involves using the Moodle Plugin Skeleton Generator tool, which can be installed as a plugin in Moodle, and the other is manually creating the plugin skeleton, which commonly includes copying code from an existing plugin. Using the Moodle Plugin Skeleton Generator Tool The Moodle Plugin Skeleton Generator tool automates the creation of the initial plugin structure, ensuring that the generated skeleton adheres to Moodle's coding standards and best practices. This tool can be installed directly as a plugin in your Moodle site. Install the Plugin Skeleton Generator Plugin : git clone https://github.com/mudrd8mz/moodle-tool_pluginskel MOODLE_ROOT_DIRECTORY/admin/tool/pluginskel Access the Plugin Skeleton Generator : Once installed, go to Site administration > Development > Moodle Plugin Skeleton Generator . Generate the Plugin Skeleton : Open the Plugin Skeleton Generator page. Fill in the required details such as the plugin type (e.g., mod for activity modules), plugin name (e.g., mymodule ), and any other configuration options. Click the \"Generate\" button to create the plugin skeleton. Review the Generated Files : The tool will create a new directory with the name of your plugin (e.g., mymodule ) inside the appropriate plugin directory ( mod for activity modules). This directory will contain all the necessary files and folders, such as version.php , lib.php , view.php , and more. 2. Manually Creating the Plugin Skeleton If you prefer or need more control over the initial setup, you can manually create the plugin skeleton. This involves setting up the directory structure and creating the essential files yourself. It is also common to copy the code from an existing plugin to serve as a starting point. Create the Plugin Directory : - Navigate to the appropriate directory (e.g, mod for activity modules) in your Moodle installation and create a new directory for your plugin. ```bash cd /path/to/moodle/mod mkdir mymodule cd mymodule ``` Create Essential Files and Directories : - Set up the initial structure by creating the necessary files and subdirectories. ```bash mkdir backup classes db lang pix touch version.php index.php view.php lib.php mod_form.php settings.php ``` OR Copy Code from an Existing Plugin : - Find an existing plugin similar to the one you want to create. Copy its directory structure and files into your new plugin directory. - Rename the files and update their content to match the new plugin\u2019s name and functionality. For example, if copying from an existing module called `mod_example`, you would: ```bash cp -r /path/to/moodle/mod/example/* /path/to/moodle/mod/mymodule/ cd /path/to/moodle/mod/mymodule/ ``` Update File Contents : - Edit the copied files to replace instances of the old plugin's name with the new plugin's name ( example to mymodule ). - Update the metadata in version.php , database schema in db/install.xml , language strings in lang/en/mymodule.php , and other essential configurations. Conclusion Using the Moodle Plugin Skeleton Generator: Advantages : Faster, ensures adherence to standards, less error-prone. Steps : Install the generator as a plugin, fill in details, generate skeleton. Manually Creating the Plugin Skeleton: Advantages : More control and flexibility, better understanding of structure. Steps : Create directories and files or copy code from an existing plugin, update and implement basic functionality. Both methods are valid and can be chosen based on your specific needs and preferences. The Moodle Plugin Skeleton Generator tool, when installed as a plugin, simplifies the process significantly and is recommended for beginners or those looking to save time. Manually creating the skeleton, especially by copying from an existing plugin, offers greater control and is beneficial for understanding the underlying structure and code.","title":"Skeleton"},{"location":"Moodle/phpMoodlePluginSkeleton/#using-the-moodle-plugin-skeleton-generator-tool","text":"The Moodle Plugin Skeleton Generator tool automates the creation of the initial plugin structure, ensuring that the generated skeleton adheres to Moodle's coding standards and best practices. This tool can be installed directly as a plugin in your Moodle site. Install the Plugin Skeleton Generator Plugin : git clone https://github.com/mudrd8mz/moodle-tool_pluginskel MOODLE_ROOT_DIRECTORY/admin/tool/pluginskel Access the Plugin Skeleton Generator : Once installed, go to Site administration > Development > Moodle Plugin Skeleton Generator . Generate the Plugin Skeleton : Open the Plugin Skeleton Generator page. Fill in the required details such as the plugin type (e.g., mod for activity modules), plugin name (e.g., mymodule ), and any other configuration options. Click the \"Generate\" button to create the plugin skeleton. Review the Generated Files : The tool will create a new directory with the name of your plugin (e.g., mymodule ) inside the appropriate plugin directory ( mod for activity modules). This directory will contain all the necessary files and folders, such as version.php , lib.php , view.php , and more.","title":"Using the Moodle Plugin Skeleton Generator Tool"},{"location":"Moodle/phpMoodlePluginSkeleton/#2-manually-creating-the-plugin-skeleton","text":"If you prefer or need more control over the initial setup, you can manually create the plugin skeleton. This involves setting up the directory structure and creating the essential files yourself. It is also common to copy the code from an existing plugin to serve as a starting point. Create the Plugin Directory : - Navigate to the appropriate directory (e.g, mod for activity modules) in your Moodle installation and create a new directory for your plugin. ```bash cd /path/to/moodle/mod mkdir mymodule cd mymodule ``` Create Essential Files and Directories : - Set up the initial structure by creating the necessary files and subdirectories. ```bash mkdir backup classes db lang pix touch version.php index.php view.php lib.php mod_form.php settings.php ``` OR Copy Code from an Existing Plugin : - Find an existing plugin similar to the one you want to create. Copy its directory structure and files into your new plugin directory. - Rename the files and update their content to match the new plugin\u2019s name and functionality. For example, if copying from an existing module called `mod_example`, you would: ```bash cp -r /path/to/moodle/mod/example/* /path/to/moodle/mod/mymodule/ cd /path/to/moodle/mod/mymodule/ ``` Update File Contents : - Edit the copied files to replace instances of the old plugin's name with the new plugin's name ( example to mymodule ). - Update the metadata in version.php , database schema in db/install.xml , language strings in lang/en/mymodule.php , and other essential configurations.","title":"2. Manually Creating the Plugin Skeleton"},{"location":"Moodle/phpMoodlePluginSkeleton/#conclusion","text":"","title":"Conclusion"},{"location":"Moodle/phpMoodlePluginSkeleton/#using-the-moodle-plugin-skeleton-generator","text":"Advantages : Faster, ensures adherence to standards, less error-prone. Steps : Install the generator as a plugin, fill in details, generate skeleton.","title":"Using the Moodle Plugin Skeleton Generator:"},{"location":"Moodle/phpMoodlePluginSkeleton/#manually-creating-the-plugin-skeleton","text":"Advantages : More control and flexibility, better understanding of structure. Steps : Create directories and files or copy code from an existing plugin, update and implement basic functionality. Both methods are valid and can be chosen based on your specific needs and preferences. The Moodle Plugin Skeleton Generator tool, when installed as a plugin, simplifies the process significantly and is recommended for beginners or those looking to save time. Manually creating the skeleton, especially by copying from an existing plugin, offers greater control and is beneficial for understanding the underlying structure and code.","title":"Manually Creating the Plugin Skeleton:"},{"location":"Moodle/phpMoodlePluginTypes/","text":"Understanding the different types of Moodle plugins is crucial for developing the right kind of functionality to extend Moodle. Each plugin type serves a specific purpose and integrates with Moodle in a unique way. By exploring existing plugins and their source code, you can gain insights into best practices and common patterns used in Moodle plugin development. For the official documentation of each plugin type, see the Moodle documentation . General Naming Conventions Component Name : The component name of a plugin follows the format plugin_type_pluginname . For example, an assignment activity module might be named mod_assignment . Directory and File Names : The directory name of the plugin should match the plugin name part of the component name. For example, the directory for an assignment plugin should be mod/assignment . The plugin name must meet the following rules: It must start with a lowercase latin letter It may contain only lowercase latin letters, numbers, and underscores It must end with a lowercase latin letter, or a number The hyphen, and minus character - are not allowed Plugin type Component name (Frankenstyle) Moodle path Description Activity modules mod /mod Activity modules are essential types of plugins in Moodle as they provide activities in courses. For example: Forum, Quiz and Assignment. Antivirus plugins antivirus /lib/antivirus Antivirus scanner plugins provide functionality for virus scanning user uploaded files using third-party virus scanning tools in Moodle. For example: ClamAV. Assignment submission plugins assignsubmission /mod/assign/submission Different forms of assignment submissions Assignment feedback plugins assignfeedback /mod/assign/feedback Different forms of assignment feedbacks Book tools booktool /mod/book/tool Small information-displays or tools that can be moved around pages Custom fields customfield /customfield/field Custom field types, used in Custom course fields Database fields datafield /mod/data/field Different types of data that may be added to the Database activity module Database presets datapreset /mod/data/preset Pre-defined templates for the Database activity module LTI sources ltisource /mod/lti/source LTI providers can be added to external tools easily through the external tools interface see Documentation on External Tools. This type of plugin is specific to LTI providers that need a plugin that can register custom handlers to process LTI messages File Converters fileconverter /files/converter Allow conversion between different types of user-submitted file. For example from .doc to PDF. LTI services ltiservice /mod/lti/service Allows the implementation of LTI services as described by the IMS LTI specification Machine learning backends mlbackend /lib/mlbackend Prediction processors for analytics API Forum reports forumreport /mod/forum/report Display various reports in the forum activity Quiz reports quiz /mod/quiz/report Display and analyse the results of quizzes, or just plug miscellaneous behaviour into the quiz module Quiz access rules quizaccess /mod/quiz/accessrule Add conditions to when or where quizzes can be attempted, for example only from some IP addresses, or student must enter a password first SCORM reports scormreport /mod/scorm/report Analysis of SCORM attempts Workshop grading strategies workshopform /mod/workshop/form Define the type of the grading form and implement the calculation of the grade for submission in the Workshop module Workshop allocation methods workshopallocation /mod/workshop/allocation Define ways how submissions are assigned for assessment in the Workshop module Workshop evaluation methods workshopeval /mod/workshop/eval Implement the calculation of the grade for assessment (grading grade) in the Workshop module Blocks block /blocks Small information-displays or tools that can be moved around pages Question types qtype /question/type Different types of question (for example multiple-choice, drag-and-drop) that can be used in quizzes and other activities Question behaviours qbehaviour /question/behaviour Control how student interact with questions during an attempt Question import/export formats qformat /question/format Import and export question definitions to/from the question bank Text filters filter /filter Automatically convert, highlight, and transmogrify text posted into Moodle. Editors editor /lib/editor Alternative text editors for editing content Atto editor plugins atto /lib/editor/atto/plugins Extra functionality for the Atto text editor Enrolment plugins enrol /enrol Ways to control who is enrolled in courses Authentication plugins auth /auth Allows connection to external sources of authentication Admin tools tool /admin/tool Provides utility scripts useful for various site administration and maintenance tasks Log stores logstore /admin/tool/log/store Event logs storage back-ends Availability conditions availability /availability/condition Conditions to restrict user access to activities and sections. Calendar types calendartype /calendar/type Defines how dates are displayed throughout Moodle Messaging consumers message /message/output Represent various targets where messages and notifications can be sent to (email, sms, jabber, ...) Course formats format /course/format Different ways of laying out the activities and blocks in a course Data formats dataformat /dataformat Formats for data exporting and downloading User profile fields profilefield /user/profile/field Add new types of data to user profiles Reports report /report Provides useful views of data in a Moodle site for admins and teachers Course reports coursereport /course/report Reports of activity within the course Gradebook export gradeexport /grade/export Export grades in various formats Gradebook import gradeimport /grade/import Import grades in various formats Gradebook reports gradereport /grade/report Display/edit grades in various layouts and reports Advanced grading methods gradingform /grade/grading/form Interfaces for actually performing grading in activity modules (for example Rubrics) MNet services mnetservice /mnet/service Allows to implement remote services for the MNet environment (deprecated, use web services instead) Webservice protocols webservice /webservice Define new protocols for web service communication (such as SOAP, XML-RPC, JSON, REST ...) Repository plugins repository /repository Portfolio plugins portfolio /portfolio Connect external portfolio services as destinations for users to store Moodle content Search engines search /search/engine Search engine backends to index Moodle's contents. Media players media /media/player Pluggable media players Plagiarism plugins plagiarism /plagiarism Define external services to process submitted files and content Cache store cachestore /cache/stores Cache storage back-ends. Cache locks cachelock /cache/locks Cache lock implementations. Themes theme /theme Change the look of Moodle by changing the the HTML and the CSS. Local plugins local /local Generic plugins for local customisations Content bank content types contenttype /contentbank/contenttype Content types to upload, create or edit in the content bank and use all over the Moodle site H5P libraries h5plib /h5p/h5plib Plugin type for the particular versions of the H5P integration library. Question bank plugins qbank /question/bank Plugin type for extending question bank functionality. 1. Activity modules Purpose : Add new types of activities or resources to courses. Component Name : mod_pluginname Examples : Assignment ( mod_assign ) : Allows teachers to collect work from students, review it, and provide feedback including grades. Quiz ( mod_quiz ) : Enables the creation of quizzes with a variety of question types like multiple choice, true/false, and short answer. Forum ( mod_forum ) : Facilitates discussions among students and teachers within a course. H5P Interactive Content ( mod_h5pactivity ) : Integrates H5P activities, which are interactive HTML5 content types like quizzes, interactive videos, and presentations. Scheduler ( mod_scheduler ) : Allows teachers to schedule appointments with students. 2. Blocks Purpose : Add new blocks to the side regions of Moodle pages, providing additional information or functionality. Component Name : block_pluginname Examples : HTML Block ( block_html ) : Allows custom HTML content to be displayed in a block. Calendar Block ( block_calendar_month ) : Shows the calendar for the current month with links to detailed day views. Progress Bar ( block_progress ) : Displays a progress bar showing the completion status of activities within a course. Quickmail ( block_quickmail ) : Provides an easy way for teachers to send emails to students within a course. 3. Themes Purpose : Customize the look and feel of the Moodle site by changing the design, layout, and styles. Component Name : theme_pluginname Examples : Boost ( theme_boost ) : A modern, responsive theme based on Bootstrap 4, providing a clean and intuitive interface. Classic ( theme_classic ) : A traditional theme with a simple, familiar layout. Fordson ( theme_fordson ) : A highly customizable theme with additional layout options and enhanced usability features. Moove ( theme_moove ) : A modern, responsive theme with a focus on simplicity and user experience. 4. Reports Purpose : Create new reports for data analysis and tracking within Moodle. Examples : Logs ( report_log ) : Provides access to the logs of all activities on the site, courses, and users. Activity Report ( report_activity ) : Shows detailed activity reports for a course. Configurable Reports ( report_customsql ) : Allows admins to create custom reports using SQL queries. Completion Progress ( report_completion ) : Provides a visual overview of students' progress in completing course activities. 5. Auth Plugins Purpose : Implement custom authentication methods for logging into Moodle. Examples : Email-based Self-registration ( auth_email ) : Allows users to create their own accounts using their email addresses. LDAP Server ( auth_ldap ) : Authenticates users against an LDAP server, commonly used in organizations. OAuth2 ( auth_oauth2 ) : Allows users to log in using their accounts from external services like Google, Microsoft, and Facebook. CAS Server ( auth_cas ) : Integrates Moodle with a CAS (Central Authentication Service) server for single sign-on. 6. Enrol Plugins Purpose : Implement custom enrollment methods for courses. Examples : Manual Enrolment ( enrol_manual ) : Allows teachers to manually enroll students in their courses. Self Enrolment ( enrol_self ) : Allows users to enroll themselves in courses, optionally using an enrollment key. Stripe Payment ( enrol_stripepayment ) : Allows users to pay for course enrollment using the Stripe payment gateway. PayPal ( enrol_paypal ) : Integrates PayPal for paid course enrollments. 7. Local Plugins Purpose : Provide additional functionalities that don't fit into other plugin categories. Examples : Moodle Mobile Additional Features ( local_mobile ) : Adds additional features to the Moodle Mobile app. Moodle Integrity Essentials ( local_integrity ) : Provides tools to help maintain the integrity of the Moodle environment. Cron Locking Improvements ( local_cronlock ) : Enhances the performance and reliability of Moodle's cron system. User Cleanup ( local_usercleanup ) : Automates the cleanup and deletion of inactive or unwanted user accounts. 8. Admin Tools Purpose : Provide tools and utilities for site administrators to manage and maintain the Moodle site. Examples : Database Search ( tool_datasearch ) : Allows administrators to search and manage the database directly from the Moodle interface. Security Overview ( tool_securityoverview ) : Provides a report highlighting potential security issues and recommendations. Task Scheduler ( tool_taskscheduler ) : Allows administrators to schedule and manage various tasks within Moodle. Multi-factor Authentication ( tool_mfa ) : Implements multi-factor authentication for increased security. 9. Course Formats Purpose : Define the layout and structure of courses within Moodle. Examples : Weekly Format ( format_weeks ) : Organizes course content by weeks. Topics Format ( format_topics ) : Organizes course content by topics. Grid Format ( format_grid ) : Displays course sections as a grid of icons, enhancing the visual appeal. Collapsed Topics ( format_collapsedtopics ) : Allows course sections to be collapsed and expanded for better navigation. Summary Understanding the types of plugins available in Moodle allows you to choose the right type for your needs and extend Moodle's functionality effectively. Whether you're adding new activities, customizing the look and feel, or creating new reports, there's a specific plugin type designed to help you achieve your goals. By exploring existing plugins and their source code, you can gain insights into best practices and common patterns used in Moodle plugin development. Naming conventions in Moodle plugins are crucial for maintaining consistency, avoiding conflicts, and ensuring that plugins are easily identifiable and properly integrated within the Moodle ecosystem. Each plugin type in Moodle has specific naming conventions that developers need to follow. Here is a detailed explanation of the naming conventions for various Moodle plugin types:","title":"General"},{"location":"Moodle/phpMoodlePluginTypes/#general-naming-conventions","text":"Component Name : The component name of a plugin follows the format plugin_type_pluginname . For example, an assignment activity module might be named mod_assignment . Directory and File Names : The directory name of the plugin should match the plugin name part of the component name. For example, the directory for an assignment plugin should be mod/assignment . The plugin name must meet the following rules: It must start with a lowercase latin letter It may contain only lowercase latin letters, numbers, and underscores It must end with a lowercase latin letter, or a number The hyphen, and minus character - are not allowed Plugin type Component name (Frankenstyle) Moodle path Description Activity modules mod /mod Activity modules are essential types of plugins in Moodle as they provide activities in courses. For example: Forum, Quiz and Assignment. Antivirus plugins antivirus /lib/antivirus Antivirus scanner plugins provide functionality for virus scanning user uploaded files using third-party virus scanning tools in Moodle. For example: ClamAV. Assignment submission plugins assignsubmission /mod/assign/submission Different forms of assignment submissions Assignment feedback plugins assignfeedback /mod/assign/feedback Different forms of assignment feedbacks Book tools booktool /mod/book/tool Small information-displays or tools that can be moved around pages Custom fields customfield /customfield/field Custom field types, used in Custom course fields Database fields datafield /mod/data/field Different types of data that may be added to the Database activity module Database presets datapreset /mod/data/preset Pre-defined templates for the Database activity module LTI sources ltisource /mod/lti/source LTI providers can be added to external tools easily through the external tools interface see Documentation on External Tools. This type of plugin is specific to LTI providers that need a plugin that can register custom handlers to process LTI messages File Converters fileconverter /files/converter Allow conversion between different types of user-submitted file. For example from .doc to PDF. LTI services ltiservice /mod/lti/service Allows the implementation of LTI services as described by the IMS LTI specification Machine learning backends mlbackend /lib/mlbackend Prediction processors for analytics API Forum reports forumreport /mod/forum/report Display various reports in the forum activity Quiz reports quiz /mod/quiz/report Display and analyse the results of quizzes, or just plug miscellaneous behaviour into the quiz module Quiz access rules quizaccess /mod/quiz/accessrule Add conditions to when or where quizzes can be attempted, for example only from some IP addresses, or student must enter a password first SCORM reports scormreport /mod/scorm/report Analysis of SCORM attempts Workshop grading strategies workshopform /mod/workshop/form Define the type of the grading form and implement the calculation of the grade for submission in the Workshop module Workshop allocation methods workshopallocation /mod/workshop/allocation Define ways how submissions are assigned for assessment in the Workshop module Workshop evaluation methods workshopeval /mod/workshop/eval Implement the calculation of the grade for assessment (grading grade) in the Workshop module Blocks block /blocks Small information-displays or tools that can be moved around pages Question types qtype /question/type Different types of question (for example multiple-choice, drag-and-drop) that can be used in quizzes and other activities Question behaviours qbehaviour /question/behaviour Control how student interact with questions during an attempt Question import/export formats qformat /question/format Import and export question definitions to/from the question bank Text filters filter /filter Automatically convert, highlight, and transmogrify text posted into Moodle. Editors editor /lib/editor Alternative text editors for editing content Atto editor plugins atto /lib/editor/atto/plugins Extra functionality for the Atto text editor Enrolment plugins enrol /enrol Ways to control who is enrolled in courses Authentication plugins auth /auth Allows connection to external sources of authentication Admin tools tool /admin/tool Provides utility scripts useful for various site administration and maintenance tasks Log stores logstore /admin/tool/log/store Event logs storage back-ends Availability conditions availability /availability/condition Conditions to restrict user access to activities and sections. Calendar types calendartype /calendar/type Defines how dates are displayed throughout Moodle Messaging consumers message /message/output Represent various targets where messages and notifications can be sent to (email, sms, jabber, ...) Course formats format /course/format Different ways of laying out the activities and blocks in a course Data formats dataformat /dataformat Formats for data exporting and downloading User profile fields profilefield /user/profile/field Add new types of data to user profiles Reports report /report Provides useful views of data in a Moodle site for admins and teachers Course reports coursereport /course/report Reports of activity within the course Gradebook export gradeexport /grade/export Export grades in various formats Gradebook import gradeimport /grade/import Import grades in various formats Gradebook reports gradereport /grade/report Display/edit grades in various layouts and reports Advanced grading methods gradingform /grade/grading/form Interfaces for actually performing grading in activity modules (for example Rubrics) MNet services mnetservice /mnet/service Allows to implement remote services for the MNet environment (deprecated, use web services instead) Webservice protocols webservice /webservice Define new protocols for web service communication (such as SOAP, XML-RPC, JSON, REST ...) Repository plugins repository /repository Portfolio plugins portfolio /portfolio Connect external portfolio services as destinations for users to store Moodle content Search engines search /search/engine Search engine backends to index Moodle's contents. Media players media /media/player Pluggable media players Plagiarism plugins plagiarism /plagiarism Define external services to process submitted files and content Cache store cachestore /cache/stores Cache storage back-ends. Cache locks cachelock /cache/locks Cache lock implementations. Themes theme /theme Change the look of Moodle by changing the the HTML and the CSS. Local plugins local /local Generic plugins for local customisations Content bank content types contenttype /contentbank/contenttype Content types to upload, create or edit in the content bank and use all over the Moodle site H5P libraries h5plib /h5p/h5plib Plugin type for the particular versions of the H5P integration library. Question bank plugins qbank /question/bank Plugin type for extending question bank functionality.","title":"General Naming Conventions"},{"location":"Moodle/phpMoodlePluginTypes/#1-activity-modules","text":"Purpose : Add new types of activities or resources to courses. Component Name : mod_pluginname Examples : Assignment ( mod_assign ) : Allows teachers to collect work from students, review it, and provide feedback including grades. Quiz ( mod_quiz ) : Enables the creation of quizzes with a variety of question types like multiple choice, true/false, and short answer. Forum ( mod_forum ) : Facilitates discussions among students and teachers within a course. H5P Interactive Content ( mod_h5pactivity ) : Integrates H5P activities, which are interactive HTML5 content types like quizzes, interactive videos, and presentations. Scheduler ( mod_scheduler ) : Allows teachers to schedule appointments with students.","title":"1. Activity modules"},{"location":"Moodle/phpMoodlePluginTypes/#2-blocks","text":"Purpose : Add new blocks to the side regions of Moodle pages, providing additional information or functionality. Component Name : block_pluginname Examples : HTML Block ( block_html ) : Allows custom HTML content to be displayed in a block. Calendar Block ( block_calendar_month ) : Shows the calendar for the current month with links to detailed day views. Progress Bar ( block_progress ) : Displays a progress bar showing the completion status of activities within a course. Quickmail ( block_quickmail ) : Provides an easy way for teachers to send emails to students within a course.","title":"2. Blocks"},{"location":"Moodle/phpMoodlePluginTypes/#3-themes","text":"Purpose : Customize the look and feel of the Moodle site by changing the design, layout, and styles. Component Name : theme_pluginname Examples : Boost ( theme_boost ) : A modern, responsive theme based on Bootstrap 4, providing a clean and intuitive interface. Classic ( theme_classic ) : A traditional theme with a simple, familiar layout. Fordson ( theme_fordson ) : A highly customizable theme with additional layout options and enhanced usability features. Moove ( theme_moove ) : A modern, responsive theme with a focus on simplicity and user experience.","title":"3. Themes"},{"location":"Moodle/phpMoodlePluginTypes/#4-reports","text":"Purpose : Create new reports for data analysis and tracking within Moodle. Examples : Logs ( report_log ) : Provides access to the logs of all activities on the site, courses, and users. Activity Report ( report_activity ) : Shows detailed activity reports for a course. Configurable Reports ( report_customsql ) : Allows admins to create custom reports using SQL queries. Completion Progress ( report_completion ) : Provides a visual overview of students' progress in completing course activities.","title":"4. Reports"},{"location":"Moodle/phpMoodlePluginTypes/#5-auth-plugins","text":"Purpose : Implement custom authentication methods for logging into Moodle. Examples : Email-based Self-registration ( auth_email ) : Allows users to create their own accounts using their email addresses. LDAP Server ( auth_ldap ) : Authenticates users against an LDAP server, commonly used in organizations. OAuth2 ( auth_oauth2 ) : Allows users to log in using their accounts from external services like Google, Microsoft, and Facebook. CAS Server ( auth_cas ) : Integrates Moodle with a CAS (Central Authentication Service) server for single sign-on.","title":"5. Auth Plugins"},{"location":"Moodle/phpMoodlePluginTypes/#6-enrol-plugins","text":"Purpose : Implement custom enrollment methods for courses. Examples : Manual Enrolment ( enrol_manual ) : Allows teachers to manually enroll students in their courses. Self Enrolment ( enrol_self ) : Allows users to enroll themselves in courses, optionally using an enrollment key. Stripe Payment ( enrol_stripepayment ) : Allows users to pay for course enrollment using the Stripe payment gateway. PayPal ( enrol_paypal ) : Integrates PayPal for paid course enrollments.","title":"6. Enrol Plugins"},{"location":"Moodle/phpMoodlePluginTypes/#7-local-plugins","text":"Purpose : Provide additional functionalities that don't fit into other plugin categories. Examples : Moodle Mobile Additional Features ( local_mobile ) : Adds additional features to the Moodle Mobile app. Moodle Integrity Essentials ( local_integrity ) : Provides tools to help maintain the integrity of the Moodle environment. Cron Locking Improvements ( local_cronlock ) : Enhances the performance and reliability of Moodle's cron system. User Cleanup ( local_usercleanup ) : Automates the cleanup and deletion of inactive or unwanted user accounts.","title":"7. Local Plugins"},{"location":"Moodle/phpMoodlePluginTypes/#8-admin-tools","text":"Purpose : Provide tools and utilities for site administrators to manage and maintain the Moodle site. Examples : Database Search ( tool_datasearch ) : Allows administrators to search and manage the database directly from the Moodle interface. Security Overview ( tool_securityoverview ) : Provides a report highlighting potential security issues and recommendations. Task Scheduler ( tool_taskscheduler ) : Allows administrators to schedule and manage various tasks within Moodle. Multi-factor Authentication ( tool_mfa ) : Implements multi-factor authentication for increased security.","title":"8. Admin Tools"},{"location":"Moodle/phpMoodlePluginTypes/#9-course-formats","text":"Purpose : Define the layout and structure of courses within Moodle. Examples : Weekly Format ( format_weeks ) : Organizes course content by weeks. Topics Format ( format_topics ) : Organizes course content by topics. Grid Format ( format_grid ) : Displays course sections as a grid of icons, enhancing the visual appeal. Collapsed Topics ( format_collapsedtopics ) : Allows course sections to be collapsed and expanded for better navigation.","title":"9. Course Formats"},{"location":"Moodle/phpMoodlePluginTypes/#summary","text":"Understanding the types of plugins available in Moodle allows you to choose the right type for your needs and extend Moodle's functionality effectively. Whether you're adding new activities, customizing the look and feel, or creating new reports, there's a specific plugin type designed to help you achieve your goals. By exploring existing plugins and their source code, you can gain insights into best practices and common patterns used in Moodle plugin development. Naming conventions in Moodle plugins are crucial for maintaining consistency, avoiding conflicts, and ensuring that plugins are easily identifiable and properly integrated within the Moodle ecosystem. Each plugin type in Moodle has specific naming conventions that developers need to follow. Here is a detailed explanation of the naming conventions for various Moodle plugin types:","title":"Summary"},{"location":"Moodle/phpMoodleSecurity/","text":"Key security vulnerabilities Given below are some of the typical vulnerability types developers need to be aware of when developing web applications, including Moodle. Unauthenticated access Unauthorised access Cross-site request forgery (CSRF) Cross-site scripting (XSS) SQL injection Command-line injection Data-loss Confidential information leakage Configuration information leakage Session fixation Denial of service (DOS) Brute-forcing login Insecure configuration management Buffer overruns and other platform weaknesses Social engineering Data-loss and Confidential information leakage are symptoms of other vulnerabilities. Some vulnerabilities, such as Configuration information leakage, Command-line injection and Denial of service (DOS) would generally only concern developers of certain types of plugins. Be sure to read the Security page in the Moodle Developer Resources for more details on each of these and other vulnerabilities. Summary of the guidelines Authenticate the user With very few exceptions, every script should call require_login or require_course_login as near the start as possible. Verify course and module access All course areas have to be protected by require_login or require_course_login with correct $course parameter. All module areas have to be protected by require_login or require_course_login with correct $course and $cm parameter Example: Consider the index.php file of the Book module. require(__DIR__.'/../../config.php'); require_once(__DIR__.'/locallib.php'); $id = required_param('id', PARAM_INT); // Course ID. $course = $DB->get_record('course', ['id' => $id], '*', MUST_EXIST); unset($id); require_course_login($course, true); require_course_login() is called as soon as $course is found. require_course_login() checks if user can view the course. This page is listing all book modules in a course, so checking for a specific $cm value is not needed here. Example: Consider the edit.php file of the Book module. require(__DIR__.'/../../config.php'); require_once(__DIR__.'/locallib.php'); require_once(__DIR__.'/edit_form.php'); $cmid = required_param('cmid', PARAM_INT); // Book Course Module ID. $chapterid = optional_param('id', 0, PARAM_INT); // Chapter ID. $pagenum = optional_param('pagenum', 0, PARAM_INT); $subchapter = optional_param('subchapter', 0, PARAM_BOOL); $cm = get_coursemodule_from_id('book', $cmid, 0, false, MUST_EXIST); $course = $DB->get_record('course', ['id' => $cm->course], '*', MUST_EXIST); $book = $DB->get_record('book', ['id' => $cm->instance], '*', MUST_EXIST); require_login($course, false, $cm); require_login() is called as soon as the $course and $cm values are found. This page is editing a book so both $course and $cm parameters should be passed to require_login() to check proper access. $autologinguest parameter is false because guest users should not be making changes on the site. Check permissions to avoid unauthorized access Before allowing the user to see anything or do anything, make a call to has_capability or require_capability, testing the appropriate capability in the appropriate context. Get the appropriate context using a call to get_context_instance. For this to work in custom code, you may need to define additional capabilities. For example, block/myblock:viewsecretthing. You can define extra capabilities by creating a db/access.php file in your plugin. Capabilities should be annotated with the appropriate risks. If appropriate, use the groups API to check group membership, and only show users information from groups they should be able to see. Note that require_login checks basic groups access permissions for you. It is very important to check capabilities when printing UI, but also after data submission before it is processed. Don't trust any input from users Use the Form API whenever possible for handling HTML forms. Use moodleforms whenever possible, with an appropriate setType method call for each field. Use HTTP requests correctly: Use GET requests for getting information; Use POST requests for changing things in the application; Before performing actions, use data_submitted() && confirm_sesskey() to check sesskey and that you are handling a POST request. The \"sesskey\" (session key) is Moodle's inbuilt cross-site request forgery protection. Despite its name, sesskey is not the same as the user's session token stored in a cookie. It is simply a CSRF key which is reset per-session. Sesskey should not be sent via GET, as it exposes the token in the URL (which may appear in places such as site/server logs or browser history). User input should be sanitised/escaped using the correct parameter types. Before destroying large amounts of data, add a confirmation step. If not using a moodleform, clean input using optional_param or required_param with an appropriate PARAM_... type. Group optional_param and required_param calls together at the top of the script, to make them easy to find. Do not access $_GET, $_POST or $_REQUEST directly. As with any setting/modification/deletion of data, these should always be protected by checking a valid sesskey was submitted, to ensure it is an action the user has intended. Similarly, clean data from other external resources like RSS feeds before use. Additional reading If you have not done so already, please go over the Cross-site request forgery (CSRF) section in the Moodle developer documentation. General Forms workflow The general workflow of using Moodle forms is shown in the code snippet below. // Get page parameters. // Use required_param() or optional_param(). // Check user has the required capability. // Use require_capability() or has_capability(). // Instantiate the myform form from within the plugin. $mform = new \\plugintype_pluginname\\form\\myform(); // Form processing. if ($mform->is_cancelled()) { // If there is a cancel element on the form, and it was pressed, // you can handle the cancel operation here. // NOTE: is_cancelled() should be called before get_data(). redirect($returnurl); } else if ($fromform = $mform->get_data()) { // This branch is where you process validated data. // Typically you finish up by redirecting to somewhere where the user // can see what they did. redirect($nexturl); } // Set default data for form (if any). $mform->set_data($toform); // Display the form. // If the form was not cancelled, and data was not submitted, // then display the form. echo $OUTPUT->header(); $mform->display(); echo $OUTPUT->footer(); Note: The code snippet above is not the complete code. Only the important concepts are shown here. The actual processing of the submitted form data happens in the following code block. else if ($fromform = $mform->get_data()) { // This branch is where you process validated data. // Typically you finish up by redirecting to somewhere where the user // can see what they did. redirect($nexturl); } $fromform = $mform->get_data(): gets the data from the form. cleans and passes validated form data. validates the sesskey token. CSRF protection Form API automatically checks the sesskey and request method. Where possible use the Form API or use POST requests when you need to perform an action. Note: When used correctly, sesskey can prevent unintended actions being executed by a user if they click a link within an email or external website, such as changing a grade or deleting their account. Manually checking and validating sesskey Use the confirm_sesskey() or require_sesskey() functions to validate the sesskey token. $delete = optional_param('delete', null, PARAM_INT); if ($delete) { require_sesskey(); // Do whatever you need to, like $DB->delete_records(...) etc. } Usually you will use require_sesskey(). require_sesskey() will throw an exception if the session is invalid. require_sesskey() makes a call to confirm_sesskey(). You can use confirm_sesskey() as shown below: $delete = optional_param('delete', null, PARAM_INT); if ($delete && confirm_sesskey()) { // Do whatever you need to, like $DB->delete_records(...) etc. } Note: Requiring a sesskey does not prevent or allow script content from being loaded on a page, so it is important to check whether it is trusted or not. Clean and escape data before output Use s or p to output plain text content. Use format_string to output content with minimal HTML like multi-lang spans (for example, course and activity names). Use format_text to output all other content. Only use $options->noclean if it requires a capability with RISK_XSS to input that content (for example web page resources). Data destined for JavaScript should be escaped using $PAGE->requires->data_for_js (Moodle 2.0 onwards) or addslashes_js (Moodle 1.9). Follow the Output functions to get a better understanding of how dynamic data should be sent from Moodle to the browser. User input sanitisation Ensures properly formed data is used for processing. Removes potentially unwanted and malicious content from the data. Example: Consider the given code snippet from the Book module. $id = required_param('id', PARAM_INT); // Course module ID. $chapterid = required_param('chapterid', PARAM_INT); // Chapter ID. $up = optional_param('up', 0, PARAM_BOOL); required_param() and optional_param() are used to sanitise the values passed to this page. A PARAM_* is used to specify the type of input expected and what values should be allowed. Commonly Used PARAM_* Types The type is specified with one of the PARAM_* constants. Among the most commonly used types are: PARAM_INT declares the parameter should be treated as an integer number. PARAM_ALPHA is for short strings that can contain English ASCII letters [a-z, A-Z] only. PARAM_BOOL converts the input values like 0, 1, \"yes\", \"no\", \"true\" or \"off\" to a boolean variable. PARAM_NOTAGS strips all HTML tags from the submitted text. PARAM_TEXT for longer plain texts. All HTML tags are stripped, it only keeps support for the standard Multi-language content filter. Please see the source code of the lib/moodlelib.php for more PARAM type constants and their inline documentation. NOTE: Avoid using PARAM_RAW in most cases of user input, particularly where that data will be later output. Outputting data Avoid outputting raw content. In most cases, you should use s(), p(), format_string() or format_text() functions to correctly clean and escape the content. See details about these output functions are available in the Output API docs . Content retrieved from the database should also cleaned before output. Complex input, such as HTML, are stored in the database in raw input format. Example: Consider the given use case. A record is retrieved from the database and the value of the message field is displayed. DO NOT do this Do not output the value from the database without cleaning/escaping it first. $record = $DB->get_record('local_myplugin', ['id' => $id]); echo html_writer::tag('p', $record->message); DO this Use an appropriate output method to clean/escape the value before outputting. $record = $DB->get_record('local_myplugin', ['id' => $id]); echo html_writer::tag('p', format_text($record->message, FORMAT_PLAIN)); Mustache templates {{variable}} will escape the value before using it in the template. {{{variable}}} will render the raw unescaped HTML. Use {{{variable}}} where it is absolutely necessary, for example: Backend provides a \"safe\" HTML snippet; Value of the variable has been processed by format_text() or another adequate way. Example: Assume that the following data is passed to a mustache variable named message. { \"message\": \" < p > Greetings user. < script > alert ( 'XSS alert' )</ script ></ p > \" } {{message}} will be replaced with: &lt; p &gt; Greetings user. &lt; script &gt; alert('XSS alert') &lt; /script &gt;&lt; /p &gt; HTML entities are encoded, so that they are not treated as HTML tags by the browser. {{{message}}} will be replaced with: < p > Greetings user. < script > alert ( 'XSS alert' )</ script ></ p > The raw value of the variable is used. If the value contains HTML or script, this will be injected into the HTML that is rendered. This potentially makes it possible to include malicious content, such as a cross-site scripting payload (as can be seen in the simplified example above). Escape data before storing it in the database Use the XMLDB library. This takes care of most escaping issues for you. The addslashes method should no longer be use anywhere in Moodle 2.0 onwards. Variables must be passed to database queries through bound parameters. Handling database queries Do not attempt to write your own code to directly access the database. It can be prone to SQL injection. Use higher level methods from the data manipulation API , like get_record(), whenever possible. Clean all user input by passing appropriate PARAM_XXX to required_param() or optional_param(). Escape all input parameters. When you have to insert values into SQL statements, use place-holders to insert the values safely. Before Moodle 2.0, you had to build SQL by concatenating strings. Take particular care, especially with quoting values, to avoid SQL injection vulnerabilities. Although many DML methods have parameters passed in which are bound/sanitised automatically, some parts will not be: Eg: passed in WHERE or sorting parameters; Raw SQL such as the execute() method. Any code that uses user input to determine the ORDER BY statement should use one of the \"safe order by\" helper methods: get_safe_orderby() or; get_safe_orderby_multiple(). Database query examples Example 1: String concatenation DO NOT do this Avoid using string concatenation to build SQL queries, where possible. When you have to insert values into SQL statements, use place-holders to insert the values safely. $sql = \"SELECT * FROM {user} \" . \"WHERE firstname = '\" . $fname . \"' \" . \"AND lastname = '\" . $lname .\"'\"; $result = $DB->get_record_sql($sql); DO this Use bound parameters to insert values into SQL statements. $sql = \"SELECT * FROM {user} \" . \"WHERE firstname = ? \" . \"AND lastname = ?\"; $result = $DB->get_record_sql($sql, [$fname, $lname]); Example 2: WHERE conditions DO NOT do this Do not use variables directly in the WHERE clause. $DB->delete_records_select('message', \"id = $id\"); DO this Use placeholders (named or question mark) to insert values into WHERE conditions. $DB->delete_records_select('message', \"id = :id\", ['id' => $id]); Example 3: ORDER BY statement DO NOT do this Avoid using user supplied values directly to build the ORDER BY statement. $sort = optional_param('sort', 'username', PARAM_ALPHAEXT); $dir = optional_param('dir', 'ASC', PARAM_ALPHA); $result = $DB->get_records('user', null, \"$sort $dir\"); DO this Use get_safe_orderby() or get_safe_orderby_multiple() helper functions to construct the ORDER BY statement. $sort = optional_param('sort', 'username', PARAM_ALPHAEXT); $dir = optional_param('dir', 'ASC', PARAM_ALPHA); $sortorder = get_safe_orderby([ 'username' => 'username', 'firstname' => 'firstname', 'lastname' => 'lastname', 'default' => 'username', ], $sort, $dir); $result = $DB->get_records('user', null, $sortorder); Escape data before using it in shell commands Avoid shell commands if at all possible. Look to see if there is a PHP library instead. If you can't avoid shell commands, use escapeshellcmd and escapeshellarg. Log every request Every script should log an event. In case of an issue, logs help to trace the sequence of events that happened. Other good practice ... that helps with security: Structure your code nicely, minimising the use of global variables. This makes the flow of data, and hence security, easier to verify. Initialise objects (for instance, $x = new stdClass; ) and arrays ($x = array()) before you first use them. Test every input field with tricky input and exception cases to ensure that it is escaped and un-escaped the right number of times everywhere, and that Unicode characters are not corrupted. One standard test you can use is: < > & &lt; &gt; &amp; ' \\' \u7881 \\ \\\\ Web services Remember that all data received by a web service originates from client-side origins (eg from JavaScript in-browser when a user performs some action, developer tools, cURL etc). This means it can be manipulated. Here are some tips for writing safe web services: Ensure the correct parameter types are used when defining inputs in particular, as well as outputs/returns, so appropriate escaping occurs. Always remember to check relevant capabilities for the appropriate context before performing actions. This avoids accidentally allowing users to perform actions they should not be able to perform (and which might not be otherwise possible in the user interface). Never trust incoming request data for identification, For example, if a web service needs to perform an action for the requesting user, always identify them from server side data (eg $USER->id) and never from a user data that has been passed in with the request, because this can be modified. When using data that is passed in with the request, ensure it is used in the correct place, for the correct purpose and be wary of mis-matched checks versus actions. For example, if a web service accepts a course ID parameter, but during execution calls a method always makes a change in the site context, it would probably not make sense to perform the capability check on the course\u2019s context. Web service calls made from JavaScript are automatically covered with a sesskey check. Web service calls made externally follow the authentication process so are also protected. PHP unserialize() PHP unserialize() function has certain security risks, such as remote code execution. You should never pass user-supplied serialized data to unserialize(). You should avoid using PHP unserialize() where possible. Refactor your code and replace unserialize() usage. Use alternate JSON functions, if needed. If it is unavoidable to use unserialize(), your code should properly sanitise the data passed to it. The PHP manual provides the following function signature and warning about unserialize(). unserialize(string $data, array $options = []): mixed WARNING Do not pass untrusted user input to unserialize() regardless of the options value of allowed_classes. Unserialization can result in code being loaded and executed due to object instantiation and autoloading, and a malicious user may be able to exploit this. Use a safe, standard data interchange format such as JSON (via json_decode() and json_encode()) if you need to pass serialized data to the user. Additional reading: Read more about PHP object injection in unserialize() on OWASP.org .","title":"Security"},{"location":"Moodle/phpMoodleSecurity/#key-security-vulnerabilities","text":"Given below are some of the typical vulnerability types developers need to be aware of when developing web applications, including Moodle. Unauthenticated access Unauthorised access Cross-site request forgery (CSRF) Cross-site scripting (XSS) SQL injection Command-line injection Data-loss Confidential information leakage Configuration information leakage Session fixation Denial of service (DOS) Brute-forcing login Insecure configuration management Buffer overruns and other platform weaknesses Social engineering Data-loss and Confidential information leakage are symptoms of other vulnerabilities. Some vulnerabilities, such as Configuration information leakage, Command-line injection and Denial of service (DOS) would generally only concern developers of certain types of plugins. Be sure to read the Security page in the Moodle Developer Resources for more details on each of these and other vulnerabilities.","title":"Key security vulnerabilities"},{"location":"Moodle/phpMoodleSecurity/#summary-of-the-guidelines","text":"","title":"Summary of the guidelines"},{"location":"Moodle/phpMoodleSecurity/#authenticate-the-user","text":"With very few exceptions, every script should call require_login or require_course_login as near the start as possible.","title":"Authenticate the user"},{"location":"Moodle/phpMoodleSecurity/#verify-course-and-module-access","text":"All course areas have to be protected by require_login or require_course_login with correct $course parameter. All module areas have to be protected by require_login or require_course_login with correct $course and $cm parameter Example: Consider the index.php file of the Book module. require(__DIR__.'/../../config.php'); require_once(__DIR__.'/locallib.php'); $id = required_param('id', PARAM_INT); // Course ID. $course = $DB->get_record('course', ['id' => $id], '*', MUST_EXIST); unset($id); require_course_login($course, true); require_course_login() is called as soon as $course is found. require_course_login() checks if user can view the course. This page is listing all book modules in a course, so checking for a specific $cm value is not needed here. Example: Consider the edit.php file of the Book module. require(__DIR__.'/../../config.php'); require_once(__DIR__.'/locallib.php'); require_once(__DIR__.'/edit_form.php'); $cmid = required_param('cmid', PARAM_INT); // Book Course Module ID. $chapterid = optional_param('id', 0, PARAM_INT); // Chapter ID. $pagenum = optional_param('pagenum', 0, PARAM_INT); $subchapter = optional_param('subchapter', 0, PARAM_BOOL); $cm = get_coursemodule_from_id('book', $cmid, 0, false, MUST_EXIST); $course = $DB->get_record('course', ['id' => $cm->course], '*', MUST_EXIST); $book = $DB->get_record('book', ['id' => $cm->instance], '*', MUST_EXIST); require_login($course, false, $cm); require_login() is called as soon as the $course and $cm values are found. This page is editing a book so both $course and $cm parameters should be passed to require_login() to check proper access. $autologinguest parameter is false because guest users should not be making changes on the site.","title":"Verify course and module access"},{"location":"Moodle/phpMoodleSecurity/#check-permissions-to-avoid-unauthorized-access","text":"Before allowing the user to see anything or do anything, make a call to has_capability or require_capability, testing the appropriate capability in the appropriate context. Get the appropriate context using a call to get_context_instance. For this to work in custom code, you may need to define additional capabilities. For example, block/myblock:viewsecretthing. You can define extra capabilities by creating a db/access.php file in your plugin. Capabilities should be annotated with the appropriate risks. If appropriate, use the groups API to check group membership, and only show users information from groups they should be able to see. Note that require_login checks basic groups access permissions for you. It is very important to check capabilities when printing UI, but also after data submission before it is processed.","title":"Check permissions to avoid unauthorized access"},{"location":"Moodle/phpMoodleSecurity/#dont-trust-any-input-from-users","text":"Use the Form API whenever possible for handling HTML forms. Use moodleforms whenever possible, with an appropriate setType method call for each field. Use HTTP requests correctly: Use GET requests for getting information; Use POST requests for changing things in the application; Before performing actions, use data_submitted() && confirm_sesskey() to check sesskey and that you are handling a POST request. The \"sesskey\" (session key) is Moodle's inbuilt cross-site request forgery protection. Despite its name, sesskey is not the same as the user's session token stored in a cookie. It is simply a CSRF key which is reset per-session. Sesskey should not be sent via GET, as it exposes the token in the URL (which may appear in places such as site/server logs or browser history). User input should be sanitised/escaped using the correct parameter types. Before destroying large amounts of data, add a confirmation step. If not using a moodleform, clean input using optional_param or required_param with an appropriate PARAM_... type. Group optional_param and required_param calls together at the top of the script, to make them easy to find. Do not access $_GET, $_POST or $_REQUEST directly. As with any setting/modification/deletion of data, these should always be protected by checking a valid sesskey was submitted, to ensure it is an action the user has intended. Similarly, clean data from other external resources like RSS feeds before use. Additional reading If you have not done so already, please go over the Cross-site request forgery (CSRF) section in the Moodle developer documentation.","title":"Don't trust any input from users"},{"location":"Moodle/phpMoodleSecurity/#general-forms-workflow","text":"The general workflow of using Moodle forms is shown in the code snippet below. // Get page parameters. // Use required_param() or optional_param(). // Check user has the required capability. // Use require_capability() or has_capability(). // Instantiate the myform form from within the plugin. $mform = new \\plugintype_pluginname\\form\\myform(); // Form processing. if ($mform->is_cancelled()) { // If there is a cancel element on the form, and it was pressed, // you can handle the cancel operation here. // NOTE: is_cancelled() should be called before get_data(). redirect($returnurl); } else if ($fromform = $mform->get_data()) { // This branch is where you process validated data. // Typically you finish up by redirecting to somewhere where the user // can see what they did. redirect($nexturl); } // Set default data for form (if any). $mform->set_data($toform); // Display the form. // If the form was not cancelled, and data was not submitted, // then display the form. echo $OUTPUT->header(); $mform->display(); echo $OUTPUT->footer(); Note: The code snippet above is not the complete code. Only the important concepts are shown here. The actual processing of the submitted form data happens in the following code block. else if ($fromform = $mform->get_data()) { // This branch is where you process validated data. // Typically you finish up by redirecting to somewhere where the user // can see what they did. redirect($nexturl); } $fromform = $mform->get_data(): gets the data from the form. cleans and passes validated form data. validates the sesskey token.","title":"General Forms workflow"},{"location":"Moodle/phpMoodleSecurity/#csrf-protection","text":"Form API automatically checks the sesskey and request method. Where possible use the Form API or use POST requests when you need to perform an action. Note: When used correctly, sesskey can prevent unintended actions being executed by a user if they click a link within an email or external website, such as changing a grade or deleting their account.","title":"CSRF protection"},{"location":"Moodle/phpMoodleSecurity/#manually-checking-and-validating-sesskey","text":"Use the confirm_sesskey() or require_sesskey() functions to validate the sesskey token. $delete = optional_param('delete', null, PARAM_INT); if ($delete) { require_sesskey(); // Do whatever you need to, like $DB->delete_records(...) etc. } Usually you will use require_sesskey(). require_sesskey() will throw an exception if the session is invalid. require_sesskey() makes a call to confirm_sesskey(). You can use confirm_sesskey() as shown below: $delete = optional_param('delete', null, PARAM_INT); if ($delete && confirm_sesskey()) { // Do whatever you need to, like $DB->delete_records(...) etc. } Note: Requiring a sesskey does not prevent or allow script content from being loaded on a page, so it is important to check whether it is trusted or not.","title":"Manually checking and validating sesskey"},{"location":"Moodle/phpMoodleSecurity/#clean-and-escape-data-before-output","text":"Use s or p to output plain text content. Use format_string to output content with minimal HTML like multi-lang spans (for example, course and activity names). Use format_text to output all other content. Only use $options->noclean if it requires a capability with RISK_XSS to input that content (for example web page resources). Data destined for JavaScript should be escaped using $PAGE->requires->data_for_js (Moodle 2.0 onwards) or addslashes_js (Moodle 1.9). Follow the Output functions to get a better understanding of how dynamic data should be sent from Moodle to the browser.","title":"Clean and escape data before output"},{"location":"Moodle/phpMoodleSecurity/#user-input-sanitisation","text":"Ensures properly formed data is used for processing. Removes potentially unwanted and malicious content from the data. Example: Consider the given code snippet from the Book module. $id = required_param('id', PARAM_INT); // Course module ID. $chapterid = required_param('chapterid', PARAM_INT); // Chapter ID. $up = optional_param('up', 0, PARAM_BOOL); required_param() and optional_param() are used to sanitise the values passed to this page. A PARAM_* is used to specify the type of input expected and what values should be allowed.","title":"User input sanitisation"},{"location":"Moodle/phpMoodleSecurity/#outputting-data","text":"Avoid outputting raw content. In most cases, you should use s(), p(), format_string() or format_text() functions to correctly clean and escape the content. See details about these output functions are available in the Output API docs . Content retrieved from the database should also cleaned before output. Complex input, such as HTML, are stored in the database in raw input format. Example: Consider the given use case. A record is retrieved from the database and the value of the message field is displayed.","title":"Outputting data"},{"location":"Moodle/phpMoodleSecurity/#mustache-templates","text":"{{variable}} will escape the value before using it in the template. {{{variable}}} will render the raw unescaped HTML. Use {{{variable}}} where it is absolutely necessary, for example: Backend provides a \"safe\" HTML snippet; Value of the variable has been processed by format_text() or another adequate way. Example: Assume that the following data is passed to a mustache variable named message. { \"message\": \" < p > Greetings user. < script > alert ( 'XSS alert' )</ script ></ p > \" } {{message}} will be replaced with: &lt; p &gt; Greetings user. &lt; script &gt; alert('XSS alert') &lt; /script &gt;&lt; /p &gt; HTML entities are encoded, so that they are not treated as HTML tags by the browser. {{{message}}} will be replaced with: < p > Greetings user. < script > alert ( 'XSS alert' )</ script ></ p > The raw value of the variable is used. If the value contains HTML or script, this will be injected into the HTML that is rendered. This potentially makes it possible to include malicious content, such as a cross-site scripting payload (as can be seen in the simplified example above).","title":"Mustache templates"},{"location":"Moodle/phpMoodleSecurity/#escape-data-before-storing-it-in-the-database","text":"Use the XMLDB library. This takes care of most escaping issues for you. The addslashes method should no longer be use anywhere in Moodle 2.0 onwards. Variables must be passed to database queries through bound parameters.","title":"Escape data before storing it in the database"},{"location":"Moodle/phpMoodleSecurity/#handling-database-queries","text":"Do not attempt to write your own code to directly access the database. It can be prone to SQL injection. Use higher level methods from the data manipulation API , like get_record(), whenever possible. Clean all user input by passing appropriate PARAM_XXX to required_param() or optional_param(). Escape all input parameters. When you have to insert values into SQL statements, use place-holders to insert the values safely. Before Moodle 2.0, you had to build SQL by concatenating strings. Take particular care, especially with quoting values, to avoid SQL injection vulnerabilities. Although many DML methods have parameters passed in which are bound/sanitised automatically, some parts will not be: Eg: passed in WHERE or sorting parameters; Raw SQL such as the execute() method. Any code that uses user input to determine the ORDER BY statement should use one of the \"safe order by\" helper methods: get_safe_orderby() or; get_safe_orderby_multiple().","title":"Handling database queries"},{"location":"Moodle/phpMoodleSecurity/#database-query-examples","text":"","title":"Database query examples"},{"location":"Moodle/phpMoodleSecurity/#escape-data-before-using-it-in-shell-commands","text":"Avoid shell commands if at all possible. Look to see if there is a PHP library instead. If you can't avoid shell commands, use escapeshellcmd and escapeshellarg.","title":"Escape data before using it in shell commands"},{"location":"Moodle/phpMoodleSecurity/#log-every-request","text":"Every script should log an event. In case of an issue, logs help to trace the sequence of events that happened.","title":"Log every request"},{"location":"Moodle/phpMoodleSecurity/#other-good-practice","text":"... that helps with security: Structure your code nicely, minimising the use of global variables. This makes the flow of data, and hence security, easier to verify. Initialise objects (for instance, $x = new stdClass; ) and arrays ($x = array()) before you first use them. Test every input field with tricky input and exception cases to ensure that it is escaped and un-escaped the right number of times everywhere, and that Unicode characters are not corrupted. One standard test you can use is: < > & &lt; &gt; &amp; ' \\' \u7881 \\ \\\\","title":"Other good practice"},{"location":"Moodle/phpMoodleSecurity/#web-services","text":"Remember that all data received by a web service originates from client-side origins (eg from JavaScript in-browser when a user performs some action, developer tools, cURL etc). This means it can be manipulated. Here are some tips for writing safe web services: Ensure the correct parameter types are used when defining inputs in particular, as well as outputs/returns, so appropriate escaping occurs. Always remember to check relevant capabilities for the appropriate context before performing actions. This avoids accidentally allowing users to perform actions they should not be able to perform (and which might not be otherwise possible in the user interface). Never trust incoming request data for identification, For example, if a web service needs to perform an action for the requesting user, always identify them from server side data (eg $USER->id) and never from a user data that has been passed in with the request, because this can be modified. When using data that is passed in with the request, ensure it is used in the correct place, for the correct purpose and be wary of mis-matched checks versus actions. For example, if a web service accepts a course ID parameter, but during execution calls a method always makes a change in the site context, it would probably not make sense to perform the capability check on the course\u2019s context. Web service calls made from JavaScript are automatically covered with a sesskey check. Web service calls made externally follow the authentication process so are also protected.","title":"Web services"},{"location":"Moodle/phpMoodleSecurity/#php-unserialize","text":"PHP unserialize() function has certain security risks, such as remote code execution. You should never pass user-supplied serialized data to unserialize(). You should avoid using PHP unserialize() where possible. Refactor your code and replace unserialize() usage. Use alternate JSON functions, if needed. If it is unavoidable to use unserialize(), your code should properly sanitise the data passed to it. The PHP manual provides the following function signature and warning about unserialize(). unserialize(string $data, array $options = []): mixed WARNING Do not pass untrusted user input to unserialize() regardless of the options value of allowed_classes. Unserialization can result in code being loaded and executed due to object instantiation and autoloading, and a malicious user may be able to exploit this. Use a safe, standard data interchange format such as JSON (via json_decode() and json_encode()) if you need to pass serialized data to the user. Additional reading: Read more about PHP object injection in unserialize() on OWASP.org .","title":"PHP unserialize()"},{"location":"Moodle/phpMoodleServices/","text":"External web services in Moodle allow the platform to interact with external systems, providing a bridge for integrating Moodle with third-party applications such as mobile apps, external platforms, or custom systems. Moodle uses a standardized way to define, expose, and secure web services to ensure safe communication between systems. Developing an external web service in Moodle involves several steps, including defining the functions to be exposed, creating the necessary security mechanisms, and managing user permissions. The Web Service framework and the External API work closely together providing a number of Endpoints, and self-describing classes to support a wide range of uses. Moodle uses these web services internally for: AJAX interactions in the Moodle Web Interface; and The official Moodle Mobile App. The following example shows a typical authentication and protocol workflow. The External Service API has two categories of documentation: this documentation details how to write a web service and use the External API; and API documentation for a live Moodle site, which can be found under Site administration > Server > Web services > API Documentation . Web Service Protocols Moodle supports multiple web service protocols, which determine how external systems can communicate with Moodle. Common protocols include: REST (Representational State Transfer) : A simple, lightweight protocol that uses HTTP requests (GET, POST, etc.). SOAP (Simple Object Access Protocol) : A more complex, XML-based protocol. XML-RPC (Remote Procedure Call) : Uses XML to encode calls and HTTP as the transport mechanism. AMF (Action Message Format) : A binary protocol primarily used for communication with Flash applications. Moodle comes with built-in support for these protocols, and developers can configure which ones to use. Defining Web Service Functions A web service function is a PHP function that handles the logic of your web service. You can expose any PHP function in Moodle as a web service function, but it must be carefully structured to ensure security and proper behavior. Before they can be used, all functions must be declared to Moodle, and their inputs and outputs must be defined . Functions are declared by noting them in the db/services.php file for a plugin. Functions are defined within their own class located within the \\component\\external namespace of a component. Note that there is a strict naming convention for external service functions . Function implementation classes consist of one class containing a number of functions, some of which are mandatory. During a Moodle installation or upgrade, the service and function declarations are parsed by a service discovery process and stored within the database. An administrative UI may be used to change some configuration details of these declarations. Service declarations Each component wishing to create an external service function must declare that the function exists by describing it in the db/services.php file for that component. This information is stored internally within Moodle, and collected as part of the service discovery during installation and upgrade. The function name is arbitrary, but must follow the naming convention. This helps ensure that it is globally unique. $functions = [ // The name of your web service function, as discussed above. 'local_myplugin_create_groups' => [ // The name of the namespaced class that the function is located in. 'classname' => 'local_groupmanager\\external\\create_groups', // A brief, human-readable, description of the web service function. 'description' => 'Creates new groups.', // Options include read, and write. 'type' => 'write', // Whether the service is available for use in AJAX calls from the web. 'ajax' => true, // An optional list of services where the function will be included. 'services' => [ // A standard Moodle install includes one default service: // - MOODLE_OFFICIAL_MOBILE_SERVICE. // Specifying this service means that your function will be available for // use in the Moodle Mobile App. MOODLE_OFFICIAL_MOBILE_SERVICE, ], // A comma-separated list of capabilities used by the function. // This is advisory only and used to indicate to the administrator // configuring a custom service definition. 'capabilities' => 'moodle/course:creategroups,moodle/course:managegroups', // The following parameters are also available, but are no longer recommended. // The name of the external function name. // If not specified, this will default to 'execute'. 'methodname' => 'execute', // The file containing the class/external function. // Do not use if using namespaced auto-loading classes. 'classpath' => 'local/groupmanager/externallib.php', ), ); Function Definitions An External function definition is the class, and collection of functions, used to define: any parameters that the function expects to take, including any types what the function will return, including any types whether the function has been deprecated, or not It also includes the code that will actually be executed by the function. The function definition should be located within the external namespace of a component. For a component named local_groupmanager located in local/groupmanager which is responsible for creating groups on request, you may have: a Web service function named: local_groupmanager_create_groups defined in a class named local_groupmanager\\external\\create_groups which is located local/groupmanager/classes/external/create_groups.php A service definition: must extend the \\core_external\\external_api class must declare an execute_parameters function to describe the expected parameters of the function must declare an execute function which is called with the functions and performs the expected actions must declare an execute_returns function to describe the values returned by the function may declare an execute_is_deprecated function to declare a function as deprecated Writing plugins supporting Multiple Moodle versions The External API subsystem was restructured in Moodle 4.2 and moved from classes within a manually-required file, to autoloaded and namespaced classes. If you are developing a plugin whose codebase is used or tested in multiple Moodle versions, including older versions of Moodle, then you: must require_once the lib/externallib.php file must extend the external_api class instead of \\core_external\\external_api This will allow your plugin to continue working without deprecation notices or failures. Please note that deprecation notices will be added to this pathway from Moodle 4.6 onwards. // local/groupmanager/classes/external/create_groups.php <?php namespace local_groupmanager\\external ; use external_function_parameters ; use external_multiple_structure ; use external_single_structure ; use external_value ; class create_groups extends \\core_external\\external_api { public static function execute_parameters () : external_function_parameters { return new external_function_parameters ([ 'groups' => new external_multiple_structure ( new external_single_structure ([ 'courseid' => new external_value ( PARAM_INT , 'The course to create the group for' ), 'idnumber' => new external_value ( PARAM_RAW , 'An arbitrary ID code number perhaps from the institution' , VALUE_DEFAULT , null ), 'name' => new external_value ( PARAM_RAW , 'The name of the group' ), 'description' => new external_value ( PARAM_TEXT , 'A description' , VALUE_OPTIONAL ), ]), 'A list of groups to create' ), ]); } public static function execute ( array $groups ) : array { // Validate all of the parameters. [ 'groups' => $groups , ] = self :: validate_parameters ( self :: execute_parameters (), [ 'groups' => $groups , ]); // Perform security checks, for example: $coursecontext = \\context_course :: instance ( $courseid ); self :: validate_context ( $coursecontext ); require_capability ( 'moodle/course:creategroups' , $coursecontext ); // Create the group using existing Moodle APIs. $createdgroups = \\local_groupmanager\\util :: create_groups ( $groups ); // Return a value as described in the returns function. return [ 'groups' => $createdgroups , ]; } public static function execute_returns () : external_single_structure { return new external_single_structure ([ 'groups' => new external_multiple_structure ([ 'id' => new external_value ( PARAM_INT , 'Id of the created user' ), 'name' => new external_value ( PARAM_RAW , 'The name of the group' ), ]) ]); } } Available parameter types are defined in lib/moodlelib.php and are used by the validate_parameters() function and during return value checking to ensure that the service is called and working as defined. Security Considerations Web services often expose sensitive data, so it\u2019s critical to enforce strict security measures. User Authentication : Ensure that only authorized users can access your web services. Capability Checks : Use Moodle\u2019s capabilities system to control access. For example, only users with the capability moodle/course:view can retrieve course details. Parameter Validation : Always validate and sanitize the input parameters using the external_function_parameters class. Return Value Sanitization : Ensure that the data returned is safe and free from XSS vulnerabilities. Before operating on any data in an external function, you must ensure that the user: has access to context that the data is located in has permission to perform the relevant action Validating function parameters Before working with any data provided by a user you must validate the parameters against the definitions you have defined. To do so you should call the validate_parameters() function, passing in the reference to your execute_parameters() function, and the complete list of parameters for the function. The function will return the validated and cleaned parameters. The validate_parameters() function is defined on the \\core_external\\external_api class, and can be called as follows: // local/groupmanager/classes/external/create_groups.php public static function execute(array $groups): array { [ 'groups' => $groups, ] = self::validate_parameters(self::execute_parameters(), [ 'groups' => $groups, ]); // ... } Validating access to the Moodle context Whenever fetching or updating any data within Moodle using an External function definition, you must validate the context that the data exists within. To do so you should call the validate_context() function, passing the most specific context for the data. For example, if you are working with data belonging to a specific activity, you should use the activity context. If you are working with data belonging to a course, you should use the course context. If your function operates on multiple contexts (like a list of courses), you must validate each context right before generating any response data related to that context. The validate_context() function is defined on the \\core_external\\external_api class, and can be called as follows: // local/groupmanager/classes/external/create_groups.php public static function execute(array $groups): array { // ... foreach ($groups as $group) { $coursecontext = \\context_course::instance($group['courseid']); self::validate_context($coursecontext); // ... } } The validate_context() function will also configure the correct theme, language, and filters required to render content for the current user. You should not: use the require_login function from an external function - this function is reserved for php scripts returning a web page. call $PAGE->set_context() manually - this will generate warning notices. The validate_context() function is the only correct way to write external functions. Ensuring that a user has the appropriate rights Once you have confirmed that the provided data is of the correct type, and configured Moodle for the specific context, you should also ensure that all capabilities are checked correctly. You can use the standard capability functions, including: has_capability() - to check that a user has a single capability has_any_capability() - to check that a user has any capability in a set has_all_capability() - to check that a user has all capabilities in a set require_capability() - to require a single capability require_all_capabilities() - to require that a user has all capabilities in a set Managing Access Control Each web service function can have specific access controls that determine who can call it. Access is controlled via tokens and capabilities . Tokens : Users or systems must have a valid token to call a web service. Admins can issue these tokens through Site administration > Server > Web services > Manage tokens . Capabilities : Each function can define required capabilities in db/services.php , ensuring that users have the correct roles to access the web service. Authentication and Tokens Moodle uses tokens for authenticating users when they access web services. Tokens are generated for individual users or system accounts and can be issued in two ways: Manually by administrators: Through the admin interface. Automatically : Using Moodle\u2019s authentication mechanisms (e.g., OAuth2). Example: Creating a Token Manually Go to Site administration > Server > Web services > Manage tokens . Choose the user for whom the token will be created. Assign the web service functions that this token allows access to. Service Configuration in the Moodle Admin Interface After defining your web service functions, you can configure them via the Moodle admin interface: Enable Web Services : Ensure web services are enabled in Site administration > Advanced features . Configure Protocols : Enable the desired web service protocols under Site administration > Plugins > Web services > Manage protocols . Create a Service : In Site administration > Server > Web services > External services , you can create and manage services, which are groups of related web service functions. Assign Functions to the Service : Add the functions defined in db/services.php to the service, so they are accessible externally. File handling Moodle provides two ways to fetch and upload files: A set of web service functions; and A pair of dedicated endpoints. Web service functions You can use the following functions to upload, and fetch, file content: core_files_get_files() ; and core_files_upload() . When using these functions, the file content is base64-encoded. Note: Many devices do not have enough memory to encode and decode requests containing large files. As such we recommend using the dedicated endpoints instead. Dedicated endpoints Moodle provides two dedicated endpoints which can be used, alongside the authentication token, to upload and fetch content. These are: to upload a file: /webservice/upload.php ; and to fetch a file: /webservice/pluginfile.php . File upload The recommended way to upload file content from an external service is by issue a POST request to the /webservice/upload.php endpoint, passing in a valid web service token for authentication. Upon successful upload, any files passed will be saved in the user's draft file area. The endpoint takes two optional arguments: An itemid to upload the files to, defaulting to 0 . If none is specified then a new id is generated for the current user's draft file area A filepath to store the file in, defaulting to /. The endpoint will return a JSON-encoded summary of the uploaded file, including the itemid that it was stored in. It is typical that the itemid parameter will be used when the files are uploaded singularly in separate HTTP calls and the files are required to be in the same draft file area. The client retrieves the itemid from the first uploaded file and uses it in subsequent uploads. This allows multiple files to be uploaded to the same draft file area. On every successful upload, the file/s information are returned in JSON format. If an error occurs, an error message will be sent back in JSON format too. Example To upload a file, users.csv , you could use curl as follows: $ curl -X POST -F \"file_1=@users.csv\" https://SITENAME/webservice/upload.php?token = TOKEN \\ | jq [ { \"component\" : \"user\" , \"contextid\" : 567 , \"userid\" : \"123\" , \"filearea\" : \"draft\" , \"filename\" : \"users.csv\" , \"filepath\" : \"/\" , \"itemid\" : 880413555 , \"license\" : \"allrightsreserved\" , \"author\" : \"User User\" , \"source\" : \"O:8:\\\"stdClass\\\":1:{s:6:\\\"source\\\";s:13:\\\"users.csv\\\";}\" } ] The returned JSON response includes the key parts of the file record, including the itemid . Once all the files are uploaded, you can call a webserivce function to process the files from the user drafts area, passing in the itemid of the draft area containing the list of files for the request. The service can identify the uploads and manipulate them as necessary. An example of a webservice that accepts files is: mod_assign_save_submission . To accept file uploads, the service must allow \"files download\" (Administration > Plugins > Web services > Manage services > Edit service > Advanced button) File download We serve the files through /webservice/pluginfile.php . This script requires a web service token for authentication. To support file downloads, the service must allow \"files download\". The /webservice/pluginfile.php endpoint has the exact same structure as /pluginfile.php and /tokenpluginfile.php . We don't serve the files through /pluginfile.php for web service clients because it requires the user's login session to work, however it is possible to use the /tokenpluginfile.php endpoint with an appropriate token. Returning files in Web Services Since Moodle 3.2, you can return a complete file area list via Web Services using the static get_area_files method, defined in external_util . $forum->introfiles = external_util::get_area_files($context->id, 'mod_forum', 'intro', false, false); You can also use the external_files structure definition in combination with the method to return the most common file fields required by WS clients. public static function execute_returns(): external_multiple_structure { return new external_multiple_structure( new external_single_structure([ 'id' => new external_value(PARAM_INT, 'Forum id'), // ... 'introfiles' => new external_files('Files in the introduction text', VALUE_OPTIONAL), // ... ]) ); } Writing a new service This documentation covers the creation of a new external service for use in a web service of a fictional local plugin, local_groupmanager. Functional specification The local_groupmanager plugin has a need to create groups within a course and would like to do so using its own web service. When defining a new service definition, Moodle requires that the name of the definition be in the form: [frankenstyle_component]_[methodname] The naming convention further dictates that the methodname component be in the form: [methodname] - The name of the method in the form of [verb]_[noun] [verb] - Usually one of get, create, delete, update A similar verb that well describes the action may also be used [noun] - The object being modified Usually in Plural form Per the Moodle naming convention for web services the name of the function should be: local_groupmanager_create_groups Inputs The local_groupmanager_create_groups external service definition will take a list of groups as its only parameters. Outputs The service will return a list of the created groups, including the id element of those groups. Exceptions and failures If any group creation fails, the function will throw an exception, and no groups will be created. Technical specification the core function the external function will call: groups_create_group() from /group/lib.php. the parameter types: a list of object. This object are groups, with id/name/courseid . the returned value types: a list of objects (groups) with their id. the user capabilities to check: moodle/course:managegroups Declare the web service function An external function must be declared before it can be used in your plugin. Function declarations should be placed in the db/services.php file of your plugin. For example in our fictitious plugin this would be located in local/groupmanager/db/services.php . $functions = [ // The name of your web service function, as discussed above. 'local_groupmanager_create_groups' => [ // The name of the namespaced class that the function is located in. 'classname' => 'local_groupmanager\\external\\create_groups', // A brief, human-readable, description of the web service function. 'description' => 'Creates new groups.', // Options include read, and write. 'type' => 'write', // Whether the service is available for use in AJAX calls from the web. 'ajax' => true, // An optional list of services where the function will be included. 'services' => [ // A standard Moodle install includes one default service: // - MOODLE_OFFICIAL_MOBILE_SERVICE. // Specifying this service means that your function will be available for // use in the Moodle Mobile App. MOODLE_OFFICIAL_MOBILE_SERVICE, ] ], ]; A number of advanced options are also available, as described below: $functions = [ // The name of your web service function, as discussed above. 'local_groupmanager_create_groups' => [ // A comma-separated list of capabilities used by the function. // This is advisory only and used to indicate to the administrator configuring a custom service definition. 'capabilities' => 'moodle/course:creategroups,moodle/course:managegroups', // The following parameters are also available, but are no longer recommended. // The name of the external function name. // If not specified, this will default to 'execute'. // 'methodname' => 'execute', // The file containing the class/external function. // Do not use if using namespaced auto-loading classes. // 'classpath' => 'local/groupmanager/externallib.php', ), ); Write the external function descriptions Every web service function is mapped to an external function. External function are described in the External functions API. Each external function is written with two other functions describing the parameters and the return values. These description functions are used by web service servers to: validate the web service function parameters validate the web service function returned values build WSDL files or other protocol documents These two description functions are located in the class declared in local/groupmanager/db/services.php . Thus for the web service function local_groupmanager_create_groups() , we should write a class named create_group s in the local_groupmanager\\external namespace. This will be located in the file local/groupmanager/classes/external/create_groups.php . The class will contain: execute(...) execute_parameters() execute_return() Defining parameters <?php namespace local_groupmanager\\external ; use external_function_parameters ; use external_multiple_structure ; use external_single_structure ; use external_value ; class create_groups extends \\core_external\\external_api { /** * Returns description of method parameters * @return external_function_parameters */ public static function execute_parameters () { return new external_function_parameters ([ 'groups' => new external_multiple_structure ( new external_single_structure ([ 'courseid' => new external_value ( PARAM_INT , 'id of course' ), 'name' => new external_value ( PARAM_TEXT , 'multilang compatible name, course unique' ), 'description' => new external_value ( PARAM_RAW , 'group description text' ), 'enrolmentkey' => new external_value ( PARAM_RAW , 'group enrol secret phrase' ), ]) ) ]); } } A web service function without parameters will have a parameter description function like that: /** * Returns description of method parameters * @return external_function_parameters */ public static function execute_parameters(): external_function_parameters { return new external_function_parameters([ // If this function had any parameters, they would be described here. // This example has no parameters, so the array is empty. ]); } A parameter can be described as: a list => external_multiple_structure an object => external_single_structure a primary type => external_value Our create_groups() function expects one parameter named groups, so we will first write: /** * Returns description of method parameters * @return external_function_parameters */ public static function execute_parameters(): external_function_parameters { return new external_function_parameters([ 'groups' => ... ]); } This groups parameter is a list of group. So we will write : 'groups' => new external_multiple_structure( ... ) An external_multiple_structure object (list) can be constructed with: external_multiple_structure (list) external_single_structure (object) external_value (primary type). For our function it will be a external_single_structure: new external_single_structure([ 'courseid' => ..., 'name' => ..., 'description' => ..., 'enrolmentkey' => ..., ]) Thus we obtain : 'groups' => new external_multiple_structure( new external_single_structure([ 'courseid' => ..., 'name' => ..., 'description' => ..., 'enrolmentkey' => ..., ]) ) Each group values is a external_value (primary type): courseid is an integer name is a string (text only, not tag) description is a string (can be anything) enrolmentkey is also a string (can be anything) We add them to the description : 'groups' => new external_multiple_structure( new external_single_structure([ // The second argument is a human readable description text. // This text is displayed in the automatically generated documentation. 'courseid' => new external_value(PARAM_INT, 'id of course'), 'name' => new external_value(PARAM_TEXT, 'multilang compatible name, course unique'), 'description' => new external_value(PARAM_RAW, 'group description text'), 'enrolmentkey' => new external_value(PARAM_RAW, 'group enrol secret phrase'), ]) ) execute_returns() It's similar to execute_parameters(), but instead of describing the parameters, it describes the return values. public static function execute_returns() { return new external_multiple_structure( new external_single_structure([ 'id' => new external_value(PARAM_INT, 'group record id'), 'courseid' => new external_value(PARAM_INT, 'id of course'), 'name' => new external_value(PARAM_TEXT, 'multilang compatible name, course unique'), 'description' => new external_value(PARAM_RAW, 'group description text'), 'enrolmentkey' => new external_value(PARAM_RAW, 'group enrol secret phrase'), ]) ); } Required, Optional or Default value A value can be VALUE_REQUIRED, VALUE_OPTIONAL, or VALUE_DEFAULT. If not mentioned, a value is VALUE_REQUIRED by default. 'yearofstudy' => new external_value(PARAM_INT, 'year of study', VALUE_DEFAULT, 1979), VALUE_REQUIRED - if the value is not supplied => the server throws an error message VALUE_OPTIONAL - if the value is not supplied => the value is ignored. Note that VALUE_OPTIONAL can't be used in top level parameters, it must be used only within array/objects key definition. If you need top level Optional parameters you should use VALUE_DEFAULT instead. VALUE_DEFAULT - if the value is not supplied => the default value is used Because some web service protocols are strict about the number and types of arguments - it is not possible to specify an optional parameter as one of the top-most parameters for a function. // An example of incorrect behaviour public static function get_biscuit_parameters() { return new external_function_parameters([ 'chocolatechips' => new external_value( PARAM_BOOL, 'if biscuit contains chocolate chips', VALUE_REQUIRED ), 'glutenfree' => new external_value( type: PARAM_BOOL, required: VALUE_DEFAULT, default: false, allownull: false ), // ERROR! top level optional parameter!!! 'icingsugar' => new external_value( PARAM_BOOL, 'if biscuit has icing sugar on top', VALUE_OPTIONAL ), ]); } // An example of correct behaviour public static function get_biscuit_parameters() { return new external_function_parameters([ 'ifeellike' => new external_single_structure([ 'chocolatechips' => new external_value( PARAM_BOOL, 'if biscuit contains chocolate chips', VALUE_REQUIRED ), 'glutenfree' => new external_value( type: PARAM_BOOL, required: VALUE_DEFAULT, default: false, allownull: false ), // ALL GOOD!! We have nested the params in an external_single_structure. 'icingsugar' => new external_value( PARAM_BOOL, 'if biscuit has icing sugar on top', VALUE_OPTIONAL ), ]), ]); } Implement the external function We declared our web service function and we defined the external function parameters and return values. We will now implement the external function: /** * Create groups * @param array $groups array of group description arrays (with keys groupname and courseid) * @return array of newly created groups */ public static function execute($groups) { global $CFG, $DB; require_once(\"$CFG->dirroot/group/lib.php\"); $params = self::validate_parameters(self::execute_parameters(), ['groups' => $groups]); $transaction = $DB->start_delegated_transaction(); //If an exception is thrown in the below code, all DB queries in this code will be rollback. $groups = array(); foreach ($params['groups'] as $group) { $group = (object)$group; if (trim($group->name) == '') { throw new invalid_parameter_exception('Invalid group name'); } if ($DB->get_record('groups', ['courseid' => $group->courseid, 'name' => $group->name])) { throw new invalid_parameter_exception('Group with the same name already exists in the course'); } // now security checks $context = get_context_instance(CONTEXT_COURSE, $group->courseid); self::validate_context($context); require_capability('moodle/course:managegroups', $context); // finally create the group $group->id = groups_create_group($group, false); $groups[] = (array) $group; } $transaction->allow_commit(); return $groups; } Parameter validation $params = self::validate_parameters(self::execute_parameters(), [ 'groups' => $groups, ]); This validate_parameters function validates the external function parameters against the description. It will return an exception if some required parameters are missing, if parameters are not well-formed, and check the parameters validity. It is essential that you do this call to avoid potential hack. Important: the parameters of the external function and their declaration in the description must be the same order . In this example we have only one parameter named $groups, so we don't need to worry about the order. Context and Capability checks // Perform security checks. $context = context_course::instance($group->courseid); self::validate_context($context); require_capability('moodle/course:managegroups', $context); Note: validate_context() is required in all external functions before operating on any data belonging to a context. This function does sanity and security checks on the context that was passed to the external function - and sets up the global $PAGE and $OUTPUT for rendering return values. Do NOT use require_login(), or $PAGE->set_context() in an external function. Exceptions You can throw exceptions. These are automatically handled by Moodle web service servers. // Note: It is good practice to add detailled information in $debuginfo, // and only send back a generic exception message when Moodle DEBUG mode < NORMAL. // It's what we do here throwing the invalid_parameter_exception($debug) exception throw new invalid_parameter_exception('Group with the same name already exists in the course'); Correct return values The return values will be validated by the Moodle web service servers: return values contain some values not described => these values will be skipped. return values miss some required values (VALUE_REQUIRED) => the server will return an error. return values types don't match the description (int != PARAM_ALPHA) => the server will return an error Note: cast all your returned objects into arrays. Bump the plugin version Edit your local/groupmanager/version.php and increase the plugin version. This should trigger a Moodle upgrade and the new web service should be available in the administration (Administration > Plugins > Web Services > Manage services) Deprecation External functions deprecation process is slightly different from the standard deprecation. If you are interested in deprecating any of your external functions you should also (apart from the applicable points detailed in the standard deprecation docs ) create a FUNCTIONNAME_is_deprecated() method in your external function class. Return true if the external function is deprecated. This is an example: /** * Mark the function as deprecated. * @return bool */ public static function execute_is_deprecated() { return true; } Service creation Moodle comes with two built-in services that your functions can be attached to. In rare situations, you may need to create a create a custom service declaration. The recommended way of creating a new service declaration is by placing it into the db/services.php file as a new service declaration. Moodle Administrators can also manually create a service declaration using the web interface. This is an advanced feature and, in most cases, you will not need to use this feature. Whilst writing a service declaration is optional, if you do not create a service declaration, then the Moodle administrator will have to create one manually through the Web UI. If you define a web service here, then the administrator cannot add or remove any function from it. Declaring a custom service declaration Service declarations should be placed in the db/services.php file of your plugin (after function declaration), for example local/groupmanager/db/services.php . $services = [ // The name of the service. // This does not need to include the component name. 'myintegration' => [ // A list of external functions available in this service. 'functions' => [ 'local_groupmanager_create_groups', ], // If set, the external service user will need this capability to access // any function of this service. // For example: 'local_groupmanager/integration:access' 'requiredcapability' => 'local_groupmanager/integration:access', // If enabled, the Moodle administrator must link a user to this service from the Web UI. 'restrictedusers' => 0, // Whether the service is enabled by default or not. 'enabled' => 1, // This field os optional, but requried if the `restrictedusers` value is // set, so as to allow configuration via the Web UI. 'shortname' => '', // Whether to allow file downloads. 'downloadfiles' => 0, // Whether to allow file uploads. 'uploadfiles' => 0, ] ]; It is not possible for an administrator to add/remove any function from a pre-built service. Unit Testing Unit tests are the best way of checking the behaviour of your external services and can help you to: discover use cases you didn't think about understand the feelings and the needs of the web service client developer end up with a function usable by everybody, not only by your own client reach integration way faster as you joined a proof of validity make the QA process a breeze Writing unit tests for an external service function is no different to writing unit tests for any other part of Moodle, which is documented in under PHPUnit. How to write an external function PHPUnit test You should create one unit test testcase for each external service file, and it should be named after the file that it tests. For example, if you have written a service function in [componentfolder]/classes/external/get_fruit.php , you should write a unit test in [componentfolder]/tests/external/get_fruit_test.php . //mod/kitchen/tests/external/get_fruit_test.php <?php // This file is part of Moodle - http://moodle.org/ // // Moodle is free software: you can redistribute it and/or modify // it under the terms of the GNU General Public License as published by // the Free Software Foundation, either version 3 of the License, or // (at your option) any later version. // // Moodle is distributed in the hope that it will be useful, // but WITHOUT ANY WARRANTY; without even the implied warranty of // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the // GNU General Public License for more details. // // You should have received a copy of the GNU General Public License // along with Moodle. If not, see <http://www.gnu.org/licenses/>. /** * Unit tests for the get_fruit function of the kitchen. * * @package mod_kitchen * @category external * @copyright 20XX Your Name * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later */ namespace mod_kitchen\\external ; defined ( 'MOODLE_INTERNAL' ) || die (); global $CFG ; require_once ( $CFG -> dirroot . '/webservice/tests/helpers.php' ); class get_fruit_test extends externallib_advanced_testcase { /** * Test the execute function when capabilities are present. * * @covers \\mod_fruit\\external\\get_fruit::execute */ public function test_capabilities () : void { $this -> resetAfterTest ( true ); $course = $this -> getDataGenerator () -> create_course (); $cm = $this -> getDataGenerator () -> create_module ( 'mod_kitchen' , [ 'course' => $course -> id , ]); // Set the required capabilities by the external function $contextid = context_module :: instance ( $cm -> cmid ) -> id ; $roleid = $this -> assignUserCapability ( 'moodle/CAPABILITYNAME' , $contextid ); // Call the external service function. $returnvalue = get_fruit :: execute ([ 'course' => $course -> id , 'cmid' => $cm -> id , ]); // We need to execute the return values cleaning process to simulate // the web service server. $returnvalue = \\core_external\\external_api :: clean_returnvalue ( get_fruit :: execute_returns (), $returnvalue ); // Assert that there was a response. // The actual response is tested in other tests. $this -> assertNotNull ( $returnvalue ); } /** * Test the execute function when capabilities are missing. * * @covers \\mod_fruit\\external\\get_fruit::execute */ public function test_capabilities_missing () : void { global $USER ; $this -> resetAfterTest ( true ); $course = $this -> getDataGenerator () -> create_course (); $cm = $this -> getDataGenerator () -> create_module ( 'mod_kitchen' , [ 'course' => $course -> id , ]); // Set the required capabilities by the external function $contextid = context_module :: instance ( $cm -> cmid ) -> id ; $this -> unassignUserCapability ( 'moodle/CAPABILITYNAME' , $contextid , $roleid ); $params = [ PARAM1 , PARAM2 , ... ]; // Call without required capability $this -> expectException ( required_capability_exception :: class ); get_fruit :: execute ([ 'course' => $course -> id , 'cmid' => $cm -> id , ]); } } Testing To test web services: Use Postman or similar tools to make HTTP requests to the Moodle web services endpoint. // Example: of a webservice call with parameters userid and message curl --location 'https://mysite.localhost/webservice/rest/server.php?wstoken=XXXXXXXXXXX&moodlewsrestformat=json&wsfunction=myplugin_service_name' \\ --form 'userid=\"10\"' \\ --form 'message=\"test message\"' Verify token validity and function calls. Use Moodle\u2019s web service test client (available in Site administration > Server > Web services > Manage services ) to manually test the functions.","title":"External Services"},{"location":"Moodle/phpMoodleServices/#web-service-protocols","text":"Moodle supports multiple web service protocols, which determine how external systems can communicate with Moodle. Common protocols include: REST (Representational State Transfer) : A simple, lightweight protocol that uses HTTP requests (GET, POST, etc.). SOAP (Simple Object Access Protocol) : A more complex, XML-based protocol. XML-RPC (Remote Procedure Call) : Uses XML to encode calls and HTTP as the transport mechanism. AMF (Action Message Format) : A binary protocol primarily used for communication with Flash applications. Moodle comes with built-in support for these protocols, and developers can configure which ones to use.","title":"Web Service Protocols"},{"location":"Moodle/phpMoodleServices/#defining-web-service-functions","text":"A web service function is a PHP function that handles the logic of your web service. You can expose any PHP function in Moodle as a web service function, but it must be carefully structured to ensure security and proper behavior. Before they can be used, all functions must be declared to Moodle, and their inputs and outputs must be defined . Functions are declared by noting them in the db/services.php file for a plugin. Functions are defined within their own class located within the \\component\\external namespace of a component. Note that there is a strict naming convention for external service functions . Function implementation classes consist of one class containing a number of functions, some of which are mandatory. During a Moodle installation or upgrade, the service and function declarations are parsed by a service discovery process and stored within the database. An administrative UI may be used to change some configuration details of these declarations.","title":"Defining Web Service Functions"},{"location":"Moodle/phpMoodleServices/#service-declarations","text":"Each component wishing to create an external service function must declare that the function exists by describing it in the db/services.php file for that component. This information is stored internally within Moodle, and collected as part of the service discovery during installation and upgrade. The function name is arbitrary, but must follow the naming convention. This helps ensure that it is globally unique. $functions = [ // The name of your web service function, as discussed above. 'local_myplugin_create_groups' => [ // The name of the namespaced class that the function is located in. 'classname' => 'local_groupmanager\\external\\create_groups', // A brief, human-readable, description of the web service function. 'description' => 'Creates new groups.', // Options include read, and write. 'type' => 'write', // Whether the service is available for use in AJAX calls from the web. 'ajax' => true, // An optional list of services where the function will be included. 'services' => [ // A standard Moodle install includes one default service: // - MOODLE_OFFICIAL_MOBILE_SERVICE. // Specifying this service means that your function will be available for // use in the Moodle Mobile App. MOODLE_OFFICIAL_MOBILE_SERVICE, ], // A comma-separated list of capabilities used by the function. // This is advisory only and used to indicate to the administrator // configuring a custom service definition. 'capabilities' => 'moodle/course:creategroups,moodle/course:managegroups', // The following parameters are also available, but are no longer recommended. // The name of the external function name. // If not specified, this will default to 'execute'. 'methodname' => 'execute', // The file containing the class/external function. // Do not use if using namespaced auto-loading classes. 'classpath' => 'local/groupmanager/externallib.php', ), );","title":"Service declarations"},{"location":"Moodle/phpMoodleServices/#function-definitions","text":"An External function definition is the class, and collection of functions, used to define: any parameters that the function expects to take, including any types what the function will return, including any types whether the function has been deprecated, or not It also includes the code that will actually be executed by the function. The function definition should be located within the external namespace of a component. For a component named local_groupmanager located in local/groupmanager which is responsible for creating groups on request, you may have: a Web service function named: local_groupmanager_create_groups defined in a class named local_groupmanager\\external\\create_groups which is located local/groupmanager/classes/external/create_groups.php A service definition: must extend the \\core_external\\external_api class must declare an execute_parameters function to describe the expected parameters of the function must declare an execute function which is called with the functions and performs the expected actions must declare an execute_returns function to describe the values returned by the function may declare an execute_is_deprecated function to declare a function as deprecated Writing plugins supporting Multiple Moodle versions The External API subsystem was restructured in Moodle 4.2 and moved from classes within a manually-required file, to autoloaded and namespaced classes. If you are developing a plugin whose codebase is used or tested in multiple Moodle versions, including older versions of Moodle, then you: must require_once the lib/externallib.php file must extend the external_api class instead of \\core_external\\external_api This will allow your plugin to continue working without deprecation notices or failures. Please note that deprecation notices will be added to this pathway from Moodle 4.6 onwards. // local/groupmanager/classes/external/create_groups.php <?php namespace local_groupmanager\\external ; use external_function_parameters ; use external_multiple_structure ; use external_single_structure ; use external_value ; class create_groups extends \\core_external\\external_api { public static function execute_parameters () : external_function_parameters { return new external_function_parameters ([ 'groups' => new external_multiple_structure ( new external_single_structure ([ 'courseid' => new external_value ( PARAM_INT , 'The course to create the group for' ), 'idnumber' => new external_value ( PARAM_RAW , 'An arbitrary ID code number perhaps from the institution' , VALUE_DEFAULT , null ), 'name' => new external_value ( PARAM_RAW , 'The name of the group' ), 'description' => new external_value ( PARAM_TEXT , 'A description' , VALUE_OPTIONAL ), ]), 'A list of groups to create' ), ]); } public static function execute ( array $groups ) : array { // Validate all of the parameters. [ 'groups' => $groups , ] = self :: validate_parameters ( self :: execute_parameters (), [ 'groups' => $groups , ]); // Perform security checks, for example: $coursecontext = \\context_course :: instance ( $courseid ); self :: validate_context ( $coursecontext ); require_capability ( 'moodle/course:creategroups' , $coursecontext ); // Create the group using existing Moodle APIs. $createdgroups = \\local_groupmanager\\util :: create_groups ( $groups ); // Return a value as described in the returns function. return [ 'groups' => $createdgroups , ]; } public static function execute_returns () : external_single_structure { return new external_single_structure ([ 'groups' => new external_multiple_structure ([ 'id' => new external_value ( PARAM_INT , 'Id of the created user' ), 'name' => new external_value ( PARAM_RAW , 'The name of the group' ), ]) ]); } } Available parameter types are defined in lib/moodlelib.php and are used by the validate_parameters() function and during return value checking to ensure that the service is called and working as defined.","title":"Function Definitions"},{"location":"Moodle/phpMoodleServices/#security-considerations","text":"Web services often expose sensitive data, so it\u2019s critical to enforce strict security measures. User Authentication : Ensure that only authorized users can access your web services. Capability Checks : Use Moodle\u2019s capabilities system to control access. For example, only users with the capability moodle/course:view can retrieve course details. Parameter Validation : Always validate and sanitize the input parameters using the external_function_parameters class. Return Value Sanitization : Ensure that the data returned is safe and free from XSS vulnerabilities. Before operating on any data in an external function, you must ensure that the user: has access to context that the data is located in has permission to perform the relevant action","title":"Security Considerations"},{"location":"Moodle/phpMoodleServices/#validating-function-parameters","text":"Before working with any data provided by a user you must validate the parameters against the definitions you have defined. To do so you should call the validate_parameters() function, passing in the reference to your execute_parameters() function, and the complete list of parameters for the function. The function will return the validated and cleaned parameters. The validate_parameters() function is defined on the \\core_external\\external_api class, and can be called as follows: // local/groupmanager/classes/external/create_groups.php public static function execute(array $groups): array { [ 'groups' => $groups, ] = self::validate_parameters(self::execute_parameters(), [ 'groups' => $groups, ]); // ... }","title":"Validating function parameters"},{"location":"Moodle/phpMoodleServices/#validating-access-to-the-moodle-context","text":"Whenever fetching or updating any data within Moodle using an External function definition, you must validate the context that the data exists within. To do so you should call the validate_context() function, passing the most specific context for the data. For example, if you are working with data belonging to a specific activity, you should use the activity context. If you are working with data belonging to a course, you should use the course context. If your function operates on multiple contexts (like a list of courses), you must validate each context right before generating any response data related to that context. The validate_context() function is defined on the \\core_external\\external_api class, and can be called as follows: // local/groupmanager/classes/external/create_groups.php public static function execute(array $groups): array { // ... foreach ($groups as $group) { $coursecontext = \\context_course::instance($group['courseid']); self::validate_context($coursecontext); // ... } } The validate_context() function will also configure the correct theme, language, and filters required to render content for the current user. You should not: use the require_login function from an external function - this function is reserved for php scripts returning a web page. call $PAGE->set_context() manually - this will generate warning notices. The validate_context() function is the only correct way to write external functions.","title":"Validating access to the Moodle context"},{"location":"Moodle/phpMoodleServices/#ensuring-that-a-user-has-the-appropriate-rights","text":"Once you have confirmed that the provided data is of the correct type, and configured Moodle for the specific context, you should also ensure that all capabilities are checked correctly. You can use the standard capability functions, including: has_capability() - to check that a user has a single capability has_any_capability() - to check that a user has any capability in a set has_all_capability() - to check that a user has all capabilities in a set require_capability() - to require a single capability require_all_capabilities() - to require that a user has all capabilities in a set","title":"Ensuring that a user has the appropriate rights"},{"location":"Moodle/phpMoodleServices/#managing-access-control","text":"Each web service function can have specific access controls that determine who can call it. Access is controlled via tokens and capabilities . Tokens : Users or systems must have a valid token to call a web service. Admins can issue these tokens through Site administration > Server > Web services > Manage tokens . Capabilities : Each function can define required capabilities in db/services.php , ensuring that users have the correct roles to access the web service.","title":"Managing Access Control"},{"location":"Moodle/phpMoodleServices/#authentication-and-tokens","text":"Moodle uses tokens for authenticating users when they access web services. Tokens are generated for individual users or system accounts and can be issued in two ways: Manually by administrators: Through the admin interface. Automatically : Using Moodle\u2019s authentication mechanisms (e.g., OAuth2). Example: Creating a Token Manually Go to Site administration > Server > Web services > Manage tokens . Choose the user for whom the token will be created. Assign the web service functions that this token allows access to.","title":"Authentication and Tokens"},{"location":"Moodle/phpMoodleServices/#service-configuration-in-the-moodle-admin-interface","text":"After defining your web service functions, you can configure them via the Moodle admin interface: Enable Web Services : Ensure web services are enabled in Site administration > Advanced features . Configure Protocols : Enable the desired web service protocols under Site administration > Plugins > Web services > Manage protocols . Create a Service : In Site administration > Server > Web services > External services , you can create and manage services, which are groups of related web service functions. Assign Functions to the Service : Add the functions defined in db/services.php to the service, so they are accessible externally.","title":"Service Configuration in the Moodle Admin Interface"},{"location":"Moodle/phpMoodleServices/#file-handling","text":"Moodle provides two ways to fetch and upload files: A set of web service functions; and A pair of dedicated endpoints.","title":"File handling"},{"location":"Moodle/phpMoodleServices/#web-service-functions","text":"You can use the following functions to upload, and fetch, file content: core_files_get_files() ; and core_files_upload() . When using these functions, the file content is base64-encoded. Note: Many devices do not have enough memory to encode and decode requests containing large files. As such we recommend using the dedicated endpoints instead.","title":"Web service functions"},{"location":"Moodle/phpMoodleServices/#dedicated-endpoints","text":"Moodle provides two dedicated endpoints which can be used, alongside the authentication token, to upload and fetch content. These are: to upload a file: /webservice/upload.php ; and to fetch a file: /webservice/pluginfile.php .","title":"Dedicated endpoints"},{"location":"Moodle/phpMoodleServices/#writing-a-new-service","text":"This documentation covers the creation of a new external service for use in a web service of a fictional local plugin, local_groupmanager.","title":"Writing a new service"},{"location":"Moodle/phpMoodleServices/#functional-specification","text":"The local_groupmanager plugin has a need to create groups within a course and would like to do so using its own web service. When defining a new service definition, Moodle requires that the name of the definition be in the form: [frankenstyle_component]_[methodname] The naming convention further dictates that the methodname component be in the form: [methodname] - The name of the method in the form of [verb]_[noun] [verb] - Usually one of get, create, delete, update A similar verb that well describes the action may also be used [noun] - The object being modified Usually in Plural form Per the Moodle naming convention for web services the name of the function should be: local_groupmanager_create_groups Inputs The local_groupmanager_create_groups external service definition will take a list of groups as its only parameters. Outputs The service will return a list of the created groups, including the id element of those groups. Exceptions and failures If any group creation fails, the function will throw an exception, and no groups will be created. Technical specification the core function the external function will call: groups_create_group() from /group/lib.php. the parameter types: a list of object. This object are groups, with id/name/courseid . the returned value types: a list of objects (groups) with their id. the user capabilities to check: moodle/course:managegroups","title":"Functional specification"},{"location":"Moodle/phpMoodleServices/#declare-the-web-service-function","text":"An external function must be declared before it can be used in your plugin. Function declarations should be placed in the db/services.php file of your plugin. For example in our fictitious plugin this would be located in local/groupmanager/db/services.php . $functions = [ // The name of your web service function, as discussed above. 'local_groupmanager_create_groups' => [ // The name of the namespaced class that the function is located in. 'classname' => 'local_groupmanager\\external\\create_groups', // A brief, human-readable, description of the web service function. 'description' => 'Creates new groups.', // Options include read, and write. 'type' => 'write', // Whether the service is available for use in AJAX calls from the web. 'ajax' => true, // An optional list of services where the function will be included. 'services' => [ // A standard Moodle install includes one default service: // - MOODLE_OFFICIAL_MOBILE_SERVICE. // Specifying this service means that your function will be available for // use in the Moodle Mobile App. MOODLE_OFFICIAL_MOBILE_SERVICE, ] ], ]; A number of advanced options are also available, as described below: $functions = [ // The name of your web service function, as discussed above. 'local_groupmanager_create_groups' => [ // A comma-separated list of capabilities used by the function. // This is advisory only and used to indicate to the administrator configuring a custom service definition. 'capabilities' => 'moodle/course:creategroups,moodle/course:managegroups', // The following parameters are also available, but are no longer recommended. // The name of the external function name. // If not specified, this will default to 'execute'. // 'methodname' => 'execute', // The file containing the class/external function. // Do not use if using namespaced auto-loading classes. // 'classpath' => 'local/groupmanager/externallib.php', ), );","title":"Declare the web service function"},{"location":"Moodle/phpMoodleServices/#write-the-external-function-descriptions","text":"Every web service function is mapped to an external function. External function are described in the External functions API. Each external function is written with two other functions describing the parameters and the return values. These description functions are used by web service servers to: validate the web service function parameters validate the web service function returned values build WSDL files or other protocol documents These two description functions are located in the class declared in local/groupmanager/db/services.php . Thus for the web service function local_groupmanager_create_groups() , we should write a class named create_group s in the local_groupmanager\\external namespace. This will be located in the file local/groupmanager/classes/external/create_groups.php . The class will contain: execute(...) execute_parameters() execute_return()","title":"Write the external function descriptions"},{"location":"Moodle/phpMoodleServices/#implement-the-external-function","text":"We declared our web service function and we defined the external function parameters and return values. We will now implement the external function: /** * Create groups * @param array $groups array of group description arrays (with keys groupname and courseid) * @return array of newly created groups */ public static function execute($groups) { global $CFG, $DB; require_once(\"$CFG->dirroot/group/lib.php\"); $params = self::validate_parameters(self::execute_parameters(), ['groups' => $groups]); $transaction = $DB->start_delegated_transaction(); //If an exception is thrown in the below code, all DB queries in this code will be rollback. $groups = array(); foreach ($params['groups'] as $group) { $group = (object)$group; if (trim($group->name) == '') { throw new invalid_parameter_exception('Invalid group name'); } if ($DB->get_record('groups', ['courseid' => $group->courseid, 'name' => $group->name])) { throw new invalid_parameter_exception('Group with the same name already exists in the course'); } // now security checks $context = get_context_instance(CONTEXT_COURSE, $group->courseid); self::validate_context($context); require_capability('moodle/course:managegroups', $context); // finally create the group $group->id = groups_create_group($group, false); $groups[] = (array) $group; } $transaction->allow_commit(); return $groups; }","title":"Implement the external function"},{"location":"Moodle/phpMoodleServices/#bump-the-plugin-version","text":"Edit your local/groupmanager/version.php and increase the plugin version. This should trigger a Moodle upgrade and the new web service should be available in the administration (Administration > Plugins > Web Services > Manage services)","title":"Bump the plugin version"},{"location":"Moodle/phpMoodleServices/#deprecation","text":"External functions deprecation process is slightly different from the standard deprecation. If you are interested in deprecating any of your external functions you should also (apart from the applicable points detailed in the standard deprecation docs ) create a FUNCTIONNAME_is_deprecated() method in your external function class. Return true if the external function is deprecated. This is an example: /** * Mark the function as deprecated. * @return bool */ public static function execute_is_deprecated() { return true; }","title":"Deprecation"},{"location":"Moodle/phpMoodleServices/#service-creation","text":"Moodle comes with two built-in services that your functions can be attached to. In rare situations, you may need to create a create a custom service declaration. The recommended way of creating a new service declaration is by placing it into the db/services.php file as a new service declaration. Moodle Administrators can also manually create a service declaration using the web interface. This is an advanced feature and, in most cases, you will not need to use this feature. Whilst writing a service declaration is optional, if you do not create a service declaration, then the Moodle administrator will have to create one manually through the Web UI. If you define a web service here, then the administrator cannot add or remove any function from it.","title":"Service creation"},{"location":"Moodle/phpMoodleServices/#declaring-a-custom-service-declaration","text":"Service declarations should be placed in the db/services.php file of your plugin (after function declaration), for example local/groupmanager/db/services.php . $services = [ // The name of the service. // This does not need to include the component name. 'myintegration' => [ // A list of external functions available in this service. 'functions' => [ 'local_groupmanager_create_groups', ], // If set, the external service user will need this capability to access // any function of this service. // For example: 'local_groupmanager/integration:access' 'requiredcapability' => 'local_groupmanager/integration:access', // If enabled, the Moodle administrator must link a user to this service from the Web UI. 'restrictedusers' => 0, // Whether the service is enabled by default or not. 'enabled' => 1, // This field os optional, but requried if the `restrictedusers` value is // set, so as to allow configuration via the Web UI. 'shortname' => '', // Whether to allow file downloads. 'downloadfiles' => 0, // Whether to allow file uploads. 'uploadfiles' => 0, ] ]; It is not possible for an administrator to add/remove any function from a pre-built service.","title":"Declaring a custom service declaration"},{"location":"Moodle/phpMoodleServices/#unit-testing","text":"Unit tests are the best way of checking the behaviour of your external services and can help you to: discover use cases you didn't think about understand the feelings and the needs of the web service client developer end up with a function usable by everybody, not only by your own client reach integration way faster as you joined a proof of validity make the QA process a breeze Writing unit tests for an external service function is no different to writing unit tests for any other part of Moodle, which is documented in under PHPUnit.","title":"Unit Testing"},{"location":"Moodle/phpMoodleServices/#how-to-write-an-external-function-phpunit-test","text":"You should create one unit test testcase for each external service file, and it should be named after the file that it tests. For example, if you have written a service function in [componentfolder]/classes/external/get_fruit.php , you should write a unit test in [componentfolder]/tests/external/get_fruit_test.php . //mod/kitchen/tests/external/get_fruit_test.php <?php // This file is part of Moodle - http://moodle.org/ // // Moodle is free software: you can redistribute it and/or modify // it under the terms of the GNU General Public License as published by // the Free Software Foundation, either version 3 of the License, or // (at your option) any later version. // // Moodle is distributed in the hope that it will be useful, // but WITHOUT ANY WARRANTY; without even the implied warranty of // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the // GNU General Public License for more details. // // You should have received a copy of the GNU General Public License // along with Moodle. If not, see <http://www.gnu.org/licenses/>. /** * Unit tests for the get_fruit function of the kitchen. * * @package mod_kitchen * @category external * @copyright 20XX Your Name * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later */ namespace mod_kitchen\\external ; defined ( 'MOODLE_INTERNAL' ) || die (); global $CFG ; require_once ( $CFG -> dirroot . '/webservice/tests/helpers.php' ); class get_fruit_test extends externallib_advanced_testcase { /** * Test the execute function when capabilities are present. * * @covers \\mod_fruit\\external\\get_fruit::execute */ public function test_capabilities () : void { $this -> resetAfterTest ( true ); $course = $this -> getDataGenerator () -> create_course (); $cm = $this -> getDataGenerator () -> create_module ( 'mod_kitchen' , [ 'course' => $course -> id , ]); // Set the required capabilities by the external function $contextid = context_module :: instance ( $cm -> cmid ) -> id ; $roleid = $this -> assignUserCapability ( 'moodle/CAPABILITYNAME' , $contextid ); // Call the external service function. $returnvalue = get_fruit :: execute ([ 'course' => $course -> id , 'cmid' => $cm -> id , ]); // We need to execute the return values cleaning process to simulate // the web service server. $returnvalue = \\core_external\\external_api :: clean_returnvalue ( get_fruit :: execute_returns (), $returnvalue ); // Assert that there was a response. // The actual response is tested in other tests. $this -> assertNotNull ( $returnvalue ); } /** * Test the execute function when capabilities are missing. * * @covers \\mod_fruit\\external\\get_fruit::execute */ public function test_capabilities_missing () : void { global $USER ; $this -> resetAfterTest ( true ); $course = $this -> getDataGenerator () -> create_course (); $cm = $this -> getDataGenerator () -> create_module ( 'mod_kitchen' , [ 'course' => $course -> id , ]); // Set the required capabilities by the external function $contextid = context_module :: instance ( $cm -> cmid ) -> id ; $this -> unassignUserCapability ( 'moodle/CAPABILITYNAME' , $contextid , $roleid ); $params = [ PARAM1 , PARAM2 , ... ]; // Call without required capability $this -> expectException ( required_capability_exception :: class ); get_fruit :: execute ([ 'course' => $course -> id , 'cmid' => $cm -> id , ]); } }","title":"How to write an external function PHPUnit test"},{"location":"Moodle/phpMoodleServices/#testing","text":"To test web services: Use Postman or similar tools to make HTTP requests to the Moodle web services endpoint. // Example: of a webservice call with parameters userid and message curl --location 'https://mysite.localhost/webservice/rest/server.php?wstoken=XXXXXXXXXXX&moodlewsrestformat=json&wsfunction=myplugin_service_name' \\ --form 'userid=\"10\"' \\ --form 'message=\"test message\"' Verify token validity and function calls. Use Moodle\u2019s web service test client (available in Site administration > Server > Web services > Manage services ) to manually test the functions.","title":"Testing"},{"location":"Moodle/phpMoodleTemplate/","text":"Moodle makes use of the Mustache template system to render most of its HTML output, and in some other cases too. Templates are defined as plain text, which typically includes HTML, and a range of Mustache tags and placeholders. The Mustache placeholders are replaced with actual values during the render of the page. Mustache templates can be rendered both server-side in PHP, and client-side using JavaScript. Themes can overrides the templates defined in other components if required. A simple example of a template: Given the template is defined as: < div class = \"alert alert-info\" > < strong > Hello {{name}}! </ strong > Your grade is: < strong > {{grade}} </ strong > </ div > And the values for the placeholder tags name and grade are provided as a JSON object, referred to as rendering context (note the context here has nothing to do with Moodle permission contexts. In Mustache, the term basically represents the data passed to the template). { \"name\" : \"Bobby\" , \"grade\" : 10 } Then the rendered result will look like: < div class = \"alert alert-info\" > < strong > Hello Bobby! </ strong > Your grade is: < strong > 10 </ strong > </ div > The following page provides information about the Mustache templates syntax and how to use them in Moodle. Syntax Mustache tags are made of two opening and closing curly braces. Their shape looks like a moustache, hence the name. Variables {{name}} { \"name\" : \"Bobby\" } The value of the key name will be searched for in the current rendering context (and any parent contexts) and when a value is found, the entire tag will be replaced by the value (HTML escaped). Raw unescaped variable All variables are HTML escaped by default. If you want to render raw unescaped HTML, use the triple mustache: {{{description}}} { \"description\" : \"<h1>Hello!</h1><p>In this course you will learn about ...</p>\" } Beware of the security implications of outputting raw HTML and make sure that the value of the variable has been processed by format_text() or another adequate way. Sections Sections render blocks of text zero, one or more times, depending on the value of the key in the current context. The opening tag has a hash (pound) sign and the closing tag has a slash, followed by the key. False values and empty lists When the key is false or an empty list, the HTML between the opening and closing tag will not be displayed. This can be effectively used to conditionally control the rendering of a section. {{#hasdata}} This will not be shown if 'hasdata' is empty. {{/hasdata}} { \"hasdata\" : false } Non-empty lists When the value is a non-empty list, the text in the block will be displayed once for each item in the list. The context of the block will be set to the current item for each iteration. In this way we can loop over collections. < ul > {{#grades}} < li > < em > {{course}} </ em > - {{grade}} </ li > {{/grades}} </ ul > { \"grades\" : [ { \"course\" : \"Arithmetic\" , \"grade\" : \"8/10\" }, { \"course\" : \"Geometry\" , \"grade\" : \"10/10\" } ] } Lambdas When the value is a callable, it will be invoked and returned value used as the section value. In Moodle plugins, this can be used to call the core_renderer methods via the output context variable: {{#output.should_display_navbar_logo}} < img src = \"{{output.get_compact_logo_url}}\" > {{/output.should_display_navbar_logo}} Inverted sections Inverted sections will be rendered if the key does not exist, is false, or is an empty list. An inverted section begins with a caret (hat) and ends with a slash. {{#hasgrade}} Your grade is: < strong > {{grade}} </ strong > {{/hasgrade}} {{^hasgrade}} Your work has not been graded yet. {{/hasgrade}} { \"hasgrade\" : false , \"grade\" : null } Comments Comments begin with an exclamation mark. The whole section is ignored. Comments are used for boilerplate documentation. They can also be used to avoid having extra break-lines in the generated output. {{! This is a comment and will not be present in the rendered result. }} Partials Templates can include other templates using the partial tag. Partials begin with a greater than sign. Partials are rendered at runtime and allow to split complex templates into smaller, potentially re-usable units. Moodle core provides with many templates that can be included this way. {{! Show the loading icon. }} < div class = \"p-5\" > {{> core/loading }} </ div > The included template uses the same rendering context as its parent template. Blocks Mustache template system can be extended via so called Mustache pragmas. Pragmas are non-standard extensions to the Mustache spec. Moodle 3.0 and higher has BLOCKS pragma installed and enabled. The extension allows you to define a parent template with replaceable blocks. Blocks look like sections that use dollar sign in the opening tag. The following parent template defines two blocks heading and content {{! @template tool_demo/section }} < section > < h1 > {{$heading}} Default section heading {{/heading}} </ h1 > < div > {{$content}} Default section content {{/content}} </ div > </ section > Particular child templates can now extend / inherit from this parent template and override the default block values. {{! @template tool_demo/latestnews }} {{ < tool_demo / section }} {{$ heading }} Latest news {{/ heading }} {{$ content }} Today I learned how to use blocks in Mustache ! {{/ content }} {{/ tool_demo / section }} Blocks are particularly useful for building a library of re-usable components. Helpers Moodle providers several Mustache helpers. Helpers tags look like sections eventually containing zero or more parameters. str The {{#str}} is a string helper for loading text strings from language packs. It effectively represents Mustache variant of get_string() calls. {{#str}} helloworld, mod_greeting {{/str}} The first two parameters are the string identifier and the component name. The optional third parameter defines the value for the string's $a placeholder. Literals as well as variable tags are allowed to define the value. {{#str}} backto, core, Moodle.org {{/str}} {{#str}} backto, core, {{name}} {{/str}} For strings that accept non-scalar placeholders, see the following section. note If you want to create a help icon, and wondering \"where is the helper for that?\" then actually, it is not a helper. You need to use {{>core/help_icon}} as a partial. quote The {{#quote}} is intended to quote non-scalar {{#str}} arguments. Some strings accept complex non-scalar data structures passed as the value of the $a placeholder. You can use a JSON object syntax in that case: {{#str}} counteditems, core, { \"count\": \"42\", \"items\": \"courses\" } {{/str}} If you wanted to use the context values instead of literal values, you might intuitively use something like this: {{! DO NOT DO THIS !}} {{#str}} counteditems, core, { \"count\": {{count}}, \"items\": {{itemname}} } {{/str}} There is a potential problem though. If the variable tag itemname evaluates to a string containing double quotes, it will break the JSON syntax. We need to escape certain characters potentially appearing in the variable tags. For this, we use the {{#quote}} helper. {{#str}} counteditems, core, { \"count\": {{count}}, \"items\": {{#quote}} {{itemname}} {{/quote}} } {{/str}} pix The {{#pix}} is a icon picture helper for generating pix icon tags. {{#pix}} t/edit, core, Edit this section {{/pix}} The first two parameters are the icon identifier and the component name. The rest is the alt text for the icon. See Using images in a theme and Moodle icons for some background information about pix icons in Moodle. userdate The {{#userdate}} helper will format UNIX timestamps into a given human readable date format while using the user's timezone settings configured (if any) in Moodle. The helper will accept hardcoded values, context variables, or other helpers. It is recommended to use the string helper to get one of the core Moodle formats. { \"time\" : 1628871929 } {{#userdate}} {{time}}, {{#str}} strftimedate, core_langconfig {{/str}} {{/userdate}} This will ask the Moodle server for the string \"strftimedate\" and will use the value (which in this case is \"%d %B %Y\" in case of English) to format the user date. So the resulting formatted timestamp from the userdate helper would be like \"13 August 2021\". shortentext The {{#shortentext}} helper can be used to shorten a large amount of text to a specified length and will append a trailing ellipsis to signify that the text has been shortened. The algorithm will attempt to preserve words while shortening to text. Words, for the purposes of the helper, are considered to be groups of consecutive characters broken by a space or, in the case of a multi-byte character, after the completion of the multi-byte character (rather than in the middle of the character). It will also attempt to preserve HTML in the text by keeping the opening and closing tags. Only text within the tags will be considered when calculating how much should be truncated to reach the desired length. The helper takes two comma separated arguments. The first is the desired length and the second is the text to be shortened. Both can be provided as context variables. { \"description\" : \"<p><em>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Curabitur lacinia pretium nulla gravida interdum.</em></p>\" } {{#shortentext}} 15, {{{description}}} {{/shortentext}} Template files Templates are saved in templates/*.mustache files within core components and plugins folders. When loading them, templates are identified by their full component name followed by slash and the filename without the file extension. Example A timer template provided by the mod_lesson module would be referred to as mod_lesson/timer and it would be located in mod/lesson/templates/timer.mustache file. Since Moodle 3.8 it is possible to use sub-directories under the templates directory. The first sub-directory name must meet certain naming rules (same as for class namespaces). Mustache file boilerplate {{! This file is part of Moodle - https://moodle.org/ Moodle is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. Moodle is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with Moodle. If not, see <http://www.gnu.org/licenses/>. }} {{! @template plugintype_pluginname/template_name Template purpose and description. Classes required for JS: * none Data attributes required for JS: * none Context variables required for this template: * none Example context (json): { } }} Rendering in PHP Use the render_from_template() method to render the given context data with the template. $data = [ 'name' => 'Lorem ipsum', 'description' => format_text($description, FORMAT_HTML), ]; echo $OUTPUT->render_from_template($templatename, $data); Renderers Templates can be effectively used in renderers to generate the HTML representing the given renderable object. Make your renderable class also implement templatable interface. It will have to implement a new method export_for_template(renderer_base $output) . The method should return a JSON-serialisable object (containing only objects, arrays and scalars) that will be passed as the rendering context data to a template. In the simplest case where you have a renderable, templatable object with a class name matching the name of the template that will render it, you do not need to add any renderer code explicity. Passing your widget directly to $OUTPUT->render() will infer the name of your template, call export_for_template() and render_from_template() , then return the result. Example of the method added to the renderable mywidget : /** * Describe the renderable widget so it can be renderer by a mustache template. * * @param renderer_base $output * @return stdClass */ public function export_for_template(renderer_base $output) { $data = new stdClass(); $data->canmanage = $this->canmanage; $data->things = []; foreach ($this->things as $thing) { $data->things[] = $thing->to_record(); } $data->navigation = []; foreach ($this->navigation as $button) { $data->navigation[] = $output->render($button); } return $data; } TIP When naming variables in your export data, be careful not to reuse names of helpers such as str or js - these will silently fail. Try to keep your variable names short but descriptive. The rendering method can now use templates to render the object: /** * Render mywidget via a template. * * @param mywidget $widget * * @return string HTML */ protected function render_mywidget(mywidget $widget) { $data = $widget->export_for_template($this); return $this->render_from_template('tool_myplugin/mywidget', $data); } In your page: $output = $PAGE->get_renderer('tool_myplugin'); echo $output->render($widget); Rendering in JavaScript Rendering a template from JavaScript is fairly easy. There is a JavaScript module that can load (and cache) a template and then use it for rendering the given data. import { exception as displayException } from 'core/notification' ; import Templates from 'core/templates' ; // This will be the context for our template. So {{name}} in the template will resolve to \"Tweety bird\". const context = { name : 'Tweety bird' , intelligence : 2 , }; // This will call the function to load and render our template. Templates . renderForPromise ( 'block_looneytunes/profile' , context ) // It returns a promise that needs to be resoved. . then (({ html , js }) => { // Here eventually I have my compiled template, and any javascript that it generated. // The templates object has append, prepend and replace functions. Templates . appendNodeContents ( '.block_looneytunes .content' , html , js ); }) // Deal with this exception (Using core/notify exception function is recommended). . catch (( error ) => displayException ( error )); Under the hood, this does a few clever things for us. It loads the template via an AJAX call if it was not cached. It finds any missing lang strings in the template and loads them in a single AJAX request. It splits the JS from the HTML and returns both in an easy to use way. Read on for how to nicely deal with that js parameter. Templates requiring JavaScript Sometimes a template requires that some JavaScript runs when it is added to the page in order to give it more features. In the template we can include blocks of JavaScript, but we should use a special section tag that has a \"helper\" method registered to handle JavaScript carefully. Example <!-- HTML here -->> {{^element.frozen}} {{#js}} require(['theme_boost/form-display-errors'], function(module) { module.enhance({{#quote}}{{element.id}}{{/quote}}); }); {{/js}} {{/element.frozen}} TIP We strongly advise placing all meaningful JavaScript into an AMD module and simply loading the JavaScript from the template. This allows the JavaScript to be linted, and minified. If this template is rendered by PHP, the JavaScript is separated from the HTML, and is appended to a special section in the footer of the page after requirejs has loaded. This provides the optimal page loading speed. If the template is rendered by JavaScript, the JavaScript source will be passed to the \"done\" handler from the promise. Then, when the then handler has added the template to the DOM, it can call templates . runTemplateJS ( javascript ); which will run the JavaScript (by creating a new script tag and appending it to the page head). Overriding templates in a theme Templates can be overridden by a theme. Find the template that you want to change - e.g. mod/wiki/templates/ratingui.mustache Create a sub-folder under your themes \"templates\" directory with the component name of the plugin you are overriding - e.g theme/timtam/templates/mod_wiki Copy the ratingui.mustache file into the newly created theme/timtam/templates/mod_wiki and edit it. You should see your changes immediately if theme designer mode is on. Templates are cached just like CSS, so if you are not using theme designer mode you will need to purge all caches to see the latest version of an edited template. If the template you are overriding contains a documentation comment it is recommended to remove it. It will still show the documentation in the template library. Documenting the templates Theme designers need to know the limits of what they can expect to change without breaking anything. Also, correctly documented templates can be previewed in the \"Template library\" tool shipped with Moodle. Classes required for JS - This is a list of classes that are used by the JavaScript for this template. If removing a class from an element in the template will break the JavaScript, list it here. Data attributes required for JS - This is a list of data attributes (e.g. data-enhance=\"true\") that are used by the JavaScript for this template. If removing a data attribute from an element in the template will break the JavaScript, list it here. Context variables required for this template - This is a description of the data that may be contained in the context that is passed to the template. Be explicit and document every attribute. Example context (JSON) - The Template library will look for this data in your documentation comment as it allows it to render a \"preview\" of the template right in the Template library. This is useful for theme designers to test all the available templates in their new theme to make sure they look nice in a new theme. It is also useful to make sure the template responds to different screen sizes, languages and devices. The format is a JSON-encoded object that is passed directly into the render method for this template. Coding style This section documents some coding style guidelines to follow when writing templates. The reason for these guidelines is to promote consistency, and interoperability of the templates. Include GPL at the top of each template Templates are a form of code and it is appropriate to license them like any other code. Include a documentation comment for each template The exception is when you are overriding a template, if the documentation from the parent still applies, you do not need to copy it to the overridden template. Use data-attributes for JS hooks Data attributes are ideal for adding JavaScript hooks to templates because: Classes are meant for styling - theme designers should be able to change the classes at will without breaking any functionality. IDs must be unique in the page, but it is not possible to control how many times the same template might be included in the page. Data attributes can have meaningful names and can be efficiently queried with a selector. Avoid custom CSS for templates This is not a hard rule, but a preference. We already have too much CSS in Moodle - where ever possible we should try and re-use the existing CSS instead of adding new CSS to support every new template. Re-use core templates as much as possible First we need to build the core set of reusable templates - but once that is in place we should always try to re-use those core templates to build interfaces. This will make Moodle more consistent, attractive and customisable. Do use the CSS framework classes directly in the templates We have bootstrap in core - so lets make the most of it. There is no problem using bootstrap classes in core templates, as long as the \"base\" theme is also tested, and an overridden template is added there if required. Avoid IDs for styling or JavaScript IDs should not be used for styling as they have a high CSS specificity, and so are hard to override. In addition, IDs should be unique in the page, which implies that a template could only be used once in a page. IDs are also not ideal for JavaScript, for the same reason (must be unique in a page). The only acceptable case to use an ID is you need to create a one to one connection between the JS and template. In this case use the uniqid helper to generate an ID that will not conflict with any other template on the page, and use it as part of the ID. <div id=\"{{uniqid}}-somethingspecific\"> </div> {{#js}} callFunction('{{uniqid}}-somethingspecific'); {{/js}} Follow CSS coding style See CSS coding style . Use hyphens as word-separators for class names. Use lower case class names. Wrap each template in one node with a classname that matches the template name Generate a class name by combining the component and template names and separating words with underscore. e.g. <div class=\"core_user_header\"> ... </div> Notes Iterating over PHP arrays in Mustache templates In PHP, both lists and hashes are implemented as arrays. But Mustache must treat them as different structures because of cross language compatibility. If the PHP array does not have the [0] key, or there are gaps in the keys sequence, Mustache will interpret that array as a hash and will not iterate over it. So you need to make sure the elements in the list are properly indexed: $datafortemplate->mylist = array_values($myarraywithnonnumerickeys) Test for non-empty array in Mustache templates Short answer: you can't. {{! This will work in PHP but not in JavaScript. }} {{#users.0}} ... {{/users.0}} {{! This will work in JavaScript but not in PHP. }} {{#users.length}} ... {{/users.length}} As a workaround, include a specific property in the context like hasusers. { \"hasusers\": false, \"users\": [] } {{#hasusers}} {{#users}} .... {{/users}} {{#hasusers}} Squash whitespace in a template Sometimes whitespace is significant, for example inside a link it will show with an underline. If you need two Mustache tags from separate lines to be rendered with no whitespace between them you can use Mustache comments to squash the whitespace. < a href = \"blah\" > {{! }}{{icon}}{{! }}{{name}} </ a > Access to globals In PHP you have access to the $CFG object to allow access to properties. Mustache rendering also exposes a globals object automatically during rendering. For example: <a href=\"{{globals.config.wwwroot}}/login/logout.php?sesskey={{globals.config.sesskey}}\">{{#str}} logout, core {{/str}}</a> The properties available on the globals.config object are the same as normally exposed for JavaScript; these are gathered from get_config_for_javascript() function in lib/outputrequirementslib.php. This object is only available when using client-side Mustache rendering in JavaScript; it is not added to templates rendered with the PHP Mustache engine. Core templates Core templates should ideally be simple generic components that can be used within other templates to create more complex page layouts. They should be flexible enough for developers and themers to easily use without having to replace the template. The templates should attempt to encapsulate some core structure for the element as well as key classes while allowing the content to be easily overridden. Ultimately we want to avoid having duplicate HTML copied from template to template where possible, particularly if the HTML element has some classes associated with it. Mustache relies on variables to substitute context data into the template but unfortunately it's very unlikely that the the names of the context data will match what the template is expecting for all the places that the template might be used. So in order to allow easy extensibility and avoid having to duplicate templates just to rename the variables we can wrap them in block variables which would allow the template that is including our template to replace that variable with one from it's own context inline. There are a few key points to keep in mind when writing a core template: Consider how your template will actually be used. Try writing a test page that uses your template to help discover some of the assumptions you might have in the template. The example context you provide in the template is mostly just for showing the template in the template library and is likely not how your template will actually be used. Most uses of the template will have a different context all together. Try to enforce a core structure but avoid enforcing a specific context. Content should be overridable. Use block variables to indicate sections of your template that people are likely to want to change. Typically where they will be wanting to substitute in their own content. Try to keep any JavaScript that accompanies the template as decoupled from the HTML / CSS structure of the template as possible. Instead of relying on the existence of certain HTML elements or CSS classes it is generally better to leverage data-attributes which can be added to any element. Let's go through an example to illustrate how you might build a core template. For the example we'll be building a tabs template, since it's a fairly complex component that requires the use of block variables and JavaScript. First we can create a basic template to get the general structure down, let's call it tabs. Here's what it might look like: <div id=\"{{ uniqid }}-tab-container\"> <ul role=\"tablist\" class=\"nav nav-tabs\"> {{# tabs }} <li role=\"tab\" data-target=\"{{ uniqid }}-{{ id }}\" data-selected-class=\"active\" aria-controls=\"{{ uniqid }}-{{ id }}\" aria-selected=\"false\" tabindex=\"-1\"> <a href=\"#\">{{{ name }}}</a> </li> {{/ tabs }} </ul> <div class=\"tab-content\"> {{# tabs }} <div role=\"tabpanel\" class=\"tab-pane\" id=\"{{ uniqid }}-{{ id }}\"> {{{ content }}} </div> {{/ tabs }} </div> </div> {{#js}} require(['jquery','core/tabs'], function($, tabs) { var container = $(\"#{{ uniqid }}-tab-container\"); tabs.create(container); }); {{/js}} The template requires a context that looks something like: { \"tabs\": [ {\"id\":\"tab1\",\"name\":\"Tab 1\",\"content\":\"This is tab 1 content <a href=\\\"#\\\">test</a>\"}, {\"id\":\"tab2\",\"name\":\"Tab 2\",\"content\":\"This is tab 2 content <a href=\\\"#\\\">test</a>\"}, {\"id\":\"tab3\",\"name\":\"Tab 3\",\"content\":\"This is tab 3 content <a href=\\\"#\\\">test</a>\"} ] } The JavaScript required to power the tabs element (keyboard navigation, show / hide panels etc) is written as an AMD module and is included by the template. The JavaScript is a little too large to go through here, but some key points to consider when writing it are: It should ideally be independent of the HTML structure, so if someone wants to completely rewrite the tabs to be different elements (for example, a set of button or div elements) then the same JavaScript can be used without needing to change it. In order to achieve this it is important to identify the key components of the template. In this case it is a tab list, a tab and it's content. One way to identify these components would be to inspect the structure of the DOM, for example you might say \"find me the ul element\" when looking for the tab list and then \"find my the child li elements\" to find the tabs. While this would work, it couples your JavaScript to the HTML structure and makes it difficult to change later. A different approach would be to use the element attributes, for example you might say \"find my the element with the role 'tablist'\" to get the tab list and then \"find me the elements with the role 'tab'\" to get the tabs. This allows the HTML structure to change without breaking the JavaScript (as long as the correct attributes are set, of course). Another point of consideration for this example is what class to apply to a tab when it is selected. It makes sense to just apply something like \"active\" in the JavaScript, but that once again couples it to a particular CSS framework which makes it more difficult to change without modifying the JavaScript. In this case I chose to add a data attribute to the element to indicate which class will be set when the tab is selected. This means the JavaScript doesn't have to guess what the appropriate class is, it can just get it from the template. Ok, so we've got our basic template. It's time to use it! Let's say we want to create a simple user profile page that might show 2 tabs, the first tab will be the user's name and the second tab will be the user's email address (please excuse the contrived example). Here's what the page might look like: <html> <header><title>User Profile</title></header> <body> {{< core/tabs }} </body> </html> That looks pretty simple! The only problem is, how do I get my content there? I would have to supply a context like this in order to display the tabs I want: { \"tabs\": [ { \"id\": \"tab1\", \"name\": \"Name\", \"content\": \"Your name is Mr. Test User.\" }, { \"id\": \"tab2\", \"name\": \"Email\", \"content\": \"Your email is testuser@example.com\" } ] } Let's assume that the context for this page doesn't match what the tabs template is expecting though. Let's assume the tabs template is being rendered with this context: { \"name\": \"Mr. Test User\", \"email\": \"testuser@example.com\" } Unfortunately, we'll almost certainly never have complete control over all of the contexts that our template will be rendered in which means we'll be expecting people to write new webservices to supply the same data in different formats every time they want to use a template. It becomes an unmanageable problem. Enter blocks! We can make the template more flexible by defining sections of the template that can be overridden when they are included. Pretty neat! This will allow us to enforce a certain core structure but not enforce a context on the template that is including the tabs. Let's have another go at that template, this time leveraging blocks: <div id=\"{{ uniqid }}-tab-container\"> {{$ tabheader }} <ul role=\"tablist\" class=\"nav nav-tabs\"> {{$ tablist }} {{# tabs }} <li role=\"tab\" data-target=\"{{ uniqid }}-{{ id }}\" data-selected-class=\"active\" aria-controls=\"{{ uniqid }}-{{ id }}\" aria-selected=\"false\" tabindex=\"-1\"> <a href=\"#\">{{{ name }}}</a> </li> {{/ tabs }} {{/ tablist }} </ul> {{/ tabheader }} {{$ tabbody }} <div class=\"tab-content\"> {{$ tabcontent }} {{# tabs }} <div role=\"tabpanel\" class=\"tab-pane\" id=\"{{ uniqid }}-{{ id }}\"> {{{ content }}} </div> {{/ tabs }} {{/ tabcontent }} </div> {{/ tabbody }} </div> {{#js}} require(['jquery','core/tabs'], function($, tabs) { var container = $(\"#{{ uniqid }}-tab-container\"); tabs.create(container); }); {{/js}} A summary of what we've changed: Added a $tabheader block around the tab list, in case someone wants to change the ul element to something else. Added a $tablist block around the group of tabs to allow them to be overridden on include. Added a $tabbody block around the content, in case someone wants to change the content elements from div elements. Added a $tabcontent block around the tab variable for the content to allow the content to be overridden on include. Now let's see what using this template looks like for your User Profile page: <html> <header><title>User Profile</title></header> <body> {{> core/tabs }} {{$ tablist }} <li role=\"tab\" data-target=\"{{ uniqid }}-tab1\" data-selected-class=\"active\" aria-controls=\"{{ uniqid }}-tab1\" aria-selected=\"false\" tabindex=\"-1\"> <a href=\"#\">Name</a> </li> <li role=\"tab\" data-target=\"{{ uniqid }}-tab2\" data-selected-class=\"active\" aria-controls=\"{{ uniqid }}-tab2\" aria-selected=\"false\" tabindex=\"-1\"> <a href=\"#\">Email</a> </li> {{/ tablist }} {{$ tabcontent }} <div role=\"tabpanel\" class=\"tab-pane\" id=\"{{ uniqid }}-tab1\"> Your name is {{ name }}. </div> <div role=\"tabpanel\" class=\"tab-pane\" id=\"{{ uniqid }}-tab2\"> Your email address is {{ email }}. </div> {{/ tabcontent }} {{/ core/tabs }} </body> </html> That looks a bit better! Now we've been able to use the blocks to successfully change the template to use the context available to this page, we no longer need a \"tabs\" array with \"name\" and \"content\". Even the JavaScript will continue to work because we've kept the correct element attributes. We've still got a slight problem though... In order to change the data for the template we've had to copy & paste the HTML from the original template into our blocks as we do the override. While this works fine in this example, it means we don't quite get the encapsulation we want within the templates since we're leaking internal implementation details. If we ever wanted to change the CSS framework we use for Moodle (say from bootstrap 2 to bootstrap 3 or 4) we'd have to find all the places in the code where this tabs template is used and make sure that the HTML is correct in their block overrides. With that in mind, let's take one more pass at this template and see if we can improve it slightly again. This time we're doing to split the template out into 3 templates. #tabs.mustache <div id=\"{{ uniqid }}-tab-container\"> {{$ tabheader }} <ul role=\"tablist\" class=\"nav nav-tabs\"> {{$ tablist }} {{# tabs }} {{> core/tab_header_item }} {{/ tabs }} {{/ tablist }} </ul> {{/ tabheader }} {{$ tabbody }} <div class=\"tab-content\"> {{$ tabcontent }} {{# tabs }} {{> core/tab_content_item }} {{/ tabs }} {{/ tabcontent }} </div> {{/ tabbody }} </div> {{#js}} require(['jquery','core/tabs'], function($, tabs) { var container = $(\"#{{ uniqid }}-tab-container\"); tabs.create(container); }); {{/js}} #tab_header_item.mustache <li role=\"tab\" data-selected-class=\"active\" aria-selected=\"false\" tabindex=\"-1\"> <a href=\"#\">{{$ tabname }}{{{ name }}}{{/ tabname }}</a> </li> #tab_content_item.mustache <div role=\"tabpanel\" class=\"tab-pane\" {{$ tabpanelcontent }}{{{ content }}}{{/ tabpanelcontent }} </div> A summary of the changes: Split the template into 3, moving the tab into it's own template and the content into it's own and then including them in the tabs template. Removed the ids from the tabs and content. The JavaScript would be updating to assign these ids at runtime so that they don't need to be provided as part of the template context. Added a $tabname block for in the tab_header_item template to make the name flexible on import. Added a $tabpanelcontant block in the tab_content_item template to make the content flexible on import. Cool, so let's see what that looks like in our example now: < html > < header >< title > User Profile </ title ></ header > < body > {{> core/tabs }} {{$ tablist }} {{ < core / tab_header_item }} {{$ tabname }} Name {{/ tabname }} {{/ core / tab_header_item }} {{< core / tab_header_item }} {{$ tabname }} Email {{/ tabname }} {{/ core / tab_header_item }} {{/ tablist }} {{$ tabcontent }} {{< core / tab_content_item }} {{$ tabpanelcontent }} Your name is {{ name }}.{{/ tabpanelcontent }} {{/ core / tab_content_item }} {{< core / tab_content_item }} {{$ tabpanelcontent }} Your email address is {{ email }}.{{/ tabpanelcontent }} {{/ core / tab_content_item }} {{/ tabcontent }} {{/ core / tabs }} </ body > </ html > And we're done! After making the changes above we've been able to keep the benefits of the previous change to allow the context changes but we've also removed the need to copy & paste the HTML everywhere. Instead we're able to use the child templates with a few additional blocks defined to get the content in there. Now if we want to change tabs HTML or CSS frameworks we can just change the core tabs templates and this page will receive the updates for free.","title":"Templates"},{"location":"Moodle/phpMoodleTemplate/#syntax","text":"Mustache tags are made of two opening and closing curly braces. Their shape looks like a moustache, hence the name.","title":"Syntax"},{"location":"Moodle/phpMoodleTemplate/#variables","text":"{{name}} { \"name\" : \"Bobby\" } The value of the key name will be searched for in the current rendering context (and any parent contexts) and when a value is found, the entire tag will be replaced by the value (HTML escaped).","title":"Variables"},{"location":"Moodle/phpMoodleTemplate/#raw-unescaped-variable","text":"All variables are HTML escaped by default. If you want to render raw unescaped HTML, use the triple mustache: {{{description}}} { \"description\" : \"<h1>Hello!</h1><p>In this course you will learn about ...</p>\" } Beware of the security implications of outputting raw HTML and make sure that the value of the variable has been processed by format_text() or another adequate way.","title":"Raw unescaped variable"},{"location":"Moodle/phpMoodleTemplate/#sections","text":"Sections render blocks of text zero, one or more times, depending on the value of the key in the current context. The opening tag has a hash (pound) sign and the closing tag has a slash, followed by the key.","title":"Sections"},{"location":"Moodle/phpMoodleTemplate/#comments","text":"Comments begin with an exclamation mark. The whole section is ignored. Comments are used for boilerplate documentation. They can also be used to avoid having extra break-lines in the generated output. {{! This is a comment and will not be present in the rendered result. }}","title":"Comments"},{"location":"Moodle/phpMoodleTemplate/#partials","text":"Templates can include other templates using the partial tag. Partials begin with a greater than sign. Partials are rendered at runtime and allow to split complex templates into smaller, potentially re-usable units. Moodle core provides with many templates that can be included this way. {{! Show the loading icon. }} < div class = \"p-5\" > {{> core/loading }} </ div > The included template uses the same rendering context as its parent template.","title":"Partials"},{"location":"Moodle/phpMoodleTemplate/#blocks","text":"Mustache template system can be extended via so called Mustache pragmas. Pragmas are non-standard extensions to the Mustache spec. Moodle 3.0 and higher has BLOCKS pragma installed and enabled. The extension allows you to define a parent template with replaceable blocks. Blocks look like sections that use dollar sign in the opening tag. The following parent template defines two blocks heading and content {{! @template tool_demo/section }} < section > < h1 > {{$heading}} Default section heading {{/heading}} </ h1 > < div > {{$content}} Default section content {{/content}} </ div > </ section > Particular child templates can now extend / inherit from this parent template and override the default block values. {{! @template tool_demo/latestnews }} {{ < tool_demo / section }} {{$ heading }} Latest news {{/ heading }} {{$ content }} Today I learned how to use blocks in Mustache ! {{/ content }} {{/ tool_demo / section }} Blocks are particularly useful for building a library of re-usable components.","title":"Blocks"},{"location":"Moodle/phpMoodleTemplate/#helpers","text":"Moodle providers several Mustache helpers. Helpers tags look like sections eventually containing zero or more parameters.","title":"Helpers"},{"location":"Moodle/phpMoodleTemplate/#str","text":"The {{#str}} is a string helper for loading text strings from language packs. It effectively represents Mustache variant of get_string() calls. {{#str}} helloworld, mod_greeting {{/str}} The first two parameters are the string identifier and the component name. The optional third parameter defines the value for the string's $a placeholder. Literals as well as variable tags are allowed to define the value. {{#str}} backto, core, Moodle.org {{/str}} {{#str}} backto, core, {{name}} {{/str}} For strings that accept non-scalar placeholders, see the following section. note If you want to create a help icon, and wondering \"where is the helper for that?\" then actually, it is not a helper. You need to use {{>core/help_icon}} as a partial.","title":"str"},{"location":"Moodle/phpMoodleTemplate/#quote","text":"The {{#quote}} is intended to quote non-scalar {{#str}} arguments. Some strings accept complex non-scalar data structures passed as the value of the $a placeholder. You can use a JSON object syntax in that case: {{#str}} counteditems, core, { \"count\": \"42\", \"items\": \"courses\" } {{/str}} If you wanted to use the context values instead of literal values, you might intuitively use something like this: {{! DO NOT DO THIS !}} {{#str}} counteditems, core, { \"count\": {{count}}, \"items\": {{itemname}} } {{/str}} There is a potential problem though. If the variable tag itemname evaluates to a string containing double quotes, it will break the JSON syntax. We need to escape certain characters potentially appearing in the variable tags. For this, we use the {{#quote}} helper. {{#str}} counteditems, core, { \"count\": {{count}}, \"items\": {{#quote}} {{itemname}} {{/quote}} } {{/str}}","title":"quote"},{"location":"Moodle/phpMoodleTemplate/#pix","text":"The {{#pix}} is a icon picture helper for generating pix icon tags. {{#pix}} t/edit, core, Edit this section {{/pix}} The first two parameters are the icon identifier and the component name. The rest is the alt text for the icon. See Using images in a theme and Moodle icons for some background information about pix icons in Moodle.","title":"pix"},{"location":"Moodle/phpMoodleTemplate/#userdate","text":"The {{#userdate}} helper will format UNIX timestamps into a given human readable date format while using the user's timezone settings configured (if any) in Moodle. The helper will accept hardcoded values, context variables, or other helpers. It is recommended to use the string helper to get one of the core Moodle formats. { \"time\" : 1628871929 } {{#userdate}} {{time}}, {{#str}} strftimedate, core_langconfig {{/str}} {{/userdate}} This will ask the Moodle server for the string \"strftimedate\" and will use the value (which in this case is \"%d %B %Y\" in case of English) to format the user date. So the resulting formatted timestamp from the userdate helper would be like \"13 August 2021\".","title":"userdate"},{"location":"Moodle/phpMoodleTemplate/#shortentext","text":"The {{#shortentext}} helper can be used to shorten a large amount of text to a specified length and will append a trailing ellipsis to signify that the text has been shortened. The algorithm will attempt to preserve words while shortening to text. Words, for the purposes of the helper, are considered to be groups of consecutive characters broken by a space or, in the case of a multi-byte character, after the completion of the multi-byte character (rather than in the middle of the character). It will also attempt to preserve HTML in the text by keeping the opening and closing tags. Only text within the tags will be considered when calculating how much should be truncated to reach the desired length. The helper takes two comma separated arguments. The first is the desired length and the second is the text to be shortened. Both can be provided as context variables. { \"description\" : \"<p><em>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Curabitur lacinia pretium nulla gravida interdum.</em></p>\" } {{#shortentext}} 15, {{{description}}} {{/shortentext}}","title":"shortentext"},{"location":"Moodle/phpMoodleTemplate/#template-files","text":"Templates are saved in templates/*.mustache files within core components and plugins folders. When loading them, templates are identified by their full component name followed by slash and the filename without the file extension. Example A timer template provided by the mod_lesson module would be referred to as mod_lesson/timer and it would be located in mod/lesson/templates/timer.mustache file. Since Moodle 3.8 it is possible to use sub-directories under the templates directory. The first sub-directory name must meet certain naming rules (same as for class namespaces).","title":"Template files"},{"location":"Moodle/phpMoodleTemplate/#mustache-file-boilerplate","text":"{{! This file is part of Moodle - https://moodle.org/ Moodle is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. Moodle is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with Moodle. If not, see <http://www.gnu.org/licenses/>. }} {{! @template plugintype_pluginname/template_name Template purpose and description. Classes required for JS: * none Data attributes required for JS: * none Context variables required for this template: * none Example context (json): { } }}","title":"Mustache file boilerplate"},{"location":"Moodle/phpMoodleTemplate/#rendering-in-php","text":"Use the render_from_template() method to render the given context data with the template. $data = [ 'name' => 'Lorem ipsum', 'description' => format_text($description, FORMAT_HTML), ]; echo $OUTPUT->render_from_template($templatename, $data);","title":"Rendering in PHP"},{"location":"Moodle/phpMoodleTemplate/#renderers","text":"Templates can be effectively used in renderers to generate the HTML representing the given renderable object. Make your renderable class also implement templatable interface. It will have to implement a new method export_for_template(renderer_base $output) . The method should return a JSON-serialisable object (containing only objects, arrays and scalars) that will be passed as the rendering context data to a template. In the simplest case where you have a renderable, templatable object with a class name matching the name of the template that will render it, you do not need to add any renderer code explicity. Passing your widget directly to $OUTPUT->render() will infer the name of your template, call export_for_template() and render_from_template() , then return the result. Example of the method added to the renderable mywidget : /** * Describe the renderable widget so it can be renderer by a mustache template. * * @param renderer_base $output * @return stdClass */ public function export_for_template(renderer_base $output) { $data = new stdClass(); $data->canmanage = $this->canmanage; $data->things = []; foreach ($this->things as $thing) { $data->things[] = $thing->to_record(); } $data->navigation = []; foreach ($this->navigation as $button) { $data->navigation[] = $output->render($button); } return $data; } TIP When naming variables in your export data, be careful not to reuse names of helpers such as str or js - these will silently fail. Try to keep your variable names short but descriptive. The rendering method can now use templates to render the object: /** * Render mywidget via a template. * * @param mywidget $widget * * @return string HTML */ protected function render_mywidget(mywidget $widget) { $data = $widget->export_for_template($this); return $this->render_from_template('tool_myplugin/mywidget', $data); } In your page: $output = $PAGE->get_renderer('tool_myplugin'); echo $output->render($widget);","title":"Renderers"},{"location":"Moodle/phpMoodleTemplate/#rendering-in-javascript","text":"Rendering a template from JavaScript is fairly easy. There is a JavaScript module that can load (and cache) a template and then use it for rendering the given data. import { exception as displayException } from 'core/notification' ; import Templates from 'core/templates' ; // This will be the context for our template. So {{name}} in the template will resolve to \"Tweety bird\". const context = { name : 'Tweety bird' , intelligence : 2 , }; // This will call the function to load and render our template. Templates . renderForPromise ( 'block_looneytunes/profile' , context ) // It returns a promise that needs to be resoved. . then (({ html , js }) => { // Here eventually I have my compiled template, and any javascript that it generated. // The templates object has append, prepend and replace functions. Templates . appendNodeContents ( '.block_looneytunes .content' , html , js ); }) // Deal with this exception (Using core/notify exception function is recommended). . catch (( error ) => displayException ( error )); Under the hood, this does a few clever things for us. It loads the template via an AJAX call if it was not cached. It finds any missing lang strings in the template and loads them in a single AJAX request. It splits the JS from the HTML and returns both in an easy to use way. Read on for how to nicely deal with that js parameter.","title":"Rendering in JavaScript"},{"location":"Moodle/phpMoodleTemplate/#templates-requiring-javascript","text":"Sometimes a template requires that some JavaScript runs when it is added to the page in order to give it more features. In the template we can include blocks of JavaScript, but we should use a special section tag that has a \"helper\" method registered to handle JavaScript carefully. Example <!-- HTML here -->> {{^element.frozen}} {{#js}} require(['theme_boost/form-display-errors'], function(module) { module.enhance({{#quote}}{{element.id}}{{/quote}}); }); {{/js}} {{/element.frozen}} TIP We strongly advise placing all meaningful JavaScript into an AMD module and simply loading the JavaScript from the template. This allows the JavaScript to be linted, and minified. If this template is rendered by PHP, the JavaScript is separated from the HTML, and is appended to a special section in the footer of the page after requirejs has loaded. This provides the optimal page loading speed. If the template is rendered by JavaScript, the JavaScript source will be passed to the \"done\" handler from the promise. Then, when the then handler has added the template to the DOM, it can call templates . runTemplateJS ( javascript ); which will run the JavaScript (by creating a new script tag and appending it to the page head).","title":"Templates requiring JavaScript"},{"location":"Moodle/phpMoodleTemplate/#overriding-templates-in-a-theme","text":"Templates can be overridden by a theme. Find the template that you want to change - e.g. mod/wiki/templates/ratingui.mustache Create a sub-folder under your themes \"templates\" directory with the component name of the plugin you are overriding - e.g theme/timtam/templates/mod_wiki Copy the ratingui.mustache file into the newly created theme/timtam/templates/mod_wiki and edit it. You should see your changes immediately if theme designer mode is on. Templates are cached just like CSS, so if you are not using theme designer mode you will need to purge all caches to see the latest version of an edited template. If the template you are overriding contains a documentation comment it is recommended to remove it. It will still show the documentation in the template library.","title":"Overriding templates in a theme"},{"location":"Moodle/phpMoodleTemplate/#documenting-the-templates","text":"Theme designers need to know the limits of what they can expect to change without breaking anything. Also, correctly documented templates can be previewed in the \"Template library\" tool shipped with Moodle. Classes required for JS - This is a list of classes that are used by the JavaScript for this template. If removing a class from an element in the template will break the JavaScript, list it here. Data attributes required for JS - This is a list of data attributes (e.g. data-enhance=\"true\") that are used by the JavaScript for this template. If removing a data attribute from an element in the template will break the JavaScript, list it here. Context variables required for this template - This is a description of the data that may be contained in the context that is passed to the template. Be explicit and document every attribute. Example context (JSON) - The Template library will look for this data in your documentation comment as it allows it to render a \"preview\" of the template right in the Template library. This is useful for theme designers to test all the available templates in their new theme to make sure they look nice in a new theme. It is also useful to make sure the template responds to different screen sizes, languages and devices. The format is a JSON-encoded object that is passed directly into the render method for this template.","title":"Documenting the templates"},{"location":"Moodle/phpMoodleTemplate/#coding-style","text":"This section documents some coding style guidelines to follow when writing templates. The reason for these guidelines is to promote consistency, and interoperability of the templates.","title":"Coding style"},{"location":"Moodle/phpMoodleTemplate/#notes","text":"","title":"Notes"},{"location":"Moodle/phpMoodleTemplate/#iterating-over-php-arrays-in-mustache-templates","text":"In PHP, both lists and hashes are implemented as arrays. But Mustache must treat them as different structures because of cross language compatibility. If the PHP array does not have the [0] key, or there are gaps in the keys sequence, Mustache will interpret that array as a hash and will not iterate over it. So you need to make sure the elements in the list are properly indexed: $datafortemplate->mylist = array_values($myarraywithnonnumerickeys)","title":"Iterating over PHP arrays in Mustache templates"},{"location":"Moodle/phpMoodleTemplate/#test-for-non-empty-array-in-mustache-templates","text":"Short answer: you can't. {{! This will work in PHP but not in JavaScript. }} {{#users.0}} ... {{/users.0}} {{! This will work in JavaScript but not in PHP. }} {{#users.length}} ... {{/users.length}} As a workaround, include a specific property in the context like hasusers. { \"hasusers\": false, \"users\": [] } {{#hasusers}} {{#users}} .... {{/users}} {{#hasusers}}","title":"Test for non-empty array in Mustache templates"},{"location":"Moodle/phpMoodleTemplate/#squash-whitespace-in-a-template","text":"Sometimes whitespace is significant, for example inside a link it will show with an underline. If you need two Mustache tags from separate lines to be rendered with no whitespace between them you can use Mustache comments to squash the whitespace. < a href = \"blah\" > {{! }}{{icon}}{{! }}{{name}} </ a >","title":"Squash whitespace in a template"},{"location":"Moodle/phpMoodleTemplate/#access-to-globals","text":"In PHP you have access to the $CFG object to allow access to properties. Mustache rendering also exposes a globals object automatically during rendering. For example: <a href=\"{{globals.config.wwwroot}}/login/logout.php?sesskey={{globals.config.sesskey}}\">{{#str}} logout, core {{/str}}</a> The properties available on the globals.config object are the same as normally exposed for JavaScript; these are gathered from get_config_for_javascript() function in lib/outputrequirementslib.php. This object is only available when using client-side Mustache rendering in JavaScript; it is not added to templates rendered with the PHP Mustache engine.","title":"Access to globals"},{"location":"Moodle/phpMoodleTemplate/#core-templates","text":"Core templates should ideally be simple generic components that can be used within other templates to create more complex page layouts. They should be flexible enough for developers and themers to easily use without having to replace the template. The templates should attempt to encapsulate some core structure for the element as well as key classes while allowing the content to be easily overridden. Ultimately we want to avoid having duplicate HTML copied from template to template where possible, particularly if the HTML element has some classes associated with it. Mustache relies on variables to substitute context data into the template but unfortunately it's very unlikely that the the names of the context data will match what the template is expecting for all the places that the template might be used. So in order to allow easy extensibility and avoid having to duplicate templates just to rename the variables we can wrap them in block variables which would allow the template that is including our template to replace that variable with one from it's own context inline. There are a few key points to keep in mind when writing a core template: Consider how your template will actually be used. Try writing a test page that uses your template to help discover some of the assumptions you might have in the template. The example context you provide in the template is mostly just for showing the template in the template library and is likely not how your template will actually be used. Most uses of the template will have a different context all together. Try to enforce a core structure but avoid enforcing a specific context. Content should be overridable. Use block variables to indicate sections of your template that people are likely to want to change. Typically where they will be wanting to substitute in their own content. Try to keep any JavaScript that accompanies the template as decoupled from the HTML / CSS structure of the template as possible. Instead of relying on the existence of certain HTML elements or CSS classes it is generally better to leverage data-attributes which can be added to any element. Let's go through an example to illustrate how you might build a core template. For the example we'll be building a tabs template, since it's a fairly complex component that requires the use of block variables and JavaScript. First we can create a basic template to get the general structure down, let's call it tabs. Here's what it might look like: <div id=\"{{ uniqid }}-tab-container\"> <ul role=\"tablist\" class=\"nav nav-tabs\"> {{# tabs }} <li role=\"tab\" data-target=\"{{ uniqid }}-{{ id }}\" data-selected-class=\"active\" aria-controls=\"{{ uniqid }}-{{ id }}\" aria-selected=\"false\" tabindex=\"-1\"> <a href=\"#\">{{{ name }}}</a> </li> {{/ tabs }} </ul> <div class=\"tab-content\"> {{# tabs }} <div role=\"tabpanel\" class=\"tab-pane\" id=\"{{ uniqid }}-{{ id }}\"> {{{ content }}} </div> {{/ tabs }} </div> </div> {{#js}} require(['jquery','core/tabs'], function($, tabs) { var container = $(\"#{{ uniqid }}-tab-container\"); tabs.create(container); }); {{/js}} The template requires a context that looks something like: { \"tabs\": [ {\"id\":\"tab1\",\"name\":\"Tab 1\",\"content\":\"This is tab 1 content <a href=\\\"#\\\">test</a>\"}, {\"id\":\"tab2\",\"name\":\"Tab 2\",\"content\":\"This is tab 2 content <a href=\\\"#\\\">test</a>\"}, {\"id\":\"tab3\",\"name\":\"Tab 3\",\"content\":\"This is tab 3 content <a href=\\\"#\\\">test</a>\"} ] } The JavaScript required to power the tabs element (keyboard navigation, show / hide panels etc) is written as an AMD module and is included by the template. The JavaScript is a little too large to go through here, but some key points to consider when writing it are: It should ideally be independent of the HTML structure, so if someone wants to completely rewrite the tabs to be different elements (for example, a set of button or div elements) then the same JavaScript can be used without needing to change it. In order to achieve this it is important to identify the key components of the template. In this case it is a tab list, a tab and it's content. One way to identify these components would be to inspect the structure of the DOM, for example you might say \"find me the ul element\" when looking for the tab list and then \"find my the child li elements\" to find the tabs. While this would work, it couples your JavaScript to the HTML structure and makes it difficult to change later. A different approach would be to use the element attributes, for example you might say \"find my the element with the role 'tablist'\" to get the tab list and then \"find me the elements with the role 'tab'\" to get the tabs. This allows the HTML structure to change without breaking the JavaScript (as long as the correct attributes are set, of course). Another point of consideration for this example is what class to apply to a tab when it is selected. It makes sense to just apply something like \"active\" in the JavaScript, but that once again couples it to a particular CSS framework which makes it more difficult to change without modifying the JavaScript. In this case I chose to add a data attribute to the element to indicate which class will be set when the tab is selected. This means the JavaScript doesn't have to guess what the appropriate class is, it can just get it from the template. Ok, so we've got our basic template. It's time to use it! Let's say we want to create a simple user profile page that might show 2 tabs, the first tab will be the user's name and the second tab will be the user's email address (please excuse the contrived example). Here's what the page might look like: <html> <header><title>User Profile</title></header> <body> {{< core/tabs }} </body> </html> That looks pretty simple! The only problem is, how do I get my content there? I would have to supply a context like this in order to display the tabs I want: { \"tabs\": [ { \"id\": \"tab1\", \"name\": \"Name\", \"content\": \"Your name is Mr. Test User.\" }, { \"id\": \"tab2\", \"name\": \"Email\", \"content\": \"Your email is testuser@example.com\" } ] } Let's assume that the context for this page doesn't match what the tabs template is expecting though. Let's assume the tabs template is being rendered with this context: { \"name\": \"Mr. Test User\", \"email\": \"testuser@example.com\" } Unfortunately, we'll almost certainly never have complete control over all of the contexts that our template will be rendered in which means we'll be expecting people to write new webservices to supply the same data in different formats every time they want to use a template. It becomes an unmanageable problem. Enter blocks! We can make the template more flexible by defining sections of the template that can be overridden when they are included. Pretty neat! This will allow us to enforce a certain core structure but not enforce a context on the template that is including the tabs. Let's have another go at that template, this time leveraging blocks: <div id=\"{{ uniqid }}-tab-container\"> {{$ tabheader }} <ul role=\"tablist\" class=\"nav nav-tabs\"> {{$ tablist }} {{# tabs }} <li role=\"tab\" data-target=\"{{ uniqid }}-{{ id }}\" data-selected-class=\"active\" aria-controls=\"{{ uniqid }}-{{ id }}\" aria-selected=\"false\" tabindex=\"-1\"> <a href=\"#\">{{{ name }}}</a> </li> {{/ tabs }} {{/ tablist }} </ul> {{/ tabheader }} {{$ tabbody }} <div class=\"tab-content\"> {{$ tabcontent }} {{# tabs }} <div role=\"tabpanel\" class=\"tab-pane\" id=\"{{ uniqid }}-{{ id }}\"> {{{ content }}} </div> {{/ tabs }} {{/ tabcontent }} </div> {{/ tabbody }} </div> {{#js}} require(['jquery','core/tabs'], function($, tabs) { var container = $(\"#{{ uniqid }}-tab-container\"); tabs.create(container); }); {{/js}} A summary of what we've changed: Added a $tabheader block around the tab list, in case someone wants to change the ul element to something else. Added a $tablist block around the group of tabs to allow them to be overridden on include. Added a $tabbody block around the content, in case someone wants to change the content elements from div elements. Added a $tabcontent block around the tab variable for the content to allow the content to be overridden on include. Now let's see what using this template looks like for your User Profile page: <html> <header><title>User Profile</title></header> <body> {{> core/tabs }} {{$ tablist }} <li role=\"tab\" data-target=\"{{ uniqid }}-tab1\" data-selected-class=\"active\" aria-controls=\"{{ uniqid }}-tab1\" aria-selected=\"false\" tabindex=\"-1\"> <a href=\"#\">Name</a> </li> <li role=\"tab\" data-target=\"{{ uniqid }}-tab2\" data-selected-class=\"active\" aria-controls=\"{{ uniqid }}-tab2\" aria-selected=\"false\" tabindex=\"-1\"> <a href=\"#\">Email</a> </li> {{/ tablist }} {{$ tabcontent }} <div role=\"tabpanel\" class=\"tab-pane\" id=\"{{ uniqid }}-tab1\"> Your name is {{ name }}. </div> <div role=\"tabpanel\" class=\"tab-pane\" id=\"{{ uniqid }}-tab2\"> Your email address is {{ email }}. </div> {{/ tabcontent }} {{/ core/tabs }} </body> </html> That looks a bit better! Now we've been able to use the blocks to successfully change the template to use the context available to this page, we no longer need a \"tabs\" array with \"name\" and \"content\". Even the JavaScript will continue to work because we've kept the correct element attributes. We've still got a slight problem though... In order to change the data for the template we've had to copy & paste the HTML from the original template into our blocks as we do the override. While this works fine in this example, it means we don't quite get the encapsulation we want within the templates since we're leaking internal implementation details. If we ever wanted to change the CSS framework we use for Moodle (say from bootstrap 2 to bootstrap 3 or 4) we'd have to find all the places in the code where this tabs template is used and make sure that the HTML is correct in their block overrides. With that in mind, let's take one more pass at this template and see if we can improve it slightly again. This time we're doing to split the template out into 3 templates. #tabs.mustache <div id=\"{{ uniqid }}-tab-container\"> {{$ tabheader }} <ul role=\"tablist\" class=\"nav nav-tabs\"> {{$ tablist }} {{# tabs }} {{> core/tab_header_item }} {{/ tabs }} {{/ tablist }} </ul> {{/ tabheader }} {{$ tabbody }} <div class=\"tab-content\"> {{$ tabcontent }} {{# tabs }} {{> core/tab_content_item }} {{/ tabs }} {{/ tabcontent }} </div> {{/ tabbody }} </div> {{#js}} require(['jquery','core/tabs'], function($, tabs) { var container = $(\"#{{ uniqid }}-tab-container\"); tabs.create(container); }); {{/js}} #tab_header_item.mustache <li role=\"tab\" data-selected-class=\"active\" aria-selected=\"false\" tabindex=\"-1\"> <a href=\"#\">{{$ tabname }}{{{ name }}}{{/ tabname }}</a> </li> #tab_content_item.mustache <div role=\"tabpanel\" class=\"tab-pane\" {{$ tabpanelcontent }}{{{ content }}}{{/ tabpanelcontent }} </div> A summary of the changes: Split the template into 3, moving the tab into it's own template and the content into it's own and then including them in the tabs template. Removed the ids from the tabs and content. The JavaScript would be updating to assign these ids at runtime so that they don't need to be provided as part of the template context. Added a $tabname block for in the tab_header_item template to make the name flexible on import. Added a $tabpanelcontant block in the tab_content_item template to make the content flexible on import. Cool, so let's see what that looks like in our example now: < html > < header >< title > User Profile </ title ></ header > < body > {{> core/tabs }} {{$ tablist }} {{ < core / tab_header_item }} {{$ tabname }} Name {{/ tabname }} {{/ core / tab_header_item }} {{< core / tab_header_item }} {{$ tabname }} Email {{/ tabname }} {{/ core / tab_header_item }} {{/ tablist }} {{$ tabcontent }} {{< core / tab_content_item }} {{$ tabpanelcontent }} Your name is {{ name }}.{{/ tabpanelcontent }} {{/ core / tab_content_item }} {{< core / tab_content_item }} {{$ tabpanelcontent }} Your email address is {{ email }}.{{/ tabpanelcontent }} {{/ core / tab_content_item }} {{/ tabcontent }} {{/ core / tabs }} </ body > </ html > And we're done! After making the changes above we've been able to keep the benefits of the previous change to allow the context changes but we've also removed the need to copy & paste the HTML everywhere. Instead we're able to use the child templates with a few additional blocks defined to get the content in there. Now if we want to change tabs HTML or CSS frameworks we can just change the core tabs templates and this page will receive the updates for free.","title":"Core templates"},{"location":"Moodle/phpMoodleToolsPHPUnit/","text":"PHPUnit by Sebastian Bergmann is an advanced unit testing framework for PHP. It is installed as Composer dependency and is not part of Moodle installation. To run PHPUnit tests, you have to manually install it on your development computer or test server. Read the excellent guide at PHPUnit Manual Install PHPUnit To use PHPUnit with Moodle, ensure the correct version is installed based on Moodle's requirements. You can find version compatibility in Moodle's PHPUnit documentation . Installation Steps Install PHPUnit via Composer : Install Composer Instructions for installing composer on all platforms are here: https://getcomposer.org/download/ Initialise test environment php admin/tool/phpunit/cli/init.php Verify Installation : Check the installed PHPUnit version using: phpunit --version Ensure the version matches Moodle's requirements. Initialisation of test environment : see Documentation . Initialize PHPUnit in Moodle Run the initialization script to set up the testing environment: php admin/tool/phpunit/cli/init.php This script: - Verifies the Moodle environment. - Sets up the test database schema. - Configures PHPUnit settings. Write Test Cases Moodle uses PHPUnit for unit tests and integration tests . Test cases are typically placed in the tests/ directory within the relevant plugin or core directory. Moodle PHPUnit integration is designed to allow easy adding of new tests. At the start of each test the state is automatically reset to fresh new installation (unless explicitly told not to reset). Example: Writing a Basic Test Case Create a file in tests/ directory, e.g., example_test.php . PHPUnit tests are located in tests/*_test.php files in your plugin, for example mod/myplugin/tests/sample_test.php, the file should contain only one class that extends advanced_testcase: <?php use advanced_testcase ; class example_test extends advanced_testcase { public function test_addition () { $this -> assertEquals ( 4 , 2 + 2 , \"Addition should result in 4.\" ); } } Testcase classes There are three basic test class that are supposed to used in all Moodle unit tests basic_testcase, advanced_testcase and provider_testcase. Please note it is strongly recommended to put only one testcase into each class file. basic_testcase Very simple tests that do not modify database, dataroot or any PHP globals. It can be used for example when trying examples from the official PHPUnit tutorial. advanced_testcase Enhanced testcase class enhanced for easy testing of Moodle code. provider_testcase Enhanced testcase class, enhanced for easy testing of Privacy Providers. There is a fourth testcase class that is specially designed for testing of the Moodle database layer, it should not be used for other purposes. Assertions All assertions are based on PHPUnit assertions. Inclusion of Moodle library files If you want to include some Moodle library files you should always declare global $CFG. The reason is that testcase files may be included from non-moodle code which does not make the global $CFG available automatically. Automatic state reset By default after each test Moodle database and dataroot is automatically reset to the original state which was present right after installation. make sure to use $this->resetAfterTest() to indicate that the database or changes of standard global variables are expected. If you received the error \"Warning: unexpected database modification, resetting DB state\" it is because the test is not using $this->resetAfterTest(). namespace mod_myplugin; class test_something extends \\advanced_testcase { public function test_deleting() { global $DB; $this->resetAfterTest(true); $DB->delete_records('user'); $this->assertEmpty($DB->get_records('user')); } public function test_user_table_was_reset() { global $DB; $this->assertEquals(2, $DB->count_records('user', array())); } } Generators Tests that need to modify default installation may use generators to create new courses, users, etc. All examples here should be used from test methods of a test class derived from advanced_testcase . Note if you are using PHPUnit @dataProvider functions to provide parameters to unit tests, you can not use the data generator or change the user etc in the data provider function. Data providers must not instantiate/create data. Just define it. And then, the test body can proceed with the instantiation/creation. Creating users At the start of each test there are only two users present - guest and administrator. If you need to add more test accounts use: $user = $this->getDataGenerator()->create_user(); You may also specify properties of the user account, for example: $user1 = $this->getDataGenerator()->create_user(array('email'=>'user1@example.com', 'username'=>'user1')); By default no user is logged-in, use setUser() method to change current $USER value: $this->setUser($user1); Guest and admin accounts have a shortcut methods: $this->setGuestUser(); $this->setAdminUser(); Null can be used to set current user back to not-logged-in: $this->setUser(null); Creating course categories $category1 = $this->getDataGenerator()->create_category(); $category2 = $this->getDataGenerator()->create_category(array('name'=>'Some subcategory', 'parent'=>$category1->id)); Creating courses $course1 = $this->getDataGenerator()->create_course(); $category = $this->getDataGenerator()->create_category(); $course2 = $this->getDataGenerator()->create_course(array('name'=>'Some course', 'category'=>$category->id)); Creating activities Some activity plugins include instance generators. The generator class are defined in plugindirectory/tests/generator/lib.php . Example of creation of new course with one page resource: $course = $this->getDataGenerator()->create_course(); $generator = $this->getDataGenerator()->get_plugin_generator('mod_page'); $generator->create_instance(array('course'=>$course->id)); The following is functionally the same, but a bit shorter: $course = $this->getDataGenerator()->create_course(); $page = $this->getDataGenerator()->create_module('page', array('course' => $course->id)); Creating cohorts Since 2.4 there the data generator supports creation of new cohorts. $cohort = $this->getDataGenerator()->create_cohort(); Simplified user enrolments Instead of standard enrolment API it is possible to use simplified method in data generator. It is intended to be used with self and manual enrolment plugins. $this->getDataGenerator()->enrol_user($userid, $courseid); $this->getDataGenerator()->enrol_user($userid, $courseid, $teacherroleid); $this->getDataGenerator()->enrol_user($userid, $courseid, $teacherroleid, 'manual'); Creating scales $this->getDataGenerator()->create_scale(); $this->getDataGenerator()->create_scale(array('name' => $name, 'scale' => $scale, 'courseid' => $courseid, 'userid' => $userid, 'description' => description, 'descriptionformat' => $descriptionformat)); Creating roles $this->getDataGenerator()->create_role(); $this->getDataGenerator()->create_role(array('shortname' => $shortname, 'name' => $name, 'description' => description, 'archetype' => $archetype)); Creating tags $this->getDataGenerator()->create_tag(); $this->getDataGenerator()->create_tag(array( 'userid' => $userid, 'rawname' => $rawname, 'name' => $name, 'description' => $description, 'descriptionformat' => $descriptionformat, 'flag' => $flag )); Groups Creating groups $this->getDataGenerator()->create_group(array('courseid' => $courseid)); $this->getDataGenerator()->create_group(array('courseid' => $courseid, 'name' => $name, 'description' => $description, 'descriptionformat' => $descriptionformat)); Adding users to groups $this->getDataGenerator()->create_group_member(array('userid' => $userid, 'groupid' => $groupid)); $this->getDataGenerator()->create_group_member(array('userid' => $userid, 'groupid' => $groupid, 'component' => $component, 'itemid' => $itemid)); Creating groupings $this->getDataGenerator()->create_grouping(array('courseid' => $courseid)); $this->getDataGenerator()->create_grouping(array('courseid' => $courseid, 'name' => $name, 'description' => $description, 'descriptionformat' => $descriptionformat)); Adding groups to groupings $this->getDataGenerator()->create_grouping_group(array('groupingid' => $groupingid, 'groupid' => $groupid)); Repositories Creating repository instances Some respository plugins include instance generators. The generator class are defined in plugindirectory/tests/generator/lib.php . $this->getDataGenerator()->create_repository($type, $record, $options); Creating repository types Some respository plugins include type generators. The generator class are defined in plugindirectory/tests/generator/lib.php . $this->getDataGenerator()->create_repository_type($type, $record, $options); Creating grades Grade categories $this->getDataGenerator()->create_grade_category(array('courseid' => $courseid)); $this->getDataGenerator()->create_grade_category(array('courseid' => $courseid, 'fullname' => $fullname)); Grade items $this->getDataGenerator()->create_grade_item(); $this->getDataGenerator()->create_grade_item(array('itemtype' => $itemtype, 'itemname' => $itemname, 'outcomeid' => $outcomeid, 'scaleid' => $scaleid, 'gradetype' => $gradetype)); Outcomes $this->getDataGenerator()->create_grade_outcome(); $this->getDataGenerator()->create_grade_item(array('fullname' => $fullname)); Other types of plugin Any other type of plugin can have a generator. The generator class should extend component_generator_base , and then you can get an instance using $mygenerator = $this->getDataGenerator()->get_plugin_generator($frankenstylecomponentname); For some types of plugin, like mod documented above, there may be a more specific class than component_generator_base to extend, like testing_module_generator. That will give a consistent set of method names to use. Otherwise, you can create whatever methods you like on your generator, to create the different things you need to work whith. Long tests All standard test should execute as fast as possible. Tests that take a longer time to execute (>10s) or are otherwise expensive (such as querying external servers that might be flooded by all dev machines) should be execute only when PHPUNIT_LONGTEST is true. This constant can be set in phpunit.xml or directly in config.php. Large test data See advanced_testcase::createXMLDataSet() and advanced_testcase::createCsvDataSet() and related functions there for easier ways to manage large test data sets within files rather than arrays in code. See PHPUnit_integration#Extra_methods . Testing sending of messages You can temporarily redirect all messages sent via message_send() to a message sink object. This allows developers to verify that the tested code is sending expected messages. To test code using messaging first disable the use of transactions and then redirect the messaging into a new message sink, you can inspect the results later. $this->preventResetByRollback(); $sink = $this->redirectMessages(); //... code that is sending messages $messages = $sink->get_messages(); $this->assertEquals(3, count($messages)); //.. test messages were generated in correct order with appropriate content Template:Moodle 4.4 Since 4.4 there are two new methods that support getting the messages for specific components and message types. $sink = $this->redirectMessages(); //... code that is sending messages $messages = $sink->get_messages_by_component('mod_forum'); $this->assertEquals(3, count($messages)); //.. test messages were generated in correct order with appropriate content $sink = $this->redirectMessages(); //... code that is sending messages $messages = $sink->get_messages_by_component_and_type('core', 'messagecontactrequests'); $this->assertEquals(3, count($messages)); //.. test messages were generated in correct order with appropriate content Testing sending of emails You can temporarily redirect emails sent via email_to_user() to a email message sink object. This allows developers to verify that the tested code is sending expected emails. To test code using messaging first unset 'noemailever' setting and then redirect the emails into a new message sink where you can inspect the results later. unset_config('noemailever'); $sink = $this->redirectEmails(); //... code that is sending email $messages = $sink->get_messages(); $this->assertEquals(1, count($messages)); Logstores You can test events which were written to a logstore, but you must disable transactions, enable at least one valid logstore, and disable logstore buffering to ensure that the events are written to the database before the tests execute. $this->preventResetByRollback(); set_config('enabled_stores', 'logstore_standard', 'tool_log'); set_config('buffersize', 0, 'logstore_standard'); get_log_manager(true); Check your coverage PHPUnit has the ability to generate code coverage information for your unit tests. Prior to Moodle 3.7, this coverage would load all files and generate coverage for everything regardless of whether that file could be covered at all, or whether it was intentionally covered. Since Moodle 3.7 the phpunit.xml configuration contains generated coverage include and exclude information for each component. Generating include and exclude configuration You can programatically describe which files will be checked for coverage by creating a coverage.php file alongside the tests that you are writing. Since Moodle 4.0, a default configuration is applied for all plugins and it is not necessary to supply a coverage.php unless you wish to cover additional files. The coverage.php file allows you to list include and exclude files and folders within the component being tested. All paths specified are relative to the component being tested. For example, when working with mod_forum your code will be in mod/forum , and its unit tests will be in mod/forum/tests/example_test.php . The coverage file for this would be in mod/forum/tests/coverage.php and all paths specified would be relative to mod/forum . It is possible to specify a combination of included files, included folders, excluded files, and excluded folders. This would allow you, for example, to include the entire classes directory, but exclude a specific file or folder within it. The following is an example coverage.php file from mod_forum: Note: For Moodle versions 3.7 to 3.10, the syntax used was slightly different. return new class extends phpunit_coverage_info { /** @var array The list of folders relative to the plugin root to include in coverage generation. */ protected $includelistfolders = [ 'classes', 'externallib.php', ]; /** @var array The list of files relative to the plugin root to include in coverage generation. */ protected $includelistfiles = []; /** @var array The list of folders relative to the plugin root to exclude from coverage generation. */ protected $excludelistfolders = []; /** @var array The list of files relative to the plugin root to exclude from coverage generation. */ protected $excludelistfiles = []; }; Also, note that you can better define which class or function each test is effectively covering by using the @covers annotation. Since Moodle 4.0, the following default configuration is applied: return new class extends phpunit_coverage_info { /** @var array The list of folders relative to the plugin root to include in coverage generation. */ protected $includelistfolders = [ 'classes', 'tests/generator', ]; /** @var array The list of files relative to the plugin root to include in coverage generation. */ protected $includelistfiles = [ 'externallib.php', 'lib.php', 'locallib.php', 'renderer.php', 'rsslib.php', ]; /** @var array The list of folders relative to the plugin root to exclude from coverage generation. */ protected $excludelistfolders = []; /** @var array The list of files relative to the plugin root to exclude from coverage generation. */ protected $excludelistfiles = []; }; If a coverage.php file already exists, then the defaults will be added to the values already defined. Run Tests Run All Tests: Execute all tests in Moodle: To execute all test suites from main configuration file execute the vendor/bin/phpunit script from your $CFG->dirroot directory. cd /home/example/moodle vendor/bin/phpunit Run Specific Tests: Run tests in a specific file: vendor/bin/phpunit path/to/tests/example_test.php You can also run a single test method inside a class: vendor/bin/phpunit --filter test_function_name path/to/file.php Run Tests for a Specific Component: To test a plugin or core component: vendor/bin/phpunit --testsuite workshopform_accumulative_testsuite Use Debugging Options: Add verbosity for more details: vendor/bin/phpunit --verbose Debugging and Troubleshooting Reinitialize PHPUnit : If tests fail due to environment setup issues, reinitialize PHPUnit: php admin/tool/phpunit/cli/init.php Check PHPUnit Version : Ensure compatibility with Moodle's required PHPUnit version. Enable Debugging : Modify config.php to enable debugging: $CFG->debug = (E_ALL | E_STRICT); $CFG->debugdisplay = true; Best Practices for Writing Tests Code coverage : PHPUnit has the ability to generate code coverage information for your unit tests and this is well supported since.Moodle 3.7. We recommend that you consider checking the coverage of your plugins when you write your code. We recommend that you explicitly set the @covers annotation as described in the PHPUnit documentation. Keep use of resetAfterTest to a minimum : Although many of the examples described above use the resetAfterTest nomenclature to reset the database and filesystem after your test completes, you should ideally not use this unless you have to. Generally speaking you should aim to write code which is mockable, and does not require real fixtures. Use of resetAfterTest will also slow your tests down. Test Data Generation : Use Moodle's data generators for creating test data: $this->getDataGenerator()->create_user(['username' => 'testuser']); Mock Objects : Use mocking for dependencies to isolate functionality: $mock = $this->createMock(core_user::class); Use Assertions : Leverage PHPUnit\u2019s assertion methods, such as: - `assertEquals` - `assertTrue` - `assertInstanceOf` Be careful with shared setUp and instance variables : You should be careful of how you create and use instance variables in PHPUnit tests for two main reasons: If you create any fixtures in the setUp, or call the resetAfterTest function, these fixtures and conditions will apply for all tests in the testsuite. You will not be able to add another test to the suite which does not require these conditions without those conditions being fulfilled anyway. This can lead to slow tests. PHPUnit creates an instance of each testcase during its bootstrap phase, and does not dispose of it for the lifetime of the test run. Anything which causes data to be stored as instance data within the testcase will be stored in memory until the entire suite completes. This means that any fixture which is setup and not actively discarded will not be garbage collected and lead to memory bloat. In severe cases this can lead to memory exhaustion. Existing testcases which contain setUp which either generate data, or set resetAfterTest should be phased out, and no new cases should be introduced. Make use of the dataProvider functionality : The dataProvider functionality of PHPUnit is an extremely powerful and useful feature which allows you to verify a function quickly and easily with a range of different conditions. However, the following rules should be followed when using dataProviders: Keep addition of resettable data requiring resetAfterTest to a minimum - this will lead to many slow tests Data providers must not instantiate/create data . Just define it. And then, the test body can proceed with the instantiation/creation. The dataProvider is called after the testSuite is instantiated, but before any tests are run. Each test will run a full setUp and tearDown, which will destroy any data which was created. /** * Test function accepts parameters passed from the specified data provider. * * @dataProvider foobar_provider * @param int $foor * @param int $bar */ public function test_foobar(int $foo, int $bar) { // Perform the tests here. } /** * Data provider for {@see self::test_foobar()}. * * @return array List of data sets - (string) data set name => (array) data */ public function foobar_provider(): array { return [ 'Same numbers' => [ 'foo' => 42, 'bar' => 42, ], 'Different numbers' => [ 'foo' => 21, 'bar' => 84, ], ]; } Advanced Usage Coverage Reports: Generate test coverage reports for code analysis: vendor/bin/phpunit --coverage-html /path/to/report Parallel Testing: Moodle supports parallel test execution to speed up testing: vendor/bin/phpunit --processes = 4","title":"Unit Test"},{"location":"Moodle/phpMoodleToolsPHPUnit/#install-phpunit","text":"To use PHPUnit with Moodle, ensure the correct version is installed based on Moodle's requirements. You can find version compatibility in Moodle's PHPUnit documentation . Installation Steps Install PHPUnit via Composer : Install Composer Instructions for installing composer on all platforms are here: https://getcomposer.org/download/ Initialise test environment php admin/tool/phpunit/cli/init.php Verify Installation : Check the installed PHPUnit version using: phpunit --version Ensure the version matches Moodle's requirements. Initialisation of test environment : see Documentation .","title":"Install PHPUnit"},{"location":"Moodle/phpMoodleToolsPHPUnit/#initialize-phpunit-in-moodle","text":"Run the initialization script to set up the testing environment: php admin/tool/phpunit/cli/init.php This script: - Verifies the Moodle environment. - Sets up the test database schema. - Configures PHPUnit settings.","title":"Initialize PHPUnit in Moodle"},{"location":"Moodle/phpMoodleToolsPHPUnit/#write-test-cases","text":"Moodle uses PHPUnit for unit tests and integration tests . Test cases are typically placed in the tests/ directory within the relevant plugin or core directory. Moodle PHPUnit integration is designed to allow easy adding of new tests. At the start of each test the state is automatically reset to fresh new installation (unless explicitly told not to reset).","title":"Write Test Cases"},{"location":"Moodle/phpMoodleToolsPHPUnit/#generators","text":"Tests that need to modify default installation may use generators to create new courses, users, etc. All examples here should be used from test methods of a test class derived from advanced_testcase . Note if you are using PHPUnit @dataProvider functions to provide parameters to unit tests, you can not use the data generator or change the user etc in the data provider function. Data providers must not instantiate/create data. Just define it. And then, the test body can proceed with the instantiation/creation.","title":"Generators"},{"location":"Moodle/phpMoodleToolsPHPUnit/#creating-users","text":"At the start of each test there are only two users present - guest and administrator. If you need to add more test accounts use: $user = $this->getDataGenerator()->create_user(); You may also specify properties of the user account, for example: $user1 = $this->getDataGenerator()->create_user(array('email'=>'user1@example.com', 'username'=>'user1')); By default no user is logged-in, use setUser() method to change current $USER value: $this->setUser($user1); Guest and admin accounts have a shortcut methods: $this->setGuestUser(); $this->setAdminUser(); Null can be used to set current user back to not-logged-in: $this->setUser(null);","title":"Creating users"},{"location":"Moodle/phpMoodleToolsPHPUnit/#groups","text":"","title":"Groups"},{"location":"Moodle/phpMoodleToolsPHPUnit/#repositories","text":"","title":"Repositories"},{"location":"Moodle/phpMoodleToolsPHPUnit/#creating-grades","text":"","title":"Creating grades"},{"location":"Moodle/phpMoodleToolsPHPUnit/#other-types-of-plugin","text":"Any other type of plugin can have a generator. The generator class should extend component_generator_base , and then you can get an instance using $mygenerator = $this->getDataGenerator()->get_plugin_generator($frankenstylecomponentname); For some types of plugin, like mod documented above, there may be a more specific class than component_generator_base to extend, like testing_module_generator. That will give a consistent set of method names to use. Otherwise, you can create whatever methods you like on your generator, to create the different things you need to work whith.","title":"Other types of plugin"},{"location":"Moodle/phpMoodleToolsPHPUnit/#long-tests","text":"All standard test should execute as fast as possible. Tests that take a longer time to execute (>10s) or are otherwise expensive (such as querying external servers that might be flooded by all dev machines) should be execute only when PHPUNIT_LONGTEST is true. This constant can be set in phpunit.xml or directly in config.php.","title":"Long tests"},{"location":"Moodle/phpMoodleToolsPHPUnit/#large-test-data","text":"See advanced_testcase::createXMLDataSet() and advanced_testcase::createCsvDataSet() and related functions there for easier ways to manage large test data sets within files rather than arrays in code. See PHPUnit_integration#Extra_methods .","title":"Large test data"},{"location":"Moodle/phpMoodleToolsPHPUnit/#testing-sending-of-messages","text":"You can temporarily redirect all messages sent via message_send() to a message sink object. This allows developers to verify that the tested code is sending expected messages. To test code using messaging first disable the use of transactions and then redirect the messaging into a new message sink, you can inspect the results later. $this->preventResetByRollback(); $sink = $this->redirectMessages(); //... code that is sending messages $messages = $sink->get_messages(); $this->assertEquals(3, count($messages)); //.. test messages were generated in correct order with appropriate content Template:Moodle 4.4 Since 4.4 there are two new methods that support getting the messages for specific components and message types. $sink = $this->redirectMessages(); //... code that is sending messages $messages = $sink->get_messages_by_component('mod_forum'); $this->assertEquals(3, count($messages)); //.. test messages were generated in correct order with appropriate content $sink = $this->redirectMessages(); //... code that is sending messages $messages = $sink->get_messages_by_component_and_type('core', 'messagecontactrequests'); $this->assertEquals(3, count($messages)); //.. test messages were generated in correct order with appropriate content","title":"Testing sending of messages"},{"location":"Moodle/phpMoodleToolsPHPUnit/#testing-sending-of-emails","text":"You can temporarily redirect emails sent via email_to_user() to a email message sink object. This allows developers to verify that the tested code is sending expected emails. To test code using messaging first unset 'noemailever' setting and then redirect the emails into a new message sink where you can inspect the results later. unset_config('noemailever'); $sink = $this->redirectEmails(); //... code that is sending email $messages = $sink->get_messages(); $this->assertEquals(1, count($messages));","title":"Testing sending of emails"},{"location":"Moodle/phpMoodleToolsPHPUnit/#logstores","text":"You can test events which were written to a logstore, but you must disable transactions, enable at least one valid logstore, and disable logstore buffering to ensure that the events are written to the database before the tests execute. $this->preventResetByRollback(); set_config('enabled_stores', 'logstore_standard', 'tool_log'); set_config('buffersize', 0, 'logstore_standard'); get_log_manager(true);","title":"Logstores"},{"location":"Moodle/phpMoodleToolsPHPUnit/#check-your-coverage","text":"PHPUnit has the ability to generate code coverage information for your unit tests. Prior to Moodle 3.7, this coverage would load all files and generate coverage for everything regardless of whether that file could be covered at all, or whether it was intentionally covered. Since Moodle 3.7 the phpunit.xml configuration contains generated coverage include and exclude information for each component.","title":"Check your coverage"},{"location":"Moodle/phpMoodleToolsPHPUnit/#generating-include-and-exclude-configuration","text":"You can programatically describe which files will be checked for coverage by creating a coverage.php file alongside the tests that you are writing. Since Moodle 4.0, a default configuration is applied for all plugins and it is not necessary to supply a coverage.php unless you wish to cover additional files. The coverage.php file allows you to list include and exclude files and folders within the component being tested. All paths specified are relative to the component being tested. For example, when working with mod_forum your code will be in mod/forum , and its unit tests will be in mod/forum/tests/example_test.php . The coverage file for this would be in mod/forum/tests/coverage.php and all paths specified would be relative to mod/forum . It is possible to specify a combination of included files, included folders, excluded files, and excluded folders. This would allow you, for example, to include the entire classes directory, but exclude a specific file or folder within it. The following is an example coverage.php file from mod_forum: Note: For Moodle versions 3.7 to 3.10, the syntax used was slightly different. return new class extends phpunit_coverage_info { /** @var array The list of folders relative to the plugin root to include in coverage generation. */ protected $includelistfolders = [ 'classes', 'externallib.php', ]; /** @var array The list of files relative to the plugin root to include in coverage generation. */ protected $includelistfiles = []; /** @var array The list of folders relative to the plugin root to exclude from coverage generation. */ protected $excludelistfolders = []; /** @var array The list of files relative to the plugin root to exclude from coverage generation. */ protected $excludelistfiles = []; }; Also, note that you can better define which class or function each test is effectively covering by using the @covers annotation. Since Moodle 4.0, the following default configuration is applied: return new class extends phpunit_coverage_info { /** @var array The list of folders relative to the plugin root to include in coverage generation. */ protected $includelistfolders = [ 'classes', 'tests/generator', ]; /** @var array The list of files relative to the plugin root to include in coverage generation. */ protected $includelistfiles = [ 'externallib.php', 'lib.php', 'locallib.php', 'renderer.php', 'rsslib.php', ]; /** @var array The list of folders relative to the plugin root to exclude from coverage generation. */ protected $excludelistfolders = []; /** @var array The list of files relative to the plugin root to exclude from coverage generation. */ protected $excludelistfiles = []; }; If a coverage.php file already exists, then the defaults will be added to the values already defined.","title":"Generating include and exclude configuration"},{"location":"Moodle/phpMoodleToolsPHPUnit/#run-tests","text":"","title":"Run Tests"},{"location":"Moodle/phpMoodleToolsPHPUnit/#debugging-and-troubleshooting","text":"Reinitialize PHPUnit : If tests fail due to environment setup issues, reinitialize PHPUnit: php admin/tool/phpunit/cli/init.php Check PHPUnit Version : Ensure compatibility with Moodle's required PHPUnit version. Enable Debugging : Modify config.php to enable debugging: $CFG->debug = (E_ALL | E_STRICT); $CFG->debugdisplay = true;","title":"Debugging and Troubleshooting"},{"location":"Moodle/phpMoodleToolsPHPUnit/#best-practices-for-writing-tests","text":"","title":"Best Practices for Writing Tests"},{"location":"Moodle/phpMoodleToolsPHPUnit/#advanced-usage","text":"","title":"Advanced Usage"},{"location":"Moodle/phpMoodleXMLDB/","text":"The XMLDB editor is a powerful feature within Moodle that assists developers in creating and managing database schemas for Moodle plugins. It provides a graphical interface to define database tables, fields, keys, indexes, and other database elements, which are then used to generate the install.xml file. This file is crucial for defining the structure of the database tables your plugin will use. Previously, developers had to make separate .sql install files for mysql and postgres, but now only database-neutral file is needed, which supports many more databases. Moodle's XMLDB editor is a tool that allows developers to create and edit XML files that define the structure of Moodle's database. These XML files are used by Moodle during the installation process to create the database tables. XMLDB is Moodle\u2019s database abstraction layer. The XMLDB editor is a tool for generating XML files that specify the structure of database tables. In every module (or other plugin) folder, there is a db/ folder where the database structure is stored. The web server needs write access to all db/ directories. The XMLDB database definition is stored in the file db/install.xml. For more details, refer to XMLDB Documentation . Accessing the XMLDB Editor Navigate to the Development Tools : In your Moodle site, go to the site administration block. Navigate to Site administration > Development > XMLDB editor . Note: You should create a folder named db in the plugin directory where you wish to create the XMLDB files. The db folder should be writeable by your web server. Otherwise, you will not be able to save your changes from the XMLDB editor. Locate the plugin whose database tables you wish to create/edit. Select or Create a New XML File : If you already have an install.xml file, you can load it into the editor. The XMLDB tool will generate the install.xml file based on your definitions. Otherwise, you can create a new XML file by selecting the appropriate option. To first create a install.xml , go to your project an add a db folder. After doing that the [Create] option will be accessible. Click Create (This will create a blank install.xml file). Then, press [Load] (This will load the contents of the install.xml file into memory) and then [Edit]. Remember always to save to reflect all the changes made. Also remember to [add mandatory persistent fields]. Note : To be able to handle files properly, the web server needs write access to all db directories where the install.xml files reside (and to the files themselves, of course). If you cannot click either the load or create link, that means that you either have not created the /db directory, or that it is not writeable by the webserver. Creating a New Table Add a Table : Click on the [Create] link. Provide a name for your table following the conventions. Table names should be unique and prefixed with your plugin's name to avoid conflicts (e.g., yourpluginname_table ). Define Table Fields : After creating the table, you will need to define the fields (columns) for this table. Click on the [Add new field] link to add each field. For each field, specify the following properties: Name : The name of the field. Type : The data type of the field (e.g., INT, CHAR, TEXT). Length/Precision : The length or precision for the field, if applicable. Unsigned : Check if the field should be unsigned (only for numerical fields). Not Null : Check if the field should not allow NULL values. Auto Increment : Check if the field should auto-increment (typically for primary keys). Set Primary Keys : Typically, you need a primary key in your table. Click on the [New Key] option and select the field(s) that will act as the primary key. Add Indexes : If your table requires indexes, click on the [Create new index] link. Define the fields that will be included in the index and specify whether it is unique. Add Foreign Keys : To create relationships between tables, you can add foreign keys. To add a new foreign key, simply click on [New Key] in the table edit mode, then name the key change type to foreign and complete the reftable and reffields as appropriate. The name of the foreign key and the fields can be the same. Whilst editing tables you will see their fields, keys and indexes and you'll be able to handle all them easily. Note that some fields can be non-editable. This is because they are being used in some way (part of one key or index) and the idea is to warn you about that. If you define a field as an enum, you should provide the enum options as a comma-separated list, with each option surrounded by single quotes. Example: 'option1','option2','option3'. However, enum has been deprecated in Moodle 2.0, so it is probably better just to avoid enum types altogether. Generating the install.xml File Save the XML : After defining all tables and their fields, keys, and indexes, save your work. The XMLDB tool will generate the install.xml file based on your definitions. When you're done, keep clicking Back and Back to Main until you get back to the list of XMLDB locations, and then click Save. Verify the XML : Review the generated install.xml file to ensure it matches your expectations. The file should be placed in the db directory of your plugin (e.g., mod/yourpluginname/db/install.xml ). Using the install.xml in Your Plugin Database Installation : Only When your plugin is installed, Moodle will read the install.xml file to create the database tables accordingly. If the plugin is already installed, then the install.xml file will not be used but the upgrade.php file will be used instead. Ensure your version.php and db/install.xml files are correctly set up to trigger the installation process. Handling Database Upgrades : If you need to modify your database schema after the initial installation, you will use the upgrade.php script in the db directory. After the initial installation of a plugin, for subsequent updates to the plugin's table structure you'll need to manually create an upgrade.php file in your module's db folder. The upgrade.php file should start off looking something like this: <?php function xmldb_mymodule_upgrade ( $oldversion ) { global $CFG ; $result = TRUE ; // Insert PHP code from XMLDB Editor here return $result ; } ?> To get the code for the '// Insert PHP code here' bit, open the XMLDB Editor and load the relevant install.xml file. Choose the 'View PHP Code' option and then copy and paste the generated code. Use the XMLDB editor to generate the necessary XML snippets and translate them into PHP code for upgrade.php . Simply copy and paste the code into your upgrade.php file. Clicking in the [View PHP code] will show you the generated code in the editor. The install.xml for a plugin is only used during plugin install. After that it is never used. Therefore, if you need to make database schema changes to a plugin that is already installed, you will need to do it from the upgrade.php script. The Upgrade API is a core API which allows your plugin to manage features of its own installation, and upgrade. Every plugin includes a version which allows the Upgrade API to apply only the required changes. The upgrade.php script for a plugin is located in it's db/ folder. The upgrade.php file describes the steps used to upgrade the plugin from one version to a newer version. Plugins cannot be downgraded. The version.php file records the version of the plugin code. You must increase version in version.php after any change in the db/ folder, because a new version triggers the upgrade procedure and resets all caches. The XMLDB editor can help generate the PHP code to use in the upgrade process. The XMLDB editor provides an option to View PHP code for the loaded DB schema. Best Practices and Desing Guidelines Consistent Naming : Use consistent and descriptive names for tables and fields. Prefix them with your plugin name to avoid conflicts. Documentation : Comment and document each field, key, and index to clarify their purpose and constraints. Validation : Regularly validate your install.xml against the Moodle coding guidelines to ensure compliance. Also, ensure your version.php and db/install.xml files are correctly set up to trigger the installation process. The upgrade.php file uses the version number from the version.php file. Testing : Thoroughly test the installation and upgrade processes on a development environment before deploying to production. Database design guidelines : Table names: All tables owned by a plugin should start with the full component name of the plugin, potentially followed by the plural name of the entity stored in the table. Activity modules are an exception to this rule. They do not have the mod_ plugin type in their name. Their main table containing instances of the module must contain fields id, course, and name. Primary keys: Every table must have an auto-incrementing id field of the type int(10) set as its primary key, even if the table has other candidate keys. Table and column name lengths: The maximum length of a table name is 28 characters. The maximum length of a column name is 30 characters. Column names: Column names should always be lower-case, simple, and short, following the same rules as for variable names. Reserved words: Table and column names should avoid using reserved words. Foreign keys: Columns that act as foreign keys and contain a reference to the id field in another table should be named {table_name}id. Boolean fields: Boolean fields should be defined as integer fields int(2) and contain values 0 or 1 for false and true respectively. Dates and times: Dates and times should be stored as UNIX timestamps in int(10) fields. Default values: A sensible default value should be defined where appropriate. Database structure: Database structure should not change on stable maintenance branches. Conventions Apart from the Database Structures guidelines , some more conventions should be followed: Names All lowercase names (tables, indexes, keys and fields). Table names and field names must use only a-z, 0-9 and _ chars. Max 53 characters for tables and 63 characters for fields (28 and 30 before Moodle 4.3). Caution If you are writing a plugin intended for older versions of Moodle then you must continue to use the lower limits of 28, and 30. Key and index names under the XMLDB Files must be formed by concatenating the name of the fields present in the key/index with the '\"-\" (minus) character. Primary key always must be named \"primary\" (this is one exception to the previous convention). It's highly recommended to avoid reserved words completely. We know we have some of them now but they should be completely out for next releases. About NULLS Avoid to create all the fields as NOT NULL with the silly default value * (empty string). The underlying code used to create tables will handle it properly but the XMLDB structure must be REAL. Read more in the Problems Page . About FOREIGN KEYS Under the tables of every XMLDB file, you must define the existing Foreign Keys (FK) properly. This will allow everybody to know a bit better the structure, allow to evolve to a better constrained system in the future and will provide the underlying code with the needed info to create the proper indexes. Note that, if you define any field combination as FK you won't have to create any index on that fields, the code will do it automatically! About UNIQUE KEYS Declare any fields as UNIQUE KEY (UK) only if they are going to be used as target for one FK. Create unique indexes instead.","title":"XMLDB Editor"},{"location":"Moodle/phpMoodleXMLDB/#accessing-the-xmldb-editor","text":"Navigate to the Development Tools : In your Moodle site, go to the site administration block. Navigate to Site administration > Development > XMLDB editor . Note: You should create a folder named db in the plugin directory where you wish to create the XMLDB files. The db folder should be writeable by your web server. Otherwise, you will not be able to save your changes from the XMLDB editor. Locate the plugin whose database tables you wish to create/edit. Select or Create a New XML File : If you already have an install.xml file, you can load it into the editor. The XMLDB tool will generate the install.xml file based on your definitions. Otherwise, you can create a new XML file by selecting the appropriate option. To first create a install.xml , go to your project an add a db folder. After doing that the [Create] option will be accessible. Click Create (This will create a blank install.xml file). Then, press [Load] (This will load the contents of the install.xml file into memory) and then [Edit]. Remember always to save to reflect all the changes made. Also remember to [add mandatory persistent fields]. Note : To be able to handle files properly, the web server needs write access to all db directories where the install.xml files reside (and to the files themselves, of course). If you cannot click either the load or create link, that means that you either have not created the /db directory, or that it is not writeable by the webserver.","title":"Accessing the XMLDB Editor"},{"location":"Moodle/phpMoodleXMLDB/#creating-a-new-table","text":"Add a Table : Click on the [Create] link. Provide a name for your table following the conventions. Table names should be unique and prefixed with your plugin's name to avoid conflicts (e.g., yourpluginname_table ). Define Table Fields : After creating the table, you will need to define the fields (columns) for this table. Click on the [Add new field] link to add each field. For each field, specify the following properties: Name : The name of the field. Type : The data type of the field (e.g., INT, CHAR, TEXT). Length/Precision : The length or precision for the field, if applicable. Unsigned : Check if the field should be unsigned (only for numerical fields). Not Null : Check if the field should not allow NULL values. Auto Increment : Check if the field should auto-increment (typically for primary keys). Set Primary Keys : Typically, you need a primary key in your table. Click on the [New Key] option and select the field(s) that will act as the primary key. Add Indexes : If your table requires indexes, click on the [Create new index] link. Define the fields that will be included in the index and specify whether it is unique. Add Foreign Keys : To create relationships between tables, you can add foreign keys. To add a new foreign key, simply click on [New Key] in the table edit mode, then name the key change type to foreign and complete the reftable and reffields as appropriate. The name of the foreign key and the fields can be the same. Whilst editing tables you will see their fields, keys and indexes and you'll be able to handle all them easily. Note that some fields can be non-editable. This is because they are being used in some way (part of one key or index) and the idea is to warn you about that. If you define a field as an enum, you should provide the enum options as a comma-separated list, with each option surrounded by single quotes. Example: 'option1','option2','option3'. However, enum has been deprecated in Moodle 2.0, so it is probably better just to avoid enum types altogether.","title":"Creating a New Table"},{"location":"Moodle/phpMoodleXMLDB/#generating-the-installxml-file","text":"Save the XML : After defining all tables and their fields, keys, and indexes, save your work. The XMLDB tool will generate the install.xml file based on your definitions. When you're done, keep clicking Back and Back to Main until you get back to the list of XMLDB locations, and then click Save. Verify the XML : Review the generated install.xml file to ensure it matches your expectations. The file should be placed in the db directory of your plugin (e.g., mod/yourpluginname/db/install.xml ).","title":"Generating the install.xml File"},{"location":"Moodle/phpMoodleXMLDB/#using-the-installxml-in-your-plugin","text":"Database Installation : Only When your plugin is installed, Moodle will read the install.xml file to create the database tables accordingly. If the plugin is already installed, then the install.xml file will not be used but the upgrade.php file will be used instead. Ensure your version.php and db/install.xml files are correctly set up to trigger the installation process. Handling Database Upgrades : If you need to modify your database schema after the initial installation, you will use the upgrade.php script in the db directory. After the initial installation of a plugin, for subsequent updates to the plugin's table structure you'll need to manually create an upgrade.php file in your module's db folder. The upgrade.php file should start off looking something like this: <?php function xmldb_mymodule_upgrade ( $oldversion ) { global $CFG ; $result = TRUE ; // Insert PHP code from XMLDB Editor here return $result ; } ?> To get the code for the '// Insert PHP code here' bit, open the XMLDB Editor and load the relevant install.xml file. Choose the 'View PHP Code' option and then copy and paste the generated code. Use the XMLDB editor to generate the necessary XML snippets and translate them into PHP code for upgrade.php . Simply copy and paste the code into your upgrade.php file. Clicking in the [View PHP code] will show you the generated code in the editor. The install.xml for a plugin is only used during plugin install. After that it is never used. Therefore, if you need to make database schema changes to a plugin that is already installed, you will need to do it from the upgrade.php script. The Upgrade API is a core API which allows your plugin to manage features of its own installation, and upgrade. Every plugin includes a version which allows the Upgrade API to apply only the required changes. The upgrade.php script for a plugin is located in it's db/ folder. The upgrade.php file describes the steps used to upgrade the plugin from one version to a newer version. Plugins cannot be downgraded. The version.php file records the version of the plugin code. You must increase version in version.php after any change in the db/ folder, because a new version triggers the upgrade procedure and resets all caches. The XMLDB editor can help generate the PHP code to use in the upgrade process. The XMLDB editor provides an option to View PHP code for the loaded DB schema.","title":"Using the install.xml in Your Plugin"},{"location":"Moodle/phpMoodleXMLDB/#best-practices-and-desing-guidelines","text":"Consistent Naming : Use consistent and descriptive names for tables and fields. Prefix them with your plugin name to avoid conflicts. Documentation : Comment and document each field, key, and index to clarify their purpose and constraints. Validation : Regularly validate your install.xml against the Moodle coding guidelines to ensure compliance. Also, ensure your version.php and db/install.xml files are correctly set up to trigger the installation process. The upgrade.php file uses the version number from the version.php file. Testing : Thoroughly test the installation and upgrade processes on a development environment before deploying to production. Database design guidelines : Table names: All tables owned by a plugin should start with the full component name of the plugin, potentially followed by the plural name of the entity stored in the table. Activity modules are an exception to this rule. They do not have the mod_ plugin type in their name. Their main table containing instances of the module must contain fields id, course, and name. Primary keys: Every table must have an auto-incrementing id field of the type int(10) set as its primary key, even if the table has other candidate keys. Table and column name lengths: The maximum length of a table name is 28 characters. The maximum length of a column name is 30 characters. Column names: Column names should always be lower-case, simple, and short, following the same rules as for variable names. Reserved words: Table and column names should avoid using reserved words. Foreign keys: Columns that act as foreign keys and contain a reference to the id field in another table should be named {table_name}id. Boolean fields: Boolean fields should be defined as integer fields int(2) and contain values 0 or 1 for false and true respectively. Dates and times: Dates and times should be stored as UNIX timestamps in int(10) fields. Default values: A sensible default value should be defined where appropriate. Database structure: Database structure should not change on stable maintenance branches.","title":"Best Practices and Desing Guidelines"},{"location":"Moodle/phpMoodleXMLDB/#conventions","text":"Apart from the Database Structures guidelines , some more conventions should be followed:","title":"Conventions"},{"location":"Moodle/phpMoodleXMLDB/#names","text":"All lowercase names (tables, indexes, keys and fields). Table names and field names must use only a-z, 0-9 and _ chars. Max 53 characters for tables and 63 characters for fields (28 and 30 before Moodle 4.3). Caution If you are writing a plugin intended for older versions of Moodle then you must continue to use the lower limits of 28, and 30. Key and index names under the XMLDB Files must be formed by concatenating the name of the fields present in the key/index with the '\"-\" (minus) character. Primary key always must be named \"primary\" (this is one exception to the previous convention). It's highly recommended to avoid reserved words completely. We know we have some of them now but they should be completely out for next releases.","title":"Names"},{"location":"Moodle/phpMoodleXMLDB/#about-nulls","text":"Avoid to create all the fields as NOT NULL with the silly default value * (empty string). The underlying code used to create tables will handle it properly but the XMLDB structure must be REAL. Read more in the Problems Page .","title":"About NULLS"},{"location":"Moodle/phpMoodleXMLDB/#about-foreign-keys","text":"Under the tables of every XMLDB file, you must define the existing Foreign Keys (FK) properly. This will allow everybody to know a bit better the structure, allow to evolve to a better constrained system in the future and will provide the underlying code with the needed info to create the proper indexes. Note that, if you define any field combination as FK you won't have to create any index on that fields, the code will do it automatically!","title":"About FOREIGN KEYS"},{"location":"Moodle/phpMoodleXMLDB/#about-unique-keys","text":"Declare any fields as UNIQUE KEY (UK) only if they are going to be used as target for one FK. Create unique indexes instead.","title":"About UNIQUE KEYS"},{"location":"Moodle/API/phpMoodleAccess/","text":"The Access API gives you functions so you can determine what the current user is allowed to do. It also allows plugins to extend Moodle with new capabilities. Overview Moodle uses a role-based access control model. Entities are represented by contexts which are arranged into a tree-like hierarchy known as the context tree. The following context types are available: Context name Represents Immediate contents Notes context_system The site as a whole user, course category, module, and block The System context is root context in the tree. There is only one System context context_user An individual user block Each user has their own, unique, context context_coursecat A single course category course category, course, block context_course A single course module, block context_module An activity block context_block A block none A Role is a set of capability definitions, where each capability represents something that the user is able to do. Roles are defined at the top most context in the context tree, the System context. Roles can be overridden by contexts further down the tree. User access is calculated from the combination of roles which are assigned to each user. All users that did not log-in yet automatically get the default role defined in $CFG->notloggedinroleid , it is not possible to assign any other role to this non-existent user id. There is one special guest user account that is used when user logs in using the guest login button or when guest auto-login is enabled. Again you can not assign any roles to the guest account directly, this account gets the $CFG->guestroleid automatically. All other authenticated users get the default user role specified in $CFG->defaultuserroleid and in the frontpage context the role specified in $CFG->defaultfrontpageroleid . How to define new capabilities in plugins Capabilities are defined by $capabilities array defined in db/access.php files. The name of the capability consists of plugintype/pluginname:capabilityname . For example: // mod/folder/db/access.php $capabilities = [ 'mod/folder:managefiles' => [ 'riskbitmask' => RISK_SPAM, 'captype' => 'write', 'contextlevel' => CONTEXT_MODULE, 'archetypes' => [ 'editingteacher' => CAP_ALLOW, ], ], ]; Where the meaning of array keys is: Field Description riskbitmask associated risks. These are explained on Hardening new Roles system . captype read or write capability type, for security reasons system prevents all write capabilities for guest account and not-logged-in users contextlevel specified as context level constant. Declares the typical context level where this capability is checked. This capability can be checked with contexts that are at a lower level (e.g. moodle/site:accessallgroups could be checked with CONTEXT_MODULE). archetypes specifies defaults for roles with standard archetypes, this is used in installs, upgrades and when resetting roles (it is recommended to use only CAP_ALLOW here). Archetypes are defined in mdl_role table. See also Role archetypes. clonepermissionsfrom when you are adding a new capability, you can tell Moodle to copy the permissions for each role from the current settings for another capability. This may give better defaults than just using archetypes for administrators who have heavily customised their roles configuration. The full syntax is: clonepermissionsfrom => moodle/quiz:attempt It is necessary to bump up plugin version number after any change in db/access.php, so that the upgrade scripts can make the necessary changes to the database. To run the upgrade scripts, log in to Moodle as administrator, navigate to the site home page, and follow the instructions. The capability names are defined in plugin language files, the name of the string consists of \"pluginname:capabilityname\", in the example above it would be: // mod/folder/lang/en/folder.php $string['folder:managefiles'] = 'Manage files in folder module'; Risk bitmask Capabilities can have a riskbitmask. Each bit indicates the presence of different risk associated with given capability. Basic risks include: RISK_SPAM - user can add a visible content to a site, send messages to other users. RISK_PERSONAL - access to private personal information, for example backups with user details, non-public information in profile (hidden email). RISK_XSS - user can submit content that is not cleaned (both HTML with JavaScript content and unprotected files). RISK_CONFIG - user can change global configuration, actions are missing sanity checks. RISK_MANAGETRUST - manage trust bitmasks of other users. RISK_DATALOSS - can destroy large amounts of information that cannot easily be recovered. Note: In default configuration, Guest role should have only capabilities without risks. Admin users have all capabilities by default. Consider the snippet from a capability definition file for a grade export plugin. // grade/export/ods/db/access.php $capabilities = [ 'gradeexport/ods:view' => [ 'riskbitmask' => RISK_PERSONAL, 'captype' => 'read', 'contextlevel' => CONTEXT_COURSE, 'archetypes' => [ 'teacher' => CAP_ALLOW, 'editingteacher' => CAP_ALLOW, 'manager' => CAP_ALLOW ], ], ]; The gradeexport/ods:view capability: Applies at the course context level. Allows read access. Has a risk of providing access to personal user information. Is allowed for teacher, editingteacher and manager roles by default. Multiple risks in a capability Some capabilities can have multiple risks associated with them. These can be defined using the pipe (|) character, for example: 'riskbitmask' => RISK_PERSONAL | RISK_XSS, Deprecating a capability When a capability is no longer needed or is replaced by another, it should be deprecated. The timeline for deprecation should follow the normal Deprecation process. To mark a capability as deprecated, edit the access.php containing the capability, remove it from the $capabilities array, and add it to the $deprecatedcapabilities array in this file. Entries in $deprecatedcapabilities can have a replacement key indicating a new or existing capability that replaces the deprecated one. If this is specified, any checks to the deprecated capability will check the replacement capability instead. A debugging message will always be output at DEBUG_DEVELOPER level if a deprecated capability is checked. $deprecatedcapabilities can also define an optional message explaining the deprecation. The following example demonstrates an access.php file where a capability has been deprecated and replaced with another. // mod/folder/db/access.php $capabilities = [ 'mod/folder:newmanagefiles' => [ 'riskbitmask' => RISK_SPAM, 'captype' => 'write', 'contextlevel' => CONTEXT_MODULE, 'archetypes' => [ 'editingteacher' => CAP_ALLOW, ], ], ]; $deprecatedcapabilities = [ 'mod/folder:managefiles' => [ 'replacement' => 'mod/folder:newmanagefiles', 'message' => 'This was replaced with another capability' ], ]; Useful functions and classes Context fetching In plugins context instances are usually only instantiated because they are instantiated and deleted automatically by the system. Fetching by object id: $systemcontext = context_system::instance(); $usercontext = context_user::instance($user->id); $categorycontext = context_coursecat::instance($category->id); $coursecontext = context_course::instance($course->id); $contextmodule = context_module::instance($cm->id); $contextblock = context_block::instance($this->instance->id); Fetching by context id: $context = context::instance_by_id($contextid); Notes: by default exception is thrown if context can not be created deleted users do not have contexts any more Determining that a user has a given capability When implementing access control always ask \"Does the user have capability to do something?\". It is incorrect to ask \"Does the user have a role somewhere?\". has_capability() has_capability() is the most important function: function has_capability( string $capability, context $context, object $user = null, bool $doanything = true ): bool; Check whether a user has a particular capability in a given context. For example: $context = context_module::instance($cm->id); if (has_capability('mod/folder:managefiles', $context)) { // Do or display something. } By default checks the capabilities of the current user, but you can pass a different user id. By default will return true for admin users, it is not recommended to use false here. Use has_capability() to wrap access to certain features based on a user's permissions. Do not provide access to functionality by checking what a user's role is. Roles can be configured differently on different sites/contexts. $userrole = get_user_role($contextid); if ($userrole == 'editingteacher') { // Do something specific for teacher role. } if ($userrole == 'student') { // Do something specific for student role. } Instead, use require_capability() to block access to a page if the user does not have the required permissions or has_capability() to wrap access to certain features based on a user's permissions. // Check if the user has a given capability in a particular context. $context = context_module::instance($cm->id); if (has_capability('mod/mymodule:edit', $context)) { // Something for users with editing access. } if (has_capability('mod/mymodule:view', $context)) { // Do something for users with viewing access. } It is also important to use the correct context when doing capability checks. Each role and its permissions are checked against a given context. require_capability() Function require_capability() is very similar, it is throwing access control exception if user does not have the capability. function require_capability($capability, context $context, $userid = null, $doanything = true, $errormessage = 'nopermissions', $stringfile = _) { Use require_capability() to block access to a page if the user does not have the required permissions. Enrolment functions See Enrolment API. Authentication Authentication is used to determine the identify of the user accessing the system. It is important to verify that the user is exactly who they are claiming to be. Proper authentication of the user helps avoid unauthenticated access. Moodle can have different authentication plugins that authenticate the user in different ways. Most authentication issues are taken care of by the Moodle system and the authentication plugins. In almost every Moodle script you create, add a call to require_login() or require_course_login() as near the start as possible, usually after setting up $PAGE->url. The only exception to this is a few pages like the front page, which should be available to everyone. function require_login($courseorid = null, $autologinguest = true, $cm = null, $setwantsurltome = true, $preventredirect = false) function require_course_login($courseorid, $autologinguest = true, $cm = null, $setwantsurltome = true, $preventredirect = false) require_login() Each plugin script should include require_login() or require_course_login() after setting up PAGE->url. This function does following: it verifies that user is logged in before accessing any course or activities (not-logged-in users can not enter any courses). If a user is not logged in, then it redirects them to the site login. verify access to hidden courses and activities if an activity is specified, verify any availability restrictions for the activity verify that user is either enrolled or has capability moodle/course:view or some enrol plugin gives them temporary guest access logs access to courses If $autologinguest is set and $CFG->autologinguests is set to 1, then user is automatically logged in as guest. If $courseorid is set then it checks if user can view the course. If $cm is set then it also checks that the user has permissions to view the particular module. require_course_login() This function is supposed to be used only in activities that want to allow read access to content on the frontpage without logging-in. For example view resource files, reading of glossary entries, etc. isguestuser(), isloggedin() and is_siteadmin() function isguestuser($user = null) function isloggedin() function is_siteadmin($user_or_id = null) These function were previously needed for limiting of access of special accounts. It is usually not necessary any more, because any write or risky capabilities are now automatically prevented in has_capability(). It is strongly discouraged to use is_siteadmin() in activity modules, please use standard capabilities and enrolment status instead. is_guest(), is_viewing() and is_enrolled() function is_enrolled(context $context, $user = null, $withcapability = '', bool $onlyactive ) function is_guest(context $context, $user = null) function is_viewing(context $context, $user = null, $withcapability = _) In order to access course data one of these functions must return true for user: is_enrolled() - user has active record in user_enrolments table is_viewing() - user has 'moodle/course:view' capability (may access course, but is not considered to be participant) is_guest() - user was given temporary guest access by some enrolment plugin get_users_by_capability() This method returns list of users with given capability, it ignores enrolment status and should be used only above the course context. function get_users_by_capability(context $context, $capability, $fields = _, $sort = _, $limitfrom = _, $limitnum = _, $groups = _, $exceptions = _, $doanything_ignored = null, $view_ignored = null, $useviewallgroups = false) Capability overview tool Moodle provides a tool to check and compare the capabilities, their associated risks, and which roles have access to them by default. This can be accessed from Site administration > Users > Permissions > Capability overview .","title":"Access API"},{"location":"Moodle/API/phpMoodleAccess/#overview","text":"Moodle uses a role-based access control model. Entities are represented by contexts which are arranged into a tree-like hierarchy known as the context tree. The following context types are available: Context name Represents Immediate contents Notes context_system The site as a whole user, course category, module, and block The System context is root context in the tree. There is only one System context context_user An individual user block Each user has their own, unique, context context_coursecat A single course category course category, course, block context_course A single course module, block context_module An activity block context_block A block none A Role is a set of capability definitions, where each capability represents something that the user is able to do. Roles are defined at the top most context in the context tree, the System context. Roles can be overridden by contexts further down the tree. User access is calculated from the combination of roles which are assigned to each user. All users that did not log-in yet automatically get the default role defined in $CFG->notloggedinroleid , it is not possible to assign any other role to this non-existent user id. There is one special guest user account that is used when user logs in using the guest login button or when guest auto-login is enabled. Again you can not assign any roles to the guest account directly, this account gets the $CFG->guestroleid automatically. All other authenticated users get the default user role specified in $CFG->defaultuserroleid and in the frontpage context the role specified in $CFG->defaultfrontpageroleid .","title":"Overview"},{"location":"Moodle/API/phpMoodleAccess/#how-to-define-new-capabilities-in-plugins","text":"Capabilities are defined by $capabilities array defined in db/access.php files. The name of the capability consists of plugintype/pluginname:capabilityname . For example: // mod/folder/db/access.php $capabilities = [ 'mod/folder:managefiles' => [ 'riskbitmask' => RISK_SPAM, 'captype' => 'write', 'contextlevel' => CONTEXT_MODULE, 'archetypes' => [ 'editingteacher' => CAP_ALLOW, ], ], ]; Where the meaning of array keys is: Field Description riskbitmask associated risks. These are explained on Hardening new Roles system . captype read or write capability type, for security reasons system prevents all write capabilities for guest account and not-logged-in users contextlevel specified as context level constant. Declares the typical context level where this capability is checked. This capability can be checked with contexts that are at a lower level (e.g. moodle/site:accessallgroups could be checked with CONTEXT_MODULE). archetypes specifies defaults for roles with standard archetypes, this is used in installs, upgrades and when resetting roles (it is recommended to use only CAP_ALLOW here). Archetypes are defined in mdl_role table. See also Role archetypes. clonepermissionsfrom when you are adding a new capability, you can tell Moodle to copy the permissions for each role from the current settings for another capability. This may give better defaults than just using archetypes for administrators who have heavily customised their roles configuration. The full syntax is: clonepermissionsfrom => moodle/quiz:attempt It is necessary to bump up plugin version number after any change in db/access.php, so that the upgrade scripts can make the necessary changes to the database. To run the upgrade scripts, log in to Moodle as administrator, navigate to the site home page, and follow the instructions. The capability names are defined in plugin language files, the name of the string consists of \"pluginname:capabilityname\", in the example above it would be: // mod/folder/lang/en/folder.php $string['folder:managefiles'] = 'Manage files in folder module';","title":"How to define new capabilities in plugins"},{"location":"Moodle/API/phpMoodleAccess/#risk-bitmask","text":"Capabilities can have a riskbitmask. Each bit indicates the presence of different risk associated with given capability. Basic risks include: RISK_SPAM - user can add a visible content to a site, send messages to other users. RISK_PERSONAL - access to private personal information, for example backups with user details, non-public information in profile (hidden email). RISK_XSS - user can submit content that is not cleaned (both HTML with JavaScript content and unprotected files). RISK_CONFIG - user can change global configuration, actions are missing sanity checks. RISK_MANAGETRUST - manage trust bitmasks of other users. RISK_DATALOSS - can destroy large amounts of information that cannot easily be recovered. Note: In default configuration, Guest role should have only capabilities without risks. Admin users have all capabilities by default. Consider the snippet from a capability definition file for a grade export plugin. // grade/export/ods/db/access.php $capabilities = [ 'gradeexport/ods:view' => [ 'riskbitmask' => RISK_PERSONAL, 'captype' => 'read', 'contextlevel' => CONTEXT_COURSE, 'archetypes' => [ 'teacher' => CAP_ALLOW, 'editingteacher' => CAP_ALLOW, 'manager' => CAP_ALLOW ], ], ]; The gradeexport/ods:view capability: Applies at the course context level. Allows read access. Has a risk of providing access to personal user information. Is allowed for teacher, editingteacher and manager roles by default.","title":"Risk bitmask"},{"location":"Moodle/API/phpMoodleAccess/#deprecating-a-capability","text":"When a capability is no longer needed or is replaced by another, it should be deprecated. The timeline for deprecation should follow the normal Deprecation process. To mark a capability as deprecated, edit the access.php containing the capability, remove it from the $capabilities array, and add it to the $deprecatedcapabilities array in this file. Entries in $deprecatedcapabilities can have a replacement key indicating a new or existing capability that replaces the deprecated one. If this is specified, any checks to the deprecated capability will check the replacement capability instead. A debugging message will always be output at DEBUG_DEVELOPER level if a deprecated capability is checked. $deprecatedcapabilities can also define an optional message explaining the deprecation. The following example demonstrates an access.php file where a capability has been deprecated and replaced with another. // mod/folder/db/access.php $capabilities = [ 'mod/folder:newmanagefiles' => [ 'riskbitmask' => RISK_SPAM, 'captype' => 'write', 'contextlevel' => CONTEXT_MODULE, 'archetypes' => [ 'editingteacher' => CAP_ALLOW, ], ], ]; $deprecatedcapabilities = [ 'mod/folder:managefiles' => [ 'replacement' => 'mod/folder:newmanagefiles', 'message' => 'This was replaced with another capability' ], ];","title":"Deprecating a capability"},{"location":"Moodle/API/phpMoodleAccess/#useful-functions-and-classes","text":"","title":"Useful functions and classes"},{"location":"Moodle/API/phpMoodleAccess/#context-fetching","text":"In plugins context instances are usually only instantiated because they are instantiated and deleted automatically by the system. Fetching by object id: $systemcontext = context_system::instance(); $usercontext = context_user::instance($user->id); $categorycontext = context_coursecat::instance($category->id); $coursecontext = context_course::instance($course->id); $contextmodule = context_module::instance($cm->id); $contextblock = context_block::instance($this->instance->id); Fetching by context id: $context = context::instance_by_id($contextid); Notes: by default exception is thrown if context can not be created deleted users do not have contexts any more","title":"Context fetching"},{"location":"Moodle/API/phpMoodleAccess/#determining-that-a-user-has-a-given-capability","text":"When implementing access control always ask \"Does the user have capability to do something?\". It is incorrect to ask \"Does the user have a role somewhere?\".","title":"Determining that a user has a given capability"},{"location":"Moodle/API/phpMoodleAccess/#enrolment-functions","text":"See Enrolment API.","title":"Enrolment functions"},{"location":"Moodle/API/phpMoodleAccess/#authentication","text":"Authentication is used to determine the identify of the user accessing the system. It is important to verify that the user is exactly who they are claiming to be. Proper authentication of the user helps avoid unauthenticated access. Moodle can have different authentication plugins that authenticate the user in different ways. Most authentication issues are taken care of by the Moodle system and the authentication plugins. In almost every Moodle script you create, add a call to require_login() or require_course_login() as near the start as possible, usually after setting up $PAGE->url. The only exception to this is a few pages like the front page, which should be available to everyone. function require_login($courseorid = null, $autologinguest = true, $cm = null, $setwantsurltome = true, $preventredirect = false) function require_course_login($courseorid, $autologinguest = true, $cm = null, $setwantsurltome = true, $preventredirect = false)","title":"Authentication"},{"location":"Moodle/API/phpMoodleAccess/#capability-overview-tool","text":"Moodle provides a tool to check and compare the capabilities, their associated risks, and which roles have access to them by default. This can be accessed from Site administration > Users > Permissions > Capability overview .","title":"Capability overview tool"},{"location":"Moodle/API/phpMoodleCache/","text":"Moodle Cache API: Overview and Usage The Cache API in Moodle is a powerful system designed to improve performance and efficiency by storing and retrieving frequently used data. It provides developers with a flexible and easy-to-use mechanism for implementing caching in their plugins or core functionalities. The Cache API, also known as MUC (Moodle Universal Cache), is a fundamental caching system within Moodle. Key Concepts of the Cache API Purpose : Reduce database queries and expensive computations by caching data. Architecture : Stores : Physical storage for cache data (e.g., file system, memory, Redis, Memcached). Definitions : Configuration settings for how data is cached. Keys : Identifiers used to store and retrieve data. Persistence Levels : Session Cache : Data persists for the duration of the user's session. Request Cache : Data persists for the duration of the current request. Application Cache : Data persists across multiple requests and sessions. Cache API Workflow Define Cache : Configure caching options in db/caches.php . Retrieve Cache : Use the Cache API to access the configured cache. Store and Retrieve Data : Interact with the cache using API methods like set , get , and delete . Purge Cache : Clear cache data when necessary, such as during debugging or when changes are made to cached items. 1. Defining a Cache Getting started with the Cache API is exceptionally straightforward. It's designed for quick and easy usage, emphasizing self-containment. All you need to do is add a definition for your cache and you are ready to start working with the Cache API. Caches are defined in the db/caches.php file of your plugin. This file registers the cache and specifies its behavior. In the case of core that is the lib/db/caches.php file, in the case of a module that would be mod/myplugin/db/caches.php. The definition is used API in order to understand a little about the cache and what it is being used for, it also allows the administrator to set things up especially for the definition if they want. From a development point of view the definition allows you to tell the API about your cache, what it requires, and any (if any) advanced features you want it to have. Example: db/caches.php defined('MOODLE_INTERNAL') || die(); $definitions = [ 'example_cache' => [ 'mode' => cache_store::MODE_APPLICATION, 'simplekeys' => true, // If true, keys must be simple strings. 'simpledata' => true, // If true, data must be simple (e.g., arrays, strings). 'ttl' => 3600, // Time to live in seconds (optional). ], ]; This informs the API that the myplugin module has a cache called example_cache and that it is an application (globally shared) cache. Key Fields : mode : Defines the cache scope ( MODE_SESSION , MODE_REQUEST , MODE_APPLICATION ). simplekeys : If true, keys must be simple strings; otherwise, complex keys are allowed. simpledata : If true, only simple data types (e.g., strings, arrays) can be cached. ttl : Time to live, in seconds. The cache expires after this duration. Basic definition with just the required mode: $definitions = array( // The name of the cache area is the key. The component/plugin will be picked up from the file location. 'area' => array( // [int] Required; Sets the mode for the definition. Must be one of cache_store::MODE_* 'mode' => cache_store::MODE_*, ) ); When creating a definition that's the bare minimum, to provide an area (somedata) and declare the type of the cache application, session, or request. An application cache is a shared cache, all users can access it. Session caches are scoped to a single users session, but may not actually be stored in the session. Request caches you can think of as static caches, only available to the user owning the request, and only alive until the end of the request. There are of course many more options available that allow you to really take the cache by the reigns, you can read about some of the important ones further on, or skip ahead to the definition section which details the available options in full. For each definition, a language string with the name cachedef_ followed by the name of the definition is expected. $string['cachedef_example_cache'] = 'This is the description of the cache example_cache'; Advanced definition: $definitions = array( // The name of the cache area is the key. The component/plugin will be picked up from the file location. 'area' => array( // [int] Required; Sets the mode for the definition. Must be one of cache_store::MODE_* 'mode' => cache_store::MODE_*, // All of the following options are default // [bool] Set to true if your cache will only use simple keys for its items. // Simple keys consist of digits, underscores and the 26 chars of the english language. a-zA-Z0-9_ // If true the keys won't be hashed before being passed to the cache store for gets/sets/deletes. It will be // better for performance and possible only becase we know the keys are safe. 'simplekeys' => false, // [bool] If set to true we know that the data is scalar or array of scalar. // If true, the data values will be stored as they are. Otherwise they will be serialised first. 'simpledata' => false, // [array] An array of identifiers that must be provided to the cache when it is created. 'requireidentifiers' => ['ident1', 'ident2'], // [bool] If set to true then only stores that can guarantee data will remain available once set will be used. 'requiredataguarantee' => false, // [bool] If set to true then only stores that support multiple identifiers will be used. 'requiremultipleidentifiers' => false, // [bool] If set to true then a lock will be gained before reading from the cache store. It is recommended not to use // this setting unless 100% absolutely positively required. Remember 99.9% of caches will NOT need this setting. // This setting will only be used for application caches presently. 'requirelockingread' => false, // [bool] If set to true then a lock will be gained before writing to the cache store. As above this is not recommended // unless truly needed. Please think about the order of your code and deal with race conditions there first. // This setting will only be used for application caches presently. 'requirelockingwrite' => false, // [int] If set this will be used as the maximum number of entries within the cache store for this definition. // Its important to note that cache stores don't actually have to acknowledge this setting or maintain it as a hard limit. 'maxsize' => null, // [string] A class to use as the loader for this cache. This is an advanced setting and will allow the developer of the // definition to take 100% control of the caching solution. // Any class used here must inherit the cache_loader interface and must extend default cache loader for the mode they are using. 'overrideclass' => null, // [string] Suplements the above setting indicated the file containing the class to be used. This file is included when required. 'overrideclassfile' => null, // [string] A class to use as the data loader for this definition. // Any class used here must inherit the cache_data_loader interface. 'datasource' => null, // [string] Suplements the above setting indicated the file containing the class to be used. This file is included when required. 'datasourcefile' => null, // [bool] This setting does two important things. First it tells the cache API to only instantiate the cache structure for // this definition once, further requests will be given the original instance. // Second the cache loader will keep an array of the items set and retrieved to the cache during the request. // This has several advantages including better performance without needing to start passing the cache instance between // function calls, the downside is that the cache instance + the items used stay within memory. // Consider using this setting when you know that there are going to be many calls to the cache for the same information // or when you are converting existing code to the cache and need to access the cache within functions but don't want // to add it as an argument to the function. 'staticacceleration' => false, // [int] This supplements the above setting by limiting the number of items in the caches persistent array of items. // Tweaking this setting lower will allow you to minimise the memory implications above while hopefully still managing to // offset calls to the cache store. 'staticaccelerationsize' => null, // [int] A time to live for the data (in seconds). It is strongly recommended that you don't make use of this and // instead try to create an event driven invalidation system. // Not all cache stores will support this natively and there are undesired performance impacts if the cache store does not. 'ttl' => 0, // [bool] If set to true only the mapped cache store(s) will be used and the default mode store will not. This is a super // advanced setting and should not be used unless absolutely required. It allows you to avoid the default stores for one // reason or another. 'mappingsonly' => false, // [array] An array of events that should cause this cache to invalidate some or all of the items within it. 'invalidationevents' => array('event1', 'event2'), // [int] The sharing options that are appropriate for this definition. Should be the sum of the possible options. 'sharingoptions' => cache_definition::SHARING_DEFAULT, // [int] The default sharing option to use. It's highly recommended that you don't set this unless there is a very // specific reason not to use the system default. 'defaultsharing' => cache_definition::SHARING_DEFAULT, ) ); Cache modifiers To modify the way in which the cache is going to operate when working for your definition you can use the following options. staticacceleration staticaccelerationsize ttl maxsize canuselocalstore By enabling the static option the Cache API will only ever generate a single cache object for your definition on the first request for it, further requests will be returned the original instance This greatly speeds up the collecting of a cache object. Enabling persistence also enables a static store within the cache object, anything set to the cache, or retrieved from it will be stored in that static array for the life of the request. This makes the persistence options some of the most powerful. If you know you are going to be using you cache over and over again or if you know you will be making lots of requests for the same items then this will provide a great performance boost. Of course the static storage of cache objects and of data is costly in terms of memory and should only be used when actually required, as such it is turned off by default. As well as persistence you can also set a maximum number of items that the cache should store (not a hard limit, its up to each store) and a time to live (ttl) although both are discouraged as efficient design negates the need for both in most situations. Overriding a cache loader This is a super advanced feature and should not be done. Ever. Unless you have a very good reason to do so. It allows you to create your own cache loader and have it be used instead of the default cache loader class. The cache object you get back from the make operations will be an instance of this class. overrideclass : [string] A class to use as the loader for this cache. This is an advanced setting and will allow the developer of the definition to take 100% control of the caching solution. Any class used here must inherit the cache_loader interface and must extend default cache loader for the mode they are using. overrideclassfile : [string] Suplements the above setting indicated the file containing the class to be used. This file is included when required. Specifying a data source This is a great wee feature, especially if your code is object orientated. It allows you to specify a class that must inherit the cache_data_source object and will be used to load any information requested from the cache that is not already being stored. When the requested key cannot be found in the cache the data source will be asked to load it. The data source will then return the information to the cache, the cache will store it, and it will then return it to the user as a request of their get request. Essentially no get request should ever fail if you have a data source specified. datasource : [string] A class to use as the data loader for this definition. Any class used here must inherit the cache_data_source interface. datasourcefile : [string] Suplements the above setting indicated the file containing the class to be used. This file is included when required. In Moodle versions prior to 3.8.6 and 3.9.3, if caching is disabled then nothing will be loaded through the data source which is probably not what you expect (rather than the data source being loaded every time but never cached). See also: MDL-42012 Misc settings The following are stand along settings that don't fall into any of the above categories. invalidationevents : [array] An array of events that should cause this cache to invalidate some or all of the items within it. Note that these are NOT normal moodle events and predates the Events API. Instead these are arbitrary strings which can be used by cache_helper::purge_by_event('changesincoursecat'); to mark multiple caches as invalid at once without the calling code knowing which caches are affected. mappingsonly : [bool] If set to true only the mapped cache store(s) will be used and the default mode store will not. This is a super advanced setting and should not be used unless absolutely required. It allows you to avoid the default stores for one reason or another. sharingoptions : [int] The sharing options that are appropriate for this definition. Should be the sum of the possible options. defaultsharing : [int] The default sharing option to use. It's highly recommended that you don't set this unless there is a very specific reason not to use the system default. 2. Accessing a Cache To use the defined cache, instantiate a cache object using the cache::make() function. Example: Getting a Cache Object Getting a cache instance for a definition Once your definition has been created you should bump the version number so that Moodle upgrades and processes the definitions file at which point your definition will be useable. Now within code you can get a cache object corresponding to the definition created earlier. $cache = cache::make('local_myplugin', 'example_cache'); // Most basic $cache = cache::make('component', 'area'); // Using identifiers $cache = cache::make('component', 'area', ['dbfamily' => 'pgsql']); Parameters : Component : The name of your plugin or module (e.g., local_myplugin ). Area : The name of the cache area defined in db/caches.php (e.g., example_cache ). The cache::make() method is a factory method, it will create a cache object to allow you to work with your cache. The cache object will be one of several classes chosen by the API based upon what your definition contains. All of these classes will extend the base cache class, and in nearly all cases you will get one of cache_application , cache_session , or cache_request depending upon the mode you selected. Getting an ad-hoc cache instance Using cache definitions is the recommended method. Ad-hoc caches should only be used where you have a rarely used cache, or insignificant cache. Typical use-case can be when you are refactoring some local static variables into MODE_REQUEST caches. This is the alternative method of using the cache API. It involves creating a cache using just the required params at the time that it is required. It doesn't require that a definition exists making it quicker and easier to use, however it can only use the default settings and is only recommended for insignificant caches (rarely used during operation, never to be mapped or customised, only existing in a single place in code). Once a cache object has been retrieved it operates exactly as the same as a cache that has been created for a definition. To create an ad-hoc cache you would use the following: // Application cache $cache = cache::make_from_params(cache_store::MODE_APPLICATION, 'component', 'area'); // Session cache $cache = cache::make_from_params(cache_store::MODE_SESSION, 'component', 'area'); // Request cache $cache = cache::make_from_params(cache_store::MODE_REQUEST, 'component', 'area'); // Using identifiers $cache = cache::make_from_params(cache_store::MODE_APPLICATION, 'component', 'area', array('dbfamily' => 'pgsql')); // Using persistence so that the cache instance is stored for future use/request $cache = cache::make_from_params(cache_store::MODE_APPLICATION, 'component', 'area', array(), array('persistent' => true)); // Using a request cache to replace static variable $cache = cache::make_from_params(cache_store::MODE_REQUEST, 'component', 'area', array(), array('simplekeys' => true, 'simpledata' => true)); Don't be lazy, if you don't have a good reason to use an ad-hoc cache you should be spending an extra 5 minutes creating a definition. 3. Storing and Retrieving Data Once the cache object is instantiated, you can store, retrieve, and manage data using the Cache API methods. Example: Storing and Retrieving Data // Get a cache instance $cache = cache::make(cache_store::MODE_APPLICATION, 'component', 'area'); // Key can be an int or string $data = $cache->get('key'); // Data returned will be what ever was stored, or false if it was not in the cache. // Storing data in the cache. $cache->set('unique_key', 'cached_value'); // Retrieving data from the cache. $cachedValue = $cache->get('unique_key'); if ($cachedValue === false) { // Cache miss - fetch data and store it. $data = expensive_function_call(); $cache->set('unique_key', $data); } else { // Cache hit - use the cached data. echo $cachedValue; } // Deleting a specific key. $cache->delete('unique_key'); Once you have a cache object (will extend the cache class and implements cache_loader ) you are ready to start interacting with the cache. There are three basic basic operations: get, set, and delete. The first is to send something to the cache. $result = $cache->set('key', 'value'); The key must be an int or a string. The value can be absolutely anything your want that is serializable. The result is true if the operation was a success, false otherwise. The second is to retrieve something from the cache. $data = $cache->get('key'); $data will either be whatever was being stored in the cache, or false if the cache could not find the key. The third and final operation is delete. $result = $cache->delete('key'); Again just like set the result will either be true if the operation was a success, or false otherwise. You can also set, get, and delete multiple key => value pairs in a single transaction. $result = $cache->set_many([ 'key1' => 'data1', 'key3' => 'data3' ]); // $result will be the number of pairs sucessfully set. $result = $cache->get_many(['key1', 'key2', 'key3']); print_r($result); // Will print the following: // array( // 'key1' => 'data1', // 'key2' => false, // 'key3' => 'data3' // ) $result = $cache->delete_many(['key1', 'key3']); // $result will be the number of records sucessfully deleted. Example: Bulk Operations Not all cache stores will support fetching many keys at once, some stores will take the array of keys and process them one by one. If you have many keys to fetch it is recommended to use this still as cache stores that do support this will likely perform better. $cache = cache::make(cache_store::MODE_APPLICATION, 'component', 'area'); // Set some data so I can show results $cache->set('key1', 'data1'); $cache->set('key3', 'data3'); // Keys can be an int or string $keys = array( 'key1', 'key2', 'key3' ); $results = $cache->get_many($keys); print_r($results); // Will print the following: // array( // 'key1' => 'data1', // 'key2' => false, // 'key3' => 'data3' // ) // Storing multiple values at once. $cache->set_many([ 'key1' => 'value1', 'key2' => 'value2', ]); // Retrieving multiple values at once. $values = $cache->get_many(['key1', 'key2']); // Deleting multiple keys. $cache->delete_many(['key1', 'key2']); Store a key // Get a cache instance $cache = cache::make(cache_store::MODE_APPLICATION, 'component', 'area'); // Key can be an int or string // Data can be anything $result = $cache->set('key', 'data'); // Result will be true on success, false otherwise. Store many keys at once Note not all stores will support setting several items in a single transaction, stores that don't will process each item of the array separately. It is still recommended to use this method if you have many items to set as those stores that do support it will likely perform better. // Get a cache instance $cache = cache::make(cache_store::MODE_APPLICATION, 'component', 'area'); // Prepare an associative array of key => value pairs. // Key can be an int or string // Data can be anything $data = array( 'key1' => 'data1', 'key3' => 'data3' ); // Use set_many $result = $cache->set_many($data); // Result will be an int, the number of items successfully set. Delete a key If you have several keys you want to delete you should use delete_many. If you want to delete everything you should use purge. // Get a cache instance $cache = cache::make(cache_store::MODE_APPLICATION, 'component', 'area'); // Key can be an int or string $result = $cache->delete('key'); // Result will be true on success, false otherwise. Delete many keys at once // Get a cache instance $cache = cache::make(cache_store::MODE_APPLICATION, 'component', 'area'); // Array of Keys can be an int or string $keys = array('key1', 'key2'); $result = $cache->delete_many($keys); // $result will contain the number of items successfully deleted. 4. Purge Cache Caches can be purged manually or programmatically to ensure that stale data does not remain in the system. Manual Purging Administrators can purge caches via Site administration > Development > Purge caches . Programmatic Purging $cache->purge(); // Clears all data in the cache. Delete all keys It is not recommended to purge unless absolutely required, this will cause the store (plugin instance) being used by your cache to be purged. Not all stores can tell which keys belong to your cache and in that circumstance all keys in the store are deleted, not just the keys belonging to your cache, also the keys belonging to other caches using that same store. // Get a cache instance $cache = cache::make(cache_store::MODE_APPLICATION, 'component', 'area'); $result = $cache->purge(); // $result will contain the number of items successfully deleted. 5. Debugging and Testing Use debugging tools to inspect the behavior of the cache: Enable Moodle debugging: Site administration > Development > Debugging . Log cache hits and misses: Use custom logging for cache operations. Practical Example: Implementing Cache in a Plugin Let\u2019s create a cache to store user preferences for a plugin: db/caches.php $definitions = [ 'user_preferences' => [ 'mode' => cache_store::MODE_APPLICATION, 'simplekeys' => true, 'simpledata' => true, ], ]; Using the Cache in a Plugin function local_myplugin_get_user_preference($userid) { $cache = cache::make('local_myplugin', 'user_preferences'); // Check if preference exists in the cache. $preference = $cache->get($userid); if ($preference === false) { // Fetch from database if cache miss. global $DB; $preference = $DB->get_field('user_preferences', 'preference', ['userid' => $userid]); // Store in cache for future requests. $cache->set($userid, $preference); } return $preference; } 6. Advanced Features Cache Locking When multiple processes access the same cache key, locking prevents race conditions. $lock = cache::lock('unique_key'); if ($lock->acquire()) { // Perform the operation. $lock->release(); } Cache Events Listen to cache-related events, such as purging or clearing, for custom behavior. Invalidating keys from a cache Invalidate keys using an event cache_helper::invalidate_by_event('event1', array('key1', 'key2')); Invalidate keys using belonging to a definition // Identifiers for the definitions $identifiers = array( 'ident1' => 'something' ); // Keys to invalidate $keys = array('key1', 'key2'); cache_helper::invalidate_by_definition('component', 'area', $identifiers, $keys); Benefits of Using the Cache API Improved Performance : Reduces the load on the database and increases speed. Flexible Configuration : Supports multiple storage backends. Ease of Use : Simple API for common operations. Scalability : Suitable for large-scale applications with heavy traffic. Conclusion The Cache API in Moodle is a robust tool for enhancing performance by reducing redundant computations and database queries. By carefully defining cache settings, using appropriate scopes, and handling cache misses effectively, developers can ensure smooth and efficient plugin functionality. Localized stores for distributed high performance Most cache definitions are simple in that the code expects to be able to purge the cache, or update it, and for this to be universally available from then on to all code which loads from this cache again. But as you scale up having a single mega shared cache store doesn't work well for a variety of reasons, including extra latency between multiple front ends and the shared cache service, the number of connections the cache server can handle, the cost of IO between services, and depending on the cache definition issues with locking while writing. So if you want very high performance caching then you need to write you code so that it can support being distributed, or localized, which means that each front end can have it's own independent cache store. But this architecture means that you have no direct way to communicate from code running in one place to invalidate the caches on all the other front ends. In order to achieve this you need to carefully construct cache keys so that if the content changes then it uses a new cache key, which will of course be a cache miss and then it will regenerate using fresh data. There are multiple ways to achieve this, more details are available in the documentation .","title":"Cache API"},{"location":"Moodle/API/phpMoodleCache/#moodle-cache-api-overview-and-usage","text":"The Cache API in Moodle is a powerful system designed to improve performance and efficiency by storing and retrieving frequently used data. It provides developers with a flexible and easy-to-use mechanism for implementing caching in their plugins or core functionalities. The Cache API, also known as MUC (Moodle Universal Cache), is a fundamental caching system within Moodle.","title":"Moodle Cache API: Overview and Usage"},{"location":"Moodle/API/phpMoodleCache/#key-concepts-of-the-cache-api","text":"Purpose : Reduce database queries and expensive computations by caching data. Architecture : Stores : Physical storage for cache data (e.g., file system, memory, Redis, Memcached). Definitions : Configuration settings for how data is cached. Keys : Identifiers used to store and retrieve data. Persistence Levels : Session Cache : Data persists for the duration of the user's session. Request Cache : Data persists for the duration of the current request. Application Cache : Data persists across multiple requests and sessions.","title":"Key Concepts of the Cache API"},{"location":"Moodle/API/phpMoodleCache/#cache-api-workflow","text":"Define Cache : Configure caching options in db/caches.php . Retrieve Cache : Use the Cache API to access the configured cache. Store and Retrieve Data : Interact with the cache using API methods like set , get , and delete . Purge Cache : Clear cache data when necessary, such as during debugging or when changes are made to cached items.","title":"Cache API Workflow"},{"location":"Moodle/API/phpMoodleCache/#1-defining-a-cache","text":"Getting started with the Cache API is exceptionally straightforward. It's designed for quick and easy usage, emphasizing self-containment. All you need to do is add a definition for your cache and you are ready to start working with the Cache API. Caches are defined in the db/caches.php file of your plugin. This file registers the cache and specifies its behavior. In the case of core that is the lib/db/caches.php file, in the case of a module that would be mod/myplugin/db/caches.php. The definition is used API in order to understand a little about the cache and what it is being used for, it also allows the administrator to set things up especially for the definition if they want. From a development point of view the definition allows you to tell the API about your cache, what it requires, and any (if any) advanced features you want it to have.","title":"1. Defining a Cache"},{"location":"Moodle/API/phpMoodleCache/#2-accessing-a-cache","text":"To use the defined cache, instantiate a cache object using the cache::make() function.","title":"2. Accessing a Cache"},{"location":"Moodle/API/phpMoodleCache/#getting-an-ad-hoc-cache-instance","text":"Using cache definitions is the recommended method. Ad-hoc caches should only be used where you have a rarely used cache, or insignificant cache. Typical use-case can be when you are refactoring some local static variables into MODE_REQUEST caches. This is the alternative method of using the cache API. It involves creating a cache using just the required params at the time that it is required. It doesn't require that a definition exists making it quicker and easier to use, however it can only use the default settings and is only recommended for insignificant caches (rarely used during operation, never to be mapped or customised, only existing in a single place in code). Once a cache object has been retrieved it operates exactly as the same as a cache that has been created for a definition. To create an ad-hoc cache you would use the following: // Application cache $cache = cache::make_from_params(cache_store::MODE_APPLICATION, 'component', 'area'); // Session cache $cache = cache::make_from_params(cache_store::MODE_SESSION, 'component', 'area'); // Request cache $cache = cache::make_from_params(cache_store::MODE_REQUEST, 'component', 'area'); // Using identifiers $cache = cache::make_from_params(cache_store::MODE_APPLICATION, 'component', 'area', array('dbfamily' => 'pgsql')); // Using persistence so that the cache instance is stored for future use/request $cache = cache::make_from_params(cache_store::MODE_APPLICATION, 'component', 'area', array(), array('persistent' => true)); // Using a request cache to replace static variable $cache = cache::make_from_params(cache_store::MODE_REQUEST, 'component', 'area', array(), array('simplekeys' => true, 'simpledata' => true)); Don't be lazy, if you don't have a good reason to use an ad-hoc cache you should be spending an extra 5 minutes creating a definition.","title":"Getting an ad-hoc cache instance"},{"location":"Moodle/API/phpMoodleCache/#3-storing-and-retrieving-data","text":"Once the cache object is instantiated, you can store, retrieve, and manage data using the Cache API methods.","title":"3. Storing and Retrieving Data"},{"location":"Moodle/API/phpMoodleCache/#4-purge-cache","text":"Caches can be purged manually or programmatically to ensure that stale data does not remain in the system.","title":"4. Purge Cache"},{"location":"Moodle/API/phpMoodleCache/#5-debugging-and-testing","text":"Use debugging tools to inspect the behavior of the cache: Enable Moodle debugging: Site administration > Development > Debugging . Log cache hits and misses: Use custom logging for cache operations.","title":"5. Debugging and Testing"},{"location":"Moodle/API/phpMoodleCache/#6-advanced-features","text":"","title":"6. Advanced Features"},{"location":"Moodle/API/phpMoodleCache/#cache-locking","text":"When multiple processes access the same cache key, locking prevents race conditions. $lock = cache::lock('unique_key'); if ($lock->acquire()) { // Perform the operation. $lock->release(); }","title":"Cache Locking"},{"location":"Moodle/API/phpMoodleCache/#cache-events","text":"Listen to cache-related events, such as purging or clearing, for custom behavior. Invalidating keys from a cache Invalidate keys using an event cache_helper::invalidate_by_event('event1', array('key1', 'key2')); Invalidate keys using belonging to a definition // Identifiers for the definitions $identifiers = array( 'ident1' => 'something' ); // Keys to invalidate $keys = array('key1', 'key2'); cache_helper::invalidate_by_definition('component', 'area', $identifiers, $keys);","title":"Cache Events"},{"location":"Moodle/API/phpMoodleCache/#benefits-of-using-the-cache-api","text":"Improved Performance : Reduces the load on the database and increases speed. Flexible Configuration : Supports multiple storage backends. Ease of Use : Simple API for common operations. Scalability : Suitable for large-scale applications with heavy traffic.","title":"Benefits of Using the Cache API"},{"location":"Moodle/API/phpMoodleCache/#conclusion","text":"The Cache API in Moodle is a robust tool for enhancing performance by reducing redundant computations and database queries. By carefully defining cache settings, using appropriate scopes, and handling cache misses effectively, developers can ensure smooth and efficient plugin functionality.","title":"Conclusion"},{"location":"Moodle/API/phpMoodleCache/#localized-stores-for-distributed-high-performance","text":"Most cache definitions are simple in that the code expects to be able to purge the cache, or update it, and for this to be universally available from then on to all code which loads from this cache again. But as you scale up having a single mega shared cache store doesn't work well for a variety of reasons, including extra latency between multiple front ends and the shared cache service, the number of connections the cache server can handle, the cost of IO between services, and depending on the cache definition issues with locking while writing. So if you want very high performance caching then you need to write you code so that it can support being distributed, or localized, which means that each front end can have it's own independent cache store. But this architecture means that you have no direct way to communicate from code running in one place to invalidate the caches on all the other front ends. In order to achieve this you need to carefully construct cache keys so that if the content changes then it uses a new cache key, which will of course be a cache miss and then it will regenerate using fresh data. There are multiple ways to achieve this, more details are available in the documentation .","title":"Localized stores for distributed high performance"},{"location":"Moodle/API/phpMoodleDM/","text":"Moodle provides two main APIs for database abstraction: Data Definition API (DDL) This API allows you to handle database structures such as tables, fields, and indexes. It provides a set of functions to create, modify, and delete these structures. These functions are used exclusively by the installation and upgrade processes and allow for the execution of correct SQL statements for each RDBMS. It encapsulates database-specific logic, so developers do not need to worry about the correct SQL syntax for each database type. The Data Definition Library should only be used in the installation and upgrade processes. You should NOT use it in other parts of Moodle. Database manager The database manager is an object that provides access to various functions for handling database structures such as tables, fields, and indexes. It is responsible for executing the correct SQL statements required by each RDBMS using a neutral description. The database manager is accessible from the $DB global object in Moodle. To use the database manager within your upgrade function of your upgrade.php main function, you need to \"import\" it using the global keyword, like this: function xmldb_xxxx_upgrade { global $DB; // Load the DDL manager and XMLDB API. $dbman = $DB->get_manager(); // Your upgrade code goes here } The use of these functions is restricted to the upgrade processes and it should not be used in any other parts of Moodle. The database manager class can be found at lib/ddl/database_manager.php . Handling tables These are functions from the DDL that allow you to perform table-related operations: Detect if a table exists: $dbman->table_exists($table); Create a table $dbman->create_table($table, $continue = true, $feedback = true); Drop a table $dbman->drop_table($table, $continue = true, $feedback = true); Rename a table $dbman->rename_table($table, $newname, $continue = true, $feedback = true); Example Here is a code snippet from mod/h5pactivity/db/upgrade.php: // Define table h5pactivity_attempts to be created. $table = new xmldb_table('h5pactivity_attempts'); // Adding fields to table h5pactivity_attempts. $table->add_field('id', XMLDB_TYPE_INTEGER, '10', null, XMLDB_NOTNULL, XMLDB_SEQUENCE, null); $table->add_field('h5pactivityid', XMLDB_TYPE_INTEGER, '10', null, XMLDB_NOTNULL, null, null); $table->add_field('userid', XMLDB_TYPE_INTEGER, '20', null, XMLDB_NOTNULL, null, null); $table->add_field('timecreated', XMLDB_TYPE_INTEGER, '10', null, XMLDB_NOTNULL, null, null); $table->add_field('timemodified', XMLDB_TYPE_INTEGER, '10', null, XMLDB_NOTNULL, null, null); $table->add_field('attempt', XMLDB_TYPE_INTEGER, '6', null, XMLDB_NOTNULL, null, '1'); $table->add_field('rawscore', XMLDB_TYPE_INTEGER, '10', null, null, null, '0'); $table->add_field('maxscore', XMLDB_TYPE_INTEGER, '10', null, null, null, '0'); ... ... // Conditionally launch create table for h5pactivity_attempts. if (!$dbman->table_exists($table)) { $dbman->create_table($table); } The code snippet shown above: Defines the structure for a new table. Creates the table, if it does not exist. Note: You should only use these functions in the upgrade script of your plugin. And always use the XMLDB editor to create the upgrade script for your plugin. Handling fields DDL also provides functions to alter the fields of tables. These functions allow to: Detect if a field exists. Create a field in a given table. Drop a field from a table. Rename a field. Change the type of a field. Change the precision of a field. Change the signed/unsigned status of a field. Make a field nullable or not. Change the default value of a field. Example: Here is a code snippet from mod/h5pactivity/db/upgrade.php which shows how to add a new field to an existing table. // Define field duration to be added to h5pactivity_attempts. $table = new xmldb_table('h5pactivity_attempts'); $field = new xmldb_field('duration', XMLDB_TYPE_INTEGER, '10', null, null, null, '0', 'maxscore'); // Conditionally launch add field duration. if (!$dbman->field_exists($table, $field)) { $dbman->add_field($table, $field); } For more information, have a look at the Handling fields section of the Moodle dev docs.} Handling keys and indexes The functions for handling keys and indexes include: Add a key. $dbman->add_key($table, $key); Drop a key. $dbman->drop_key($table, $key); Add an index. $dbman->add_index($table, $index, $continue = true, $feedback = true); Drop an index. $dbman->drop_index($table, $index, $continue = true, $feedback = true); Detect if an index exists. $dbman->index_exists($table, $index); Return the name of an index in DB. $dbman->find_index_name($table, $index); Example Here is a code snippet from mod/h5pactivity/db/upgrade.php which shows how to add a primary key, foreign key and index. // Adding keys to table h5pactivity_attempts_results. $table->add_key('primary', XMLDB_KEY_PRIMARY, ['id']); $table->add_key('fk_attemptid', XMLDB_KEY_FOREIGN, ['attemptid'], 'h5pactivity_attempts', ['id']); // Adding indexes to table h5pactivity_attempts_results. $table->add_index('attemptid-timecreated', XMLDB_INDEX_NOTUNIQUE, ['attemptid', 'timecreated']); XMLDB - DB Schema Abstraction Moodle uses an abstracted schema definition in the form of XML ( install.xml and upgrade.php ) to create and update database tables across different databases. install.xml : Defines the structure of tables, fields, indexes, and keys. upgrade.php : Handles table upgrades when new fields or tables need to be added. Example of a table definition in install.xml : <XMLDB PATH= \"yourplugin/db/install.xml\" VERSION= \"2013053100\" > <TABLE NAME= \"yourplugin_data\" COMMENT= \"Stores custom plugin data\" > <FIELD NAME= \"id\" TYPE= \"int\" LENGTH= \"10\" NOTNULL= \"true\" SEQUENCE= \"true\" COMMENT= \"Primary key\" /> <FIELD NAME= \"userid\" TYPE= \"int\" LENGTH= \"10\" NOTNULL= \"true\" COMMENT= \"User ID\" /> <FIELD NAME= \"data\" TYPE= \"text\" NOTNULL= \"true\" COMMENT= \"Custom data\" /> <KEYS> <KEY NAME= \"primary\" TYPE= \"primary\" FIELDS= \"id\" /> </KEYS> </TABLE> </XMLDB> XMLDB is a custom database abstraction layer that allows developers to define and manage database schemas using XML files. XMLDB introduces a uniform XML-based format to describe the Moodle database tables, with no dependency on actual syntax used by the database system. Database schema in Moodle is defined using XMLDB. This allows to define database schemas in a simple and standardised way using XML files. The XML files are then used to generate compatible SQL for each of the database types supported by Moodle. Example Here is a XMLDB file from mod/label/db/install.xml. <?xml version=\"1.0\" encoding=\"UTF-8\" ?> <XMLDB PATH= \"mod/label/db\" VERSION= \"20120122\" COMMENT= \"XMLDB file for Moodle mod/label\" xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation= \"../../../lib/xmldb/xmldb.xsd\" > <TABLES> <TABLE NAME= \"label\" COMMENT= \"Defines labels\" > <FIELDS> <FIELD NAME= \"id\" TYPE= \"int\" LENGTH= \"10\" NOTNULL= \"true\" SEQUENCE= \"true\" /> <FIELD NAME= \"course\" TYPE= \"int\" LENGTH= \"10\" NOTNULL= \"true\" DEFAULT= \"0\" SEQUENCE= \"false\" /> <FIELD NAME= \"name\" TYPE= \"char\" LENGTH= \"255\" NOTNULL= \"true\" SEQUENCE= \"false\" /> <FIELD NAME= \"intro\" TYPE= \"text\" NOTNULL= \"true\" SEQUENCE= \"false\" /> <FIELD NAME= \"introformat\" TYPE= \"int\" LENGTH= \"4\" NOTNULL= \"false\" DEFAULT= \"0\" SEQUENCE= \"false\" /> <FIELD NAME= \"timemodified\" TYPE= \"int\" LENGTH= \"10\" NOTNULL= \"true\" DEFAULT= \"0\" SEQUENCE= \"false\" /> </FIELDS> <KEYS> <KEY NAME= \"primary\" TYPE= \"primary\" FIELDS= \"id\" /> </KEYS> <INDEXES> <INDEX NAME= \"course\" UNIQUE= \"false\" FIELDS= \"course\" /> </INDEXES> </TABLE> </TABLES> </XMLDB> This XML file is used to create the database table(s) for mod_label, when Moodle is installed. Each Moodle plugin that stores its own data in the database will have it's own install.xml file located in it's db/ subdirectory. The install.xml file is only used during the installation process. Data Manipulation API (DML) This API is used to access and manipulate data in the Moodle database. It provides functions for inserting, updating, deleting, and retrieving data from the database. The Data Manipulation API (DML) in Moodle is a set of functions that facilitate interaction with the Moodle database. It abstracts away the complexities of directly working with SQL, ensuring that Moodle\u2019s database queries remain compatible across different database systems (e.g., MySQL, PostgreSQL, MS SQL, Oracle). The DML functions help developers perform common operations such as inserting, updating, deleting, and fetching data, while also enforcing security, performance, and consistency best practices. DML drivers DML drivers are native drivers included with Moodle that provide support for various database management systems. These drivers enable Moodle to interact with different databases using a consistent and optimized interface. The DML drivers supported by Moodle include: MySQLi MariaDB PostgreSQL Oracle Microsoft SQL Server These drivers are supported using the DML Database Driver layer, which offers several benefits such as: More optimized and faster performance. Lower memory consumption. Better possibilities for logging, debugging, and profiling. Less code, making it easier to fix and maintain. For more information you can visit the Moodle Developer Resources page: DML drivers in Moodle . Database Access Object (DB API) The $DB global object in Moodle is the central component of the DML API. It provides a collection of functions to interact with the database. Instead of writing raw SQL directly, developers use these functions, which are compatible with all supported database systems. The $DB object is initialized as part of the Moodle environment ( config.php ), and it abstracts the interaction with the underlying DB engine. The data manipulation API is exposed via public methods of the $DB object. Moodle core takes care of setting up the connection to the database according to values specified in the main config.php file. The $DB global object is an instance of the moodle_database class. The $DB global object is instantiated automatically during the bootstrap setup, i.e. as a part of including the main config.php file in your script. Here is a snippet showing database-related config values from the main config.php file. $CFG->dbtype = 'pgsql'; // 'pgsql', 'mariadb', 'mysqli', 'auroramysql', 'sqlsrv' or 'oci'. $CFG->dblibrary = 'native'; // 'native' only at the moment $CFG->dbhost = 'localhost'; // eg 'localhost' or IP $CFG->dbname = 'moodle'; // database name, eg moodle $CFG->dbuser = 'username'; // your database username $CFG->dbpass = 'password'; // your database password $CFG->prefix = 'mdl_'; // prefix to use for all table names $CFG->dboptions = array ( 'dbpersist' => 0, 'dbport' => '', 'dbsocket' => '', 'dbcollation' => 'utf8mb4_unicode_ci', ); The config-dist.php file provides more explanation on each of the settings defined. The DB object is available in the global scope right after including the config.php file. require(__DIR__ . '/config.php'); Common $DB functions include: insert_record() update_record() delete_records() get_record() get_records() Table prefix Most Moodle installations use a prefix for all the database tables, such as mdl_. This table prefix is defined in the main config.php file: $CFG->prefix = 'mdl_'; Note: It is not necessary to have a table prefix. Using different table prefixes allows you to install multiple Moodle instances within the same database. This prefix is NOT to be used in the code itself. Moodle's database APIs will automatically add the table prefix when constructing the SQL statements. All the $table parameters in the DML functions are meant to be the table name without prefixes: $user = $DB->get_record('user', ['id' => '2']); In custom SQL queries, table names must be enclosed between curly braces. $user = $DB->get_record_sql('SELECT COUNT(*) FROM {user} WHERE suspended = 1;'); Conditions and Placeholders Conditions All the $conditions parameters in the DML functions are arrays of fieldname => fieldvalue elements. When multiple field/value elements are used, the logical AND is used to populate the WHERE statement. This means all the field/value pairs MUST be fulfilled. $user = $DB->get_record('user', ['firstname' => 'Martin', 'lastname' => 'Dougiamas']); This function call will generate the following SQL statement if the database type is MySQL and the table prefix is \"mdl_\": SELECT * FROM mdl_user WHERE firstname = 'Martin' AND lastname = 'Dougiamas' ; Placeholders All the $params parameters in the DML functions are arrays of values used to fill placeholders in SQL statements. Placeholders help to avoid problems with SQL-injection and/or invalid quotes in SQL queries. Placeholders facilitate secure and cross-db compatible code. Two types of placeholders are supported - question marks (SQL_PARAMS_QM) and named placeholders (SQL_PARAMS_NAMED). Named params must be unique even if the value passed is the same. Example of using question-mark placeholders $DB->get_record_sql( 'SELECT * FROM {user} WHERE firstname = ? AND lastname = ?', [ 'Martin', 'Dougiamas', ] ); Example of using named placeholders $DB->get_record_sql( 'SELECT * FROM {user} WHERE firstname = :firstname AND lastname = :lastname', [ 'firstname' => 'Martin', 'lastname' => 'Dougiamas', ] ); CRUD Operations a. Create: Inserting Records To insert a new record into the database, you can use the insert_record() function. This function takes two parameters: Table name : The name of the database table where you want to insert the record. Data object : An object where each property represents a field in the table. $record = new stdClass(); $record->name = 'John Doe'; $record->email = 'john@example.com'; $record->timecreated = time(); // Insert the record into the 'user' table. $DB->insert_record('user', $record); If the table has an auto-incrementing ID field, insert_record() will return the ID of the inserted record. The first parameter is the table name (without the prefix). The second parameter is a data object. The data object typically will not have the \"id\" field set. It returns the \"id\" of the newly created record. // Example use of insert_record() // Create a new stdClass object to hold the data. $data = new stdClass(); $data->username = 'johndoe'; $data->password = 'mypassword'; $data->firstname = 'John'; $data->lastname = 'Doe'; $data->email = 'johndoe@example.com'; // Insert the record into the 'user' table. $userid = $DB->insert_record('user', $data); if ($userid) { // Record added successfully. } else { // Failed to add record. } To insert multiple records into a table, you can use the insert_records() function. First parameter is the table name. Second parameter is an array of data objects. // Example use of insert_records() $records = [ (object)['name' => 'John Doe', 'email' => 'johndoe@example.com'], (object)['name' => 'Jane Smith', 'email' => 'janesmith@example.com'], // Add more records as needed. ]; $DB->insert_records('mycustomtable', $records); b. Read: Fetching Data DML provides functions to help developers read data from the database. There are functions to: Get a single record from a table matching given conditions. Get multiple records from a table matching given conditions. Get a particular field value from a record in a table. Check if a record exists. Count the number of records. Get data from multiple tables using custom SQL. To retrieve data from the database, several functions are available: get_record() : Retrieves a single record matching a specific condition. get_records() : Retrieves multiple records matching a specific condition. get_record Return a single database record as an object where all the given conditions are met. public function get_record( $table, array $conditions, $fields = '*', $strictness = IGNORE_MISSING ); Returns an object of the first matching record if found, false if nothing is found or an exception on error. Uses the logical AND to populate the WHERE clause. Uses = (equals) for matching the field values. Usage Getting all the fields from the user table matching the given conditions. $result = $DB->get_record('user', ['firstname' => 'Martin', 'lastname' => 'Dougiamas']); if ($result) { echo $result->username; } $userid = 5; $user = $DB->get_record('user', array('id' => $userid), '*', MUST_EXIST); echo $user->name; In the example above, MUST_EXIST ensures that if no record is found, an exception is thrown. Getting only selected fields from the user table matching the given conditions. $result = $DB->get_record('user', ['firstname' => 'Martin', 'lastname' => 'Dougiamas'], 'id,username,email'); if ($result) { echo $result->username; } get_record_select Return a single database record as an object where the given conditions are used in the WHERE clause. public function get_record_select( $table, $select, array $params = null, $fields = '*', $strictness = IGNORE_MISSING ); Returns an object of the first matching record if found, false if nothing is found or an exception on error. Condition ($select) is a SQL snippet, giving you more flexibility. Usage $result = $DB->get_record_select( 'user', \"firstname LIKE '?%' AND deleted = ?\", ['Martin', 0] ); if ($result) { echo $result->username; } get_record_sql Return a single database record as an object using a custom SELECT query. public function get_record_sql( $sql, array $params = null, $strictness = IGNORE_MISSING ); Returns an object of the first matching record if found, false if nothing is found or an exception on error. The SELECT SQL should normally return one record only. Usage $sql = \"SELECT * FROM {user} WHERE firstname LIKE '?%' AND deleted = ?\"; $result = $DB->get_record_sql( $sql, ['Martin', 0] ); if ($result) { echo $result->username; } Get multiple records To get multiple records, you could use get_records() , get_records_select() or get_records_sql() . These functions return a list of records as an array of objects. Example usage of get_records() // Retrieve all users with a specific role from the 'user' table. $users = $DB->get_records('user', ['roleid' => 5]); // Loop through the retrieved records. foreach ($users as $user) { // Access user data. echo $user->id . '<br>'; echo $user->username . '<br>'; echo $user->email . '<br>'; echo $user->firstname . '<br>'; echo $user->lastname . '<br>'; } Example of fetching multiple records: $users = $DB->get_records('user', array('confirmed' => 1)); foreach ($users as $user) { echo $user->name . '<br>'; } Example usage of get_records_select() // Retrieve all users with a specific role and a certain city from the 'user' table. $users = $DB->get_records_select( 'user', 'roleid = :roleid AND city = :city', ['roleid' => 5, 'city' => 'Barcelona']); // Loop through the retrieved records. foreach ($users as $user) { // Access user data. echo $user->id . '<br>'; echo $user->username . '<br>'; echo $user->email . '<br>'; echo $user->firstname . '<br>'; echo $user->lastname . '<br>'; } Example usage of get_records_sql() // Retrieve all users with a specific role and a certain city from the 'user' table. $sql = \"SELECT * FROM {user} WHERE roleid = :roleid AND city = :city\"; $params = ['roleid' => 5, 'city' => 'Barcelona']; $users = $DB->get_records_sql($sql, $params); // Loop through the retrieved records. foreach ($users as $user) { // Access user data. echo $user->id . '<br>'; echo $user->username . '<br>'; echo $user->email . '<br>'; echo $user->firstname . '<br>'; echo $user->lastname . '<br>'; } c. Update: Modifying Existing Records To update a record, you use the update_record() function. You must pass an object that contains the primary key field along with the fields to be updated. $user = new stdClass(); $user->id = 5; // ID of the record to be updated. $user->email = 'newemail@example.com'; $DB->update_record('user', $user); Here, the record with id = 5 is updated, and its email field is changed. The first parameter is the table name (without the prefix). The second parameter is the updated data object. The data object should have the \"id\" field set. This field is used to identify the record to be updated. // Example usage of update_record() // Get an existing user record. $record = $DB->get_record('user', ['id' => '123']); if ($record) { // Update the data object. $record->firstname = 'Updated Firstname'; $record->lastname = 'Updated Lastname'; // Update the record. $DB->update_record('user', $record); } d. Delete: Removing Records To delete records, the delete_records() function is used. You can delete a record or a set of records based on a condition. Example of deleting a single record: $DB->delete_records('user', array('id' => 5)); Example of deleting multiple records: $DB->delete_records('user', array('confirmed' => 0)); // Deletes all unconfirmed users. The DML provides delete_records_select() for deleting one or more records. Example usage of delete_records_select() $where = 'firstname LIKE :fname OR lastname LIKE :lname'; $params = ['fname' => 'Fake Name', 'lname' => 'Fake Name']; $DB->delete_records_select('user', $where, $params); SQL Queries While Moodle\u2019s DML API provides functions to handle common CRUD operations, you may need to write custom SQL queries for more complex operations. Moodle provides get_records_sql() , get_record_sql() , and other SQL-based functions that allow you to execute raw SQL. get_records_sql() : Retrieves multiple records based on an SQL query. get_record_sql() : Retrieves a single record based on an SQL query. execute() : Executes an SQL query without returning any data (useful for INSERT , UPDATE , DELETE ). Example of retrieving records with a custom SQL query: $sql = \"SELECT id, name FROM {user} WHERE confirmed = :confirmed\"; $params = array('confirmed' => 1); $users = $DB->get_records_sql($sql, $params); foreach ($users as $user) { echo $user->name . '<br>'; } Notice the use of {user} in the SQL query. This is a Moodle convention that allows for database table prefixing. If your Moodle site uses a table prefix like mdl_ , this will be automatically converted to mdl_user . Transactions Moodle supports database transactions, which ensure that multiple operations are treated as a single unit of work. If any operation in the transaction fails, all changes are rolled back, ensuring data consistency. Starting a Transaction $transaction = $DB->start_delegated_transaction(); Committing a Transaction $transaction->allow_commit(); Rolling Back a Transaction If an exception occurs during the transaction, the rollback is automatic. Example of using a transaction: try { $transaction = $DB->start_delegated_transaction(); // Insert a new user. $user = new stdClass(); $user->name = 'Jane Doe'; $user->email = 'jane@example.com'; $DB->insert_record('user', $user); // Insert a profile field for the new user. $profile = new stdClass(); $profile->userid = $user->id; $profile->fieldname = 'bio'; $profile->fieldvalue = 'This is Jane\\'s bio.'; $DB->insert_record('user_profile', $profile); // If all went well, commit the transaction. $transaction->allow_commit(); } catch (Exception $e) { // Rollback is automatic on exception. $transaction->rollback($e); echo 'Transaction failed: ' . $e->getMessage(); } Database Caching Moodle provides caching mechanisms that improve the performance of database queries. The get_record_cacheable() function allows you to cache the result of a query, which can be useful if the same query is run frequently. $cache = cache::make('core', 'user'); $userid = 5; if ($user = $cache->get($userid)) { // User data is cached. } else { $user = $DB->get_record('user', array('id' => $userid)); $cache->set($userid, $user); } Using recordsets The get_recordset_xxx() functions should be used when the number of records to be retrieved from the database is high. This is because they return an iterator to iterate over the records and save memory. After using a recordset iterator, it is important to close it using the close() method to free up resources in the RDBMS. The get_records_xxx() functions are far from optimal, because they load all the records into the memory via the returned array. Example usage of get_recordset() $rs = $DB->get_recordset('user'); foreach ($rs as $record) { // Do whatever you want with this record. echo $record->username . '<br>'; } $rs->close(); Cross database compatibility Moodle supports several SQL servers, including MySQL, MariaDB, PostgreSQL, MS-SQL and Oracle. These may have specific syntax in certain cases. In order to achieve cross-db compatibility of the code, you should use functions from the DML API to generate the fragments of the query valid for the actual SQL server. Here are some functions that you may need to use often: sql_like Return the query fragment to perform the LIKE comparison. $DB->sql_like( $fieldname, $param, $casesensitive = true, $accentsensitive = true, $notlike = false, $escapechar = ' \\\\ ' ); Example: Searching for records partially matching the given hard-coded literal. $likeidnumber = $DB->sql_like('idnumber', ':idnum'); $DB->get_records_sql( \"SELECT id, fullname FROM {course} WHERE {$likeidnumber}\", [ 'idnum' => 'DEMO-%', ] ); Note: Use sql_like() if the value being compared is trusted and properly formatted/escaped. Use sql_like_escape() if you need to compare with a value submitted by the user. sql_like_escape Escape the value submitted by the user so that it can be used for partial comparison and the special characters like '_' or '%' behave as literal characters, not wildcards. $DB->sql_like_escape( $text, $escapechar = '\\\\' ); Example: If you need to perform a partial comparison with a value that has been submitted by the user. $search = required_param('search', PARAM_RAW); $likefullname = $DB->sql_like('fullname', ':fullname'); $DB->get_records_sql( \"SELECT id, fullname FROM {course} WHERE {$likefullname}\", [ 'fullname' => '%' . $DB->sql_like_escape($search) . '%', ] ); get_in_or_equal Return the query fragment to check if a value is IN the given list of items (with a fallback to plain equal comparison if there is just one item). public function get_in_or_equal( $items, $type = SQL_PARAMS_QM, $prefix = 'param', $equal = true, $onemptyitems = false ); Example: $statuses = ['todo', 'open', 'inprogress', 'intesting']; [$insql, $inparams] = $DB->get_in_or_equal($statuses); $sql = \"SELECT * FROM {bugtracker_issues} WHERE status $insql\"; $bugs = $DB->get_records_sql($sql, $inparams); Additional reading Please see the Cross-DB compatibility section of the DML dev docs for a list of useful functions you can use to generate cross-db compatible SQL. Factors affecting database performance Reduce database queries Minimize number of database queries. Each query has overhead in terms of network latency and database server processing. Retrieve or update multiple records in a single query whenever possible. Avoid unnecessary loops, nested queries, or redundant operations. Example In the code snippet below, 3 database queries are executed. $userids = [123, 345, 456]; foreach($userids as $id) { $result = $DB->get_record('user', ['id' => $id]); echo $result->username . '<br>'; } Instead of getting the record of each user in each query, you can get the records for all users in a single database query. $userids = [123, 345, 456]; [$insql, $inparams] = $DB->get_in_or_equal($userids); $sql = \"SELECT * FROM {user} WHERE id $insql\"; $users = $DB->get_records_sql($sql, $inparams); foreach($users as $user) { echo $user->username . '<br>'; } Create appropriate indexes Properly index database tables to improve query performance. Indexes help a database server locate and retrieve data more efficiently. Analyze query patterns and identify frequently queried columns or columns used in WHERE clauses. Create indexes on those columns. Be cautious not to over-index as too many indexes can negatively impact write performance. Example Adding an index named bookid to the book_chapters table, in mod/book/db/upgrade.php. if ($oldversion < 2021052501) { $table = new xmldb_table('book_chapters'); $index = new xmldb_index('bookid', XMLDB_INDEX_NOTUNIQUE, ['bookid']); if (!$dbman->index_exists($table, $index)) { $dbman->add_index($table, $index); } upgrade_mod_savepoint(true, 2021052501, 'book'); } The index defined in the mod/book/db/install.xml file, which is used when the book module is installed. <INDEXES> <INDEX NAME= \"bookid\" UNIQUE= \"false\" FIELDS= \"bookid\" /> </INDEXES> Avoid SELECT * queries Instead of selecting all columns (SELECT *), explicitly specify only the columns you need in your query. Reduces the amount of data transferred between the database server and your application, improving performance. Helps avoid unnecessary data processing in your code. Will use less memory than selecting all the columns. Example Consider the following code snippet. $results = $DB->get_records('user'); This will produce the following query, with all the fields selected from the user table. SELECT * FROM { user } ; Now, consider the following code snippet $results = $DB->get_records('user', null, 'id,firstname,lastname,email'); This will produce the following query, with only 4 fields selected: SELECT id , firstname , lastname , email FROM { user } ; Cache database results Utilize caching mechanisms to store frequently accessed data in memory. Moodle Universal Cache (MUC) is the main cache used in Moodle. MUC includes request cache, session cache, and application cache. Caching can significantly reduce the load on your database server and improve response times. Example Here is an example of caching a database query result using Moodle's Cache API: $cache = cache::make('mod_myplugin', 'somedata'); // Define the cache key. $cachekey = 'myplugin_my_query_result'; // Check if the result is already cached. if ($result = $cache->get($cachekey)) { // Use the cached result. } else { // Query the database. $result = $DB->get_records('my_table'); // Cache the result for future use. $cache->set($cachekey, $result); } Optimize data retrieval Use appropriate filtering and sorting techniques to limit the amount of data processed and transferred. Use conditions in your queries (WHERE clauses) to filter data at the database level rather than retrieving all data and filtering it in your code. Use proper sorting techniques (ORDER BY clauses) to ensure efficient data retrieval. Use recordsets when retrieving large dataset By using the get_recordset_xxx() functions and properly closing the recordset iterator, you can optimize memory usage when dealing with a large number of records retrieved from the database in Moodle code. This helps improve performance and resource management. get_records_xxx() functions are not optimal when retrieving a high number of records. Use get_recordset_xxx() functions instead. get_recordset_xxx() functions return an iterator to save memory. Close the returned recordset iterator after using it to free up resources in the RDBMS. Example $rs = $DB->get_recordset('user'); foreach ($rs as $record) { // Do whatever you want with this record. echo $record->username . '<br>'; } $rs->close(); Factors affecting database security Using DML and DDL APIs Moodle's core libraries takes care of setting up the connection to the database based on the configuration specified in the config.php file. This helps ensure that the database connection is established securely and follows best practices. Always use Moodle's higher-level database methods from DML, such as get_record(), get_records_sql(), etc, instead of writing your own SQL statements. Sanitize user input User input should always be properly validated and sanitized to prevent SQL injection and cross-site scripting (XSS) attacks. Use functions like optional_param() or required_param() to clean the input and ensure it is of the expected type before using it in database queries. Example $name = optional_param('name', '', PARAM_TEXT); $sql = \"SELECT * FROM {user} WHERE firstname = :firstname OR lastname = :lastname\"; $records = $DB->get_records_sql($sql, ['firstname' => $name, 'lastname' => $name]); In the code snippet above: The value of $name is sanitized to ensure that it only contains text characters before it is used in the database query. Any invalid characters will be stripped out by the optional_param() function. PARAM_TEXT defines which characters are allowed and what should be stripped out. Use bound parameters Moodle's database API encourages the use of bound parameters when constructing database queries. Bound parameters automatically handle proper escaping and sanitization of data. When using custom SQL code, it is important to use placeholders to insert values into queries instead of concatenating strings. This helps prevent SQL injection attacks. Example: Using named parameters $sql = \"SELECT * FROM {user} WHERE firstname = :firstname AND lastname = :lastname\"; $records = $DB->get_records_sql($sql, ['firstname' => $firstname, 'lastname' => $lastname]); Example: Using question mark parameters $sql = \"SELECT * FROM {user} WHERE firstname = ? AND lastname = ?\"; $records = $DB->get_records_sql($sql, [$firstname, $lastname]); Check proper access Before reading or writing data, ensure that user has the required permissions. Check that the user is properly logged in using require_login(). Use has_capability() or require_capability() to check that the user has the required permissions. Best Practices Use Prepared Statements : Moodle DML functions automatically handle prepared statements to prevent SQL injection attacks. Always use parameterized queries. Test with Multiple Databases : Ensure your plugin works across all supported databases (MySQL, PostgreSQL, MS SQL, Oracle). Use Transactions : For critical operations involving multiple queries, use transactions to maintain data integrity. Caching : Where possible, use caching to improve the performance of frequent queries. Follow Database Conventions : Use Moodle\u2019s naming conventions for tables and fields (e.g., lowercase names, singular table names). Conclusion Moodle\u2019s Data Manipulation API provides a powerful abstraction for working with the database in a secure and efficient way. By using the DML functions, you ensure compatibility with different database systems, safeguard against SQL injection, and maintain the overall integrity of the system. Whether you\u2019re performing basic CRUD operations or handling complex transactions, the DML API is the recommended way to manipulate data in Moodle.","title":"Data Manipulation API"},{"location":"Moodle/API/phpMoodleDM/#data-definition-api-ddl","text":"This API allows you to handle database structures such as tables, fields, and indexes. It provides a set of functions to create, modify, and delete these structures. These functions are used exclusively by the installation and upgrade processes and allow for the execution of correct SQL statements for each RDBMS. It encapsulates database-specific logic, so developers do not need to worry about the correct SQL syntax for each database type. The Data Definition Library should only be used in the installation and upgrade processes. You should NOT use it in other parts of Moodle.","title":"Data Definition API (DDL)"},{"location":"Moodle/API/phpMoodleDM/#database-manager","text":"The database manager is an object that provides access to various functions for handling database structures such as tables, fields, and indexes. It is responsible for executing the correct SQL statements required by each RDBMS using a neutral description. The database manager is accessible from the $DB global object in Moodle. To use the database manager within your upgrade function of your upgrade.php main function, you need to \"import\" it using the global keyword, like this: function xmldb_xxxx_upgrade { global $DB; // Load the DDL manager and XMLDB API. $dbman = $DB->get_manager(); // Your upgrade code goes here } The use of these functions is restricted to the upgrade processes and it should not be used in any other parts of Moodle. The database manager class can be found at lib/ddl/database_manager.php .","title":"Database manager"},{"location":"Moodle/API/phpMoodleDM/#handling-tables","text":"These are functions from the DDL that allow you to perform table-related operations:","title":"Handling tables"},{"location":"Moodle/API/phpMoodleDM/#handling-fields","text":"DDL also provides functions to alter the fields of tables. These functions allow to: Detect if a field exists. Create a field in a given table. Drop a field from a table. Rename a field. Change the type of a field. Change the precision of a field. Change the signed/unsigned status of a field. Make a field nullable or not. Change the default value of a field. Example: Here is a code snippet from mod/h5pactivity/db/upgrade.php which shows how to add a new field to an existing table. // Define field duration to be added to h5pactivity_attempts. $table = new xmldb_table('h5pactivity_attempts'); $field = new xmldb_field('duration', XMLDB_TYPE_INTEGER, '10', null, null, null, '0', 'maxscore'); // Conditionally launch add field duration. if (!$dbman->field_exists($table, $field)) { $dbman->add_field($table, $field); } For more information, have a look at the Handling fields section of the Moodle dev docs.}","title":"Handling fields"},{"location":"Moodle/API/phpMoodleDM/#handling-keys-and-indexes","text":"The functions for handling keys and indexes include:","title":"Handling keys and indexes"},{"location":"Moodle/API/phpMoodleDM/#xmldb-db-schema-abstraction","text":"Moodle uses an abstracted schema definition in the form of XML ( install.xml and upgrade.php ) to create and update database tables across different databases. install.xml : Defines the structure of tables, fields, indexes, and keys. upgrade.php : Handles table upgrades when new fields or tables need to be added. Example of a table definition in install.xml : <XMLDB PATH= \"yourplugin/db/install.xml\" VERSION= \"2013053100\" > <TABLE NAME= \"yourplugin_data\" COMMENT= \"Stores custom plugin data\" > <FIELD NAME= \"id\" TYPE= \"int\" LENGTH= \"10\" NOTNULL= \"true\" SEQUENCE= \"true\" COMMENT= \"Primary key\" /> <FIELD NAME= \"userid\" TYPE= \"int\" LENGTH= \"10\" NOTNULL= \"true\" COMMENT= \"User ID\" /> <FIELD NAME= \"data\" TYPE= \"text\" NOTNULL= \"true\" COMMENT= \"Custom data\" /> <KEYS> <KEY NAME= \"primary\" TYPE= \"primary\" FIELDS= \"id\" /> </KEYS> </TABLE> </XMLDB> XMLDB is a custom database abstraction layer that allows developers to define and manage database schemas using XML files. XMLDB introduces a uniform XML-based format to describe the Moodle database tables, with no dependency on actual syntax used by the database system. Database schema in Moodle is defined using XMLDB. This allows to define database schemas in a simple and standardised way using XML files. The XML files are then used to generate compatible SQL for each of the database types supported by Moodle. Example Here is a XMLDB file from mod/label/db/install.xml. <?xml version=\"1.0\" encoding=\"UTF-8\" ?> <XMLDB PATH= \"mod/label/db\" VERSION= \"20120122\" COMMENT= \"XMLDB file for Moodle mod/label\" xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation= \"../../../lib/xmldb/xmldb.xsd\" > <TABLES> <TABLE NAME= \"label\" COMMENT= \"Defines labels\" > <FIELDS> <FIELD NAME= \"id\" TYPE= \"int\" LENGTH= \"10\" NOTNULL= \"true\" SEQUENCE= \"true\" /> <FIELD NAME= \"course\" TYPE= \"int\" LENGTH= \"10\" NOTNULL= \"true\" DEFAULT= \"0\" SEQUENCE= \"false\" /> <FIELD NAME= \"name\" TYPE= \"char\" LENGTH= \"255\" NOTNULL= \"true\" SEQUENCE= \"false\" /> <FIELD NAME= \"intro\" TYPE= \"text\" NOTNULL= \"true\" SEQUENCE= \"false\" /> <FIELD NAME= \"introformat\" TYPE= \"int\" LENGTH= \"4\" NOTNULL= \"false\" DEFAULT= \"0\" SEQUENCE= \"false\" /> <FIELD NAME= \"timemodified\" TYPE= \"int\" LENGTH= \"10\" NOTNULL= \"true\" DEFAULT= \"0\" SEQUENCE= \"false\" /> </FIELDS> <KEYS> <KEY NAME= \"primary\" TYPE= \"primary\" FIELDS= \"id\" /> </KEYS> <INDEXES> <INDEX NAME= \"course\" UNIQUE= \"false\" FIELDS= \"course\" /> </INDEXES> </TABLE> </TABLES> </XMLDB> This XML file is used to create the database table(s) for mod_label, when Moodle is installed. Each Moodle plugin that stores its own data in the database will have it's own install.xml file located in it's db/ subdirectory. The install.xml file is only used during the installation process.","title":"XMLDB - DB Schema Abstraction"},{"location":"Moodle/API/phpMoodleDM/#data-manipulation-api-dml","text":"This API is used to access and manipulate data in the Moodle database. It provides functions for inserting, updating, deleting, and retrieving data from the database. The Data Manipulation API (DML) in Moodle is a set of functions that facilitate interaction with the Moodle database. It abstracts away the complexities of directly working with SQL, ensuring that Moodle\u2019s database queries remain compatible across different database systems (e.g., MySQL, PostgreSQL, MS SQL, Oracle). The DML functions help developers perform common operations such as inserting, updating, deleting, and fetching data, while also enforcing security, performance, and consistency best practices.","title":"Data Manipulation API (DML)"},{"location":"Moodle/API/phpMoodleDM/#dml-drivers","text":"DML drivers are native drivers included with Moodle that provide support for various database management systems. These drivers enable Moodle to interact with different databases using a consistent and optimized interface. The DML drivers supported by Moodle include: MySQLi MariaDB PostgreSQL Oracle Microsoft SQL Server These drivers are supported using the DML Database Driver layer, which offers several benefits such as: More optimized and faster performance. Lower memory consumption. Better possibilities for logging, debugging, and profiling. Less code, making it easier to fix and maintain. For more information you can visit the Moodle Developer Resources page: DML drivers in Moodle .","title":"DML drivers"},{"location":"Moodle/API/phpMoodleDM/#database-access-object-db-api","text":"The $DB global object in Moodle is the central component of the DML API. It provides a collection of functions to interact with the database. Instead of writing raw SQL directly, developers use these functions, which are compatible with all supported database systems. The $DB object is initialized as part of the Moodle environment ( config.php ), and it abstracts the interaction with the underlying DB engine. The data manipulation API is exposed via public methods of the $DB object. Moodle core takes care of setting up the connection to the database according to values specified in the main config.php file. The $DB global object is an instance of the moodle_database class. The $DB global object is instantiated automatically during the bootstrap setup, i.e. as a part of including the main config.php file in your script. Here is a snippet showing database-related config values from the main config.php file. $CFG->dbtype = 'pgsql'; // 'pgsql', 'mariadb', 'mysqli', 'auroramysql', 'sqlsrv' or 'oci'. $CFG->dblibrary = 'native'; // 'native' only at the moment $CFG->dbhost = 'localhost'; // eg 'localhost' or IP $CFG->dbname = 'moodle'; // database name, eg moodle $CFG->dbuser = 'username'; // your database username $CFG->dbpass = 'password'; // your database password $CFG->prefix = 'mdl_'; // prefix to use for all table names $CFG->dboptions = array ( 'dbpersist' => 0, 'dbport' => '', 'dbsocket' => '', 'dbcollation' => 'utf8mb4_unicode_ci', ); The config-dist.php file provides more explanation on each of the settings defined. The DB object is available in the global scope right after including the config.php file. require(__DIR__ . '/config.php'); Common $DB functions include: insert_record() update_record() delete_records() get_record() get_records()","title":"Database Access Object (DB API)"},{"location":"Moodle/API/phpMoodleDM/#table-prefix","text":"Most Moodle installations use a prefix for all the database tables, such as mdl_. This table prefix is defined in the main config.php file: $CFG->prefix = 'mdl_'; Note: It is not necessary to have a table prefix. Using different table prefixes allows you to install multiple Moodle instances within the same database. This prefix is NOT to be used in the code itself. Moodle's database APIs will automatically add the table prefix when constructing the SQL statements. All the $table parameters in the DML functions are meant to be the table name without prefixes: $user = $DB->get_record('user', ['id' => '2']); In custom SQL queries, table names must be enclosed between curly braces. $user = $DB->get_record_sql('SELECT COUNT(*) FROM {user} WHERE suspended = 1;');","title":"Table prefix"},{"location":"Moodle/API/phpMoodleDM/#conditions-and-placeholders","text":"","title":"Conditions and Placeholders"},{"location":"Moodle/API/phpMoodleDM/#crud-operations","text":"","title":"CRUD Operations"},{"location":"Moodle/API/phpMoodleDM/#sql-queries","text":"While Moodle\u2019s DML API provides functions to handle common CRUD operations, you may need to write custom SQL queries for more complex operations. Moodle provides get_records_sql() , get_record_sql() , and other SQL-based functions that allow you to execute raw SQL. get_records_sql() : Retrieves multiple records based on an SQL query. get_record_sql() : Retrieves a single record based on an SQL query. execute() : Executes an SQL query without returning any data (useful for INSERT , UPDATE , DELETE ). Example of retrieving records with a custom SQL query: $sql = \"SELECT id, name FROM {user} WHERE confirmed = :confirmed\"; $params = array('confirmed' => 1); $users = $DB->get_records_sql($sql, $params); foreach ($users as $user) { echo $user->name . '<br>'; } Notice the use of {user} in the SQL query. This is a Moodle convention that allows for database table prefixing. If your Moodle site uses a table prefix like mdl_ , this will be automatically converted to mdl_user .","title":"SQL Queries"},{"location":"Moodle/API/phpMoodleDM/#transactions","text":"Moodle supports database transactions, which ensure that multiple operations are treated as a single unit of work. If any operation in the transaction fails, all changes are rolled back, ensuring data consistency.","title":"Transactions"},{"location":"Moodle/API/phpMoodleDM/#database-caching","text":"Moodle provides caching mechanisms that improve the performance of database queries. The get_record_cacheable() function allows you to cache the result of a query, which can be useful if the same query is run frequently. $cache = cache::make('core', 'user'); $userid = 5; if ($user = $cache->get($userid)) { // User data is cached. } else { $user = $DB->get_record('user', array('id' => $userid)); $cache->set($userid, $user); }","title":"Database Caching"},{"location":"Moodle/API/phpMoodleDM/#using-recordsets","text":"The get_recordset_xxx() functions should be used when the number of records to be retrieved from the database is high. This is because they return an iterator to iterate over the records and save memory. After using a recordset iterator, it is important to close it using the close() method to free up resources in the RDBMS. The get_records_xxx() functions are far from optimal, because they load all the records into the memory via the returned array. Example usage of get_recordset() $rs = $DB->get_recordset('user'); foreach ($rs as $record) { // Do whatever you want with this record. echo $record->username . '<br>'; } $rs->close();","title":"Using recordsets"},{"location":"Moodle/API/phpMoodleDM/#cross-database-compatibility","text":"Moodle supports several SQL servers, including MySQL, MariaDB, PostgreSQL, MS-SQL and Oracle. These may have specific syntax in certain cases. In order to achieve cross-db compatibility of the code, you should use functions from the DML API to generate the fragments of the query valid for the actual SQL server. Here are some functions that you may need to use often:","title":"Cross database compatibility"},{"location":"Moodle/API/phpMoodleDM/#sql_like","text":"Return the query fragment to perform the LIKE comparison. $DB->sql_like( $fieldname, $param, $casesensitive = true, $accentsensitive = true, $notlike = false, $escapechar = ' \\\\ ' ); Example: Searching for records partially matching the given hard-coded literal. $likeidnumber = $DB->sql_like('idnumber', ':idnum'); $DB->get_records_sql( \"SELECT id, fullname FROM {course} WHERE {$likeidnumber}\", [ 'idnum' => 'DEMO-%', ] ); Note: Use sql_like() if the value being compared is trusted and properly formatted/escaped. Use sql_like_escape() if you need to compare with a value submitted by the user.","title":"sql_like"},{"location":"Moodle/API/phpMoodleDM/#sql_like_escape","text":"Escape the value submitted by the user so that it can be used for partial comparison and the special characters like '_' or '%' behave as literal characters, not wildcards. $DB->sql_like_escape( $text, $escapechar = '\\\\' ); Example: If you need to perform a partial comparison with a value that has been submitted by the user. $search = required_param('search', PARAM_RAW); $likefullname = $DB->sql_like('fullname', ':fullname'); $DB->get_records_sql( \"SELECT id, fullname FROM {course} WHERE {$likefullname}\", [ 'fullname' => '%' . $DB->sql_like_escape($search) . '%', ] );","title":"sql_like_escape"},{"location":"Moodle/API/phpMoodleDM/#get_in_or_equal","text":"Return the query fragment to check if a value is IN the given list of items (with a fallback to plain equal comparison if there is just one item). public function get_in_or_equal( $items, $type = SQL_PARAMS_QM, $prefix = 'param', $equal = true, $onemptyitems = false ); Example: $statuses = ['todo', 'open', 'inprogress', 'intesting']; [$insql, $inparams] = $DB->get_in_or_equal($statuses); $sql = \"SELECT * FROM {bugtracker_issues} WHERE status $insql\"; $bugs = $DB->get_records_sql($sql, $inparams); Additional reading Please see the Cross-DB compatibility section of the DML dev docs for a list of useful functions you can use to generate cross-db compatible SQL.","title":"get_in_or_equal"},{"location":"Moodle/API/phpMoodleDM/#factors-affecting-database-performance","text":"","title":"Factors affecting database performance"},{"location":"Moodle/API/phpMoodleDM/#reduce-database-queries","text":"Minimize number of database queries. Each query has overhead in terms of network latency and database server processing. Retrieve or update multiple records in a single query whenever possible. Avoid unnecessary loops, nested queries, or redundant operations. Example In the code snippet below, 3 database queries are executed. $userids = [123, 345, 456]; foreach($userids as $id) { $result = $DB->get_record('user', ['id' => $id]); echo $result->username . '<br>'; } Instead of getting the record of each user in each query, you can get the records for all users in a single database query. $userids = [123, 345, 456]; [$insql, $inparams] = $DB->get_in_or_equal($userids); $sql = \"SELECT * FROM {user} WHERE id $insql\"; $users = $DB->get_records_sql($sql, $inparams); foreach($users as $user) { echo $user->username . '<br>'; }","title":"Reduce database queries"},{"location":"Moodle/API/phpMoodleDM/#create-appropriate-indexes","text":"Properly index database tables to improve query performance. Indexes help a database server locate and retrieve data more efficiently. Analyze query patterns and identify frequently queried columns or columns used in WHERE clauses. Create indexes on those columns. Be cautious not to over-index as too many indexes can negatively impact write performance. Example Adding an index named bookid to the book_chapters table, in mod/book/db/upgrade.php. if ($oldversion < 2021052501) { $table = new xmldb_table('book_chapters'); $index = new xmldb_index('bookid', XMLDB_INDEX_NOTUNIQUE, ['bookid']); if (!$dbman->index_exists($table, $index)) { $dbman->add_index($table, $index); } upgrade_mod_savepoint(true, 2021052501, 'book'); } The index defined in the mod/book/db/install.xml file, which is used when the book module is installed. <INDEXES> <INDEX NAME= \"bookid\" UNIQUE= \"false\" FIELDS= \"bookid\" /> </INDEXES>","title":"Create appropriate indexes"},{"location":"Moodle/API/phpMoodleDM/#avoid-select-queries","text":"Instead of selecting all columns (SELECT *), explicitly specify only the columns you need in your query. Reduces the amount of data transferred between the database server and your application, improving performance. Helps avoid unnecessary data processing in your code. Will use less memory than selecting all the columns. Example Consider the following code snippet. $results = $DB->get_records('user'); This will produce the following query, with all the fields selected from the user table. SELECT * FROM { user } ; Now, consider the following code snippet $results = $DB->get_records('user', null, 'id,firstname,lastname,email'); This will produce the following query, with only 4 fields selected: SELECT id , firstname , lastname , email FROM { user } ;","title":"Avoid SELECT * queries"},{"location":"Moodle/API/phpMoodleDM/#cache-database-results","text":"Utilize caching mechanisms to store frequently accessed data in memory. Moodle Universal Cache (MUC) is the main cache used in Moodle. MUC includes request cache, session cache, and application cache. Caching can significantly reduce the load on your database server and improve response times. Example Here is an example of caching a database query result using Moodle's Cache API: $cache = cache::make('mod_myplugin', 'somedata'); // Define the cache key. $cachekey = 'myplugin_my_query_result'; // Check if the result is already cached. if ($result = $cache->get($cachekey)) { // Use the cached result. } else { // Query the database. $result = $DB->get_records('my_table'); // Cache the result for future use. $cache->set($cachekey, $result); }","title":"Cache database results"},{"location":"Moodle/API/phpMoodleDM/#optimize-data-retrieval","text":"Use appropriate filtering and sorting techniques to limit the amount of data processed and transferred. Use conditions in your queries (WHERE clauses) to filter data at the database level rather than retrieving all data and filtering it in your code. Use proper sorting techniques (ORDER BY clauses) to ensure efficient data retrieval.","title":"Optimize data retrieval"},{"location":"Moodle/API/phpMoodleDM/#use-recordsets-when-retrieving-large-dataset","text":"By using the get_recordset_xxx() functions and properly closing the recordset iterator, you can optimize memory usage when dealing with a large number of records retrieved from the database in Moodle code. This helps improve performance and resource management. get_records_xxx() functions are not optimal when retrieving a high number of records. Use get_recordset_xxx() functions instead. get_recordset_xxx() functions return an iterator to save memory. Close the returned recordset iterator after using it to free up resources in the RDBMS. Example $rs = $DB->get_recordset('user'); foreach ($rs as $record) { // Do whatever you want with this record. echo $record->username . '<br>'; } $rs->close();","title":"Use recordsets when retrieving large dataset"},{"location":"Moodle/API/phpMoodleDM/#factors-affecting-database-security","text":"","title":"Factors affecting database security"},{"location":"Moodle/API/phpMoodleDM/#using-dml-and-ddl-apis","text":"Moodle's core libraries takes care of setting up the connection to the database based on the configuration specified in the config.php file. This helps ensure that the database connection is established securely and follows best practices. Always use Moodle's higher-level database methods from DML, such as get_record(), get_records_sql(), etc, instead of writing your own SQL statements.","title":"Using DML and DDL APIs"},{"location":"Moodle/API/phpMoodleDM/#sanitize-user-input","text":"User input should always be properly validated and sanitized to prevent SQL injection and cross-site scripting (XSS) attacks. Use functions like optional_param() or required_param() to clean the input and ensure it is of the expected type before using it in database queries. Example $name = optional_param('name', '', PARAM_TEXT); $sql = \"SELECT * FROM {user} WHERE firstname = :firstname OR lastname = :lastname\"; $records = $DB->get_records_sql($sql, ['firstname' => $name, 'lastname' => $name]); In the code snippet above: The value of $name is sanitized to ensure that it only contains text characters before it is used in the database query. Any invalid characters will be stripped out by the optional_param() function. PARAM_TEXT defines which characters are allowed and what should be stripped out.","title":"Sanitize user input"},{"location":"Moodle/API/phpMoodleDM/#use-bound-parameters","text":"Moodle's database API encourages the use of bound parameters when constructing database queries. Bound parameters automatically handle proper escaping and sanitization of data. When using custom SQL code, it is important to use placeholders to insert values into queries instead of concatenating strings. This helps prevent SQL injection attacks. Example: Using named parameters $sql = \"SELECT * FROM {user} WHERE firstname = :firstname AND lastname = :lastname\"; $records = $DB->get_records_sql($sql, ['firstname' => $firstname, 'lastname' => $lastname]); Example: Using question mark parameters $sql = \"SELECT * FROM {user} WHERE firstname = ? AND lastname = ?\"; $records = $DB->get_records_sql($sql, [$firstname, $lastname]);","title":"Use bound parameters"},{"location":"Moodle/API/phpMoodleDM/#check-proper-access","text":"Before reading or writing data, ensure that user has the required permissions. Check that the user is properly logged in using require_login(). Use has_capability() or require_capability() to check that the user has the required permissions.","title":"Check proper access"},{"location":"Moodle/API/phpMoodleDM/#best-practices","text":"Use Prepared Statements : Moodle DML functions automatically handle prepared statements to prevent SQL injection attacks. Always use parameterized queries. Test with Multiple Databases : Ensure your plugin works across all supported databases (MySQL, PostgreSQL, MS SQL, Oracle). Use Transactions : For critical operations involving multiple queries, use transactions to maintain data integrity. Caching : Where possible, use caching to improve the performance of frequent queries. Follow Database Conventions : Use Moodle\u2019s naming conventions for tables and fields (e.g., lowercase names, singular table names).","title":"Best Practices"},{"location":"Moodle/API/phpMoodleDM/#conclusion","text":"Moodle\u2019s Data Manipulation API provides a powerful abstraction for working with the database in a secure and efficient way. By using the DML functions, you ensure compatibility with different database systems, safeguard against SQL injection, and maintain the overall integrity of the system. Whether you\u2019re performing basic CRUD operations or handling complex transactions, the DML API is the recommended way to manipulate data in Moodle.","title":"Conclusion"},{"location":"Moodle/API/phpMoodleExporter/","text":"Moodle exporters are powerful classes used to convert complex data structures into a simplified, standardized format for external output. They ensure that data exported from Moodle is consistent , uniform , and easy to maintain . Exporters are especially valuable when dealing with external functions , such as web services and AJAX calls , where the data needs to be serialized (transformed into a format that can be transferred over a network or saved for later use). Key Concepts Serialization : Exporters take complex objects or data arrays from Moodle and convert them into a simple, predictable format (typically arrays or JSON). This ensures that external consumers (like web services, API clients, or front-end JavaScript) receive data in a usable, well-structured form. Uniform Data Structure : Exporters help maintain uniformity in the structure of the exported data. This means that no matter what internal data format is being used, it will always be presented in the same way to external systems, making the integration and consumption of data easier and more reliable. Maintainability : By using exporters, Moodle plugins can be more maintainable. Rather than embedding data transformation logic in multiple places, it's centralized in the exporter classes. This makes the system easier to modify and extend in the future, as changes only need to be made in the exporter class. Generating Function Signatures : Exporters are also used to define the input and output signatures for external functions, such as web services. This means that exporters specify exactly what parameters the function will accept and what type of data it will return, ensuring that the communication between external systems and Moodle is well-defined and secure. How Exporters Work in Moodle At a high level, exporters in Moodle follow a specific workflow: Receive Data : The exporter class receives raw data, which could be an object, an associative array, or another complex data structure. Transform Data : The exporter processes the data, transforming it into a simple format that can be used for serialization. This typically involves defining which parts of the data should be included and how they should be presented. Serialize Data : The exporter outputs the data in a format that can be consumed externally. This is often an array, JSON, or another structure that external services can easily work with. Step 1: Defining the Exporter Class The exporter class extends core\\external\\exporter and implements the define_properties() method to define how the data is serialized. The method define_properties() returns a list of the properties expected when instantiating your exporter, and the ones it will export at the same time. namespace local_myplugin\\external; use core\\external\\exporter; use renderer_base; class course_exporter extends exporter { /** * Return the list of properties. * * @return array */ protected static function define_properties() { return [ 'id' => [ 'type' => PARAM_INT ], 'username' => [ 'type' => PARAM_ALPHANUMEXT ], ]; } } These properties will allow us to generate a create or update structure for external functions. Oh, and if you are using persistent you do not need to do this. Property attributes Each property is configured using the following attributes: type The only mandatory attribute. It must either be one of the many PARAM_* constants, or an array of properties. default The default value when the value was not provided. When not specified, a value is required. null Either of the constants NULL_ALLOWED or NULL_NOT_ALLOWED telling if the null value is accepted. This defaults to NULL_NOT_ALLOWED. optional Whether the property can be omitted completely. Defaults to false. multiple Whether there will be more one or more entries under this property. Defaults to false. Although this is not a rule, it is recommended that the standard properties (by opposition to additional properties) only use the type attribute, and only with PARAM_* constants. Step 2: Using the Exporter Once the exporter class is defined, it can be used to export course data like this: $data = (object) ['id' => 123, 'username' => 'batman']; // The only time we can give data to our exporter is when instantiating it. $ue = new user_exporter($data); // To export, we must pass the reference to a renderer. $data = $ue->export($OUTPUT); If we print the content of $data, we will obtain this: stdClass Object ( [id] => 123 [username] => batman ) Exporters for Web Services and AJAX Exporters are often used in conjunction with web services and AJAX requests . When writing external functions, exporters help to clearly define the structure of the data being returned, ensuring that the API response is well-formed and easy to consume. Using Exporter in a Web Service Let's imagine that we have an external function get_users which returns a list of users. For now we only want to export the user ID and their user name, so we'll use our exporter. Let's ask our exporter to create the external structure for us: public static function get_users_returns() { return external_multiple_structure( user_exporter::get_read_structure() ); } Now that this is done, we must use our exporter to export our users' data. public static function get_users() { global $DB, $PAGE; $output = $PAGE->get_renderer('core'); $users = $DB->get_records('user', null, '', 'id, username', 0, 10); // Get 10 users. $result = []; foreach ($users as $userdata) { $exporter = new user_exporter($userdata); $result[] = $exporter->export($output); } return $result; } Lastly, if you had another external function to create users, you could use the exporter to get the structure of the incoming data. That helps if you want your external functions to require more information to create your users as your needs grow. The following indicates that the external function requires the field 'username' to be passed in the key 'user'. The create and update structures include all of the standard properties, none of the other ones. Note that the create structure does not include the id property. Use user_exporter::get_update_structure() if to update a user and thus receive the ID. public static function create_user_parameters() { return new external_function_parameters([ 'user' => user_exporter::get_create_structure() ]); } public static function create_user($user) { // Mandatory parameters validation. $params = self::validate_parameters(self::create_user_parameters(), ['user' => $user]); $user = $params['user']; ... } Important note: when used in the parameters, the exporter's structure must always be included under another key, above we used user. Else this would not be flexible, and may not generate a valid structure for some webservice protocols. Abiding to text formatting rules If we had to pass the $OUTPUT during export as seen previously, that is because we are handling the text formatting automatically for you. Remember the functions format_text() and format_string()? They are used to apply filters on the content typically submitted by users, but also to convert it from a few given formats to HTML. Upon export, the exporter looks at the type of all your properties. When it finds a property of type PARAM_TEXT, it will use format_string(). However, if it finds a property using PARAM_RAW and there is another property of the same name but ending with format it will use format_text(). If you are not familiar with the rules for outputting text in Moodle see Output functions and Most Commonly Used PARAM_* Types . 'description' => [ 'type' => PARAM_RAW, ], 'descriptionformat' => [ 'type' => PARAM_INT, ], With the two above properties added, let's see what happens when the user's description is in the Markdown format and we export it. $data = (object) [ 'id' => 123, 'username' => 'batman', 'description' => 'Hello __world__!', 'descriptionformat' => FORMAT_MARKDOWN ]; $ue = new user_exporter($data, ['context' => context_user::instance(123)]); $data = $ue->export($OUTPUT); Unsurprisingly, this is what comes out of it: stdClass Object ( [id] => 123 [username] => batman [description] => <p>Hello <strong>world</strong>!</p> [descriptionformat] => 1 // Corresponds to FORMAT_HTML. ) Psst... we've cheating a bit above. Did you notice that we've passed a context to the exporter? We passed a related object, more on them later. Formatting parameters Formatting requires a context. If you've defined a related object with the name context we will automatically use this one. But there are cases where you need multiple contexts, or you need to rewrite the pluginfile URLs. When that is the case, you will define a method called 'get_format_parameters_for_' followed with the name of the property. The latter also accepts the various options which both format_text and format_string support. /** * Get the formatting parameters for the description. * * @return array */ protected function get_format_parameters_for_description() { return [ 'component' => 'core_user', 'filearea' => 'description', 'itemid' => $this->data->id ]; } For a complete list of options, refer to the PHP documentation of the method core\\external\\exporter::get_format_parameters(). Note that when you return a context from the above method, it is advised that you get it from the related objects. Doing so will prevent contexts from being loaded from the database from within the exporter and cause unwanted performance issues. The system context is an exception is this. Additional properties The list of other properties are to be seen as additional properties which do not need to be given to the exporter for it to export them. They are dynamically generated from the data provided (and the related objects, more on that later). For example, if we wanted our exporter to provide the URL to a user's profile, we wouldn't need the developer to pass it beforehand, we could generate it based on the ID which was already provided. Other properties are only included in the read structure of an object (get_read_structure and read_properties_definition) as they are dynamically generated. They are not required, nor needed, to create or update an object. /** * Return the list of additional properties. * @return array */ protected static function define_other_properties() { return [ 'profileurl' => [ 'type' => PARAM_URL ], 'statuses' => [ 'type' => status_exporter::read_properties_definition(), 'multiple' => true, 'optional' => true ], ]; } The snippet above defines that we will always export a URL under the property profileurl, and that we will either export a list of status_exporters, or not. As you can see, the type can use the read properties of another exporter which allows exporters to be nested. If you have defined other properties, then you must also add the logic to export them. This is done by adding the method get_other_values(renderer_base $output) to your exporter. Here is an example in which we ignored the statuses as they are optional. /** * Get the additional values to inject while exporting. * * @param renderer_base $output The renderer. * @return array Keys are the property names, values are their values. */ protected function get_other_values(renderer_base $output) { $profileurl = new moodle_url('/user/profile.php', ['id' => $this->data->id]); return [ 'profileurl' => $profileurl->out(false) ]; } Important note: additional properties cannot override standard properties, so make sure the names do not conflict. Related objects There are times we need more information inside the exporter in order to export it. That may be as simple as the context, but it can also be other objects to be used when exporting other properties. As much as possible you will want to avoid calling APIs, or querying the database upon export. Exporters can be used in loops and thus subsequent queries could dramatically affect performance, hence the need for related objects. Related objects need to be defined within the exporter, that is to ensure that they are always provided and are of the right type. In some occasions they can be marked as optional, generally when the related object does not exist. For instance, if we had an issue exporter, an optional related object could be the peer reviewer, as we don't always have a peer reviewer. Use the method protected static define_related() as follows. The keys are an arbitrary name for the related object, and the values are the fully qualified name of the class. The name of the class can be followed by [] and/or ? to respectively indicate a list of these objects, and an optional related. /** * Returns a list of objects that are related. * * @return array */ protected static function define_related() { return [ 'context' => 'context', // Must be an instance of context. 'statuses' => 'some\\\\namespace\\\\status[]', // Must be an array of status instances. 'mother' => 'family\\\\mother?', // Can be a mother instance, or null. 'brothers' => 'family\\\\brother[]?', // Can be null, or an array of brother instances. ]; } We give the related objects to the exporter when we instantiate it, like this: $data = (object) ['id' => 123, 'username' => 'batman']; $relateds = [ 'context' => context_system::instance(), 'statuses' => [ new some\\namespace\\status('Hello'), new some\\namespace\\status('World!'), ], 'mother' => null, 'brothers' => null ]; $ue = new user_exporter($data, $relateds); Note that optional relateds must still be provided but as null. Related objects are accessible from within the exporter using $this->related['nameOfRelated']. Exporters and persistent Great news, if you have a persistent and you want to export them, all the work is pretty much done for you. All of the persistent's properties will automatically be added to your exporter if you extend the class core\\external\\persistent_exporter, and add the method define_class(). class status_exporter extends \\core\\external\\persistent_exporter { /** * Returns the specific class the persistent should be an instance of. * * @return string */ protected static function define_class() { return \\some\\namespace\\status::class; // PHP 5.5+ only } } And if you wanted to add more to it, there is always the other properties. Common pitfalls Exporters must not extend other exporters. They would become too unpredictable. Exporters do not validate your data. They use the properties' attributes to generate the structure required by the External functions API, the latter is responsible for using the structure to validate the data. When exporters are nested, the type to use should be other_exporter::read_properties_definition() and not other_exporter::get_read_structure() . Adding required relateds to an exporter once it has been released can cause coding_exceptions. Each instance will require the new related, which it will not have in 3rd party code/plugins. Preferably an exporter's relateds should never change, but if they must, consider this: Creating a brand new exporter class, and leaving the other one unchanged. Adding the new related, and assigning it a default value in your constructor if undefined. Also print a debugging message for developers to fix their code. Note: Adding the related as optional does not work. Optional relateds still need to be passed to the constructor, but as null. Adding the new related, and advertising that all of its usage must be updated. Examples Minimalist class user_exporter extends core\\external\\exporter { /** * Return the list of properties. * * @return array */ protected static function define_properties() { return [ 'id' => [ 'type' => PARAM_INT ], 'username' => [ 'type' => PARAM_ALPHANUMEXT ], ]; } } More advanced namespace example\\external; use core\\external\\exporter; use renderer_base; use moodle_url; class user_exporter extends exporter { /** * Return the list of properties. * * @return array */ protected static function define_properties() { return [ 'id' => [ 'type' => PARAM_INT ], 'username' => [ 'type' => PARAM_ALPHANUMEXT ], 'description' => [ 'type' => PARAM_RAW, ], 'descriptionformat' => [ 'type' => PARAM_INT, ], ]; } /** * Return the list of additional properties. * @return array */ protected static function define_other_properties() { return [ 'profileurl' => [ 'type' => PARAM_URL ], 'statuses' => [ 'type' => status_exporter::read_properties_definition(), 'multiple' => true, 'optional' => true ], ]; } /** * Returns a list of objects that are related. * * @return array */ protected static function define_related() { return [ 'context' => 'context', 'statuses' => 'some\\\\namespace\\\\status[]', ]; } /** * Get the formatting parameters for the description. * * @return array */ protected function get_format_parameters_for_description() { return [ 'component' => 'core_user', 'filearea' => 'description', 'itemid' => $this->data->id ]; } /** * Get the additional values to inject while exporting. * * @param renderer_base $output The renderer. * @return array Keys are the property names, values are their values. */ protected function get_other_values(renderer_base $output) { $statuses = []; foreach ($this->related['statuses'] as $status) { $exporter = new status_exporter($status); $statuses[] = $exporter->export($output); } $profileurl = new moodle_url('/user/profile.php', ['id' => $this->data->id]); return [ 'profileurl' => $profileurl->out(false), 'statuses' => $statuses ]; } }","title":"Exporter"},{"location":"Moodle/API/phpMoodleExporter/#key-concepts","text":"Serialization : Exporters take complex objects or data arrays from Moodle and convert them into a simple, predictable format (typically arrays or JSON). This ensures that external consumers (like web services, API clients, or front-end JavaScript) receive data in a usable, well-structured form. Uniform Data Structure : Exporters help maintain uniformity in the structure of the exported data. This means that no matter what internal data format is being used, it will always be presented in the same way to external systems, making the integration and consumption of data easier and more reliable. Maintainability : By using exporters, Moodle plugins can be more maintainable. Rather than embedding data transformation logic in multiple places, it's centralized in the exporter classes. This makes the system easier to modify and extend in the future, as changes only need to be made in the exporter class. Generating Function Signatures : Exporters are also used to define the input and output signatures for external functions, such as web services. This means that exporters specify exactly what parameters the function will accept and what type of data it will return, ensuring that the communication between external systems and Moodle is well-defined and secure.","title":"Key Concepts"},{"location":"Moodle/API/phpMoodleExporter/#how-exporters-work-in-moodle","text":"At a high level, exporters in Moodle follow a specific workflow: Receive Data : The exporter class receives raw data, which could be an object, an associative array, or another complex data structure. Transform Data : The exporter processes the data, transforming it into a simple format that can be used for serialization. This typically involves defining which parts of the data should be included and how they should be presented. Serialize Data : The exporter outputs the data in a format that can be consumed externally. This is often an array, JSON, or another structure that external services can easily work with.","title":"How Exporters Work in Moodle"},{"location":"Moodle/API/phpMoodleExporter/#step-1-defining-the-exporter-class","text":"The exporter class extends core\\external\\exporter and implements the define_properties() method to define how the data is serialized. The method define_properties() returns a list of the properties expected when instantiating your exporter, and the ones it will export at the same time. namespace local_myplugin\\external; use core\\external\\exporter; use renderer_base; class course_exporter extends exporter { /** * Return the list of properties. * * @return array */ protected static function define_properties() { return [ 'id' => [ 'type' => PARAM_INT ], 'username' => [ 'type' => PARAM_ALPHANUMEXT ], ]; } } These properties will allow us to generate a create or update structure for external functions. Oh, and if you are using persistent you do not need to do this.","title":"Step 1: Defining the Exporter Class"},{"location":"Moodle/API/phpMoodleExporter/#property-attributes","text":"Each property is configured using the following attributes:","title":"Property attributes"},{"location":"Moodle/API/phpMoodleExporter/#step-2-using-the-exporter","text":"Once the exporter class is defined, it can be used to export course data like this: $data = (object) ['id' => 123, 'username' => 'batman']; // The only time we can give data to our exporter is when instantiating it. $ue = new user_exporter($data); // To export, we must pass the reference to a renderer. $data = $ue->export($OUTPUT); If we print the content of $data, we will obtain this: stdClass Object ( [id] => 123 [username] => batman )","title":"Step 2: Using the Exporter"},{"location":"Moodle/API/phpMoodleExporter/#exporters-for-web-services-and-ajax","text":"Exporters are often used in conjunction with web services and AJAX requests . When writing external functions, exporters help to clearly define the structure of the data being returned, ensuring that the API response is well-formed and easy to consume.","title":"Exporters for Web Services and AJAX"},{"location":"Moodle/API/phpMoodleExporter/#using-exporter-in-a-web-service","text":"Let's imagine that we have an external function get_users which returns a list of users. For now we only want to export the user ID and their user name, so we'll use our exporter. Let's ask our exporter to create the external structure for us: public static function get_users_returns() { return external_multiple_structure( user_exporter::get_read_structure() ); } Now that this is done, we must use our exporter to export our users' data. public static function get_users() { global $DB, $PAGE; $output = $PAGE->get_renderer('core'); $users = $DB->get_records('user', null, '', 'id, username', 0, 10); // Get 10 users. $result = []; foreach ($users as $userdata) { $exporter = new user_exporter($userdata); $result[] = $exporter->export($output); } return $result; } Lastly, if you had another external function to create users, you could use the exporter to get the structure of the incoming data. That helps if you want your external functions to require more information to create your users as your needs grow. The following indicates that the external function requires the field 'username' to be passed in the key 'user'. The create and update structures include all of the standard properties, none of the other ones. Note that the create structure does not include the id property. Use user_exporter::get_update_structure() if to update a user and thus receive the ID. public static function create_user_parameters() { return new external_function_parameters([ 'user' => user_exporter::get_create_structure() ]); } public static function create_user($user) { // Mandatory parameters validation. $params = self::validate_parameters(self::create_user_parameters(), ['user' => $user]); $user = $params['user']; ... } Important note: when used in the parameters, the exporter's structure must always be included under another key, above we used user. Else this would not be flexible, and may not generate a valid structure for some webservice protocols.","title":"Using Exporter in a Web Service"},{"location":"Moodle/API/phpMoodleExporter/#abiding-to-text-formatting-rules","text":"If we had to pass the $OUTPUT during export as seen previously, that is because we are handling the text formatting automatically for you. Remember the functions format_text() and format_string()? They are used to apply filters on the content typically submitted by users, but also to convert it from a few given formats to HTML. Upon export, the exporter looks at the type of all your properties. When it finds a property of type PARAM_TEXT, it will use format_string(). However, if it finds a property using PARAM_RAW and there is another property of the same name but ending with format it will use format_text(). If you are not familiar with the rules for outputting text in Moodle see Output functions and Most Commonly Used PARAM_* Types . 'description' => [ 'type' => PARAM_RAW, ], 'descriptionformat' => [ 'type' => PARAM_INT, ], With the two above properties added, let's see what happens when the user's description is in the Markdown format and we export it. $data = (object) [ 'id' => 123, 'username' => 'batman', 'description' => 'Hello __world__!', 'descriptionformat' => FORMAT_MARKDOWN ]; $ue = new user_exporter($data, ['context' => context_user::instance(123)]); $data = $ue->export($OUTPUT); Unsurprisingly, this is what comes out of it: stdClass Object ( [id] => 123 [username] => batman [description] => <p>Hello <strong>world</strong>!</p> [descriptionformat] => 1 // Corresponds to FORMAT_HTML. ) Psst... we've cheating a bit above. Did you notice that we've passed a context to the exporter? We passed a related object, more on them later.","title":"Abiding to text formatting rules"},{"location":"Moodle/API/phpMoodleExporter/#formatting-parameters","text":"Formatting requires a context. If you've defined a related object with the name context we will automatically use this one. But there are cases where you need multiple contexts, or you need to rewrite the pluginfile URLs. When that is the case, you will define a method called 'get_format_parameters_for_' followed with the name of the property. The latter also accepts the various options which both format_text and format_string support. /** * Get the formatting parameters for the description. * * @return array */ protected function get_format_parameters_for_description() { return [ 'component' => 'core_user', 'filearea' => 'description', 'itemid' => $this->data->id ]; } For a complete list of options, refer to the PHP documentation of the method core\\external\\exporter::get_format_parameters(). Note that when you return a context from the above method, it is advised that you get it from the related objects. Doing so will prevent contexts from being loaded from the database from within the exporter and cause unwanted performance issues. The system context is an exception is this.","title":"Formatting parameters"},{"location":"Moodle/API/phpMoodleExporter/#additional-properties","text":"The list of other properties are to be seen as additional properties which do not need to be given to the exporter for it to export them. They are dynamically generated from the data provided (and the related objects, more on that later). For example, if we wanted our exporter to provide the URL to a user's profile, we wouldn't need the developer to pass it beforehand, we could generate it based on the ID which was already provided. Other properties are only included in the read structure of an object (get_read_structure and read_properties_definition) as they are dynamically generated. They are not required, nor needed, to create or update an object. /** * Return the list of additional properties. * @return array */ protected static function define_other_properties() { return [ 'profileurl' => [ 'type' => PARAM_URL ], 'statuses' => [ 'type' => status_exporter::read_properties_definition(), 'multiple' => true, 'optional' => true ], ]; } The snippet above defines that we will always export a URL under the property profileurl, and that we will either export a list of status_exporters, or not. As you can see, the type can use the read properties of another exporter which allows exporters to be nested. If you have defined other properties, then you must also add the logic to export them. This is done by adding the method get_other_values(renderer_base $output) to your exporter. Here is an example in which we ignored the statuses as they are optional. /** * Get the additional values to inject while exporting. * * @param renderer_base $output The renderer. * @return array Keys are the property names, values are their values. */ protected function get_other_values(renderer_base $output) { $profileurl = new moodle_url('/user/profile.php', ['id' => $this->data->id]); return [ 'profileurl' => $profileurl->out(false) ]; } Important note: additional properties cannot override standard properties, so make sure the names do not conflict.","title":"Additional properties"},{"location":"Moodle/API/phpMoodleExporter/#related-objects","text":"There are times we need more information inside the exporter in order to export it. That may be as simple as the context, but it can also be other objects to be used when exporting other properties. As much as possible you will want to avoid calling APIs, or querying the database upon export. Exporters can be used in loops and thus subsequent queries could dramatically affect performance, hence the need for related objects. Related objects need to be defined within the exporter, that is to ensure that they are always provided and are of the right type. In some occasions they can be marked as optional, generally when the related object does not exist. For instance, if we had an issue exporter, an optional related object could be the peer reviewer, as we don't always have a peer reviewer. Use the method protected static define_related() as follows. The keys are an arbitrary name for the related object, and the values are the fully qualified name of the class. The name of the class can be followed by [] and/or ? to respectively indicate a list of these objects, and an optional related. /** * Returns a list of objects that are related. * * @return array */ protected static function define_related() { return [ 'context' => 'context', // Must be an instance of context. 'statuses' => 'some\\\\namespace\\\\status[]', // Must be an array of status instances. 'mother' => 'family\\\\mother?', // Can be a mother instance, or null. 'brothers' => 'family\\\\brother[]?', // Can be null, or an array of brother instances. ]; } We give the related objects to the exporter when we instantiate it, like this: $data = (object) ['id' => 123, 'username' => 'batman']; $relateds = [ 'context' => context_system::instance(), 'statuses' => [ new some\\namespace\\status('Hello'), new some\\namespace\\status('World!'), ], 'mother' => null, 'brothers' => null ]; $ue = new user_exporter($data, $relateds); Note that optional relateds must still be provided but as null. Related objects are accessible from within the exporter using $this->related['nameOfRelated'].","title":"Related objects"},{"location":"Moodle/API/phpMoodleExporter/#exporters-and-persistent","text":"Great news, if you have a persistent and you want to export them, all the work is pretty much done for you. All of the persistent's properties will automatically be added to your exporter if you extend the class core\\external\\persistent_exporter, and add the method define_class(). class status_exporter extends \\core\\external\\persistent_exporter { /** * Returns the specific class the persistent should be an instance of. * * @return string */ protected static function define_class() { return \\some\\namespace\\status::class; // PHP 5.5+ only } } And if you wanted to add more to it, there is always the other properties.","title":"Exporters and persistent"},{"location":"Moodle/API/phpMoodleExporter/#common-pitfalls","text":"Exporters must not extend other exporters. They would become too unpredictable. Exporters do not validate your data. They use the properties' attributes to generate the structure required by the External functions API, the latter is responsible for using the structure to validate the data. When exporters are nested, the type to use should be other_exporter::read_properties_definition() and not other_exporter::get_read_structure() . Adding required relateds to an exporter once it has been released can cause coding_exceptions. Each instance will require the new related, which it will not have in 3rd party code/plugins. Preferably an exporter's relateds should never change, but if they must, consider this: Creating a brand new exporter class, and leaving the other one unchanged. Adding the new related, and assigning it a default value in your constructor if undefined. Also print a debugging message for developers to fix their code. Note: Adding the related as optional does not work. Optional relateds still need to be passed to the constructor, but as null. Adding the new related, and advertising that all of its usage must be updated.","title":"Common pitfalls"},{"location":"Moodle/API/phpMoodleExporter/#examples","text":"","title":"Examples"},{"location":"Moodle/API/phpMoodleExporter/#minimalist","text":"class user_exporter extends core\\external\\exporter { /** * Return the list of properties. * * @return array */ protected static function define_properties() { return [ 'id' => [ 'type' => PARAM_INT ], 'username' => [ 'type' => PARAM_ALPHANUMEXT ], ]; } }","title":"Minimalist"},{"location":"Moodle/API/phpMoodleExporter/#more-advanced","text":"namespace example\\external; use core\\external\\exporter; use renderer_base; use moodle_url; class user_exporter extends exporter { /** * Return the list of properties. * * @return array */ protected static function define_properties() { return [ 'id' => [ 'type' => PARAM_INT ], 'username' => [ 'type' => PARAM_ALPHANUMEXT ], 'description' => [ 'type' => PARAM_RAW, ], 'descriptionformat' => [ 'type' => PARAM_INT, ], ]; } /** * Return the list of additional properties. * @return array */ protected static function define_other_properties() { return [ 'profileurl' => [ 'type' => PARAM_URL ], 'statuses' => [ 'type' => status_exporter::read_properties_definition(), 'multiple' => true, 'optional' => true ], ]; } /** * Returns a list of objects that are related. * * @return array */ protected static function define_related() { return [ 'context' => 'context', 'statuses' => 'some\\\\namespace\\\\status[]', ]; } /** * Get the formatting parameters for the description. * * @return array */ protected function get_format_parameters_for_description() { return [ 'component' => 'core_user', 'filearea' => 'description', 'itemid' => $this->data->id ]; } /** * Get the additional values to inject while exporting. * * @param renderer_base $output The renderer. * @return array Keys are the property names, values are their values. */ protected function get_other_values(renderer_base $output) { $statuses = []; foreach ($this->related['statuses'] as $status) { $exporter = new status_exporter($status); $statuses[] = $exporter->export($output); } $profileurl = new moodle_url('/user/profile.php', ['id' => $this->data->id]); return [ 'profileurl' => $profileurl->out(false), 'statuses' => $statuses ]; } }","title":"More advanced"},{"location":"Moodle/API/phpMoodleGroups/","text":"Moodle Groups are a way of expressing collections of users within a course. They may be defined by the teacher in the course participants page, or created automatically during a bulk user upload (for example, from a text file). A teacher can choose whether to use, or even to force, the use of groups for an entire course (from within the Course settings page), or for an individual activity (from within the Activity settings). Group modes There are three different group modes, these modes allow for restrictions to be put in place for access and visibility. No groups (NOGROUPS constant) - The course or activity has no groups. Separate groups (SEPARATEGROUPS constant) - Teachers and students can normally only see information relevant to that group. Visible groups (VISIBLEGROUPS constant) - Teachers and students are separated into groups but can still see all information. This is explained in more detail on the Groups access control page. Only groups with participation enabled are available for use in Separate and Visible groups mode. This is enabled by default for groups with Visible to all or Visible to members visibility (See below) but is always disabled for groups with See own membership or Membership is hidden. Calling groups_get_all_groups() with the $participationonly argument set to true will only return groups with participation enabled. If you are calling this function within an activity plugin, you will usually want to do this unless you have a good reason not to. Groups may be grouped together into named Groupings. The Groups API is currently defined in lib/grouplib.php. This contains global functions which have the groups_ prefix, for example: groups_get_group(). If enabled at the course level, the group mode will affect how course-wide reporting functions - for example, if a course-wide group mode of \"Separate groups\" is enabled, this is applied within the gradebook. Groups may be grouped together into named Groupings . The course, and individual activities, can be configured to filter the groups shown to those in a specific Grouping. If a user is a member of multiple groups, then only those groups which belong to the selected grouping are shown. When a course or activity is in the 'Separate' groups mode, only users within that group can interact with, unless they hold the moodle/site:accessallgroups capability. By default, this capability is given to users who hold a role with the editingteacher, and manager archetypes. Most of these settings are handled by the core groups code and core groups API. If the activity module wants to implement group support, it need only use the Groups API to: Find out the current settings for this instance of the activity Show group controls (for example group selection menus) when appropriate Explore memberships and structures of groups Modify it's own interface to hide/show data accordingly Groups are typically only relevant to course features such as Activity modules, some blocks and reports. Some other core subsystems also need to be group-aware. Group visibility To help protect user privacy, each group has a visibility setting, which controls who can see the group and its members. The possible values are defined as GROUPS_VISIBILITY_* constants in grouplib. Users with the moodle/course:viewhiddengroups capability can always see all groups, regardless of their visibility. Otherwise, the following restrictions apply: Visible to all (GROUPS_VISIBILITY_ALL constant) - Everyone can see the group and its members. This is the default, and the legacy behaviour for all groups before Moodle 4.2. Visible to members (GROUPS_VISIBILITY_MEMBERS constant) - Only members of the group can see the group, and members of the group can see each others' membership of the group. See own membership (GROUPS_VISIBILITY_OWN constant) - Only members of the group can see the group, and members cannot see each others' membership, only their own. Membership is hidden (GROUPS_VISIBILITY_NONE constant) - No-one can see the group or its members. The core API functions in groupslib such as groups_get_all_groups() and groups_get_members() will respect the group visibility and the current user's permissions, so use these as far as possible when fetching data about groups and their members. The \\core_group\\visibility class also has helper functions to determine whether a user is allowed to see a group, or its members. Respecting group visibility is important so that members of \"separate groups\" do not see members or data relating to members of different groups. Examples How to make sure that the current user can see a given item in your activity // Get the course module and discussion id from a post or get request. $id = required_param('id', PARAM_INT); $discussionid = required_param('discussionid', PARAM_INT); // Get the course module. $cm = get_coursemodule_from_id('forum', $id, 0, false, MUST_EXIST); // Get the group id for this discussion. $discussiongroup = $DB->get_record('forum_discussions', ['id' => $discussionid], groupid); // Check access. if (groups_get_activity_groupmode($cm)) { $groups = groups_get_activity_allowed_groups($cm); } else { $groups = []; } if (!in_array($discussiongroup->groupid, array_keys($groups))) { print_error('groupnotamember', 'group'); } // Continue on with group specific discussion. The code snippet above: fetches the course module record for the specified forum id; checks whether it has a group mode specified (separate or visible groups); fetches the list of possible groups for that activity; checks whether the forum discussion is in a valid group. How to find and use the \"current\" group and How to display a group menu The following example will display the group selection dropdown using the groups_print_activity_menu() function. This function will show all groups that the user has access to for the current course module. After making a selection, the user will be redirected to the $url provided. // Get the course module id from a post or get request. $id = required_param('id', PARAM_INT); // Get the course module. $cm = get_coursemodule_from_id('forum', $id, 0, false, MUST_EXIST); // Create a moodle_url. // A URL is required so that if the user selects a different group, // the page can be reloaded with the new groups information. $url = new moodle_url('/mod/forum/view.php', ['id' => $cm->id]); // Print group information. // A drop down box will be displayed if the user // is a member of more than one group, or has access to all groups. groups_print_activity_menu($cm, $url); // Get the current group id. $currentgroupid = groups_get_activity_group($cm); // Get the current group name from the group id. $currentgroupname = groups_get_group_name($currentgroupid); // Do as you please with your newly obtained group information. How to get just the groups that the current user can see The following example will check whether the current user has permission to see hidden groups on a course, and if they do not, will apply additional conditions to a query to restrict the results to just those groups they should see. $courseid = required_param('courseid', PARAM_INT); $sql = \"SELECT g.idnumber, gm.* FROM {groups} g JOIN {groups_members} gm ON gm.groupid = g.id WHERE courseid = ?\"; $params = [$courseid]; $context = context_course::instance($courseid); if (!has_capability('moodle/course:viewhiddengroups', $context)) { // Apply visibility restrictions. [ $visibilitywhere, $visibilityparams ] = \\core_group\\visibility::sql_group_visibility_where($userid); $sql .= \" AND \" . $visibilitywhere; $params = array_merge($params, $visibilityparams); } $rs = $DB->get_recordset_sql($sql, $params); A query like this must join on group_members as group visibility is dependant on the user's own memberships. Group GeoPattern images Moodle now allows groups to generate GeoPattern images. This is intended to improve the overall user experience by allowing users to differentiate groups easier in their Moodle activities and resources. Generate the SVG image for the group and use it in your Moodle activities and resources: $group_svg_image = moodle_url::make_pluginfile_url( $context->id, 'group', 'generated', $group->id, '/', 'group.svg' ); This will create an SVG image for the specified group, which can then be used in Moodle activities and resources. Make sure to customize the code to fit your specific use case.","title":"Groups API"},{"location":"Moodle/API/phpMoodleGroups/#group-modes","text":"There are three different group modes, these modes allow for restrictions to be put in place for access and visibility. No groups (NOGROUPS constant) - The course or activity has no groups. Separate groups (SEPARATEGROUPS constant) - Teachers and students can normally only see information relevant to that group. Visible groups (VISIBLEGROUPS constant) - Teachers and students are separated into groups but can still see all information. This is explained in more detail on the Groups access control page. Only groups with participation enabled are available for use in Separate and Visible groups mode. This is enabled by default for groups with Visible to all or Visible to members visibility (See below) but is always disabled for groups with See own membership or Membership is hidden. Calling groups_get_all_groups() with the $participationonly argument set to true will only return groups with participation enabled. If you are calling this function within an activity plugin, you will usually want to do this unless you have a good reason not to. Groups may be grouped together into named Groupings. The Groups API is currently defined in lib/grouplib.php. This contains global functions which have the groups_ prefix, for example: groups_get_group(). If enabled at the course level, the group mode will affect how course-wide reporting functions - for example, if a course-wide group mode of \"Separate groups\" is enabled, this is applied within the gradebook. Groups may be grouped together into named Groupings . The course, and individual activities, can be configured to filter the groups shown to those in a specific Grouping. If a user is a member of multiple groups, then only those groups which belong to the selected grouping are shown. When a course or activity is in the 'Separate' groups mode, only users within that group can interact with, unless they hold the moodle/site:accessallgroups capability. By default, this capability is given to users who hold a role with the editingteacher, and manager archetypes. Most of these settings are handled by the core groups code and core groups API. If the activity module wants to implement group support, it need only use the Groups API to: Find out the current settings for this instance of the activity Show group controls (for example group selection menus) when appropriate Explore memberships and structures of groups Modify it's own interface to hide/show data accordingly Groups are typically only relevant to course features such as Activity modules, some blocks and reports. Some other core subsystems also need to be group-aware.","title":"Group modes"},{"location":"Moodle/API/phpMoodleGroups/#group-visibility","text":"To help protect user privacy, each group has a visibility setting, which controls who can see the group and its members. The possible values are defined as GROUPS_VISIBILITY_* constants in grouplib. Users with the moodle/course:viewhiddengroups capability can always see all groups, regardless of their visibility. Otherwise, the following restrictions apply: Visible to all (GROUPS_VISIBILITY_ALL constant) - Everyone can see the group and its members. This is the default, and the legacy behaviour for all groups before Moodle 4.2. Visible to members (GROUPS_VISIBILITY_MEMBERS constant) - Only members of the group can see the group, and members of the group can see each others' membership of the group. See own membership (GROUPS_VISIBILITY_OWN constant) - Only members of the group can see the group, and members cannot see each others' membership, only their own. Membership is hidden (GROUPS_VISIBILITY_NONE constant) - No-one can see the group or its members. The core API functions in groupslib such as groups_get_all_groups() and groups_get_members() will respect the group visibility and the current user's permissions, so use these as far as possible when fetching data about groups and their members. The \\core_group\\visibility class also has helper functions to determine whether a user is allowed to see a group, or its members. Respecting group visibility is important so that members of \"separate groups\" do not see members or data relating to members of different groups.","title":"Group visibility"},{"location":"Moodle/API/phpMoodleGroups/#examples","text":"","title":"Examples"},{"location":"Moodle/API/phpMoodleGroups/#how-to-make-sure-that-the-current-user-can-see-a-given-item-in-your-activity","text":"// Get the course module and discussion id from a post or get request. $id = required_param('id', PARAM_INT); $discussionid = required_param('discussionid', PARAM_INT); // Get the course module. $cm = get_coursemodule_from_id('forum', $id, 0, false, MUST_EXIST); // Get the group id for this discussion. $discussiongroup = $DB->get_record('forum_discussions', ['id' => $discussionid], groupid); // Check access. if (groups_get_activity_groupmode($cm)) { $groups = groups_get_activity_allowed_groups($cm); } else { $groups = []; } if (!in_array($discussiongroup->groupid, array_keys($groups))) { print_error('groupnotamember', 'group'); } // Continue on with group specific discussion. The code snippet above: fetches the course module record for the specified forum id; checks whether it has a group mode specified (separate or visible groups); fetches the list of possible groups for that activity; checks whether the forum discussion is in a valid group.","title":"How to make sure that the current user can see a given item in your activity"},{"location":"Moodle/API/phpMoodleGroups/#how-to-find-and-use-the-current-group-and-how-to-display-a-group-menu","text":"The following example will display the group selection dropdown using the groups_print_activity_menu() function. This function will show all groups that the user has access to for the current course module. After making a selection, the user will be redirected to the $url provided. // Get the course module id from a post or get request. $id = required_param('id', PARAM_INT); // Get the course module. $cm = get_coursemodule_from_id('forum', $id, 0, false, MUST_EXIST); // Create a moodle_url. // A URL is required so that if the user selects a different group, // the page can be reloaded with the new groups information. $url = new moodle_url('/mod/forum/view.php', ['id' => $cm->id]); // Print group information. // A drop down box will be displayed if the user // is a member of more than one group, or has access to all groups. groups_print_activity_menu($cm, $url); // Get the current group id. $currentgroupid = groups_get_activity_group($cm); // Get the current group name from the group id. $currentgroupname = groups_get_group_name($currentgroupid); // Do as you please with your newly obtained group information.","title":"How to find and use the \"current\" group and How to display a group menu"},{"location":"Moodle/API/phpMoodleGroups/#how-to-get-just-the-groups-that-the-current-user-can-see","text":"The following example will check whether the current user has permission to see hidden groups on a course, and if they do not, will apply additional conditions to a query to restrict the results to just those groups they should see. $courseid = required_param('courseid', PARAM_INT); $sql = \"SELECT g.idnumber, gm.* FROM {groups} g JOIN {groups_members} gm ON gm.groupid = g.id WHERE courseid = ?\"; $params = [$courseid]; $context = context_course::instance($courseid); if (!has_capability('moodle/course:viewhiddengroups', $context)) { // Apply visibility restrictions. [ $visibilitywhere, $visibilityparams ] = \\core_group\\visibility::sql_group_visibility_where($userid); $sql .= \" AND \" . $visibilitywhere; $params = array_merge($params, $visibilityparams); } $rs = $DB->get_recordset_sql($sql, $params); A query like this must join on group_members as group visibility is dependant on the user's own memberships.","title":"How to get just the groups that the current user can see"},{"location":"Moodle/API/phpMoodleGroups/#group-geopattern-images","text":"Moodle now allows groups to generate GeoPattern images. This is intended to improve the overall user experience by allowing users to differentiate groups easier in their Moodle activities and resources. Generate the SVG image for the group and use it in your Moodle activities and resources: $group_svg_image = moodle_url::make_pluginfile_url( $context->id, 'group', 'generated', $group->id, '/', 'group.svg' ); This will create an SVG image for the specified group, which can then be used in Moodle activities and resources. Make sure to customize the code to fit your specific use case.","title":"Group GeoPattern images"},{"location":"Moodle/API/phpMoodleMessage/","text":"If you are after a general introduction on using the Moodle Messaging system go to messaging user documentation . If you are looking for details of how the Messaging system's internal structure was implemented, go to Messaging 2.0 . If you are looking for instructions on the implementation of a custom message processor (a component that receives messages sent to a user), go to Messaging custom components . If you are looking for instructions on sending messages programmatically within Moodle then read on. Moodle components have the ability to send messages to users via the Moodle messaging system. Any type of component, for example a plugin or block, can register as a message producer then send messages to users. File locations The Message API code is contained within lib/messagelib.php and is automatically included for you during page setup. Functions message_send() is the primary point of contact for the message API. Call it to send a message to a user. Message pop-up Since 2.9, a JavaScript pop-up can be displayed through a link to invite a user to message another. In order to use this feature, you need to require the JavaScript libraries using message_messenger_requirejs() and create a link with the attributes returned by message_messenger_sendmessage_link_params() . Examples How to register as a message producer The messages produced by a message provider is defined in the /db/messages.php file of a component. // mod/quiz/db/messages.php defined('MOODLE_INTERNAL') || die(); $messageproviders = [ // Notify teacher that a student has submitted a quiz attempt 'submission' => [ 'capability' => 'mod/quiz:emailnotifysubmission' ], // Confirm a student's quiz attempt 'confirmation' => [ 'capability' => 'mod/quiz:emailconfirmsubmission' ], ]; The quiz can send two kinds of messages, quiz \"submission\" and \"confirmation\" notifications. Each message type is only available to users with the appropriate capability. Please note that the capability is checked at the system level context. Users who have this capability will have this message listed in their messaging preferences. You can omit the capability section if your message should be visible for all users. For example forum post notifications are available to all users. $messageproviders = [ // Ordinary single forum posts 'posts' => [], ]; When displaying your message types in a user's messaging preferences it will use a string from your component's language file called messageprovider:messagename. For example here are the relevant strings from the quiz's language file. $string['messageprovider:confirmation'] = 'Confirmation of your own quiz submissions'; $string['messageprovider:submission'] = 'Notification of quiz submissions'; Once your messages.php is complete you need to increase the version number of your component in its version.php . That will cause Moodle to check messages.php looking for new or changed message definitions. Setting defaults The default processor can be set using an element of the array 'mynotification' => [ 'defaults' => [ 'pop-up' => MESSAGE_PERMITTED + MESSAGE_DEFAULT_LOGGEDIN + MESSAGE_DEFAULT_LOGGEDOFF, 'email' => MESSAGE_PERMITTED, ], ], With that setting email will be permitted but disabled for each user by default. It can be turned on by each user through the preferences/notification preferences options ( /message/notificationpreferences.php?userid=X ) The possible values are recorded in the lib.php file of messaging /** * Define contants for messaging default settings population. For unambiguity of * plugin developer intentions we use 4-bit value (LSB numbering): * bit 0 - whether to send message when user is loggedin (MESSAGE_DEFAULT_LOGGEDIN) * bit 1 - whether to send message when user is loggedoff (MESSAGE_DEFAULT_LOGGEDOFF) * bit 2..3 - messaging permission (MESSAGE_DISALLOWED|MESSAGE_PERMITTED|MESSAGE_FORCED) * * MESSAGE_PERMITTED_MASK contains the mask we use to distinguish permission setting */ Note that if you change the values in message.php and then upgrade the plugin the values will not automatically be changed in the config_plugins table where they are stored. How to send a message Since 2.9, here is example code showing you how to actually send a notification message. The example shows the construction of a object with specific properties, which is then passed to the message_send() function that uses the information to send a message. // Sending a message $message = new \\core\\message\\message(); $message->component = 'mod_yourmodule'; // Your plugin's name $message->name = 'mynotification'; // Your notification name from message.php $message->userfrom = core_user::get_noreply_user(); // If the message is 'from' a specific user you can set them here $message->userto = $user; $message->subject = 'message subject 1'; $message->fullmessage = 'message body'; $message->fullmessageformat = FORMAT_MARKDOWN; $message->fullmessagehtml = '<p>message body</p>'; $message->smallmessage = 'small message'; $message->notification = 1; // Because this is a notification generated from Moodle, not a user-to-user message $message->contexturl = (new \\moodle_url('/course/'))->out(false); // A relevant URL for the notification $message->contexturlname = 'Course list'; // Link title explaining where users get to for the contexturl // Extra content for specific processor $content = [ '*' => [ 'header' => ' test ', 'footer' => ' test ', ], ]; $message->set_additional_content('email', $content); // You probably don't need attachments but if you do, here is how to add one $usercontext = context_user::instance($user->id); $file = new stdClass(); $file->contextid = $usercontext->id; $file->component = 'user'; $file->filearea = 'private'; $file->itemid = 0; $file->filepath = '/'; $file->filename = '1.txt'; $file->source = 'test'; $fs = get_file_storage(); $file = $fs->create_file_from_string($file, 'file1 content'); $message->attachment = $file; // Actually send the message $messageid = message_send($message); Before 2.9 message data used to be a stdClass object as shown below (This formation of a message will no longer work as of Moodle 3.6. Only a message object will be accepted): $message = new stdClass(); $message->component = 'mod_quiz'; //your component name $message->name = 'submission'; //this is the message name from messages.php $message->userfrom = $USER; $message->userto = $touser; $message->subject = $subject; $message->fullmessage = $message; $message->fullmessageformat = FORMAT_PLAIN; $message->fullmessagehtml = ''; $message->smallmessage = ''; $message->notification = 1; //this is only set to 0 for personal messages between users message_send($message); How to set-up the message pop-up Here is example code showing you how to set-up the JavaScript pop-up link. require_once('message/lib.php'); $userid = 2; $userto = $DB->get_record('user', ['id' => $userid]); message_messenger_requirejs(); $url = new moodle_url('message/index.php', ['id' => $userto->id]); $attributes = message_messenger_sendmessage_link_params($userto); echo html_writer::link($url, 'Send a message', $attributes); Changes in Moodle 3.5 In Moodle 3.5, there were some moderately big changes. The main message_send() API to send a message has not changed, so if your code is just sending messages, you don't need to do anything. Similarly, message_output plugins don't need to change, so no worries there. If you are doing things with messages, then you need to understand how the internals have changed. The database tables have changed. Messages from Moodle components to a user (e.g. mod_quiz), telling them that something has happened (e.g. an attempt was submitted) have always been 'Notifications'. In the past, this was just a column in the mdl_message table. Now, messages and notifications are stored in completely separate tables. Notifications are in mdl_notifications. The structure of this table is very similar to the old mdl_message table which is now not used at all. Messages are in mdl_messages, and related tables, that now exist to support group messaging. Those tables join together like this: SELECT * FROM mdl_messages m JOIN mdl_message_conversations con ON con . id = m . conversationid JOIN mdl_message_conversation_members mem ON mem . conversationid = con . id LEFT JOIN mdl_message_user_actions act ON act . userid = mem . userid AND act . messageid = m . id ORDER BY m . timecreated , m . id , mem . userid , act . id","title":"Messaging API"},{"location":"Moodle/API/phpMoodleMessage/#file-locations","text":"The Message API code is contained within lib/messagelib.php and is automatically included for you during page setup.","title":"File locations"},{"location":"Moodle/API/phpMoodleMessage/#functions","text":"message_send() is the primary point of contact for the message API. Call it to send a message to a user.","title":"Functions"},{"location":"Moodle/API/phpMoodleMessage/#message-pop-up","text":"Since 2.9, a JavaScript pop-up can be displayed through a link to invite a user to message another. In order to use this feature, you need to require the JavaScript libraries using message_messenger_requirejs() and create a link with the attributes returned by message_messenger_sendmessage_link_params() .","title":"Message pop-up"},{"location":"Moodle/API/phpMoodleMessage/#examples","text":"","title":"Examples"},{"location":"Moodle/API/phpMoodleMessage/#how-to-register-as-a-message-producer","text":"The messages produced by a message provider is defined in the /db/messages.php file of a component. // mod/quiz/db/messages.php defined('MOODLE_INTERNAL') || die(); $messageproviders = [ // Notify teacher that a student has submitted a quiz attempt 'submission' => [ 'capability' => 'mod/quiz:emailnotifysubmission' ], // Confirm a student's quiz attempt 'confirmation' => [ 'capability' => 'mod/quiz:emailconfirmsubmission' ], ]; The quiz can send two kinds of messages, quiz \"submission\" and \"confirmation\" notifications. Each message type is only available to users with the appropriate capability. Please note that the capability is checked at the system level context. Users who have this capability will have this message listed in their messaging preferences. You can omit the capability section if your message should be visible for all users. For example forum post notifications are available to all users. $messageproviders = [ // Ordinary single forum posts 'posts' => [], ]; When displaying your message types in a user's messaging preferences it will use a string from your component's language file called messageprovider:messagename. For example here are the relevant strings from the quiz's language file. $string['messageprovider:confirmation'] = 'Confirmation of your own quiz submissions'; $string['messageprovider:submission'] = 'Notification of quiz submissions'; Once your messages.php is complete you need to increase the version number of your component in its version.php . That will cause Moodle to check messages.php looking for new or changed message definitions.","title":"How to register as a message producer"},{"location":"Moodle/API/phpMoodleMessage/#setting-defaults","text":"The default processor can be set using an element of the array 'mynotification' => [ 'defaults' => [ 'pop-up' => MESSAGE_PERMITTED + MESSAGE_DEFAULT_LOGGEDIN + MESSAGE_DEFAULT_LOGGEDOFF, 'email' => MESSAGE_PERMITTED, ], ], With that setting email will be permitted but disabled for each user by default. It can be turned on by each user through the preferences/notification preferences options ( /message/notificationpreferences.php?userid=X ) The possible values are recorded in the lib.php file of messaging /** * Define contants for messaging default settings population. For unambiguity of * plugin developer intentions we use 4-bit value (LSB numbering): * bit 0 - whether to send message when user is loggedin (MESSAGE_DEFAULT_LOGGEDIN) * bit 1 - whether to send message when user is loggedoff (MESSAGE_DEFAULT_LOGGEDOFF) * bit 2..3 - messaging permission (MESSAGE_DISALLOWED|MESSAGE_PERMITTED|MESSAGE_FORCED) * * MESSAGE_PERMITTED_MASK contains the mask we use to distinguish permission setting */ Note that if you change the values in message.php and then upgrade the plugin the values will not automatically be changed in the config_plugins table where they are stored.","title":"Setting defaults"},{"location":"Moodle/API/phpMoodleMessage/#how-to-send-a-message","text":"Since 2.9, here is example code showing you how to actually send a notification message. The example shows the construction of a object with specific properties, which is then passed to the message_send() function that uses the information to send a message. // Sending a message $message = new \\core\\message\\message(); $message->component = 'mod_yourmodule'; // Your plugin's name $message->name = 'mynotification'; // Your notification name from message.php $message->userfrom = core_user::get_noreply_user(); // If the message is 'from' a specific user you can set them here $message->userto = $user; $message->subject = 'message subject 1'; $message->fullmessage = 'message body'; $message->fullmessageformat = FORMAT_MARKDOWN; $message->fullmessagehtml = '<p>message body</p>'; $message->smallmessage = 'small message'; $message->notification = 1; // Because this is a notification generated from Moodle, not a user-to-user message $message->contexturl = (new \\moodle_url('/course/'))->out(false); // A relevant URL for the notification $message->contexturlname = 'Course list'; // Link title explaining where users get to for the contexturl // Extra content for specific processor $content = [ '*' => [ 'header' => ' test ', 'footer' => ' test ', ], ]; $message->set_additional_content('email', $content); // You probably don't need attachments but if you do, here is how to add one $usercontext = context_user::instance($user->id); $file = new stdClass(); $file->contextid = $usercontext->id; $file->component = 'user'; $file->filearea = 'private'; $file->itemid = 0; $file->filepath = '/'; $file->filename = '1.txt'; $file->source = 'test'; $fs = get_file_storage(); $file = $fs->create_file_from_string($file, 'file1 content'); $message->attachment = $file; // Actually send the message $messageid = message_send($message); Before 2.9 message data used to be a stdClass object as shown below (This formation of a message will no longer work as of Moodle 3.6. Only a message object will be accepted): $message = new stdClass(); $message->component = 'mod_quiz'; //your component name $message->name = 'submission'; //this is the message name from messages.php $message->userfrom = $USER; $message->userto = $touser; $message->subject = $subject; $message->fullmessage = $message; $message->fullmessageformat = FORMAT_PLAIN; $message->fullmessagehtml = ''; $message->smallmessage = ''; $message->notification = 1; //this is only set to 0 for personal messages between users message_send($message);","title":"How to send a message"},{"location":"Moodle/API/phpMoodleMessage/#how-to-set-up-the-message-pop-up","text":"Here is example code showing you how to set-up the JavaScript pop-up link. require_once('message/lib.php'); $userid = 2; $userto = $DB->get_record('user', ['id' => $userid]); message_messenger_requirejs(); $url = new moodle_url('message/index.php', ['id' => $userto->id]); $attributes = message_messenger_sendmessage_link_params($userto); echo html_writer::link($url, 'Send a message', $attributes);","title":"How to set-up the message pop-up"},{"location":"Moodle/API/phpMoodleMessage/#changes-in-moodle-35","text":"In Moodle 3.5, there were some moderately big changes. The main message_send() API to send a message has not changed, so if your code is just sending messages, you don't need to do anything. Similarly, message_output plugins don't need to change, so no worries there. If you are doing things with messages, then you need to understand how the internals have changed. The database tables have changed. Messages from Moodle components to a user (e.g. mod_quiz), telling them that something has happened (e.g. an attempt was submitted) have always been 'Notifications'. In the past, this was just a column in the mdl_message table. Now, messages and notifications are stored in completely separate tables. Notifications are in mdl_notifications. The structure of this table is very similar to the old mdl_message table which is now not used at all. Messages are in mdl_messages, and related tables, that now exist to support group messaging. Those tables join together like this: SELECT * FROM mdl_messages m JOIN mdl_message_conversations con ON con . id = m . conversationid JOIN mdl_message_conversation_members mem ON mem . conversationid = con . id LEFT JOIN mdl_message_user_actions act ON act . userid = mem . userid AND act . messageid = m . id ORDER BY m . timecreated , m . id , mem . userid , act . id","title":"Changes in Moodle 3.5"},{"location":"Moodle/API/phpMoodlePersistent/","text":"The Persistent API in Moodle is a framework that simplifies the handling of data records, particularly when dealing with the database. It provides a structured way to interact with database tables, making it easier to create, update, retrieve, and delete records while ensuring data integrity and consistency. Key Features of the Persistent API Encapsulation of Data Logic : The API encapsulates the logic related to data operations, meaning you work with objects representing your data rather than writing SQL queries directly. Automatic Data Validation : The Persistent API automatically validates data before it is inserted or updated in the database, ensuring that only valid data is stored. Easier Maintenance : By using a consistent interface for data manipulation, the Persistent API makes your code more maintainable and less prone to errors. Supports Transactions : The API supports database transactions, allowing multiple operations to be performed atomically. Creating a Persistent Class To use the Persistent API, you define a class that extends core\\persistent . This class represents a table in the database and encapsulates all the operations that can be performed on that table. Example Structure of a Persistent Class namespace local_yourplugin; use core\\persistent; class example extends persistent { // Define the table name associated with this persistent class const TABLE = 'local_yourplugin_example'; // Define the properties (fields) of the persistent class protected static function define_properties() { return [ 'name' => [ 'type' => PARAM_TEXT, 'default' => '', ], 'description' => [ 'type' => PARAM_TEXT, 'default' => '', ], 'timecreated' => [ 'type' => PARAM_INT, 'default' => 0, ], 'timemodified' => [ 'type' => PARAM_INT, 'default' => 0, ], ]; } } Key Components Table Definition : The const TABLE constant defines the name of the database table that this persistent class represents. While the persistent class is helpful for database interactions, it does not automatically fetch the properties from the database, nor does it create the tables. You will need to create the table yourself, as well as pointing the persistent to it. This can be done by defining the class constant TABLE. /** Table name for the persistent. */ const TABLE = 'status'; The table name must not contain the Moodle prefix. Also it is common practice to always refer to your table name using the constant. Property Definitions : The define_properties() method returns an array of fields that map to the columns in the database table. Each field is described by its type (e.g., PARAM_TEXT , PARAM_INT ), default value, and other properties attributes. Properties attributes : type The only mandatory attribute. It must be one of the many PARAM_* constants. default The default value to attach to the property when it hasn't been provided. Without a default, the property's value is required. Alternatively this can be a Closure returning the default value. null Either of the constants NULL_ALLOWED or NULL_NOT_ALLOWED determining if the null value is accepted. This defaults to NULL_NOT_ALLOWED. message The default error message (as a lang_string instance) to return when the validation of this field fails. choices An array of values which the property must fall in. 'messageformat' => [ 'type' => PARAM_INT, 'default' => FORMAT_PLAIN, 'choices' => [FORMAT_PLAIN, FORMAT_HTML, FORMAT_MOODLE, FORMAT_MARKDOWN] ], 'location' => [ 'type' => PARAM_ALPHANUMEXT, 'null' => NULL_ALLOWED, 'message' => new lang_string('invaliddata', 'error'), 'default' => function() { return get_config('core', 'default_location'); }, ] Note that you should always use a Closure for the default value when you cannot guarantee that it will not change since the start of the request. The list of properties and their attributes is cached, and so failure to use a Closure can result in using an outdated default value. Mandatory properties : Four fields are always added to your persistent and should be reflected in your database table. You must not define those properties in define_properties(): id (non-null integer) : The primary key of the record. usermodified (non-null integer) : The user who created/modified the object. It is automatically set. timecreated (non-null integer) : The timestamp at which the record was modified. It is automatically set. timemodified (non-null integer) : The timestamp at which the record was modified. It is automatically set, and defaults to 0. From Moodle 3.7 onwards, the XMLDB tool has an option to add these fields to your table. Basic Operations with Persistent API Once your persistent class is defined, you can easily perform CRUD (Create, Read, Update, Delete) operations. Creating a Record To create a new record in the database: $record = new example(0, (object)[ 'name' => 'Example Name', 'description' => 'Example description.', ]); $record->create(); Retrieving a Record This can be done using the method get(). Alternatively you can also use to_record() which exports the whole object. To retrieve a record by its ID: $record = new example($id); echo $record->get('name'); // or $record = $record->to_record(); You may add a new custom getter to implement your own custom logic. To do this just add a new method get_propertyname() and it will be called from the generic get() method. For instance you could convert the data in another format automatically as a convenience for developers. However, use this sparingly as it may lead to confusion: what you get is not what is stored in the database. Also - to get the actual value from a custom getter - call raw_get(). Calling get() from a custom getter will generate a segfault due to infinite recursion. It is, however, encouraged to add convenience methods such as the following: /** * Returns the user object of the author. * * @return stdClass */ public function get_author() { return core_user::get_user($this->get('userid')); } Updating a Record There are two ways to do so. You use an object (stdClass) to assign a bunch of properties at once. Use it with the constructor, or the method from_record(). Or, you can use the magic setters set_ followed by the property name. To update an existing record: $record = new example($id); $record->set('name', 'Updated Name'); $record->update(); // or $record->from_record($record->get_record()); Though you don't have to for the code to work, you can define your own setter methods which will be called from the generic setter. This is useful if you want to extract the data out of a more complex object prior to assigning it. Though note that those setters will then have to use the raw_set() method to assign the values (if you do not you will see a segfault because of infinite recursion). /** * Convenience method to set the user ID. * * @param object|int $idorobject The user ID, or a user object. */ public function set_userid($idorobject) { $userid = $idorobject; if (is_object($idorobject)) { $userid = $idorobject->id; } $this->raw_set('userid', $userid); } In the above example we will accept an object or an ID, as a convenience for developers we will extract the ID value out of the object passed if any. Just like custom getters, must be careful so that the following code should not result in a change in the DB. $value = $persistent->get('property'); $persistent->set('property', $value); $persistent->update(); You can obviously create your own setters which aren't based on any properties just as a convenience. For instance we could have created set_userid_from_user(object $user) which is more verbose and more predictable Deleting a Record To delete a record: $record = new example($id); $record->delete(); The methods to create, read, update and delete are eponymous. Your object will be validated before you create or update it. The update, delete and read methods require your object to contain its ID. And you also won't be allowed to create an entry which already had an ID defined. Here are some code examples: // Fetches an object from database based on its ID. $id = 123; $persistent = new status($id); // Create object in the database. $data = new stdClass(); $data->message = 'Hello new world'; $persistent = new persistent(0, $data); $persistent->create(); // $persistent->get('id') will now return an id. // Load an object from the database, and update it. $id = 123; $persistent = new status($id); $persistent->set('message', 'Hello new world!'); $persistent->update(); // Reset the instance to the values in the database. $persistent->read(); // Permanently delete the object from the database. $persistent->delete(); Other Features Fetching Records Once you start using persistents you should never directly interact with the database outside of your class. The persistent class comes with a few handy methods allowing you to retrieve your objects. // Use the constructor to fetch one object from its ID. $persistent = new status($id); // Get one record from a set of conditions. $persistent = status::get_record(['userid' => $userid, 'message' => 'Hello world!']); // Get multiple records from a set of conditions. $persistents = status::get_records(['userid' => $userid]); // Count the records. $count = status::count_records(['userid' => $userid]); // Check whether a record exists. $exists = status::record_exists($id); Make sure to also check their additional parameters and their variants (record_exists_select(), count_records_select, get_records_select, ...) . Custom fetching It's always a good idea to add more complex queries directly within your persistent. By convention you should always return an instance of your persistent and never an stdClass. Here we add a custom method which allows to directly fetch all records by username. /** * Get all records from a user's username. * * @param string $username The username. * @return status[] */ public static function get_records_by_username($username) { global $DB; $sql = 'SELECT s.* FROM {' . static::TABLE . '} s JOIN {user} u ON u.id = s.userid WHERE u.username = :username'; $persistents = []; $recordset = $DB->get_recordset_sql($sql, ['username' => $username]); foreach ($recordset as $record) { $persistents[] = new static(0, $record); } $recordset->close(); return $persistents; } If you need to join persistents together and be able to extract their respective properties in a single database query, you should have a look at the following methods: get_sql_fields(string $alias, string $prefix = null) Returns the SQL statement to include in the SELECT clause to prefix columns. extract_record(stdClass $row, string $prefix = null) Extracts all the properties from a row based on the given prefix. // Minimalist example. $sqlfields = status::get_sql_fields('s', 'statprops'); $sql = \"SELECT $sqlfields, u.username FROM {\" . status::TABLE . \"} s JOIN {user} ON s.userid = u.id WHERE s.id = 1\"; $row = $DB->get_record($sql, []); $statusdata = status::extract_record($row, 'statprops'); $persistent = new status(0, $statusdata); Transactions If you need to perform multiple database operations that should be treated as a single transaction: $transaction = $DB->start_delegated_transaction(); try { $record1 = new example(0, $data1); $record1->create(); $record2 = new example(0, $data2); $record2->create(); $transaction->allow_commit(); } catch (\\Exception $e) { $transaction->rollback($e); throw $e; } Validating Data The Persistent API automatically validates data based on the property definitions. However, you can add custom validation logic by overriding the validate() method: protected function validate() { $errors = parent::validate(); if ($this->get('name') === '') { $errors['name'] = 'Name cannot be empty'; } return $errors; } Basic validation of the properties values happens automatically based on their type (PARAM_* constant), however this is not always enough. In order to implement your own custom validation, simply define a protected method starting with validate_ followed with the property name. This method will be called whenever the model needs to be validated and will receive the data to validate. A validation method must always return either true or an instance of lang_string which contains the error message to send to the user. /** * Validate the user ID. * * @param int $value The value. * @return true|lang_string */ protected function validate_userid($value) { if (!core_user::is_real_user($value, true)) { return new lang_string('invaliduserid', 'error'); } return true; } The above example ensures that the userid property contains a valid user ID. Note that the basic validation is always performed first, and thus your custom validation method will not be called when the value did not pass the basic validation. Validation results The validation of the object automatically happens upon create and update. If the validation did not pass, an invalid_persistent_exception will be raised. You can validate the object prior to saving the object and get the validation results if you need to. // We can catch the invalid_persistent_exception. try { $persistent = new status(); $persistent->create(); } catch (invalid_persistent_exception $e) { // Whoops, something wrong happened. } // Check whether the object is valid. $persistent->is_valid(); // True or false. // Get the validation errors. $persistent->get_errors(); // Array where keys are properties and values are errors. // Validate the object. $persistent->validate(); // Returns true, or an array of errors. Extending Persistent Classes You must never extend the persistent classes to add more complex functionality specific to your plugin. Do not do the following: class advanced_example extends example { public function custom_function() { // Custom logic here } } Common pitfalls You must create the database table yourself, using the XMLDB editor and an upgrade script. You must include the mandatory fields in your table schema. You must never extend another persistent as this leads to unpredictable errors whenever the parent changes (new properties missing in your table, changes in validation, custom getters and setters, etc...). Hooks You can define the following methods to be notified prior to, or after, something happened: protected before_validate() Do something before the object is validated. protected before_create() Do something before the object is inserted in the database. Note that values assigned to properties are not longer validated at this point. protected after_create() Do something right after the object was added to the database. protected before_update() Do something before the object is updated in the database. Note that values assigned to properties are not longer validated at this point. protected after_update(bool $result) Do something right after the object was updated in the database. protected before_delete() Do something right before the object is deleted from the database. protected after_delete(bool $result) Do something right after the object was deleted from the database. Integrating Persistent API with Forms The core\\form\\persistent class in Moodle provides a streamlined way to integrate Moodle forms with the Persistent API. It allows developers to create forms that directly interact with persistent classes, simplifying the process of handling form data, validation, and database operations. Key Features Form Integration with Persistent Classes: The core\\form\\persistent class connects Moodle forms with persistent classes, ensuring that form submissions are directly mapped to the corresponding database records. Automatic Data Handling: Data entered in the form is automatically populated into the persistent class, reducing the need for manual data handling. Validation Consistency: Form validation is tightly coupled with the validation logic defined in the persistent class, ensuring consistency across your application. Simplified CRUD Operations: CRUD operations are simplified, as the form directly interacts with the persistent class, handling the creation, updating, or deletion of records. Steps to Use core\\form\\persistent Create a Persistent Class: First, define a persistent class representing the database table you want to interact with. namespace local_yourplugin; use core\\persistent; defined('MOODLE_INTERNAL') || die(); class example extends persistent { const TABLE = 'local_yourplugin_example'; protected static function define_properties() { return [ 'name' => [ 'type' => PARAM_TEXT, 'default' => '', ], 'description' => [ 'type' => PARAM_TEXT, 'default' => '', ], ]; } } Create a Form Class Extending core\\form\\persistent : Next, create a form class that extends core\\form\\persistent . This class will handle the form display, validation, and data processing. namespace local_yourplugin\\form; use core\\form\\persistent; defined('MOODLE_INTERNAL') || die(); class example_form extends persistent { /** @var string Persistent class name. */ protected static $persistentclass = 'local_yourplugin\\example'; protected function definition() { $mform = $this->_form; $mform->addElement('text', 'name', get_string('name', 'local_yourplugin')); $mform->addRule('name', get_string('required'), 'required', null, 'client'); $mform->addElement('textarea', 'description', get_string('description', 'local_yourplugin')); // User ID. $mform->addElement('hidden', 'userid'); $mform->setConstant('userid', $this->_customdata['userid']); // Message. $mform->addElement('editor', 'message', 'Message'); // Location. $mform->addElement('text', 'location', 'Location'); $this->add_action_buttons(); } } $persistentclass : This specifies the persistent class that the form is linked to. In order for the form class to know what persistent we'll be dealing with, we must declare the protected static $persistentclass variable. The latter contains the fully qualified name of the persistent class. definition() : This method defines the form fields, linking them directly to the properties of the persistent class. All of this is pretty standard, except for the userid. When creating a new 'status', we do not want our users to be in control of this value. Therefore we define it as a hidden value which we lock (using setConstant) to the value we created our form with. All the mandatory fields (without a default value) of the persistent need to be added to the form. If your users cannot change their values, then they must be hidden and locked with setConstant. Did you notice that there isn't any call to setType in the above example? That is because we automatically do it for you based on the field name and your persistent's properties.Also note that the id property is not included. It is not required, nor recommended, to add it to your fields as it will be handled automatically. Using the Form in Your Plugin: When instantiating the form, there are two little things that you need to pay attention to. Firstly you should always pass the URL of the current page, including its query parameters. We need this to be able to display the form with its validation errors without affecting anything else. Secondly, the persistent instance must be provided to the form through the custom data. That persistent instance will be used to populate the form with initial data, typically when you are editing an object. When you don't have a persistent instance yet, probably because your user will be creating a new one, then simply pass null. $customdata = [ 'persistent' => $persistent, // An instance, or null. 'userid' => $USER->id // For the hidden userid field. ]; $form = new status_form($PAGE->url->out(false), $customdata); Just like any other form, we will be using get_data() to validate the form. The only difference is that to determine whether we are editing an object, or creating a new one, we will check if the id value was returned to us. The persistent form will return the ID value from the persistent we gave it. Then it's up to you to decide how to apply the data, most likely you will defer the logic to another part of your code, one that ensures that all capability checks are fulfilled. To use the form in your plugin, create an instance of the form and process it like this: $form = new \\local_yourplugin\\form\\example_form(); if ($form->is_cancelled()) { // Handle form cancellation (e.g., redirect to another page). } else if (($data = $form->get_data())) { // Get the data. This ensures that the form was validated. if (empty($data->id)) { // If we don't have an ID, we know that we must create a new record. // Call your API to create a new persistent from this data. // Or, do the following if you don't want capability checks (discouraged). $persistent = new status(0, $data); $persistent->create(); } else { // We had an ID, this means that we are going to update a record. // Call your API to update the persistent from the data. // Or, do the following if you don't want capability checks (discouraged). $persistent->from_record($data); $persistent->update(); } // We are done, so let's redirect somewhere. redirect(new moodle_url('/')); } echo $OUTPUT->header(); $form->display(); echo $OUTPUT->footer(); is_cancelled() : Checks if the form was canceled by the user. get_data() : Retrieves the form data. Additional Validation There are times when the built-in validation of the persistent is not enough. Usually you would use the method validation(), but as the form persistent class does some extra stuff to make it easier for you, you must use the extra_validation() method. The latter works almost just like the validation() one. /** * Extra validation. * * @param stdClass $data Data to validate. * @param array $files Array of files. * @param array $errors Currently reported errors. * @return array of additional errors, or overridden errors. */ protected function extra_validation($data, $files, array &$errors) { $newerrors = array(); if ($data->location === 'SFO') { $newerrors['location'] = 'San-Francisco Airport is not accepted from the form.'; } return $newerrors; } The typical additional validation will return an array of errors, those will override any previously defined errors. Sometimes, though rarely, you will need to remove previously reported errors, hence the reference to $errors given, which you can modify directly. Do not abuse it though, this should only be used when you have no other choice. Foreign fields By default, the form class tries to be smart at detecting foreign fields such as the submit button. Failure to do so will cause troubles during validation, or when getting the data. So when your form becomes more complex, if it includes more submit buttons, or when it deals with other fields, for example file managers, we must indicate it. Fields to ignore completely The fields to remove are never validated and they are not returned when calling get_data(). By default the submit button is added to this list so that when we call get_data() we only get the persistent-related fields. To remove more fields, re-declare the protected static $fieldstoremove class variable. /** @var array Fields to remove when getting the final data. */ protected static $fieldstoremove = array('submitbutton', 'areyouhappy'); Do not forget to add the submitbutton back in there. Fields to validate What about when we have a legit field but it does not belong to the persistent? We still want to validate it ourselves, but we don't want it to be validated by the persistent as it will cause an error. In that case we define it in the protected static $foreignfields class variable. /** @var array Fields to remove from the persistent validation. */ protected static $foreignfields = array('updatedelay'); Now the persistent will not validate this field, and we will get the updatedelay value when we call get_data(). Just don't forget to remove it before you feed the data to your persistent. if (($data = $form->get_data())) { $updatedelay = $data->updatedelay; unset($data->updatedelay); $newpersistent = new status(0, $data); } This method is particularily useful when dealing with file managers. Grouping fields There is a little bit of work to do when you want to group some properties together. Let's imagine that we are asking our users to pick amongst a few verbs and food. They can only tell us if they like or dislike something and what it is. Our form should display both the verb and the food next to each other, and to do so we need to use a group. First, let's update our persistent with the new two values we will store: protected static function define_properties() { ... 'verb' => array( 'type' => PARAM_ALPHANUM, 'default' => 'love' ), 'food' => array( 'type' => PARAM_ALPHANUM, 'default' => 'pizza' ) ... } Secondly, we must add the group to the form: public function definition() { ... // Food I like. $elements = []; $elements[] = $mform->createElement('select', 'verb', 'verb', [ 'hate' => 'I hate', 'dislike' => 'I dislike', 'like' => 'I like', 'love' => 'I love' ]); $elements[] = $mform->createElement('select', 'food', 'Food', [ 'egg' => 'Egg', 'tofu' => 'Tofu', 'chicken' => 'Chicken', 'fish' => 'Fish', 'pizza' => 'Pizza' ]); $mform->addElement('group', 'foodilike', 'Food I like', $elements); ... } If you were to try the code like this, you would get an error telling you that the persistent did not expect to receive the property foodilike. That's normal because the group is being set to the persistent which does not know what to do with it. In order to counter this we will need to convert the group to individual properties by extending the method convert_fields(stdClass $data). /** * Convert fields. * * @param stdClass $data The data. * @return stdClass */ protected static function convert_fields(stdClass $data) { $data = parent::convert_fields($data); // Convert the group to single properties. $data->verb = $data->foodilike['verb']; $data->food = $data->foodilike['food']; unset($data->foodilike); return $data; } Now it works because we've converted our group to individual properties. Note that you must call the parent method because we're automatically doing the same thing for you when you're using a text editor field. While this works fine, this is not enough as when we load an existing object we must perform the same thing the other way around. We must convert the fields from our persistent to what the group field is expecting. To do so we override the method get_default_value(). We're also taking care of the text editor for you here so don't forget to call the parent. /** * Get the default data. * * @return stdClass */ protected function get_default_data() { $data = parent::get_default_data(); // Convert the single properties into a group. $data->foodilike = [ 'verb' => $data->verb, 'food' => $data->food, ]; unset($data->verb); unset($data->food); return $data; } You should now notice that the default values are set to \"I love\" and \"Pizza\". And we're done! Examples Minimalist class status_form extends \\core\\form\\persistent { /** @var string Persistent class name. */ protected static $persistentclass = 'example\\\\status'; /** * Define the form. */ public function definition() { $mform = $this->_form; // User ID. $mform->addElement('hidden', 'userid'); $mform->setConstant('userid', $this->_customdata['userid']); // Message. $mform->addElement('editor', 'message', 'Message'); // Location. $mform->addElement('text', 'location', 'Location'); $this->add_action_buttons(); } } More advanced class status_form extends \\core\\form\\persistent { /** @var string Persistent class name. */ protected static $persistentclass = 'example\\\\status'; /** @var array Fields to remove when getting the final data. */ protected static $fieldstoremove = array('submitbutton', 'areyouhappy'); /** @var array Fields to remove from the persistent validation. */ protected static $foreignfields = array('updatedelay'); /** * Define the form. */ public function definition() { $mform = $this->_form; // User ID. $mform->addElement('hidden', 'userid'); $mform->setConstant('userid', $this->_customdata['userid']); // Message. $mform->addElement('editor', 'message', 'Message'); // Location. $mform->addElement('text', 'location', 'Location'); // Status update delay. $mform->addElement('duration', 'updatedelay', 'Status update delay'); // Are you happy? $mform->addElement('selectyesno', 'areyouhappy', 'Are you happy?'); $this->add_action_buttons(); } /** * Extra validation. * * @param stdClass $data Data to validate. * @param array $files Array of files. * @param array $errors Currently reported errors. * @return array of additional errors, or overridden errors. */ protected function extra_validation($data, $files, array &$errors) { $newerrors = array(); if ($data->location === 'SFO') { $newerrors['location'] = 'San-Francisco Airport is not accepted from the form.'; } return $newerrors; } } Using the form Consider the following code to be a page the users will access at '/example.php'. require 'config.php'; // Check if we go an ID. $id = optional_param('id', null, PARAM_INT); // Set the PAGE URL (and mandatory context). Note the ID being recorded, this is important. $PAGE->set_context(context_system::instance()); $PAGE->set_url(new moodle_url('/example.php', ['id' => $id])); // Instantiate a persistent object if we received an ID. Typically receiving an ID // means that we are going to be updating an object rather than creating a new one. $persistent = null; if (!e mpty($id)) { $persistent = new status($id); } // Create the form instance. We need to use the current URL and the custom data. $customdata = [ 'persistent' => $persistent, 'userid' => $USER->id // For the hidden userid field. ]; $form = new status_form($PAGE->url->out(false), $customdata); // Get the data. This ensures that the form was validated. if (($data = $form->get_data())) { try { if (empty($data->id)) { // If we don't have an ID, we know that we must create a new record. // Call your API to create a new persistent from this data. // Or, do the following if you don't want capability checks (discouraged). $persistent = new status(0, $data); $persistent->create(); } else { // We had an ID, this means that we are going to update a record. // Call your API to update the persistent from the data. // Or, do the following if you don't want capability checks (discouraged). $persistent->from_record($data); $persistent->update(); } \\core\\notification::success(get_string('changessaved')); } catch (Exception $e) { \\core\\notification::error($e->getMessage()); } // We are done, so let's redirect somewhere. redirect(new moodle_url('/')); } // Display the mandatory header and footer. // And display the form, and its validation errors if there are any. echo $OUTPUT->header(); $form->display(); echo $OUTPUT->footer(); The core\\form\\persistent class in Moodle offers a powerful and efficient way to connect forms with the Persistent API. It automates the process of handling form data, ensuring that it is correctly validated and saved to the database. This approach reduces boilerplate code, improves consistency, and simplifies the development of complex forms that interact with Moodle\u2019s database.","title":"Persistent API"},{"location":"Moodle/API/phpMoodlePersistent/#key-features-of-the-persistent-api","text":"Encapsulation of Data Logic : The API encapsulates the logic related to data operations, meaning you work with objects representing your data rather than writing SQL queries directly. Automatic Data Validation : The Persistent API automatically validates data before it is inserted or updated in the database, ensuring that only valid data is stored. Easier Maintenance : By using a consistent interface for data manipulation, the Persistent API makes your code more maintainable and less prone to errors. Supports Transactions : The API supports database transactions, allowing multiple operations to be performed atomically.","title":"Key Features of the Persistent API"},{"location":"Moodle/API/phpMoodlePersistent/#creating-a-persistent-class","text":"To use the Persistent API, you define a class that extends core\\persistent . This class represents a table in the database and encapsulates all the operations that can be performed on that table.","title":"Creating a Persistent Class"},{"location":"Moodle/API/phpMoodlePersistent/#key-components","text":"Table Definition : The const TABLE constant defines the name of the database table that this persistent class represents. While the persistent class is helpful for database interactions, it does not automatically fetch the properties from the database, nor does it create the tables. You will need to create the table yourself, as well as pointing the persistent to it. This can be done by defining the class constant TABLE. /** Table name for the persistent. */ const TABLE = 'status'; The table name must not contain the Moodle prefix. Also it is common practice to always refer to your table name using the constant. Property Definitions : The define_properties() method returns an array of fields that map to the columns in the database table. Each field is described by its type (e.g., PARAM_TEXT , PARAM_INT ), default value, and other properties attributes. Properties attributes : type The only mandatory attribute. It must be one of the many PARAM_* constants. default The default value to attach to the property when it hasn't been provided. Without a default, the property's value is required. Alternatively this can be a Closure returning the default value. null Either of the constants NULL_ALLOWED or NULL_NOT_ALLOWED determining if the null value is accepted. This defaults to NULL_NOT_ALLOWED. message The default error message (as a lang_string instance) to return when the validation of this field fails. choices An array of values which the property must fall in. 'messageformat' => [ 'type' => PARAM_INT, 'default' => FORMAT_PLAIN, 'choices' => [FORMAT_PLAIN, FORMAT_HTML, FORMAT_MOODLE, FORMAT_MARKDOWN] ], 'location' => [ 'type' => PARAM_ALPHANUMEXT, 'null' => NULL_ALLOWED, 'message' => new lang_string('invaliddata', 'error'), 'default' => function() { return get_config('core', 'default_location'); }, ] Note that you should always use a Closure for the default value when you cannot guarantee that it will not change since the start of the request. The list of properties and their attributes is cached, and so failure to use a Closure can result in using an outdated default value. Mandatory properties : Four fields are always added to your persistent and should be reflected in your database table. You must not define those properties in define_properties(): id (non-null integer) : The primary key of the record. usermodified (non-null integer) : The user who created/modified the object. It is automatically set. timecreated (non-null integer) : The timestamp at which the record was modified. It is automatically set. timemodified (non-null integer) : The timestamp at which the record was modified. It is automatically set, and defaults to 0. From Moodle 3.7 onwards, the XMLDB tool has an option to add these fields to your table.","title":"Key Components"},{"location":"Moodle/API/phpMoodlePersistent/#basic-operations-with-persistent-api","text":"Once your persistent class is defined, you can easily perform CRUD (Create, Read, Update, Delete) operations.","title":"Basic Operations with Persistent API"},{"location":"Moodle/API/phpMoodlePersistent/#creating-a-record","text":"To create a new record in the database: $record = new example(0, (object)[ 'name' => 'Example Name', 'description' => 'Example description.', ]); $record->create();","title":"Creating a Record"},{"location":"Moodle/API/phpMoodlePersistent/#retrieving-a-record","text":"This can be done using the method get(). Alternatively you can also use to_record() which exports the whole object. To retrieve a record by its ID: $record = new example($id); echo $record->get('name'); // or $record = $record->to_record(); You may add a new custom getter to implement your own custom logic. To do this just add a new method get_propertyname() and it will be called from the generic get() method. For instance you could convert the data in another format automatically as a convenience for developers. However, use this sparingly as it may lead to confusion: what you get is not what is stored in the database. Also - to get the actual value from a custom getter - call raw_get(). Calling get() from a custom getter will generate a segfault due to infinite recursion. It is, however, encouraged to add convenience methods such as the following: /** * Returns the user object of the author. * * @return stdClass */ public function get_author() { return core_user::get_user($this->get('userid')); }","title":"Retrieving a Record"},{"location":"Moodle/API/phpMoodlePersistent/#updating-a-record","text":"There are two ways to do so. You use an object (stdClass) to assign a bunch of properties at once. Use it with the constructor, or the method from_record(). Or, you can use the magic setters set_ followed by the property name. To update an existing record: $record = new example($id); $record->set('name', 'Updated Name'); $record->update(); // or $record->from_record($record->get_record()); Though you don't have to for the code to work, you can define your own setter methods which will be called from the generic setter. This is useful if you want to extract the data out of a more complex object prior to assigning it. Though note that those setters will then have to use the raw_set() method to assign the values (if you do not you will see a segfault because of infinite recursion). /** * Convenience method to set the user ID. * * @param object|int $idorobject The user ID, or a user object. */ public function set_userid($idorobject) { $userid = $idorobject; if (is_object($idorobject)) { $userid = $idorobject->id; } $this->raw_set('userid', $userid); } In the above example we will accept an object or an ID, as a convenience for developers we will extract the ID value out of the object passed if any. Just like custom getters, must be careful so that the following code should not result in a change in the DB. $value = $persistent->get('property'); $persistent->set('property', $value); $persistent->update(); You can obviously create your own setters which aren't based on any properties just as a convenience. For instance we could have created set_userid_from_user(object $user) which is more verbose and more predictable","title":"Updating a Record"},{"location":"Moodle/API/phpMoodlePersistent/#deleting-a-record","text":"To delete a record: $record = new example($id); $record->delete(); The methods to create, read, update and delete are eponymous. Your object will be validated before you create or update it. The update, delete and read methods require your object to contain its ID. And you also won't be allowed to create an entry which already had an ID defined. Here are some code examples: // Fetches an object from database based on its ID. $id = 123; $persistent = new status($id); // Create object in the database. $data = new stdClass(); $data->message = 'Hello new world'; $persistent = new persistent(0, $data); $persistent->create(); // $persistent->get('id') will now return an id. // Load an object from the database, and update it. $id = 123; $persistent = new status($id); $persistent->set('message', 'Hello new world!'); $persistent->update(); // Reset the instance to the values in the database. $persistent->read(); // Permanently delete the object from the database. $persistent->delete();","title":"Deleting a Record"},{"location":"Moodle/API/phpMoodlePersistent/#other-features","text":"","title":"Other Features"},{"location":"Moodle/API/phpMoodlePersistent/#fetching-records","text":"Once you start using persistents you should never directly interact with the database outside of your class. The persistent class comes with a few handy methods allowing you to retrieve your objects. // Use the constructor to fetch one object from its ID. $persistent = new status($id); // Get one record from a set of conditions. $persistent = status::get_record(['userid' => $userid, 'message' => 'Hello world!']); // Get multiple records from a set of conditions. $persistents = status::get_records(['userid' => $userid]); // Count the records. $count = status::count_records(['userid' => $userid]); // Check whether a record exists. $exists = status::record_exists($id); Make sure to also check their additional parameters and their variants (record_exists_select(), count_records_select, get_records_select, ...) .","title":"Fetching Records"},{"location":"Moodle/API/phpMoodlePersistent/#custom-fetching","text":"It's always a good idea to add more complex queries directly within your persistent. By convention you should always return an instance of your persistent and never an stdClass. Here we add a custom method which allows to directly fetch all records by username. /** * Get all records from a user's username. * * @param string $username The username. * @return status[] */ public static function get_records_by_username($username) { global $DB; $sql = 'SELECT s.* FROM {' . static::TABLE . '} s JOIN {user} u ON u.id = s.userid WHERE u.username = :username'; $persistents = []; $recordset = $DB->get_recordset_sql($sql, ['username' => $username]); foreach ($recordset as $record) { $persistents[] = new static(0, $record); } $recordset->close(); return $persistents; } If you need to join persistents together and be able to extract their respective properties in a single database query, you should have a look at the following methods: get_sql_fields(string $alias, string $prefix = null) Returns the SQL statement to include in the SELECT clause to prefix columns. extract_record(stdClass $row, string $prefix = null) Extracts all the properties from a row based on the given prefix. // Minimalist example. $sqlfields = status::get_sql_fields('s', 'statprops'); $sql = \"SELECT $sqlfields, u.username FROM {\" . status::TABLE . \"} s JOIN {user} ON s.userid = u.id WHERE s.id = 1\"; $row = $DB->get_record($sql, []); $statusdata = status::extract_record($row, 'statprops'); $persistent = new status(0, $statusdata);","title":"Custom fetching"},{"location":"Moodle/API/phpMoodlePersistent/#transactions","text":"If you need to perform multiple database operations that should be treated as a single transaction: $transaction = $DB->start_delegated_transaction(); try { $record1 = new example(0, $data1); $record1->create(); $record2 = new example(0, $data2); $record2->create(); $transaction->allow_commit(); } catch (\\Exception $e) { $transaction->rollback($e); throw $e; }","title":"Transactions"},{"location":"Moodle/API/phpMoodlePersistent/#validating-data","text":"The Persistent API automatically validates data based on the property definitions. However, you can add custom validation logic by overriding the validate() method: protected function validate() { $errors = parent::validate(); if ($this->get('name') === '') { $errors['name'] = 'Name cannot be empty'; } return $errors; } Basic validation of the properties values happens automatically based on their type (PARAM_* constant), however this is not always enough. In order to implement your own custom validation, simply define a protected method starting with validate_ followed with the property name. This method will be called whenever the model needs to be validated and will receive the data to validate. A validation method must always return either true or an instance of lang_string which contains the error message to send to the user. /** * Validate the user ID. * * @param int $value The value. * @return true|lang_string */ protected function validate_userid($value) { if (!core_user::is_real_user($value, true)) { return new lang_string('invaliduserid', 'error'); } return true; } The above example ensures that the userid property contains a valid user ID. Note that the basic validation is always performed first, and thus your custom validation method will not be called when the value did not pass the basic validation.","title":"Validating Data"},{"location":"Moodle/API/phpMoodlePersistent/#extending-persistent-classes","text":"You must never extend the persistent classes to add more complex functionality specific to your plugin. Do not do the following: class advanced_example extends example { public function custom_function() { // Custom logic here } }","title":"Extending Persistent Classes"},{"location":"Moodle/API/phpMoodlePersistent/#hooks","text":"You can define the following methods to be notified prior to, or after, something happened: protected before_validate() Do something before the object is validated. protected before_create() Do something before the object is inserted in the database. Note that values assigned to properties are not longer validated at this point. protected after_create() Do something right after the object was added to the database. protected before_update() Do something before the object is updated in the database. Note that values assigned to properties are not longer validated at this point. protected after_update(bool $result) Do something right after the object was updated in the database. protected before_delete() Do something right before the object is deleted from the database. protected after_delete(bool $result) Do something right after the object was deleted from the database.","title":"Hooks"},{"location":"Moodle/API/phpMoodlePersistent/#integrating-persistent-api-with-forms","text":"The core\\form\\persistent class in Moodle provides a streamlined way to integrate Moodle forms with the Persistent API. It allows developers to create forms that directly interact with persistent classes, simplifying the process of handling form data, validation, and database operations.","title":"Integrating Persistent API with Forms"},{"location":"Moodle/API/phpMoodlePersistent/#key-features","text":"Form Integration with Persistent Classes: The core\\form\\persistent class connects Moodle forms with persistent classes, ensuring that form submissions are directly mapped to the corresponding database records. Automatic Data Handling: Data entered in the form is automatically populated into the persistent class, reducing the need for manual data handling. Validation Consistency: Form validation is tightly coupled with the validation logic defined in the persistent class, ensuring consistency across your application. Simplified CRUD Operations: CRUD operations are simplified, as the form directly interacts with the persistent class, handling the creation, updating, or deletion of records.","title":"Key Features"},{"location":"Moodle/API/phpMoodlePersistent/#steps-to-use-coreformpersistent","text":"Create a Persistent Class: First, define a persistent class representing the database table you want to interact with. namespace local_yourplugin; use core\\persistent; defined('MOODLE_INTERNAL') || die(); class example extends persistent { const TABLE = 'local_yourplugin_example'; protected static function define_properties() { return [ 'name' => [ 'type' => PARAM_TEXT, 'default' => '', ], 'description' => [ 'type' => PARAM_TEXT, 'default' => '', ], ]; } } Create a Form Class Extending core\\form\\persistent : Next, create a form class that extends core\\form\\persistent . This class will handle the form display, validation, and data processing. namespace local_yourplugin\\form; use core\\form\\persistent; defined('MOODLE_INTERNAL') || die(); class example_form extends persistent { /** @var string Persistent class name. */ protected static $persistentclass = 'local_yourplugin\\example'; protected function definition() { $mform = $this->_form; $mform->addElement('text', 'name', get_string('name', 'local_yourplugin')); $mform->addRule('name', get_string('required'), 'required', null, 'client'); $mform->addElement('textarea', 'description', get_string('description', 'local_yourplugin')); // User ID. $mform->addElement('hidden', 'userid'); $mform->setConstant('userid', $this->_customdata['userid']); // Message. $mform->addElement('editor', 'message', 'Message'); // Location. $mform->addElement('text', 'location', 'Location'); $this->add_action_buttons(); } } $persistentclass : This specifies the persistent class that the form is linked to. In order for the form class to know what persistent we'll be dealing with, we must declare the protected static $persistentclass variable. The latter contains the fully qualified name of the persistent class. definition() : This method defines the form fields, linking them directly to the properties of the persistent class. All of this is pretty standard, except for the userid. When creating a new 'status', we do not want our users to be in control of this value. Therefore we define it as a hidden value which we lock (using setConstant) to the value we created our form with. All the mandatory fields (without a default value) of the persistent need to be added to the form. If your users cannot change their values, then they must be hidden and locked with setConstant. Did you notice that there isn't any call to setType in the above example? That is because we automatically do it for you based on the field name and your persistent's properties.Also note that the id property is not included. It is not required, nor recommended, to add it to your fields as it will be handled automatically. Using the Form in Your Plugin: When instantiating the form, there are two little things that you need to pay attention to. Firstly you should always pass the URL of the current page, including its query parameters. We need this to be able to display the form with its validation errors without affecting anything else. Secondly, the persistent instance must be provided to the form through the custom data. That persistent instance will be used to populate the form with initial data, typically when you are editing an object. When you don't have a persistent instance yet, probably because your user will be creating a new one, then simply pass null. $customdata = [ 'persistent' => $persistent, // An instance, or null. 'userid' => $USER->id // For the hidden userid field. ]; $form = new status_form($PAGE->url->out(false), $customdata); Just like any other form, we will be using get_data() to validate the form. The only difference is that to determine whether we are editing an object, or creating a new one, we will check if the id value was returned to us. The persistent form will return the ID value from the persistent we gave it. Then it's up to you to decide how to apply the data, most likely you will defer the logic to another part of your code, one that ensures that all capability checks are fulfilled. To use the form in your plugin, create an instance of the form and process it like this: $form = new \\local_yourplugin\\form\\example_form(); if ($form->is_cancelled()) { // Handle form cancellation (e.g., redirect to another page). } else if (($data = $form->get_data())) { // Get the data. This ensures that the form was validated. if (empty($data->id)) { // If we don't have an ID, we know that we must create a new record. // Call your API to create a new persistent from this data. // Or, do the following if you don't want capability checks (discouraged). $persistent = new status(0, $data); $persistent->create(); } else { // We had an ID, this means that we are going to update a record. // Call your API to update the persistent from the data. // Or, do the following if you don't want capability checks (discouraged). $persistent->from_record($data); $persistent->update(); } // We are done, so let's redirect somewhere. redirect(new moodle_url('/')); } echo $OUTPUT->header(); $form->display(); echo $OUTPUT->footer(); is_cancelled() : Checks if the form was canceled by the user. get_data() : Retrieves the form data.","title":"Steps to Use core\\form\\persistent"},{"location":"Moodle/API/phpMoodlePersistent/#foreign-fields","text":"By default, the form class tries to be smart at detecting foreign fields such as the submit button. Failure to do so will cause troubles during validation, or when getting the data. So when your form becomes more complex, if it includes more submit buttons, or when it deals with other fields, for example file managers, we must indicate it.","title":"Foreign fields"},{"location":"Moodle/API/phpMoodlePersistent/#grouping-fields","text":"There is a little bit of work to do when you want to group some properties together. Let's imagine that we are asking our users to pick amongst a few verbs and food. They can only tell us if they like or dislike something and what it is. Our form should display both the verb and the food next to each other, and to do so we need to use a group. First, let's update our persistent with the new two values we will store: protected static function define_properties() { ... 'verb' => array( 'type' => PARAM_ALPHANUM, 'default' => 'love' ), 'food' => array( 'type' => PARAM_ALPHANUM, 'default' => 'pizza' ) ... } Secondly, we must add the group to the form: public function definition() { ... // Food I like. $elements = []; $elements[] = $mform->createElement('select', 'verb', 'verb', [ 'hate' => 'I hate', 'dislike' => 'I dislike', 'like' => 'I like', 'love' => 'I love' ]); $elements[] = $mform->createElement('select', 'food', 'Food', [ 'egg' => 'Egg', 'tofu' => 'Tofu', 'chicken' => 'Chicken', 'fish' => 'Fish', 'pizza' => 'Pizza' ]); $mform->addElement('group', 'foodilike', 'Food I like', $elements); ... } If you were to try the code like this, you would get an error telling you that the persistent did not expect to receive the property foodilike. That's normal because the group is being set to the persistent which does not know what to do with it. In order to counter this we will need to convert the group to individual properties by extending the method convert_fields(stdClass $data). /** * Convert fields. * * @param stdClass $data The data. * @return stdClass */ protected static function convert_fields(stdClass $data) { $data = parent::convert_fields($data); // Convert the group to single properties. $data->verb = $data->foodilike['verb']; $data->food = $data->foodilike['food']; unset($data->foodilike); return $data; } Now it works because we've converted our group to individual properties. Note that you must call the parent method because we're automatically doing the same thing for you when you're using a text editor field. While this works fine, this is not enough as when we load an existing object we must perform the same thing the other way around. We must convert the fields from our persistent to what the group field is expecting. To do so we override the method get_default_value(). We're also taking care of the text editor for you here so don't forget to call the parent. /** * Get the default data. * * @return stdClass */ protected function get_default_data() { $data = parent::get_default_data(); // Convert the single properties into a group. $data->foodilike = [ 'verb' => $data->verb, 'food' => $data->food, ]; unset($data->verb); unset($data->food); return $data; } You should now notice that the default values are set to \"I love\" and \"Pizza\". And we're done!","title":"Grouping fields"},{"location":"Moodle/API/phpMoodlePersistent/#examples","text":"","title":"Examples"},{"location":"Moodle/API/phpMoodlePersistent/#minimalist","text":"class status_form extends \\core\\form\\persistent { /** @var string Persistent class name. */ protected static $persistentclass = 'example\\\\status'; /** * Define the form. */ public function definition() { $mform = $this->_form; // User ID. $mform->addElement('hidden', 'userid'); $mform->setConstant('userid', $this->_customdata['userid']); // Message. $mform->addElement('editor', 'message', 'Message'); // Location. $mform->addElement('text', 'location', 'Location'); $this->add_action_buttons(); } }","title":"Minimalist"},{"location":"Moodle/API/phpMoodlePersistent/#more-advanced","text":"class status_form extends \\core\\form\\persistent { /** @var string Persistent class name. */ protected static $persistentclass = 'example\\\\status'; /** @var array Fields to remove when getting the final data. */ protected static $fieldstoremove = array('submitbutton', 'areyouhappy'); /** @var array Fields to remove from the persistent validation. */ protected static $foreignfields = array('updatedelay'); /** * Define the form. */ public function definition() { $mform = $this->_form; // User ID. $mform->addElement('hidden', 'userid'); $mform->setConstant('userid', $this->_customdata['userid']); // Message. $mform->addElement('editor', 'message', 'Message'); // Location. $mform->addElement('text', 'location', 'Location'); // Status update delay. $mform->addElement('duration', 'updatedelay', 'Status update delay'); // Are you happy? $mform->addElement('selectyesno', 'areyouhappy', 'Are you happy?'); $this->add_action_buttons(); } /** * Extra validation. * * @param stdClass $data Data to validate. * @param array $files Array of files. * @param array $errors Currently reported errors. * @return array of additional errors, or overridden errors. */ protected function extra_validation($data, $files, array &$errors) { $newerrors = array(); if ($data->location === 'SFO') { $newerrors['location'] = 'San-Francisco Airport is not accepted from the form.'; } return $newerrors; } }","title":"More advanced"},{"location":"Moodle/API/phpMoodlePersistent/#using-the-form","text":"Consider the following code to be a page the users will access at '/example.php'. require 'config.php'; // Check if we go an ID. $id = optional_param('id', null, PARAM_INT); // Set the PAGE URL (and mandatory context). Note the ID being recorded, this is important. $PAGE->set_context(context_system::instance()); $PAGE->set_url(new moodle_url('/example.php', ['id' => $id])); // Instantiate a persistent object if we received an ID. Typically receiving an ID // means that we are going to be updating an object rather than creating a new one. $persistent = null; if (!e mpty($id)) { $persistent = new status($id); } // Create the form instance. We need to use the current URL and the custom data. $customdata = [ 'persistent' => $persistent, 'userid' => $USER->id // For the hidden userid field. ]; $form = new status_form($PAGE->url->out(false), $customdata); // Get the data. This ensures that the form was validated. if (($data = $form->get_data())) { try { if (empty($data->id)) { // If we don't have an ID, we know that we must create a new record. // Call your API to create a new persistent from this data. // Or, do the following if you don't want capability checks (discouraged). $persistent = new status(0, $data); $persistent->create(); } else { // We had an ID, this means that we are going to update a record. // Call your API to update the persistent from the data. // Or, do the following if you don't want capability checks (discouraged). $persistent->from_record($data); $persistent->update(); } \\core\\notification::success(get_string('changessaved')); } catch (Exception $e) { \\core\\notification::error($e->getMessage()); } // We are done, so let's redirect somewhere. redirect(new moodle_url('/')); } // Display the mandatory header and footer. // And display the form, and its validation errors if there are any. echo $OUTPUT->header(); $form->display(); echo $OUTPUT->footer(); The core\\form\\persistent class in Moodle offers a powerful and efficient way to connect forms with the Persistent API. It automates the process of handling form data, ensuring that it is correctly validated and saved to the database. This approach reduces boilerplate code, improves consistency, and simplifies the development of complex forms that interact with Moodle\u2019s database.","title":"Using the form"},{"location":"Moodle/API/phpMoodleQuestion/","text":"The question subsystem in Moodle manages the creation, editing and management of interactive questions, and then enables those questions to be presented to users so they can be attempted. It is useful to consider these as separate subcomponents. The question engine This is the part that makes questions work when users attempt or otherwise interact with questions as part of a learning experience. The main user of this in the standard Moodle package is mod_quiz, but there is also qbank_previewquestion, and numerous plugins, including filter_embedquestion. The goal of this part of the system is to allow the widest ranges of interactive learning experiences to be created, therefore the question engine supports two types of plugin: Question types (qtype_) Question types define what the question is. For example a multiple choice or drag-drop question question, or a text input question graded as with a string (e.g. shortanswer or pattern-match) or as a number. It might be something much more complex, like a crossword, or a coding exercise. Question behaviours (qbehaviour_) Question behaviours let Moodle support different ways for a student to interact with questions. For example it might be like a classic exams, where initially the student just inputs their answers to all the questions, which are only graded, and feedback given later (qbehaviour_deferredfeedback). Or if the student might have a 'Check' button in each question so their work can be graded immediately (qbehaviour_immediatefeedback). It might even be that after their first try, if that is not right, the students can immediately Try again, to see if they can correct their mistake based on the initial feedback (qbehaviour_interactive). Core question engine So, when a particular question is attempted with a particular behaviour, the core question engine needs to orchestrate the behaviour and the question type so that the behaviour and plugin to work together to present the experience to the user. The question engine also handles the storing progress in the database (so that can be done efficiently, and in bulk) and it presents a uniform API for this to whatever is using the questions (e.g. a quiz attempt). Some key classes here are: question_engine - this class is the main entry point into this part of the API. question_attempt - this represents a users attempt at a question. Since most of the time user's attempt a group of related questions together, and even more important class is question_usage_by_activity. question state - as stated above, question types and behaviours should have as much freedom as possible to present interesting educational interactions to users. But, on the other hand, parts of the system that use questions (e.g. the quiz) need to have some idea what is going on with each question. The various question states try to find an appropriate compromise, so the state of each question can be tracked, but without restricting the freedom of the question behaviours to work how they want. question_display_options - when questions are used, e.g. in a quiz, there may be limitations one what the user can see. For example, perhaps the student is only allowed to see the grade and feedback on their attempt after all students have finished. The display options class is how the quiz can control which bits should be visible when a question is rendered. In addition, depending on what state we are in with the question behaviour might also affect what is visible right now, so qbehaviour_plugins can modify the display options based on the current state of the question_attempt, as part of the rendering process. core_question_renderer - renders the overall layout of the questions. It works with the applicable qtype_ and qbehaviour_ renderer to render the details of the current attempt. Question bank The question bank provides the UI where teachers create, edit and manage questions. It also works with several plugin types: Question bank plugins (qbank_) Question bank plugins (qbank_) add features to the question bank. The core question bank code mainly just ties all these features together. Question import/export plugins (qformat_) Question import/export plugins allow questions to be exported and imported in a variety of formats. Use by plugins like qbank_exportquestions, qbank_importquestions and qbank_exporttoxml. Question types (qtype_) Question types were already considered above, when thinking about the the question engine. They also need to work with the question bank, so that teachers can create and edit questions of that type.","title":"Question API"},{"location":"Moodle/API/phpMoodleQuestion/#the-question-engine","text":"This is the part that makes questions work when users attempt or otherwise interact with questions as part of a learning experience. The main user of this in the standard Moodle package is mod_quiz, but there is also qbank_previewquestion, and numerous plugins, including filter_embedquestion. The goal of this part of the system is to allow the widest ranges of interactive learning experiences to be created, therefore the question engine supports two types of plugin:","title":"The question engine"},{"location":"Moodle/API/phpMoodleQuestion/#question-types-qtype_","text":"Question types define what the question is. For example a multiple choice or drag-drop question question, or a text input question graded as with a string (e.g. shortanswer or pattern-match) or as a number. It might be something much more complex, like a crossword, or a coding exercise.","title":"Question types (qtype_)"},{"location":"Moodle/API/phpMoodleQuestion/#question-behaviours-qbehaviour_","text":"Question behaviours let Moodle support different ways for a student to interact with questions. For example it might be like a classic exams, where initially the student just inputs their answers to all the questions, which are only graded, and feedback given later (qbehaviour_deferredfeedback). Or if the student might have a 'Check' button in each question so their work can be graded immediately (qbehaviour_immediatefeedback). It might even be that after their first try, if that is not right, the students can immediately Try again, to see if they can correct their mistake based on the initial feedback (qbehaviour_interactive).","title":"Question behaviours (qbehaviour_)"},{"location":"Moodle/API/phpMoodleQuestion/#core-question-engine","text":"So, when a particular question is attempted with a particular behaviour, the core question engine needs to orchestrate the behaviour and the question type so that the behaviour and plugin to work together to present the experience to the user. The question engine also handles the storing progress in the database (so that can be done efficiently, and in bulk) and it presents a uniform API for this to whatever is using the questions (e.g. a quiz attempt). Some key classes here are: question_engine - this class is the main entry point into this part of the API. question_attempt - this represents a users attempt at a question. Since most of the time user's attempt a group of related questions together, and even more important class is question_usage_by_activity. question state - as stated above, question types and behaviours should have as much freedom as possible to present interesting educational interactions to users. But, on the other hand, parts of the system that use questions (e.g. the quiz) need to have some idea what is going on with each question. The various question states try to find an appropriate compromise, so the state of each question can be tracked, but without restricting the freedom of the question behaviours to work how they want. question_display_options - when questions are used, e.g. in a quiz, there may be limitations one what the user can see. For example, perhaps the student is only allowed to see the grade and feedback on their attempt after all students have finished. The display options class is how the quiz can control which bits should be visible when a question is rendered. In addition, depending on what state we are in with the question behaviour might also affect what is visible right now, so qbehaviour_plugins can modify the display options based on the current state of the question_attempt, as part of the rendering process. core_question_renderer - renders the overall layout of the questions. It works with the applicable qtype_ and qbehaviour_ renderer to render the details of the current attempt.","title":"Core question engine"},{"location":"Moodle/API/phpMoodleQuestion/#question-bank","text":"The question bank provides the UI where teachers create, edit and manage questions. It also works with several plugin types:","title":"Question bank"},{"location":"Moodle/API/phpMoodleQuestion/#question-bank-plugins-qbank_","text":"Question bank plugins (qbank_) add features to the question bank. The core question bank code mainly just ties all these features together.","title":"Question bank plugins (qbank_)"},{"location":"Moodle/API/phpMoodleQuestion/#question-importexport-plugins-qformat_","text":"Question import/export plugins allow questions to be exported and imported in a variety of formats. Use by plugins like qbank_exportquestions, qbank_importquestions and qbank_exporttoxml.","title":"Question import/export plugins (qformat_)"},{"location":"Moodle/API/phpMoodleQuestion/#question-types-qtype__1","text":"Question types were already considered above, when thinking about the the question engine. They also need to work with the question bank, so that teachers can create and edit questions of that type.","title":"Question types (qtype_)"},{"location":"Moodle/API/phpMoodleTable/","text":"Currently the code for creating table often involves a lot of duplication of code. New api can improve things. New API handles downloads download export formats are separated into classes and it is simple to add more formats. Added two more formats. Unpaged XHTML format and comma seperated values format. No longer have to make sure that column data is added to the table in the same order as columns are declared. Can have the logic for choosing what columns to include in the table in one place. New mechanism in table_sql allows appropriate code to be automatically called to format data before putting it into the table. Skeleton Usage In order to check your sql query is working as expected when developing a page it can be useful just to output all the data from the query in the table before going on to work out how you want to format data. The code below will output all the data from your query in a collapsible, sortable table. It automatically displays all columns returned from the db. You should go on to : specify what columns to include in the table and what names to display for the columns using define_columms and define_headers use your own child class of easy_table and define methods col_{columnname} to add hyperlinks etc to the table. You can also use method other_cols. See below for examples of typical usage. <?php /** * Simple file test.php to drop into root of Moodle installation. * This is the skeleton code to print a downloadable, paged, sorted table of * data from a sql query. */ require \"config.php\" ; require \" $CFG->libdir /tablelib.php\" ; $context = context_system :: instance (); $PAGE -> set_context ( $context ); $PAGE -> set_url ( '/test.php' ); $download = optional_param ( 'download' , '' , PARAM_ALPHA ); $table = new table_sql ( 'uniqueid' ); $table -> is_downloading ( $download , 'test' , 'testing123' ); if ( ! $table -> is_downloading ()) { // Only print headers if not asked to download data // Print the page header $PAGE -> set_title ( 'Testing' ); $PAGE -> set_heading ( 'Testing table class' ); $PAGE -> navbar -> add ( 'Testing table class' , new moodle_url ( '/test.php' )); echo $OUTPUT -> header (); } // Work out the sql for the table. $table -> set_sql ( '*' , \"{user}\" , '1=1' ); $table -> define_baseurl ( \" $CFG->wwwroot /test.php\" ); $table -> out ( 40 , true ); if ( ! $table -> is_downloading ()) { echo $OUTPUT -> footer (); } Typical Usage Define table Define table class in file somethingsomthing_table.php In the file define a child class of table_sql . Mostly this child class will just contain methods to format data for display. Format data for display Define methods col_{colmname} to process data from db and to add it to table. Eg. Here is an example from table class quiz_report_overview_table function col_timefinish($attempt){ if ($attempt->attempt) { if ($attempt->timefinish) { $timefinish = userdate($attempt->timefinish, $this->strtimeformat); if (!$this->is_downloading()) { return '<a href=\"review.php?q='.$this->quiz->id.'&attempt='.$attempt->attempt.'\">'.$timefinish.'</a>'; } else { return $timefinish; } } else { return '-'; } } else { return '-'; } } Where you do not know the names of the columns at the time of writing the class definition then you can use other_cols method. Eg. function other_cols($colname, $attempt){ if (preg_match('/^qsgrade([0-9]+)$/', $colname, $matches)){ $questionid = $matches[1]; $question = $this->questions[$questionid]; $state = new object(); $state->event = $attempt->{'qsevent'.$questionid}; if (question_state_is_graded($state)) { $grade = quiz_rescale_grade($attempt->{'qsgrade'.$questionid}, $this->quiz); } else { $grade = '--'; } if (!$this->is_downloading()) { $grade = $grade.'/'.quiz_rescale_grade($question->grade, $this->quiz); return link_to_popup_window('/mod/quiz/reviewquestion.php?state='. $attempt->{'qsid'.$questionid}.'&number='.$question->number, 'reviewquestion', $grade, 450, 650, get_string('reviewresponse', 'quiz'), 'none', true); } else { return $grade; } } else { return NULL; } } If there is no method col_{column name} and other_cols returns NULL then the column data is put straight in the table unprocessed. Use your table class // Start page $download = optional_param('download', '', PARAM_ALPHA); $table = new name_of_your_table('uniqueid'); $table->is_downloading($download, $filenamefordownload, $sheettitle); if (!$table->is_downloading()) { // Only print headers if not asked to download data $this->print_header_and_tabs($cm, $course, $quiz, \"overview\"); } // Various page set up stuff if (!$table->is_downloading()) { //do not print notices when downloading // Wrap output of html in these if conditions } // Work out the sql for the table. // Use this method only if you want to specify some sql with less joins for // counting the total records. $table->set_count_sql(\"SELECT COUNT(1) FROM $from WHERE $where\"); if ($something) { // Add some more joins } $table->set_sql($fields, $from, $where); // Define table columns. $columns = array(); $headers = array(); $help = array(); if (!$table->is_downloading() && $candelete) { $columns[]= 'checkbox'; $headers[]= NULL; $help[] = NULL; } if (!$table->is_downloading() && $CFG->grade_report_showuserimage) { $columns[]= 'picture'; $headers[]= ''; $help[] = NULL; } if (!$table->is_downloading()){ $columns[]= 'fullname'; $headers[]= get_string('name'); $help[] = NULL; } else { $columns[]= 'lastname'; $headers[]= get_string('lastname'); $help[] = NULL; $columns[]= 'firstname'; $headers[]= get_string('firstname'); $help[] = NULL; } if ($CFG->grade_report_showuseridnumber) { $columns[]= 'idnumber'; $headers[]= get_string('idnumber'); $help[] = NULL; } $columns[]= 'timestart'; $headers[]= get_string('startedon', 'quiz'); $help[] = NULL; $columns[]= 'timefinish'; $headers[]= get_string('timecompleted','quiz'); $help[] = NULL; $columns[]= 'duration'; $headers[]= get_string('attemptduration', 'quiz'); $help[] = NULL; if ($detailedmarks) { foreach ($questions as $id => $question) { // Ignore questions of zero length $columns[] = 'qsgrade'.$id; $headers[] = '#'.$question->number; $help[] = NULL; } } if ($showgrades) { $columns[] = 'sumgrades'; $headers[] = get_string('grade', 'quiz').'/'.$quiz->grade; $help[] = new help_icon('grade', 'quiz', 'moodle', ''); } if ($hasfeedback) { $columns[] = 'feedbacktext'; $headers[] = get_string('feedback', 'quiz'); $help[] = new help_icon('feedback', 'quiz', 'moodle', ''); } $table->define_columns($columns); $table->define_headers($headers); $table->define_help_for_headers($help); $table->sortable(true, 'uniqueid'); // Set up the table some of these settings will be ignored for downloads $table->define_baseurl($reporturl->out(false, $displayoptions)); $table->column_suppress('picture'); $table->column_suppress('fullname'); $table->column_suppress('idnumber'); $table->no_sorting('feedbacktext'); $table->column_class('picture', 'picture'); $table->column_class('fullname', 'bold'); $table->column_class('sumgrades', 'bold'); $table->set_attribute('id', 'attempts'); $table->out($pagesize, $useinitialsbar); if (!$table->is_downloading()) { // Footer and other html stuff to display. } Note that define_help_for_headers is optional, but if any column needs help, you need to use NULL for the other columns. Complete sql table class example The following two scripts demonstrate how you can customize which table columns to show, table columns names and process values for table rows. Put the following script into test_table.php <?php /** * Test table class to be put in test_table.php of root of Moodle installation. * for defining some custom column names and proccessing * Username and Password feilds using custom and other column methods. */ class test_table extends table_sql { /** * Constructor * @param int $uniqueid all tables have to have a unique id, this is used * as a key when storing table properties like sort order in the session. */ function __construct ( $uniqueid ) { parent :: __construct ( $uniqueid ); // Define the list of columns to show. $columns = array ( 'username' , 'password' , 'firstname' , 'lastname' ); $this -> define_columns ( $columns ); // Define the titles of columns to show in header. $headers = array ( 'Username' , 'Password' , 'First name' , 'Last name' ); $this -> define_headers ( $headers ); } /** * This function is called for each data row to allow processing of the * username value. * * @param object $values Contains object with all the values of record. * @return $string Return username with link to profile or username only * when downloading. */ function col_username ( $values ) { // If the data is being downloaded than we don't want to show HTML. if ( $this -> is_downloading ()) { return $values -> username ; } else { return '<a href=\"/user/profile.php?id=' . $values -> id . '\">' . $values -> username . '</a>' ; } } /** * This function is called for each data row to allow processing of * columns which do not have a *_cols function. * @return string return processed value. Return NULL if no change has * been made. */ function other_cols ( $colname , $value ) { // For security reasons we don't want to show the password hash. if ( $colname == 'password' ) { return \"****\" ; } } } Put the following script into test_custom.php, the difference between test.php is the inclusion of test_custom.php and changing table_sql to new test_table. <?php /** * Simple file test_custom.php to drop into root of Moodle installation. * This is an example of using a sql_table class to format data. */ require \"config.php\" ; require \" $CFG->libdir /tablelib.php\" ; require \"test_table.php\" ; $context = context_system :: instance (); $PAGE -> set_context ( $context ); $PAGE -> set_url ( '/test_custom.php' ); $download = optional_param ( 'download' , '' , PARAM_ALPHA ); $table = new test_table ( 'uniqueid' ); $table -> is_downloading ( $download , 'test' , 'testing123' ); if ( ! $table -> is_downloading ()) { // Only print headers if not asked to download data. // Print the page header. $PAGE -> set_title ( 'Testing' ); $PAGE -> set_heading ( 'Testing table class' ); $PAGE -> navbar -> add ( 'Testing table class' , new moodle_url ( '/test_custom.php' )); echo $OUTPUT -> header (); } // Work out the sql for the table. $table -> set_sql ( '*' , \"{user}\" , '1=1' ); $table -> define_baseurl ( \" $CFG->wwwroot /test_custom.php\" ); $table -> out ( 10 , true ); if ( ! $table -> is_downloading ()) { echo $OUTPUT -> footer (); } Adding download capability to existing tables To add download to existing tables. You must : Add : $download = optional_param('download', '', PARAM_ALPHA); To top of page. Probably more table instantiation to top of page. Add just after table object instantiation : $table->is_downloading($download, 'test', 'testing123'); Wrap all html output with condition : if (!$table->is_downloading()) { Make sure you have this method call somewhere : $table->define_baseurl($reporturl->out(false, $displayoptions)); Replace : $table->print_html(); With : $table->finish_output(); Download buttons will automagically appear. Sorting on text columns There is a function \"text_sorting($columnname)\" for the class flexible_table which allows you to specify which columns are of type \"text\" so they can be sorted correctly in all databases (currently required for Oracle). This should be called during the table initialisation before the first call to \"setup()\". Column styling and alignment Arbitrary styles can be added to each column: // Using direct styles $table->column_style('restore', 'text-align', 'center'); $table->column_style('date', 'text-align', 'right'); // Using css classes $this->column_class('time', 'text-right'); You also have the option of a quick align configuration as follows: $table->align = ['left', 'left', 'center', 'center', 'center', 'right', 'center', 'center']; You define the alignment for as many columns as you have in the table, or just the first ones up to your needed one, it can cope with either, as any undefined columns at the end just default to left. This should also be called during the table initialisation before the first call to \"setup()\".","title":"Table API"},{"location":"Moodle/API/phpMoodleTable/#skeleton-usage","text":"In order to check your sql query is working as expected when developing a page it can be useful just to output all the data from the query in the table before going on to work out how you want to format data. The code below will output all the data from your query in a collapsible, sortable table. It automatically displays all columns returned from the db. You should go on to : specify what columns to include in the table and what names to display for the columns using define_columms and define_headers use your own child class of easy_table and define methods col_{columnname} to add hyperlinks etc to the table. You can also use method other_cols. See below for examples of typical usage. <?php /** * Simple file test.php to drop into root of Moodle installation. * This is the skeleton code to print a downloadable, paged, sorted table of * data from a sql query. */ require \"config.php\" ; require \" $CFG->libdir /tablelib.php\" ; $context = context_system :: instance (); $PAGE -> set_context ( $context ); $PAGE -> set_url ( '/test.php' ); $download = optional_param ( 'download' , '' , PARAM_ALPHA ); $table = new table_sql ( 'uniqueid' ); $table -> is_downloading ( $download , 'test' , 'testing123' ); if ( ! $table -> is_downloading ()) { // Only print headers if not asked to download data // Print the page header $PAGE -> set_title ( 'Testing' ); $PAGE -> set_heading ( 'Testing table class' ); $PAGE -> navbar -> add ( 'Testing table class' , new moodle_url ( '/test.php' )); echo $OUTPUT -> header (); } // Work out the sql for the table. $table -> set_sql ( '*' , \"{user}\" , '1=1' ); $table -> define_baseurl ( \" $CFG->wwwroot /test.php\" ); $table -> out ( 40 , true ); if ( ! $table -> is_downloading ()) { echo $OUTPUT -> footer (); }","title":"Skeleton Usage"},{"location":"Moodle/API/phpMoodleTable/#typical-usage","text":"","title":"Typical Usage"},{"location":"Moodle/API/phpMoodleTable/#define-table","text":"Define table class in file somethingsomthing_table.php In the file define a child class of table_sql . Mostly this child class will just contain methods to format data for display.","title":"Define table"},{"location":"Moodle/API/phpMoodleTable/#format-data-for-display","text":"Define methods col_{colmname} to process data from db and to add it to table. Eg. Here is an example from table class quiz_report_overview_table function col_timefinish($attempt){ if ($attempt->attempt) { if ($attempt->timefinish) { $timefinish = userdate($attempt->timefinish, $this->strtimeformat); if (!$this->is_downloading()) { return '<a href=\"review.php?q='.$this->quiz->id.'&attempt='.$attempt->attempt.'\">'.$timefinish.'</a>'; } else { return $timefinish; } } else { return '-'; } } else { return '-'; } } Where you do not know the names of the columns at the time of writing the class definition then you can use other_cols method. Eg. function other_cols($colname, $attempt){ if (preg_match('/^qsgrade([0-9]+)$/', $colname, $matches)){ $questionid = $matches[1]; $question = $this->questions[$questionid]; $state = new object(); $state->event = $attempt->{'qsevent'.$questionid}; if (question_state_is_graded($state)) { $grade = quiz_rescale_grade($attempt->{'qsgrade'.$questionid}, $this->quiz); } else { $grade = '--'; } if (!$this->is_downloading()) { $grade = $grade.'/'.quiz_rescale_grade($question->grade, $this->quiz); return link_to_popup_window('/mod/quiz/reviewquestion.php?state='. $attempt->{'qsid'.$questionid}.'&number='.$question->number, 'reviewquestion', $grade, 450, 650, get_string('reviewresponse', 'quiz'), 'none', true); } else { return $grade; } } else { return NULL; } } If there is no method col_{column name} and other_cols returns NULL then the column data is put straight in the table unprocessed.","title":"Format data for display"},{"location":"Moodle/API/phpMoodleTable/#use-your-table-class","text":"// Start page $download = optional_param('download', '', PARAM_ALPHA); $table = new name_of_your_table('uniqueid'); $table->is_downloading($download, $filenamefordownload, $sheettitle); if (!$table->is_downloading()) { // Only print headers if not asked to download data $this->print_header_and_tabs($cm, $course, $quiz, \"overview\"); } // Various page set up stuff if (!$table->is_downloading()) { //do not print notices when downloading // Wrap output of html in these if conditions } // Work out the sql for the table. // Use this method only if you want to specify some sql with less joins for // counting the total records. $table->set_count_sql(\"SELECT COUNT(1) FROM $from WHERE $where\"); if ($something) { // Add some more joins } $table->set_sql($fields, $from, $where); // Define table columns. $columns = array(); $headers = array(); $help = array(); if (!$table->is_downloading() && $candelete) { $columns[]= 'checkbox'; $headers[]= NULL; $help[] = NULL; } if (!$table->is_downloading() && $CFG->grade_report_showuserimage) { $columns[]= 'picture'; $headers[]= ''; $help[] = NULL; } if (!$table->is_downloading()){ $columns[]= 'fullname'; $headers[]= get_string('name'); $help[] = NULL; } else { $columns[]= 'lastname'; $headers[]= get_string('lastname'); $help[] = NULL; $columns[]= 'firstname'; $headers[]= get_string('firstname'); $help[] = NULL; } if ($CFG->grade_report_showuseridnumber) { $columns[]= 'idnumber'; $headers[]= get_string('idnumber'); $help[] = NULL; } $columns[]= 'timestart'; $headers[]= get_string('startedon', 'quiz'); $help[] = NULL; $columns[]= 'timefinish'; $headers[]= get_string('timecompleted','quiz'); $help[] = NULL; $columns[]= 'duration'; $headers[]= get_string('attemptduration', 'quiz'); $help[] = NULL; if ($detailedmarks) { foreach ($questions as $id => $question) { // Ignore questions of zero length $columns[] = 'qsgrade'.$id; $headers[] = '#'.$question->number; $help[] = NULL; } } if ($showgrades) { $columns[] = 'sumgrades'; $headers[] = get_string('grade', 'quiz').'/'.$quiz->grade; $help[] = new help_icon('grade', 'quiz', 'moodle', ''); } if ($hasfeedback) { $columns[] = 'feedbacktext'; $headers[] = get_string('feedback', 'quiz'); $help[] = new help_icon('feedback', 'quiz', 'moodle', ''); } $table->define_columns($columns); $table->define_headers($headers); $table->define_help_for_headers($help); $table->sortable(true, 'uniqueid'); // Set up the table some of these settings will be ignored for downloads $table->define_baseurl($reporturl->out(false, $displayoptions)); $table->column_suppress('picture'); $table->column_suppress('fullname'); $table->column_suppress('idnumber'); $table->no_sorting('feedbacktext'); $table->column_class('picture', 'picture'); $table->column_class('fullname', 'bold'); $table->column_class('sumgrades', 'bold'); $table->set_attribute('id', 'attempts'); $table->out($pagesize, $useinitialsbar); if (!$table->is_downloading()) { // Footer and other html stuff to display. } Note that define_help_for_headers is optional, but if any column needs help, you need to use NULL for the other columns.","title":"Use your table class"},{"location":"Moodle/API/phpMoodleTable/#complete-sql-table-class-example","text":"The following two scripts demonstrate how you can customize which table columns to show, table columns names and process values for table rows. Put the following script into test_table.php <?php /** * Test table class to be put in test_table.php of root of Moodle installation. * for defining some custom column names and proccessing * Username and Password feilds using custom and other column methods. */ class test_table extends table_sql { /** * Constructor * @param int $uniqueid all tables have to have a unique id, this is used * as a key when storing table properties like sort order in the session. */ function __construct ( $uniqueid ) { parent :: __construct ( $uniqueid ); // Define the list of columns to show. $columns = array ( 'username' , 'password' , 'firstname' , 'lastname' ); $this -> define_columns ( $columns ); // Define the titles of columns to show in header. $headers = array ( 'Username' , 'Password' , 'First name' , 'Last name' ); $this -> define_headers ( $headers ); } /** * This function is called for each data row to allow processing of the * username value. * * @param object $values Contains object with all the values of record. * @return $string Return username with link to profile or username only * when downloading. */ function col_username ( $values ) { // If the data is being downloaded than we don't want to show HTML. if ( $this -> is_downloading ()) { return $values -> username ; } else { return '<a href=\"/user/profile.php?id=' . $values -> id . '\">' . $values -> username . '</a>' ; } } /** * This function is called for each data row to allow processing of * columns which do not have a *_cols function. * @return string return processed value. Return NULL if no change has * been made. */ function other_cols ( $colname , $value ) { // For security reasons we don't want to show the password hash. if ( $colname == 'password' ) { return \"****\" ; } } } Put the following script into test_custom.php, the difference between test.php is the inclusion of test_custom.php and changing table_sql to new test_table. <?php /** * Simple file test_custom.php to drop into root of Moodle installation. * This is an example of using a sql_table class to format data. */ require \"config.php\" ; require \" $CFG->libdir /tablelib.php\" ; require \"test_table.php\" ; $context = context_system :: instance (); $PAGE -> set_context ( $context ); $PAGE -> set_url ( '/test_custom.php' ); $download = optional_param ( 'download' , '' , PARAM_ALPHA ); $table = new test_table ( 'uniqueid' ); $table -> is_downloading ( $download , 'test' , 'testing123' ); if ( ! $table -> is_downloading ()) { // Only print headers if not asked to download data. // Print the page header. $PAGE -> set_title ( 'Testing' ); $PAGE -> set_heading ( 'Testing table class' ); $PAGE -> navbar -> add ( 'Testing table class' , new moodle_url ( '/test_custom.php' )); echo $OUTPUT -> header (); } // Work out the sql for the table. $table -> set_sql ( '*' , \"{user}\" , '1=1' ); $table -> define_baseurl ( \" $CFG->wwwroot /test_custom.php\" ); $table -> out ( 10 , true ); if ( ! $table -> is_downloading ()) { echo $OUTPUT -> footer (); }","title":"Complete sql table class example"},{"location":"Moodle/API/phpMoodleTable/#adding-download-capability-to-existing-tables","text":"To add download to existing tables. You must : Add : $download = optional_param('download', '', PARAM_ALPHA); To top of page. Probably more table instantiation to top of page. Add just after table object instantiation : $table->is_downloading($download, 'test', 'testing123'); Wrap all html output with condition : if (!$table->is_downloading()) { Make sure you have this method call somewhere : $table->define_baseurl($reporturl->out(false, $displayoptions)); Replace : $table->print_html(); With : $table->finish_output(); Download buttons will automagically appear.","title":"Adding download capability to existing tables"},{"location":"Moodle/API/phpMoodleTable/#sorting-on-text-columns","text":"There is a function \"text_sorting($columnname)\" for the class flexible_table which allows you to specify which columns are of type \"text\" so they can be sorted correctly in all databases (currently required for Oracle). This should be called during the table initialisation before the first call to \"setup()\".","title":"Sorting on text columns"},{"location":"Moodle/API/phpMoodleTable/#column-styling-and-alignment","text":"Arbitrary styles can be added to each column: // Using direct styles $table->column_style('restore', 'text-align', 'center'); $table->column_style('date', 'text-align', 'right'); // Using css classes $this->column_class('time', 'text-right'); You also have the option of a quick align configuration as follows: $table->align = ['left', 'left', 'center', 'center', 'center', 'right', 'center', 'center']; You define the alignment for as many columns as you have in the table, or just the first ones up to your needed one, it can cope with either, as any undefined columns at the end just default to left. This should also be called during the table initialisation before the first call to \"setup()\".","title":"Column styling and alignment"},{"location":"Moodle/API/phpMoodleTag/","text":"The Tag API in Moodle provides a standardized way for developers to allow users to tag content. This system is built into Moodle core and supports tagging various types of content (like forum posts, glossary entries, and user profiles) with custom tags. These tags can be reused across the platform, helping to categorize and find content more easily. The API also provides mechanisms to manage, search, and display tags. The main tag related functions can be found in the tag/classes/tag.php file. For a thorough overview of all of the functions available for working with Tags please see methods in core_tag_tag , core_tag_collection and core_tag_area classes . Tag Creation and Management When a user tags something a tag instance is created in the database linking the item to the actual tag. If the tag did not exist before it is created automatically. Do not confuse these two entities - deleting the tag instance does not normally delete tag, however deleting tag deletes all tag instances associated with it. Tags in Moodle can be created by both users and administrators. They are stored in the mdl_tag database table, and each tag has a unique id , name , and various other metadata fields. Administrators can create, edit, and delete tags from the Moodle interface: Navigate to Site administration > Appearance > Manage tags to manage global tags. Users can also suggest tags when tagging content (depending on permissions). The following fields are stored for each tag: Name : The actual tag text. Description : An optional description of the tag. Tag Type : Defines whether the tag is a standard, official tag, or user-generated. Visibility : Determines whether the tag is visible across the entire platform or only to the user who created it. Tags can be created and managed programmatically through the API: $tag = new stdClass(); $tag->name = 'customtag'; $tag->description = 'This is a custom tag.'; $tag->tagtype = 'default'; // Can be 'default', 'official', or 'user' $tag->timemodified = time(); $tagid = core_tag_tag::create($tag); Tag Areas A tag area represents a specific kind of content that can be tagged. For instance, courses, forum posts, and glossary entries are examples of taggable content, and each represented by their own tag area. The combination of a component (e.g., core for core components or mod_yourplugin for a plugin) and an item type defines a tag area . This tells Moodle what type of content is being tagged. Developers define tag areas the areas that can be tagged, examples are: blog posts courses users (tags represent user interests) activity modules questions wiki pages Each tag area is identified by two attributes - component and itemtype. Itemtype must be a name of a table in the database. Component is the core component or plugin responsible for the tagging. This way the same DB table (for example 'user' or 'course') may be independently tagged by several components. Administrator or manager is able to manage the tag areas, collections and tags inside them on the Managing tags page. Users are able to search tags and view all items tagged with them that they have access to. Defining a tag area First, developer must define the tag areas in the file db/tag.php . This will usually look like: $tagareas = [ [ // The name of the database table (without prefix). 'itemtype' => 'wiki_pages', // The full frankenstyle name of the plugin. // Note: This can be omitted for plugins. 'component' => 'mod_wiki', 'callback' => 'mod_wiki_get_tagged_pages', 'callbackfile' => '/mod/wiki/locallib.php', ], ]; You will also need to add language string, for the example above it will be $string['tagarea_wiki_pages'] = 'Wiki pages'; Note There are more options such as specifying the default value for \"Standard tags\", having a fixed collection or excluding from search. They can be found in comments in Core library tag.php file. Important After making changes to db/tag.php, you must bump the plugin version in version.php and perform a Moodle upgrade. Adding tags element to the editing form After the tag area is defined it should appear on the \"Manage tags\" page. Now it is time to allow users to add/change tags when editing the item. Here is an example from Wiki module: Add a 'tags' form element to the editing form: $mform->addElement( 'tags', 'tags', get_string('tags'), [ 'itemtype' => 'wiki_pages', 'component' => 'mod_wiki', ] ); This element will automatically check if the tag area is disabled by the manager and will not display anything in this case. However if you want to add a header you need to check if the tag area is enabled. if (core_tag_tag::is_enabled('mod_wiki', 'wiki_pages')) { $mform->addElement('header', 'tagshdr', get_string('tags', 'tag')); } Save the form data if ($data = $form->get_data()) { // Do some other processing here, // if this is a new page (item) //you need to insert it in the DB and obtain id. // $pageid = $data->id; core_tag_tag::set_item_tags( 'mod_wiki', 'wiki_pages', $pageid, $modulecontext, $data->tags ); } It is important to specify the correct context in this function. Note that $data->tags will always be returned by the form, even if the area is disabled, however, core_tag_tag::set_item_tags() will not change or reset tags if the tag area is disabled. Populate the form with existing tags before calling \\(form->set_data(\\) data) $data = $DB->get_record('wiki_pages', ['id' => $this->page->id]); // Well, it's more complicated than that of course.... $data->tags = core_tag_tag::get_item_tags_array('mod_wiki', 'wiki_pages', $this->page->id); $form->set_data($data); Tip Always test the code with tag area enabled and disabled. Displaying tags next to the item Example of displaying of the tags are user interests on the user profile page. User can see the list of interests, each of them is a link that leads to the page that shows all items tagged with this tag. Here is the code used by Wiki module to display tags the page is tagged with: echo $OUTPUT->tag_list( core_tag_tag::get_item_tags( 'mod_wiki', 'wiki_pages', $page->id ), null, 'wiki-tags' ); Important To prevent an performance regression, Use core_tag_tag::get_items_tags() to fetch all tags against multiple item ids. Deleting and clearing tags Cron will automatically remove tag instances that point to non existing items, however it is a good habit to delete tags when the record is deleted. Note If you have created a course activity that uses tags you should also remember to delete the tags during a course reset by adding code to the reset course callbacks. First you want to add a checkbox that a user can check if they wish to delete the tags, then code that handles the case when the checkbox has been checked. // Removes all tag instances associated with an item. core_tag_tag::remove_all_item_tags($component, $itemtype, $itemid, $tiuserid = 0); // Removes tag instances in bulk. Here $component is mandatory in this method, // either itemtype or contextid or neither or both can be specified. core_tag_tag::delete_instances($component, $itemtype = null, $contextid = null); Tagging Content The Tag API allows you to associate tags with specific types of content. This is done by linking content to tags via a specific tag area . For example, you can tag courses, forum posts, users, or items from any plugin you\u2019ve developed. if (!core_tag_tag::is_enabled('mod_glossary', 'glossary_entries')) { // Tags disabled on this site, nothing to process. return; } $tag = $data->rawname; if (!$itemid = $this->get_mappingid('glossary_entry', $data->itemid)) { // Orphaned tag, we could not find the glossary entry for it - ignore. return; } $context = context_module::instance($this->task->get_moduleid()); core_tag_tag::add_item_tag('mod_glossary', 'glossary_entries', $itemid, $context, $tag); Backup and restore When you tag contents inside the course the plugin has to hook into backup and restore and process necessary tags. This is especially important for the contents inside activity modules, such as wiki pages or forum posts. Questions in the course question bank also backup and restore their tags. You can choose to backup and restore tags for each item individually (as it is done in mod_wiki) OR backup all tags in the context at once (as it is done in mod_glossary or mod_forum). Second option is preferable for performance reasons. Make sure to take into account $userinfo (whether user information is backed up / restored), for example wiki pages is not user information but glossary entries are, tags on them follow the same rule. // mod/glossary/backup_glossary_stepslib.php protected function define_structure() { // ... $tags = new backup_nested_element('entriestags'); $tag = new backup_nested_element('tag', ['id'], ['itemid', 'rawname']); // ... // Note that parent node is the glossary, not glossary entry, however the individual entries are tagged. $glossary->add_child($tags); $tags->add_child($tag); // ... if ($userinfo && core_tag_tag::is_enabled('mod_glossary', 'glossary_entries')) { $tag->set_source_sql('SELECT t.id, ti.itemid, t.rawname FROM {tag} t JOIN {tag_instance} ti ON ti.tagid = t.id WHERE ti.itemtype = ? AND ti.component = ? AND ti.contextid = ?', [ backup_helper::is_sqlparam('glossary_entries'), backup_helper::is_sqlparam('mod_glossary'), backup::VAR_CONTEXTID]); } // ... } // mod/glossary/restore_glossary_stepslib.php protected function define_structure() { // ... if ($userinfo) { $paths[] = new restore_path_element('glossary_entry_tag', '/activity/glossary/entriestags/tag'); } // ... } protected function process_glossary_entry_tag($data) { $data = (object)$data; if (!core_tag_tag::is_enabled('mod_glossary', 'glossary_entries')) { // Tags disabled on this site, nothing to process. return; } $tag = $data->rawname; if (!$itemid = $this->get_mappingid('glossary_entry', $data->itemid)) { // Orphaned tag, we could not find the glossary entry for it - ignore. return; } $context = context_module::instance($this->task->get_moduleid()); core_tag_tag::add_item_tag('mod_glossary', 'glossary_entries', $itemid, $context, $tag); } Search callback Given a user searches for any items tagged with a specified tag, only the items that the user has access to must be returned. To limit the performance impact of checking user access against items the following class core_tag_index_builder() can assist with the retrieval and caching of records, especially within both course and activity modules. function mod_wiki_get_tagged_pages($tag, $exclusivemode = false, $fromctx = 0, $ctx = 0, $rec = 1, $page = 0) { // Find items. // Please refer to existing callbacks in core for examples. // ... // Use core_tag_index_builder to build and filter the list of items. // Notice how we search for 6 items when we need to display 5 - this way we will know that we need to display a link to the next page. $builder = new core_tag_index_builder('mod_wiki', 'wiki_pages', $query, $params, $page * $perpage, $perpage + 1); // ... $items = $builder->get_items(); if (count($items) > $perpage) { // We don't need exact page count, just indicate that the next page exists. $totalpages = $page + 2; array_pop($items); } // Build the display contents. if ($items) { $tagfeed = new core_tag\\output\\tagfeed(); foreach ($items as $item) { $tagfeed->add(...); } $content = $OUTPUT->render_from_template('core_tag/tagfeed', $tagfeed->export_for_template($OUTPUT)); return new core_tag\\output\\tagindex($tag, 'mod_wiki', 'wiki_pages', $content, $exclusivemode, $fromctx, $ctx, $rec, $page, $totalpages); } } User-specific tags It is possible that each tagged item can be tagged by each user independently. Before Moodle 3.0 this was how courses were tagged however from 3.0 tagging courses became more standard. The functionality remains in the API (argument $tiuser to the tagging functions). In this case both tag list and tag cloud will display all tag instances added by all users but each user will be able to edit only their own. If developer chooses to implement it in the plugin, they need to also implement the UI when admin or other privileged user can remove or edit the instances of another user. Otherwise if teacher has tagged the course and later resigned there will be no way to change their tags. Also such tag instances need special treatment during backup and restore - they are now considered \"user data\" and user id mapping should be performed. Advanced usages Custom plugins may go beyond the standard tags handling and use them without mixing with regular course/user/wiki/blogs tags, hide them from the \"Tag search\" page and \"Tags\" block but instead have their own interface to search/categorise using tags. This can be achieved by defining tag collection, make it not searchable and specify a custom URL to link to when the tag is actually displayed. This all can be defined in db/tag.php, see the comments in Core library tag.php . tag_area::get_collection($component, $itemtype) - will return you the collection that your tag area is in tag_collection::get_tag_cloud() - will return all tags in the collection. There are no API methods to get the tags used in the tag area - this is actually the purpose of tag collections. Tag Collection Tags in Moodle can be grouped into collections , which are categories or groups of tags. For instance, an administrator might create a collection for a specific topic like \u201cScience\u201d and include tags like \"Biology,\" \"Physics,\" and \"Chemistry.\" Collections allow tags to be organized and categorized, improving content filtering and searchability. Tag Capabilities and Permissions Moodle uses its roles and capabilities system to control who can add and manage tags. Common capabilities related to tags include: moodle/tag:manage : Allows the user to manage all tags. moodle/tag:edit : Allows the user to edit tags. moodle/tag:create : Allows the user to create new tags. moodle/tag:delete : Allows the user to delete tags. These capabilities can be assigned to roles (e.g., student, teacher, admin) to restrict or allow tag-related actions.","title":"Tag API"},{"location":"Moodle/API/phpMoodleTag/#tag-creation-and-management","text":"When a user tags something a tag instance is created in the database linking the item to the actual tag. If the tag did not exist before it is created automatically. Do not confuse these two entities - deleting the tag instance does not normally delete tag, however deleting tag deletes all tag instances associated with it. Tags in Moodle can be created by both users and administrators. They are stored in the mdl_tag database table, and each tag has a unique id , name , and various other metadata fields. Administrators can create, edit, and delete tags from the Moodle interface: Navigate to Site administration > Appearance > Manage tags to manage global tags. Users can also suggest tags when tagging content (depending on permissions). The following fields are stored for each tag: Name : The actual tag text. Description : An optional description of the tag. Tag Type : Defines whether the tag is a standard, official tag, or user-generated. Visibility : Determines whether the tag is visible across the entire platform or only to the user who created it. Tags can be created and managed programmatically through the API: $tag = new stdClass(); $tag->name = 'customtag'; $tag->description = 'This is a custom tag.'; $tag->tagtype = 'default'; // Can be 'default', 'official', or 'user' $tag->timemodified = time(); $tagid = core_tag_tag::create($tag);","title":"Tag Creation and Management"},{"location":"Moodle/API/phpMoodleTag/#tag-areas","text":"A tag area represents a specific kind of content that can be tagged. For instance, courses, forum posts, and glossary entries are examples of taggable content, and each represented by their own tag area. The combination of a component (e.g., core for core components or mod_yourplugin for a plugin) and an item type defines a tag area . This tells Moodle what type of content is being tagged. Developers define tag areas the areas that can be tagged, examples are: blog posts courses users (tags represent user interests) activity modules questions wiki pages Each tag area is identified by two attributes - component and itemtype. Itemtype must be a name of a table in the database. Component is the core component or plugin responsible for the tagging. This way the same DB table (for example 'user' or 'course') may be independently tagged by several components. Administrator or manager is able to manage the tag areas, collections and tags inside them on the Managing tags page. Users are able to search tags and view all items tagged with them that they have access to.","title":"Tag Areas"},{"location":"Moodle/API/phpMoodleTag/#defining-a-tag-area","text":"First, developer must define the tag areas in the file db/tag.php . This will usually look like: $tagareas = [ [ // The name of the database table (without prefix). 'itemtype' => 'wiki_pages', // The full frankenstyle name of the plugin. // Note: This can be omitted for plugins. 'component' => 'mod_wiki', 'callback' => 'mod_wiki_get_tagged_pages', 'callbackfile' => '/mod/wiki/locallib.php', ], ]; You will also need to add language string, for the example above it will be $string['tagarea_wiki_pages'] = 'Wiki pages'; Note There are more options such as specifying the default value for \"Standard tags\", having a fixed collection or excluding from search. They can be found in comments in Core library tag.php file. Important After making changes to db/tag.php, you must bump the plugin version in version.php and perform a Moodle upgrade.","title":"Defining a tag area"},{"location":"Moodle/API/phpMoodleTag/#adding-tags-element-to-the-editing-form","text":"After the tag area is defined it should appear on the \"Manage tags\" page. Now it is time to allow users to add/change tags when editing the item. Here is an example from Wiki module: Add a 'tags' form element to the editing form: $mform->addElement( 'tags', 'tags', get_string('tags'), [ 'itemtype' => 'wiki_pages', 'component' => 'mod_wiki', ] ); This element will automatically check if the tag area is disabled by the manager and will not display anything in this case. However if you want to add a header you need to check if the tag area is enabled. if (core_tag_tag::is_enabled('mod_wiki', 'wiki_pages')) { $mform->addElement('header', 'tagshdr', get_string('tags', 'tag')); } Save the form data if ($data = $form->get_data()) { // Do some other processing here, // if this is a new page (item) //you need to insert it in the DB and obtain id. // $pageid = $data->id; core_tag_tag::set_item_tags( 'mod_wiki', 'wiki_pages', $pageid, $modulecontext, $data->tags ); } It is important to specify the correct context in this function. Note that $data->tags will always be returned by the form, even if the area is disabled, however, core_tag_tag::set_item_tags() will not change or reset tags if the tag area is disabled. Populate the form with existing tags before calling \\(form->set_data(\\) data) $data = $DB->get_record('wiki_pages', ['id' => $this->page->id]); // Well, it's more complicated than that of course.... $data->tags = core_tag_tag::get_item_tags_array('mod_wiki', 'wiki_pages', $this->page->id); $form->set_data($data); Tip Always test the code with tag area enabled and disabled.","title":"Adding tags element to the editing form"},{"location":"Moodle/API/phpMoodleTag/#displaying-tags-next-to-the-item","text":"Example of displaying of the tags are user interests on the user profile page. User can see the list of interests, each of them is a link that leads to the page that shows all items tagged with this tag. Here is the code used by Wiki module to display tags the page is tagged with: echo $OUTPUT->tag_list( core_tag_tag::get_item_tags( 'mod_wiki', 'wiki_pages', $page->id ), null, 'wiki-tags' ); Important To prevent an performance regression, Use core_tag_tag::get_items_tags() to fetch all tags against multiple item ids.","title":"Displaying tags next to the item"},{"location":"Moodle/API/phpMoodleTag/#deleting-and-clearing-tags","text":"Cron will automatically remove tag instances that point to non existing items, however it is a good habit to delete tags when the record is deleted. Note If you have created a course activity that uses tags you should also remember to delete the tags during a course reset by adding code to the reset course callbacks. First you want to add a checkbox that a user can check if they wish to delete the tags, then code that handles the case when the checkbox has been checked. // Removes all tag instances associated with an item. core_tag_tag::remove_all_item_tags($component, $itemtype, $itemid, $tiuserid = 0); // Removes tag instances in bulk. Here $component is mandatory in this method, // either itemtype or contextid or neither or both can be specified. core_tag_tag::delete_instances($component, $itemtype = null, $contextid = null);","title":"Deleting and clearing tags"},{"location":"Moodle/API/phpMoodleTag/#tagging-content","text":"The Tag API allows you to associate tags with specific types of content. This is done by linking content to tags via a specific tag area . For example, you can tag courses, forum posts, users, or items from any plugin you\u2019ve developed. if (!core_tag_tag::is_enabled('mod_glossary', 'glossary_entries')) { // Tags disabled on this site, nothing to process. return; } $tag = $data->rawname; if (!$itemid = $this->get_mappingid('glossary_entry', $data->itemid)) { // Orphaned tag, we could not find the glossary entry for it - ignore. return; } $context = context_module::instance($this->task->get_moduleid()); core_tag_tag::add_item_tag('mod_glossary', 'glossary_entries', $itemid, $context, $tag);","title":"Tagging Content"},{"location":"Moodle/API/phpMoodleTag/#backup-and-restore","text":"When you tag contents inside the course the plugin has to hook into backup and restore and process necessary tags. This is especially important for the contents inside activity modules, such as wiki pages or forum posts. Questions in the course question bank also backup and restore their tags. You can choose to backup and restore tags for each item individually (as it is done in mod_wiki) OR backup all tags in the context at once (as it is done in mod_glossary or mod_forum). Second option is preferable for performance reasons. Make sure to take into account $userinfo (whether user information is backed up / restored), for example wiki pages is not user information but glossary entries are, tags on them follow the same rule. // mod/glossary/backup_glossary_stepslib.php protected function define_structure() { // ... $tags = new backup_nested_element('entriestags'); $tag = new backup_nested_element('tag', ['id'], ['itemid', 'rawname']); // ... // Note that parent node is the glossary, not glossary entry, however the individual entries are tagged. $glossary->add_child($tags); $tags->add_child($tag); // ... if ($userinfo && core_tag_tag::is_enabled('mod_glossary', 'glossary_entries')) { $tag->set_source_sql('SELECT t.id, ti.itemid, t.rawname FROM {tag} t JOIN {tag_instance} ti ON ti.tagid = t.id WHERE ti.itemtype = ? AND ti.component = ? AND ti.contextid = ?', [ backup_helper::is_sqlparam('glossary_entries'), backup_helper::is_sqlparam('mod_glossary'), backup::VAR_CONTEXTID]); } // ... } // mod/glossary/restore_glossary_stepslib.php protected function define_structure() { // ... if ($userinfo) { $paths[] = new restore_path_element('glossary_entry_tag', '/activity/glossary/entriestags/tag'); } // ... } protected function process_glossary_entry_tag($data) { $data = (object)$data; if (!core_tag_tag::is_enabled('mod_glossary', 'glossary_entries')) { // Tags disabled on this site, nothing to process. return; } $tag = $data->rawname; if (!$itemid = $this->get_mappingid('glossary_entry', $data->itemid)) { // Orphaned tag, we could not find the glossary entry for it - ignore. return; } $context = context_module::instance($this->task->get_moduleid()); core_tag_tag::add_item_tag('mod_glossary', 'glossary_entries', $itemid, $context, $tag); }","title":"Backup and restore"},{"location":"Moodle/API/phpMoodleTag/#search-callback","text":"Given a user searches for any items tagged with a specified tag, only the items that the user has access to must be returned. To limit the performance impact of checking user access against items the following class core_tag_index_builder() can assist with the retrieval and caching of records, especially within both course and activity modules. function mod_wiki_get_tagged_pages($tag, $exclusivemode = false, $fromctx = 0, $ctx = 0, $rec = 1, $page = 0) { // Find items. // Please refer to existing callbacks in core for examples. // ... // Use core_tag_index_builder to build and filter the list of items. // Notice how we search for 6 items when we need to display 5 - this way we will know that we need to display a link to the next page. $builder = new core_tag_index_builder('mod_wiki', 'wiki_pages', $query, $params, $page * $perpage, $perpage + 1); // ... $items = $builder->get_items(); if (count($items) > $perpage) { // We don't need exact page count, just indicate that the next page exists. $totalpages = $page + 2; array_pop($items); } // Build the display contents. if ($items) { $tagfeed = new core_tag\\output\\tagfeed(); foreach ($items as $item) { $tagfeed->add(...); } $content = $OUTPUT->render_from_template('core_tag/tagfeed', $tagfeed->export_for_template($OUTPUT)); return new core_tag\\output\\tagindex($tag, 'mod_wiki', 'wiki_pages', $content, $exclusivemode, $fromctx, $ctx, $rec, $page, $totalpages); } }","title":"Search callback"},{"location":"Moodle/API/phpMoodleTag/#user-specific-tags","text":"It is possible that each tagged item can be tagged by each user independently. Before Moodle 3.0 this was how courses were tagged however from 3.0 tagging courses became more standard. The functionality remains in the API (argument $tiuser to the tagging functions). In this case both tag list and tag cloud will display all tag instances added by all users but each user will be able to edit only their own. If developer chooses to implement it in the plugin, they need to also implement the UI when admin or other privileged user can remove or edit the instances of another user. Otherwise if teacher has tagged the course and later resigned there will be no way to change their tags. Also such tag instances need special treatment during backup and restore - they are now considered \"user data\" and user id mapping should be performed.","title":"User-specific tags"},{"location":"Moodle/API/phpMoodleTag/#advanced-usages","text":"Custom plugins may go beyond the standard tags handling and use them without mixing with regular course/user/wiki/blogs tags, hide them from the \"Tag search\" page and \"Tags\" block but instead have their own interface to search/categorise using tags. This can be achieved by defining tag collection, make it not searchable and specify a custom URL to link to when the tag is actually displayed. This all can be defined in db/tag.php, see the comments in Core library tag.php . tag_area::get_collection($component, $itemtype) - will return you the collection that your tag area is in tag_collection::get_tag_cloud() - will return all tags in the collection. There are no API methods to get the tags used in the tag area - this is actually the purpose of tag collections.","title":"Advanced usages"},{"location":"Moodle/API/phpMoodleTag/#tag-collection","text":"Tags in Moodle can be grouped into collections , which are categories or groups of tags. For instance, an administrator might create a collection for a specific topic like \u201cScience\u201d and include tags like \"Biology,\" \"Physics,\" and \"Chemistry.\" Collections allow tags to be organized and categorized, improving content filtering and searchability.","title":"Tag Collection"},{"location":"Moodle/API/phpMoodleTag/#tag-capabilities-and-permissions","text":"Moodle uses its roles and capabilities system to control who can add and manage tags. Common capabilities related to tags include: moodle/tag:manage : Allows the user to manage all tags. moodle/tag:edit : Allows the user to edit tags. moodle/tag:create : Allows the user to create new tags. moodle/tag:delete : Allows the user to delete tags. These capabilities can be assigned to roles (e.g., student, teacher, admin) to restrict or allow tag-related actions.","title":"Tag Capabilities and Permissions"},{"location":"Moodle/Javascript/phpMoodleAJAX/","text":"AJAX (Asynchronous JavaScript and XML) allows web pages to be updated asynchronously by exchanging data with a web server behind the scenes. This means that parts of a web page can be updated without reloading the entire page. In Moodle, AJAX is commonly used to create more dynamic and responsive user interfaces. The preferred way to write new AJAX interactions in Moodle is to use the JavaScript module core/ajax , which directly calls web service functions built using the Moodle Web Service API. Benefits of Using core/ajax : Security : No new AJAX scripts need auditing for security vulnerabilities. Efficiency : Multiple requests can be chained in a single HTTP request. Type Checking : Strict type checking for all parameters and return types. Reusability : New web service functions benefit AJAX interfaces and web service clients. Steps to Create an AJAX Interaction in Moodle Write or Find an Existing Web Service Function: Web services in Moodle are functions that can be accessed via web protocols such as REST, SOAP, and XML-RPC. These functions are defined in the db/services.php file of your plugin or core Moodle. See WebServices . $functions = [ 'yourplugin_get_data' => [ 'classname' => 'yourplugin_external', 'methodname' => 'get_data', 'classpath' => 'yourplugin/externallib.php', 'description' => 'Get data for your plugin', 'type' => 'read', 'ajax' => true, // Marking the service as available for AJAX ], ]; Mark the Service as Available for AJAX: To make the web service function available for AJAX, define 'ajax' => true in the function\u2019s definition in db/services.php . Only functions that are marked for AJAX using this mechanism will be available to the AJAX script. $functions = [ 'yourplugin_get_data' => [ 'classname' => 'yourplugin_external', 'methodname' => 'get_data', 'classpath' => 'yourplugin/externallib.php', 'description' => 'Get data for your plugin', 'type' => 'read', 'ajax' => true, ], ]; Call the Web Service from JavaScript: Use the core/ajax module to call the web service function from JavaScript in response to a user action. define ([ 'core/ajax' , 'core/str' ], function ( Ajax , Str ) { function getData () { // Define the web service request var requests = Ajax . call ([{ methodname : 'yourplugin_get_data' , args : {} // Arguments to pass to the web service function }]); // Handle the response requests [ 0 ]. done ( function ( response ) { console . log ( 'Data received:' , response ); // Update the UI with the received data }). fail ( function ( ex ) { console . error ( 'Error:' , ex ); // Handle the error }); } // Call the function in response to a user action, e.g., button click document . getElementById ( 'your-button-id' ). addEventListener ( 'click' , getData ); }); Example: AJAX Interaction in a Moodle Plugin Here\u2019s a more detailed example of implementing an AJAX interaction in a Moodle plugin: Create the Web Service Function: In externallib.php of your plugin: defined('MOODLE_INTERNAL') || die(); require_once(\"$CFG->libdir/externallib.php\"); class yourplugin_external extends external_api { public static function get_data() { return [ 'status' => 'success', 'data' => 'This is your data' ]; } public static function get_data_returns() { return new external_single_structure( [ 'status' => new external_value(PARAM_TEXT, 'Status'), 'data' => new external_value(PARAM_TEXT, 'Data') ] ); } } Define the Web Service Function in db/services.php : $functions = [ 'yourplugin_get_data' => [ 'classname' => 'yourplugin_external', 'methodname' => 'get_data', 'classpath' => 'yourplugin/externallib.php', 'description' => 'Get data for your plugin', 'type' => 'read', 'ajax' => true, ], ]; $services = [ 'Your Plugin Service' => [ 'functions' => ['yourplugin_get_data'], 'restrictedusers' => 0, 'enabled' => 1, ], ]; Call the Web Service from JavaScript: In yourplugin.js : define ([ 'core/ajax' , 'core/str' ], function ( Ajax , Str ) { function getData () { var requests = Ajax . call ([{ methodname : 'yourplugin_get_data' , args : {} }]); requests [ 0 ]. done ( function ( response ) { console . log ( 'Data received:' , response ); document . getElementById ( 'your-data-container' ). innerText = response . data ; }). fail ( function ( ex ) { console . error ( 'Error:' , ex ); Str . get_string ( 'error' , 'yourplugin' ). done ( function ( errorString ) { document . getElementById ( 'your-data-container' ). innerText = errorString ; }); }); } document . getElementById ( 'your-button-id' ). addEventListener ( 'click' , getData ); }); Include the JavaScript in Your Plugin\u2019s Layout: In your plugin\u2019s PHP file: $PAGE->requires->js_call_amd('yourplugin/yourplugin', 'init'); Common design patterns In modern JavaScript in Moodle, it is common to place all code which uses the core/ajax module into a single repository.js file, for example the following fictitious example may be placed into a new repository module for the Assignment plugin: // in mod/assign/amd/src/repository.js import { call as fetchMany } from 'core/ajax' ; export const submitGradingForm = ( assignmentid , userid , data , ) => fetchMany ([{ methodname : 'mod_assign_submit_grading_form' , args : { assignmentid , userid , jsonformdata : JSON . stringify ( data ), }, }])[ 0 ]; It may then be called in code as follows: // mod/assign/amd/src/example.js import { submitGradingForm } from './repository' ; export const doSomething = async () => { // ... const assignmentId = getAssigmentId (); const getUserId = getUserId (); const data = getData (); const response = await submitGradingForm ( assignmentId , userId , data ); window . console . log ( response ); } Placing all AJAX interactions into a single module has a number of benefits: it becomes easier to refactor code in the future it is easier to identify which calls may be chained it is easier to find places which call web services to aid in debugging and development each individual web service call can has a meaningful response Chained calls It is also possible to make multiple web service calls from a single transaction, for example: // mod/assign/amd/src/example.js import { call as fetchMany } from 'core/ajax' ; const getGradingFormRequest = ( assignmentid , userid , data ) => ({ methodname : 'mod_assign_submit_grading_form' , args : { assignmentid , userid , jsonformdata : JSON . stringify ( data ), }, }); const getNextGraderRequest = ( assignmentid , userid ) => ({ methodname : 'mod_assign_get_grading_form' , args : { assignmentid , userid , }, }); export const submitGradingFormAndFetchNext = ( assignmentId , currentUserId , currentUserData , nextUserId ) => { const responses = fetchMany ([ getGradingFormRequest ( assignmentId , usecurrentUserIdrId , currentUserData ), getNextGraderRequest ( assignmentId , nextUserId ), ]); return { submittedGradingForm : responses [ 0 ], nextGradingForm : responses [ 1 ], }; }; The above example may then be called more meaningfully as: // mod/assign/example.js import { submitGradingFormAndFetchNext } from './repository' ; export const doSomething = async () => { // ... const assignmentId = getAssigmentId (); const getUserId = getUserId (); const data = getData (); const { submittedGradingForm , nextGradingForm , } = submitGradingFormAndFetchNext ( assignmentId , userId , data , getNextuserId ); window . console . log ( await submittedGradingForm ); window . console . log ( await nextGradingForm ); } Key considerations To update parts of the UI in response to Ajax changes, consider using Templates Important considerations when using webservices with ajax calls: Any call to $PAGE->get_renderer() requires the correct theme be set. If this is done in a webservice - it is likely that the theme needs to be a parameter to the webservice. Text returned from a webservice must be properly filtered. This means it must go through external_format_text or external_format_string (since 3.0 - see MDL-51213) with the correct context. The correct context for 2 is the most specific context relating to the thing being output - for example, for a user's profile description the context is the user context. After adding any dynamic content to a page, Moodle's filters need to be notified via M.core.event.FILTER_CONTENT_UPDATED After adding or changing any webservice definition in db/services.php - you must bump the version number for either the plugin or Moodle and run the upgrade. This will install the webservice in the DB tables so it can be found by ajax. In some very rare cases - you can mark webservices as safe to call without a session. These should only be used for webservices that return 100% public information and do not consume many resources. A current example is core_get_string. To mark a webservice as safe to call without a session you need to do 2 things. Add 'loginrequired' => false to the service definition in db/services.php Pass false as the 3rd argument to the ajax \"call\" method when calling the webservice. The benefit to marking these safe webservice is that (a) they can be called from the login page before we have a session and (b) they will perform faster because they will bypass Moodle's session code when responding to the webservice call. Summary Using AJAX in Moodle with the core/ajax module provides a secure, efficient, and maintainable way to handle asynchronous interactions. By leveraging Moodle's Web Service API, you can create robust AJAX interactions that enhance the user experience without compromising security or performance. The process involves defining web service functions, marking them for AJAX, and calling them from JavaScript in response to user actions.","title":"AJAX"},{"location":"Moodle/Javascript/phpMoodleAJAX/#steps-to-create-an-ajax-interaction-in-moodle","text":"Write or Find an Existing Web Service Function: Web services in Moodle are functions that can be accessed via web protocols such as REST, SOAP, and XML-RPC. These functions are defined in the db/services.php file of your plugin or core Moodle. See WebServices . $functions = [ 'yourplugin_get_data' => [ 'classname' => 'yourplugin_external', 'methodname' => 'get_data', 'classpath' => 'yourplugin/externallib.php', 'description' => 'Get data for your plugin', 'type' => 'read', 'ajax' => true, // Marking the service as available for AJAX ], ]; Mark the Service as Available for AJAX: To make the web service function available for AJAX, define 'ajax' => true in the function\u2019s definition in db/services.php . Only functions that are marked for AJAX using this mechanism will be available to the AJAX script. $functions = [ 'yourplugin_get_data' => [ 'classname' => 'yourplugin_external', 'methodname' => 'get_data', 'classpath' => 'yourplugin/externallib.php', 'description' => 'Get data for your plugin', 'type' => 'read', 'ajax' => true, ], ]; Call the Web Service from JavaScript: Use the core/ajax module to call the web service function from JavaScript in response to a user action. define ([ 'core/ajax' , 'core/str' ], function ( Ajax , Str ) { function getData () { // Define the web service request var requests = Ajax . call ([{ methodname : 'yourplugin_get_data' , args : {} // Arguments to pass to the web service function }]); // Handle the response requests [ 0 ]. done ( function ( response ) { console . log ( 'Data received:' , response ); // Update the UI with the received data }). fail ( function ( ex ) { console . error ( 'Error:' , ex ); // Handle the error }); } // Call the function in response to a user action, e.g., button click document . getElementById ( 'your-button-id' ). addEventListener ( 'click' , getData ); });","title":"Steps to Create an AJAX Interaction in Moodle"},{"location":"Moodle/Javascript/phpMoodleAJAX/#example-ajax-interaction-in-a-moodle-plugin","text":"Here\u2019s a more detailed example of implementing an AJAX interaction in a Moodle plugin: Create the Web Service Function: In externallib.php of your plugin: defined('MOODLE_INTERNAL') || die(); require_once(\"$CFG->libdir/externallib.php\"); class yourplugin_external extends external_api { public static function get_data() { return [ 'status' => 'success', 'data' => 'This is your data' ]; } public static function get_data_returns() { return new external_single_structure( [ 'status' => new external_value(PARAM_TEXT, 'Status'), 'data' => new external_value(PARAM_TEXT, 'Data') ] ); } } Define the Web Service Function in db/services.php : $functions = [ 'yourplugin_get_data' => [ 'classname' => 'yourplugin_external', 'methodname' => 'get_data', 'classpath' => 'yourplugin/externallib.php', 'description' => 'Get data for your plugin', 'type' => 'read', 'ajax' => true, ], ]; $services = [ 'Your Plugin Service' => [ 'functions' => ['yourplugin_get_data'], 'restrictedusers' => 0, 'enabled' => 1, ], ]; Call the Web Service from JavaScript: In yourplugin.js : define ([ 'core/ajax' , 'core/str' ], function ( Ajax , Str ) { function getData () { var requests = Ajax . call ([{ methodname : 'yourplugin_get_data' , args : {} }]); requests [ 0 ]. done ( function ( response ) { console . log ( 'Data received:' , response ); document . getElementById ( 'your-data-container' ). innerText = response . data ; }). fail ( function ( ex ) { console . error ( 'Error:' , ex ); Str . get_string ( 'error' , 'yourplugin' ). done ( function ( errorString ) { document . getElementById ( 'your-data-container' ). innerText = errorString ; }); }); } document . getElementById ( 'your-button-id' ). addEventListener ( 'click' , getData ); }); Include the JavaScript in Your Plugin\u2019s Layout: In your plugin\u2019s PHP file: $PAGE->requires->js_call_amd('yourplugin/yourplugin', 'init');","title":"Example: AJAX Interaction in a Moodle Plugin"},{"location":"Moodle/Javascript/phpMoodleAJAX/#common-design-patterns","text":"In modern JavaScript in Moodle, it is common to place all code which uses the core/ajax module into a single repository.js file, for example the following fictitious example may be placed into a new repository module for the Assignment plugin: // in mod/assign/amd/src/repository.js import { call as fetchMany } from 'core/ajax' ; export const submitGradingForm = ( assignmentid , userid , data , ) => fetchMany ([{ methodname : 'mod_assign_submit_grading_form' , args : { assignmentid , userid , jsonformdata : JSON . stringify ( data ), }, }])[ 0 ]; It may then be called in code as follows: // mod/assign/amd/src/example.js import { submitGradingForm } from './repository' ; export const doSomething = async () => { // ... const assignmentId = getAssigmentId (); const getUserId = getUserId (); const data = getData (); const response = await submitGradingForm ( assignmentId , userId , data ); window . console . log ( response ); } Placing all AJAX interactions into a single module has a number of benefits: it becomes easier to refactor code in the future it is easier to identify which calls may be chained it is easier to find places which call web services to aid in debugging and development each individual web service call can has a meaningful response","title":"Common design patterns"},{"location":"Moodle/Javascript/phpMoodleAJAX/#chained-calls","text":"It is also possible to make multiple web service calls from a single transaction, for example: // mod/assign/amd/src/example.js import { call as fetchMany } from 'core/ajax' ; const getGradingFormRequest = ( assignmentid , userid , data ) => ({ methodname : 'mod_assign_submit_grading_form' , args : { assignmentid , userid , jsonformdata : JSON . stringify ( data ), }, }); const getNextGraderRequest = ( assignmentid , userid ) => ({ methodname : 'mod_assign_get_grading_form' , args : { assignmentid , userid , }, }); export const submitGradingFormAndFetchNext = ( assignmentId , currentUserId , currentUserData , nextUserId ) => { const responses = fetchMany ([ getGradingFormRequest ( assignmentId , usecurrentUserIdrId , currentUserData ), getNextGraderRequest ( assignmentId , nextUserId ), ]); return { submittedGradingForm : responses [ 0 ], nextGradingForm : responses [ 1 ], }; }; The above example may then be called more meaningfully as: // mod/assign/example.js import { submitGradingFormAndFetchNext } from './repository' ; export const doSomething = async () => { // ... const assignmentId = getAssigmentId (); const getUserId = getUserId (); const data = getData (); const { submittedGradingForm , nextGradingForm , } = submitGradingFormAndFetchNext ( assignmentId , userId , data , getNextuserId ); window . console . log ( await submittedGradingForm ); window . console . log ( await nextGradingForm ); }","title":"Chained calls"},{"location":"Moodle/Javascript/phpMoodleAJAX/#key-considerations","text":"To update parts of the UI in response to Ajax changes, consider using Templates Important considerations when using webservices with ajax calls: Any call to $PAGE->get_renderer() requires the correct theme be set. If this is done in a webservice - it is likely that the theme needs to be a parameter to the webservice. Text returned from a webservice must be properly filtered. This means it must go through external_format_text or external_format_string (since 3.0 - see MDL-51213) with the correct context. The correct context for 2 is the most specific context relating to the thing being output - for example, for a user's profile description the context is the user context. After adding any dynamic content to a page, Moodle's filters need to be notified via M.core.event.FILTER_CONTENT_UPDATED After adding or changing any webservice definition in db/services.php - you must bump the version number for either the plugin or Moodle and run the upgrade. This will install the webservice in the DB tables so it can be found by ajax. In some very rare cases - you can mark webservices as safe to call without a session. These should only be used for webservices that return 100% public information and do not consume many resources. A current example is core_get_string. To mark a webservice as safe to call without a session you need to do 2 things. Add 'loginrequired' => false to the service definition in db/services.php Pass false as the 3rd argument to the ajax \"call\" method when calling the webservice. The benefit to marking these safe webservice is that (a) they can be called from the login page before we have a session and (b) they will perform faster because they will bypass Moodle's session code when responding to the webservice call.","title":"Key considerations"},{"location":"Moodle/Javascript/phpMoodleAJAX/#summary","text":"Using AJAX in Moodle with the core/ajax module provides a secure, efficient, and maintainable way to handle asynchronous interactions. By leveraging Moodle's Web Service API, you can create robust AJAX interactions that enhance the user experience without compromising security or performance. The process involves defining web service functions, marking them for AJAX, and calling them from JavaScript in response to user actions.","title":"Summary"},{"location":"Moodle/Javascript/phpMoodleJS/","text":"JavaScript enhances Moodle by allowing dynamic content, interactive elements, and improved user interactions. It is used to: Create interactive elements like pop-ups and modals. Validate forms before submission. Dynamically update content without reloading the page. All Moodle JavaScript can use the same Mustache templates and translated strings which are available to Moodle PHP code, and the standard Moodle web service framework can be used to fetch and store data. Moodle uses vanilla JavaScript combined with helpers for performing common actions, and a small collection of libraries for serving and managing dependencies. The JavaScript documentation available on the Mozilla Developer Network is one of the best reference documentations available. You may find the following references particularly useful: MDN JavaScript guide . MDN JavaScript Reference . ES2015+ Cheat-sheet . Modules Naming Scheme JavaScript in Moodle is structured into ES2015 modules which are transpiled into the CommonJS format. Like the PHP classes and Mustache templates, JavaScript modules each belong to a particular component and must be named according to standard name and namespace conventions. The naming scheme for Moodle's JavaScript fits into the pattern: [component_name]/[optional/sub/namespace/][modulename] The first directory in any subfolder must be either a Moodle API, or local. The following are examples of valid module names: // For a module named `discussion` in the `mod_forum` component: mod_forum/discussion // For a module named `grader` in the `mod_assign` component which is // part of the `grades` API: mod_assign/grades/grader // For a module named `confirmation` in the `block_newsitems` component // which is a modal and not part of a core API: block_newsitems/local/modal/confirmation // For a module name `selectors` in the `core_user` component and relates // to the `participants` module: core_user/local/participants/selectors More on Modules . Loading JavaScript in Moodle Moodle uses the AMD (Asynchronous Module Definition) format for loading JavaScript modules. This approach ensures modularity and prevents conflicts between different scripts. Step 1: Creating an AMD Module The convention in Moodle is to have one JavaScript Module which is your initial entrypoint. This usually provides a function called init which you then export from the module. This init function will be called by Moodle. Your module will probably also have one or more dependencies which you will import. As you start to build out the structure of your code you will start to export more functions, as well as Objects, Classes, and other data structures. Create a Directory : Create a directory named amd in your plugin's root directory. Inside amd , create two subdirectories: src (for source files) and build (for compiled files). Write Your JavaScript Code : Create a JavaScript file in the amd/src directory. For example, amd/src/example.js . A module which calls to the browser console.log function would look like: export const init = () => { window . console . log ( 'Hello, world!' ); }; In this example a new variable called init is created and exported using the ES2015 export keyword. The variable is assigned an arrow function expression which takes no arguments, and when executed will call the browser console.log function with the text \"Hello, world!\". Other example: (The init() function takes 2 parameters named first and last.) export const init = ( first , last ) => { window . console . log ( `Hello ' ${ first } ${ last } '` ); }; Listen to a DOM Event Usually you will want to perform an action in response to a user interacting with the page. You can use the document.addEventListener() method to do this. To add a click listener to the entire body you would write: export const init = () => { document . addEventListener ( 'click' , e => { window . console . log ( e . target ); }); }; In this example any time that a user clicks anywhere on the document the item that was clicked on will be logged to the browser console. Usually you won't want to listen for every click in the document but only for some Elements in the page. If you wanted to display a browser alert every time a user clicks on a button, you might have a template like the following example: < button data-action = \"mod_example/helloworld-update_button\" > Click me </ button > You can write a listener which looks for clicks to this button: const Selectors = { actions : { showAlertButton : '[data-action=\"mod_example/helloworld-update_button\"]' , }, }; export const init = () => { document . addEventListener ( 'click' , e => { if ( e . target . closest ( Selectors . actions . showAlertButton )) { window . alert ( \"Thank you for clicking on the button\" ); } }); }; Conventions The previous example shows several conventions that are used in Moodle: CSS Selectors are often stored separate to the code in a Selectors object. This allows you to re-use a Selector and to group them together in different ways. It also places all selectors in one place so that they're easier to update. The Selectors object is stored in a const variable which is not exported. This means that it's private and only available within your module. A data-* attribute is used to identify the button in the JavaScript module. Moodle advises not to use class selectors when attaching event listeners because so that it's easier to restyle for different themes without any changes to the JavaScript later. A namespace is used for the data-action to identify what the button is intended for. By using e.target.closest() you can check whether the element that was clicked on, or any of its parent elements matches the supplied CSS Selector. Other conventions: Place calls to Web Services in a repository module. Create submodules in the local/ directory for non-formal Moodle APIs. Instead of having one event listener for every button in your page, you can have one event listener which checks which button was pressed. If you have a template like the following: < div > < button data-action = \"mod_example/helloworld-update_button\" > Click me </ button > < button data-action = \"mod_example/helloworld-big_red_button\" > Do not click me </ button > </ div > Then you can write one event listener which looks at all buttons on the page. For example: in amd/src/local/helloworld/selectors.js export default { actions : { showAlertButton : '[data-action=\"mod_example/helloworld-update_button\"]' , bigRedButton : '[data-action=\"mod_example/helloworld-big_red_button\"]' , }, }; and in amd/src/helloworld.js import Selectors from './local/helloworld/selectors' ; const registerEventListeners = () => { document . addEventListener ( 'click' , e => { if ( e . target . closest ( Selectors . actions . showAlertButton )) { window . alert ( \"Thank you for clicking on the button\" ); } if ( e . target . closest ( Selectors . actions . bigRedButton )) { window . alert ( \"You shouldn't have clicked on that one!\" ); } }); }; export const init = () => { registerEventListeners (); }; You will notice several key differences in this example when compared with the previous one: The list of Selectors has been moved to a new Module which is included using the import keyword. The new selectors module is a dependency of the helloworld module. The call to document.addEventListener has been moved to a new registerEventListeners function. This is another Moodle convention which encourages you to structure your code so that each part has clear responsibilities. One event listener is present and it checks if the Element clicked on was one that it's interested in. Step 2: Using the Module in Your Plugin All new JavaScript in Moodle should use the ES2015+ module format, which is transpiled into the CommonJS format. Modules are loaded in the browser using the RequireJS loader. Once you have written a JavaScript module you need a way to include it within your content. Moodle has three main ways to include your JavaScript and the best way will depend on your content. These are: from a template via requirejs; from PHP via the output requirements API; and from other JavaScript via import or requirejs. Including from a template Most recent code in Moodle makes heavy use of Mustache templates and you will often find that your JavaScript is directly linked to the content of one of your templates. All JavaScript in Mustache templates must be places in a {{#js}} tag. This tag ensures that all JavaScript is called in a consistent and reliable way. You shouldn't add too much JavaScript directly to a template. JavaScript placed directly into Templates isn't transpiled for consistent use in all browsers and it isn't passed through minification processes. Some browser-specific features won't be available. This simplest form of this is: < div > <!\u2014- Your template content goes here. \u2014-> </ div > {{#js}} require(['mod_forum/discussion'], function(Discussion) { Discussion.init(); }); {{/js}} Any time that this template is rendered and placed on the page the mod_forum/discussion module will be fetched and the init() function called on it. Often you may want to link the JavaScript to a specific DOMElement in the template. You can use the {{uniqid}} Mustache tag to give that DOM Element a unique ID and then pass that into the Module. < div id = \"mod_forum-discussion-wrapper-{{uniqid}}\" > <!\u2014- Your template content goes here. \u2014-> </ div > {{#js}} require(['mod_forum/discussion'], function(Discussion) { Discussion.init(document.querySelector(\"mod_forum-discussion-wrapper-{{uniqid}}\")); }); {{/js}} In this example you have added a new id to the div element. You then fetch the DOM Element using this id and pass it into the init function. The {{uniqid}} tag gives a new unique string for each rendered template including all its children. It isn't a true unique id and must be combined with other information in the template to make it unique. Other example: {{ # js }} require ([ 'plugintype_pluginname/helloworld' ], ( module ) => module . init ( '{{first}}' , '{{last}}' )); {{ /js}} Including from PHP Much of Moodle's code still creates HTML content in PHP directly. This might be a simple echo statement or using the html_writer output functions. A lot of this content is being migrated to use Mustache Templates which are the recommended approach for new content. Where content is generated in PHP you will need to include your JavaScript at the same time. Although several older ways to include JavaScript from PHP, it's strongly recommended that all new JavaScript only use the js_call_amd function on the page_requirements_manager. This has a similar format to the version used in Templates: // Call the `init` function on `mod_forum/discussion`. $PAGE->requires->js_call_amd('mod_forum/discussion', 'init'); The js_call_amd function turns this into a requirejs call. You can also pass arguments to your function by passing an array as the third argument to js_call_amd, for example: // Call the `init` function on `mod_forum/discussion`. $PAGE->requires->js_call_amd('mod_forum/discussion', 'init', [$course->id]); If you pass a multi-dimensional array as the third argument, then you can use Array destructuring within the JavaScript to get named values. $PAGE->requires->js_call_amd('mod_forum/discussion', 'init', [[ 'courseid' => $course->id, 'categoryid' => $course->category, ]]); export const init = ({ courseid , category }) => { window . console . log ( courseid ); window . console . log ( category ); }; A limit applies to the length of the parameters passed in the third argument. If data is already available elsewhere in the DOM, you should avoid passing it as a parameter. Other example: $PAGE->requires->js_call_amd($modulename, $functionname, $params); + $modulename is the componentname/modulename. + $functionname is the name of a public function exposed by the amd module. + $params is an array of parameters passed as arguments to the function. These should be simple types that can be handled by json_encode() (no recursive arrays, or complex classes). $PAGE->requires->js_call_amd( 'plugintype_pluginname/helloworld', 'init', [$first, $last]); Including JS from JavaScript JavaScript can be included into other JavaScript using import or requirejs. Example: Including JS using import Here is a code snippet from mod/quiz/amd/src/submission_confirmation.js using import to include JS. import { saveCancelPromise } from 'core/notification' ; import Prefetch from 'core/prefetch' ; import Templates from 'core/templates' ; import { getString } from 'core/str' ; /// ... Passing data to your Module You will often need to work with data as part of your JavaScript module. This might be simple data, like the a database id, or it may be more complex like full Objects. Moodle provides several ways to achieve this: you can pass a small amount of data into the module initialisation, but this is no longer recommended you can store this data in the DOM as a data attribute which is fetched in your code a Moodle Web Service can be used to fetch more complex data structures dynamically 1. Using data- Attributes in HTML data- attributes allow embedding custom data attributes directly into HTML elements. These attributes can then be accessed and manipulated using JavaScript. This method is simple and works well for passing static or small amounts of data. How to Use: Add data- Attributes in HTML: < button id = \"myButton\" data-userid = \"123\" data-username = \"JohnDoe\" > Click me </ button > Access data- Attributes in JavaScript: document . getElementById ( 'myButton' ). addEventListener ( 'click' , function () { var userId = this . getAttribute ( 'data-userid' ); var userName = this . getAttribute ( 'data-username' ); console . log ( 'User ID:' , userId ); console . log ( 'User Name:' , userName ); }); Advantages: Simplicity : Easy to implement and understand. Readability : Keeps HTML and JavaScript code clean and readable. Limitations: Static Data : Not suitable for dynamic data that changes frequently. Security : Data is exposed in the HTML source and can be manipulated by users. 2. Passing Data into js_call_amd Moodle's js_call_amd function is used to load and initialize AMD (Asynchronous Module Definition) modules. You can pass data from PHP to JavaScript through this function. How to Use: Define Data in PHP: $data = array( 'userId' => 123, 'userName' => 'JohnDoe' ); $PAGE->requires->js_call_amd('yourpluginname/yourmodule', 'init', array($data)); Receive Data in JavaScript: define ([], function () { return { init : function ( data ) { console . log ( 'User ID:' , data . userId ); console . log ( 'User Name:' , data . userName ); } }; }); Advantages: Dynamic Data : Allows passing dynamic data generated on the server-side. Encapsulation : Keeps data encapsulated within the module, enhancing security. Limitations: Data Size : Limited by the size of the data that can be reasonably included in the HTML output. Serialization : Complex data structures might need to be serialized and deserialized, adding overhead. 3. Using Web Services Web services are the most flexible and powerful method for passing data between server-side and client-side in Moodle. They allow for asynchronous communication and can handle complex data structures and large amounts of data. How to Use: Define a Web Service Function: In db/services.php : $functions = array( 'yourpluginname_get_user_data' => array( 'classname' => 'yourpluginname_external', 'methodname' => 'get_user_data', 'classpath' => 'yourpluginname/externallib.php', 'description' => 'Get user data', 'type' => 'read', 'ajax' => true ), ); $services = array( 'Your Plugin Services' => array( 'functions' => array('yourpluginname_get_user_data'), 'restrictedusers' => 0, 'enabled' => 1, ), ); Implement the Web Service Function: In externallib.php : class yourpluginname_external extends external_api { public static function get_user_data_parameters() { return new external_function_parameters(array()); } public static function get_user_data() { global $USER; return array('userId' => $USER->id, 'userName' => $USER->username); } public static function get_user_data_returns() { return new external_single_structure(array( 'userId' => new external_value(PARAM_INT, 'User ID'), 'userName' => new external_value(PARAM_TEXT, 'User Name'), )); } } Call the Web Service in JavaScript: define ([ 'core/ajax' ], function ( Ajax ) { return { init : function () { Ajax . call ([{ methodname : 'yourpluginname_get_user_data' , args : {}, done : function ( response ) { console . log ( 'User ID:' , response . userId ); console . log ( 'User Name:' , response . userName ); }, fail : function ( error ) { console . error ( 'Error:' , error ); } }]); } }; }); Advantages: Flexibility : Handles complex and dynamic data structures. Scalability : Suitable for large data transfers and asynchronous operations. Security : Allows for secure data transfer with proper authentication and validation. Limitations: Complexity : Requires more setup and understanding of Moodle's web service API. Performance : Additional overhead for making HTTP requests. Summary Each method for passing data in Moodle plugin development has its own use cases, advantages, and limitations. data- Attributes : Best for static or small amounts of data, simple to implement but exposed in HTML. js_call_amd : Suitable for passing dynamic data from PHP to JavaScript within reasonable size limits. Web Services : The most flexible and powerful method, suitable for complex and large data, but requires more setup. Choose the method that best fits your requirements and follow Moodle's best practices for implementation. Adding JavaScript to Forms Customizing Forms : To add JavaScript to forms, override the definition_after_data method in your form class. class myplugin_form extends moodleform { function definition() { $mform = $this->_form; // Add form elements here } function definition_after_data() { global $PAGE; $PAGE->requires->js_call_amd('yourpluginname/formhandler', 'init'); } } Form Validation : Use JavaScript to validate form fields before submission. define ([], function () { return { init : function () { document . getElementById ( 'id_yourform' ). addEventListener ( 'submit' , function ( e ) { if ( ! document . getElementById ( 'id_yourfield' ). value ) { e . preventDefault (); alert ( 'Field cannot be empty!' ); } }); } }; }); Using JavaScript for AJAX Requests Making AJAX Calls : Moodle provides a way to make AJAX calls using the core/ajax module. define ([ 'core/ajax' ], function ( ajax ) { return { init : function () { ajax . call ([{ methodname : 'yourplugin_get_data' , args : {}, done : function ( response ) { console . log ( response ); }, fail : function ( error ) { console . error ( error ); } }]); } }; }); Working with Strings One of the most helpful core modules is core/str which allows you to fetch and render language Strings in JavaScript. The core/str module has several core methods to support fetching strings: getString - fetch a single string, returned in a native Promise getStrings - fetch a set of strings, returned in an array of native Promises get_string - fetch a single string, returned in a jQuery Promise get_strings - fetch a set of strings, returned in an array of jQuery Promises Strings are fetched on request from Moodle, and are then cached in LocalStorage. import { getString } from 'core/str' ; getString ( 'close' , 'core' ) . then (( closeString ) => { window . console . log ( closeString ); return closeString ; }) . catch (); NATIVE VS JQUERY PROMISES The getString and getStrings methods should be preferred from Moodle 4.3 onwards. These return native Promises, which differ slightly in behaviour from jQuery Promises. Care should be taken in the following scenarios: when writing a plugin which supports Moodle 4.2 or earlier, you must use the get_string and get_strings methods you should never use .done or .fail as they do not exist in the native Promise specification, and their failure behaviour differs Prefetch Since 3.9 Assets including strings, and templates, can be pre-fetched shortly after the page loads to improve the perceived performance of the page when consuming those components. // Example of fetching a string and template import Prefetch from 'core/prefetch' ; // Prefetch the string 'discussion' from the 'mod_forum' component. Prefetch . prefetchString ( 'discussion' , 'mod_forum' ); // Prefetch the strings yes, no, and maybe from the 'core' component. Prefetch . prefetchStrings ( 'core' , [ 'yes' , 'no' , 'maybe' ]); // Prefetch the templates 'core/toast'. Prefetch . prefetchTemplate ( 'core/toast' ); // Prefetch the templates 'core/toast' and 'core/modal'. Prefetch . prefetchTemplates ([ 'core/toast' , 'core/modal' ]); Dropzone Since 4.4 The use of the core/dropzone module provides a simplified developer experience for creating drop zones within Moodle. The module attempts to ensure that accessibility requirements are met, including applying the correct styles and keyboard navigation. Drop zones will trigger callbacks for common actions that occur within the drop zone for other code to listen to and react accordingly. // Example of creating a dropzone import Dropzone from 'core/dropzone' ; // Get the element that will be the dropzone. const dropZoneContainer = document . querySelector ( '#dropZoneId' ); // Create a new dropzone accepting only images. const dropZone = new Dropzone ( dropZoneContainer , 'image/*' , function ( files ) { window . console . log ( files ); } ); // Set the custom message for the dropzone. Otherwise, it will use the default message. dropZone . setLabel ( 'Drop images here' ); // Initialising the dropzone. dropZone . init (); Debugging JavaScript in Moodle Developer Tools : Use browser developer tools to debug your JavaScript code. Set breakpoints, inspect variables, and view console logs. Moodle Debugging : Enable debugging in Moodle to get detailed error messages. Go to Site administration > Development > Debugging and set Debug messages to DEVELOPER . Sample Code You can explore the code in the following Github repository . The page that the user views is located at local_greetings/view.php. This page loads the template local_greetings/greeting that displays the input controls and the greeting message. The greeting.mustache template file: Contains a text input field, identified in JS by a data-region attribute. Contains a button named \"Go\". It is identified in JS by a data-action attribute. Contains a button named \"Reset\". It is identified in JS by a data-action attribute. Contains a div region to display the greeting message. It is identified in JS by a data-region attribute. Loads the local_greetings/greetings JS module. The local_greetings/greetings JS module: Implements the main interaction in the greetings.js file. Has a local/selectors.js file for the DOM elements which are identified by CSS Selectors. If web service calls were required, they would be placed in the local/repository.js file. Best Practices for Using JavaScript in Moodle Modularity : Use AMD modules to keep your code modular and avoid conflicts. Performance : Minimize the use of global variables and optimize your code for performance. Accessibility : Ensure that your JavaScript enhances accessibility and does not hinder it. Security : Validate and sanitize inputs to prevent XSS and other security vulnerabilities. Other preferences: Here are some general recommendations and preferences when writing JS modules for Moodle: Do not use var in ESM. const/let is preferred over var. const is preferred over let. Promise.then is preferred over Promise.done. Promise.catch is preferred over Promise.fail. Promise.done and Promise.fail are jQuery-specific. Promises are preferred over callbacks. Summary Using JavaScript in Moodle enhances the interactivity and functionality of your plugins. By following the AMD module format, integrating with Moodle forms, and making AJAX calls, you can create dynamic and responsive plugins. Always follow best practices for modularity, performance, accessibility, and security to ensure a high-quality user experience. For more detailed information and examples, refer to the official Moodle documentation . Useful resources Here are some useful resources on JavaScript: MDN JavaScript guide Chrome dev tools Introduction to JavaScript source maps JSDoc JavaScript style guide - AirBnB We have a problem with promises","title":"General"},{"location":"Moodle/Javascript/phpMoodleJS/#modules-naming-scheme","text":"JavaScript in Moodle is structured into ES2015 modules which are transpiled into the CommonJS format. Like the PHP classes and Mustache templates, JavaScript modules each belong to a particular component and must be named according to standard name and namespace conventions. The naming scheme for Moodle's JavaScript fits into the pattern: [component_name]/[optional/sub/namespace/][modulename] The first directory in any subfolder must be either a Moodle API, or local. The following are examples of valid module names: // For a module named `discussion` in the `mod_forum` component: mod_forum/discussion // For a module named `grader` in the `mod_assign` component which is // part of the `grades` API: mod_assign/grades/grader // For a module named `confirmation` in the `block_newsitems` component // which is a modal and not part of a core API: block_newsitems/local/modal/confirmation // For a module name `selectors` in the `core_user` component and relates // to the `participants` module: core_user/local/participants/selectors More on Modules .","title":"Modules Naming Scheme"},{"location":"Moodle/Javascript/phpMoodleJS/#loading-javascript-in-moodle","text":"Moodle uses the AMD (Asynchronous Module Definition) format for loading JavaScript modules. This approach ensures modularity and prevents conflicts between different scripts.","title":"Loading JavaScript in Moodle"},{"location":"Moodle/Javascript/phpMoodleJS/#step-1-creating-an-amd-module","text":"The convention in Moodle is to have one JavaScript Module which is your initial entrypoint. This usually provides a function called init which you then export from the module. This init function will be called by Moodle. Your module will probably also have one or more dependencies which you will import. As you start to build out the structure of your code you will start to export more functions, as well as Objects, Classes, and other data structures. Create a Directory : Create a directory named amd in your plugin's root directory. Inside amd , create two subdirectories: src (for source files) and build (for compiled files). Write Your JavaScript Code : Create a JavaScript file in the amd/src directory. For example, amd/src/example.js . A module which calls to the browser console.log function would look like: export const init = () => { window . console . log ( 'Hello, world!' ); }; In this example a new variable called init is created and exported using the ES2015 export keyword. The variable is assigned an arrow function expression which takes no arguments, and when executed will call the browser console.log function with the text \"Hello, world!\". Other example: (The init() function takes 2 parameters named first and last.) export const init = ( first , last ) => { window . console . log ( `Hello ' ${ first } ${ last } '` ); }; Listen to a DOM Event Usually you will want to perform an action in response to a user interacting with the page. You can use the document.addEventListener() method to do this. To add a click listener to the entire body you would write: export const init = () => { document . addEventListener ( 'click' , e => { window . console . log ( e . target ); }); }; In this example any time that a user clicks anywhere on the document the item that was clicked on will be logged to the browser console. Usually you won't want to listen for every click in the document but only for some Elements in the page. If you wanted to display a browser alert every time a user clicks on a button, you might have a template like the following example: < button data-action = \"mod_example/helloworld-update_button\" > Click me </ button > You can write a listener which looks for clicks to this button: const Selectors = { actions : { showAlertButton : '[data-action=\"mod_example/helloworld-update_button\"]' , }, }; export const init = () => { document . addEventListener ( 'click' , e => { if ( e . target . closest ( Selectors . actions . showAlertButton )) { window . alert ( \"Thank you for clicking on the button\" ); } }); };","title":"Step 1: Creating an AMD Module"},{"location":"Moodle/Javascript/phpMoodleJS/#conventions","text":"The previous example shows several conventions that are used in Moodle: CSS Selectors are often stored separate to the code in a Selectors object. This allows you to re-use a Selector and to group them together in different ways. It also places all selectors in one place so that they're easier to update. The Selectors object is stored in a const variable which is not exported. This means that it's private and only available within your module. A data-* attribute is used to identify the button in the JavaScript module. Moodle advises not to use class selectors when attaching event listeners because so that it's easier to restyle for different themes without any changes to the JavaScript later. A namespace is used for the data-action to identify what the button is intended for. By using e.target.closest() you can check whether the element that was clicked on, or any of its parent elements matches the supplied CSS Selector. Other conventions: Place calls to Web Services in a repository module. Create submodules in the local/ directory for non-formal Moodle APIs. Instead of having one event listener for every button in your page, you can have one event listener which checks which button was pressed. If you have a template like the following: < div > < button data-action = \"mod_example/helloworld-update_button\" > Click me </ button > < button data-action = \"mod_example/helloworld-big_red_button\" > Do not click me </ button > </ div > Then you can write one event listener which looks at all buttons on the page. For example: in amd/src/local/helloworld/selectors.js export default { actions : { showAlertButton : '[data-action=\"mod_example/helloworld-update_button\"]' , bigRedButton : '[data-action=\"mod_example/helloworld-big_red_button\"]' , }, }; and in amd/src/helloworld.js import Selectors from './local/helloworld/selectors' ; const registerEventListeners = () => { document . addEventListener ( 'click' , e => { if ( e . target . closest ( Selectors . actions . showAlertButton )) { window . alert ( \"Thank you for clicking on the button\" ); } if ( e . target . closest ( Selectors . actions . bigRedButton )) { window . alert ( \"You shouldn't have clicked on that one!\" ); } }); }; export const init = () => { registerEventListeners (); }; You will notice several key differences in this example when compared with the previous one: The list of Selectors has been moved to a new Module which is included using the import keyword. The new selectors module is a dependency of the helloworld module. The call to document.addEventListener has been moved to a new registerEventListeners function. This is another Moodle convention which encourages you to structure your code so that each part has clear responsibilities. One event listener is present and it checks if the Element clicked on was one that it's interested in.","title":"Conventions"},{"location":"Moodle/Javascript/phpMoodleJS/#step-2-using-the-module-in-your-plugin","text":"All new JavaScript in Moodle should use the ES2015+ module format, which is transpiled into the CommonJS format. Modules are loaded in the browser using the RequireJS loader. Once you have written a JavaScript module you need a way to include it within your content. Moodle has three main ways to include your JavaScript and the best way will depend on your content. These are: from a template via requirejs; from PHP via the output requirements API; and from other JavaScript via import or requirejs.","title":"Step 2: Using the Module in Your Plugin"},{"location":"Moodle/Javascript/phpMoodleJS/#passing-data-to-your-module","text":"You will often need to work with data as part of your JavaScript module. This might be simple data, like the a database id, or it may be more complex like full Objects. Moodle provides several ways to achieve this: you can pass a small amount of data into the module initialisation, but this is no longer recommended you can store this data in the DOM as a data attribute which is fetched in your code a Moodle Web Service can be used to fetch more complex data structures dynamically","title":"Passing data to your Module"},{"location":"Moodle/Javascript/phpMoodleJS/#1-using-data-attributes-in-html","text":"data- attributes allow embedding custom data attributes directly into HTML elements. These attributes can then be accessed and manipulated using JavaScript. This method is simple and works well for passing static or small amounts of data. How to Use: Add data- Attributes in HTML: < button id = \"myButton\" data-userid = \"123\" data-username = \"JohnDoe\" > Click me </ button > Access data- Attributes in JavaScript: document . getElementById ( 'myButton' ). addEventListener ( 'click' , function () { var userId = this . getAttribute ( 'data-userid' ); var userName = this . getAttribute ( 'data-username' ); console . log ( 'User ID:' , userId ); console . log ( 'User Name:' , userName ); }); Advantages: Simplicity : Easy to implement and understand. Readability : Keeps HTML and JavaScript code clean and readable. Limitations: Static Data : Not suitable for dynamic data that changes frequently. Security : Data is exposed in the HTML source and can be manipulated by users.","title":"1. Using data- Attributes in HTML"},{"location":"Moodle/Javascript/phpMoodleJS/#2-passing-data-into-js_call_amd","text":"Moodle's js_call_amd function is used to load and initialize AMD (Asynchronous Module Definition) modules. You can pass data from PHP to JavaScript through this function. How to Use: Define Data in PHP: $data = array( 'userId' => 123, 'userName' => 'JohnDoe' ); $PAGE->requires->js_call_amd('yourpluginname/yourmodule', 'init', array($data)); Receive Data in JavaScript: define ([], function () { return { init : function ( data ) { console . log ( 'User ID:' , data . userId ); console . log ( 'User Name:' , data . userName ); } }; }); Advantages: Dynamic Data : Allows passing dynamic data generated on the server-side. Encapsulation : Keeps data encapsulated within the module, enhancing security. Limitations: Data Size : Limited by the size of the data that can be reasonably included in the HTML output. Serialization : Complex data structures might need to be serialized and deserialized, adding overhead.","title":"2. Passing Data into js_call_amd"},{"location":"Moodle/Javascript/phpMoodleJS/#3-using-web-services","text":"Web services are the most flexible and powerful method for passing data between server-side and client-side in Moodle. They allow for asynchronous communication and can handle complex data structures and large amounts of data. How to Use: Define a Web Service Function: In db/services.php : $functions = array( 'yourpluginname_get_user_data' => array( 'classname' => 'yourpluginname_external', 'methodname' => 'get_user_data', 'classpath' => 'yourpluginname/externallib.php', 'description' => 'Get user data', 'type' => 'read', 'ajax' => true ), ); $services = array( 'Your Plugin Services' => array( 'functions' => array('yourpluginname_get_user_data'), 'restrictedusers' => 0, 'enabled' => 1, ), ); Implement the Web Service Function: In externallib.php : class yourpluginname_external extends external_api { public static function get_user_data_parameters() { return new external_function_parameters(array()); } public static function get_user_data() { global $USER; return array('userId' => $USER->id, 'userName' => $USER->username); } public static function get_user_data_returns() { return new external_single_structure(array( 'userId' => new external_value(PARAM_INT, 'User ID'), 'userName' => new external_value(PARAM_TEXT, 'User Name'), )); } } Call the Web Service in JavaScript: define ([ 'core/ajax' ], function ( Ajax ) { return { init : function () { Ajax . call ([{ methodname : 'yourpluginname_get_user_data' , args : {}, done : function ( response ) { console . log ( 'User ID:' , response . userId ); console . log ( 'User Name:' , response . userName ); }, fail : function ( error ) { console . error ( 'Error:' , error ); } }]); } }; }); Advantages: Flexibility : Handles complex and dynamic data structures. Scalability : Suitable for large data transfers and asynchronous operations. Security : Allows for secure data transfer with proper authentication and validation. Limitations: Complexity : Requires more setup and understanding of Moodle's web service API. Performance : Additional overhead for making HTTP requests.","title":"3. Using Web Services"},{"location":"Moodle/Javascript/phpMoodleJS/#summary","text":"Each method for passing data in Moodle plugin development has its own use cases, advantages, and limitations. data- Attributes : Best for static or small amounts of data, simple to implement but exposed in HTML. js_call_amd : Suitable for passing dynamic data from PHP to JavaScript within reasonable size limits. Web Services : The most flexible and powerful method, suitable for complex and large data, but requires more setup. Choose the method that best fits your requirements and follow Moodle's best practices for implementation.","title":"Summary"},{"location":"Moodle/Javascript/phpMoodleJS/#adding-javascript-to-forms","text":"Customizing Forms : To add JavaScript to forms, override the definition_after_data method in your form class. class myplugin_form extends moodleform { function definition() { $mform = $this->_form; // Add form elements here } function definition_after_data() { global $PAGE; $PAGE->requires->js_call_amd('yourpluginname/formhandler', 'init'); } } Form Validation : Use JavaScript to validate form fields before submission. define ([], function () { return { init : function () { document . getElementById ( 'id_yourform' ). addEventListener ( 'submit' , function ( e ) { if ( ! document . getElementById ( 'id_yourfield' ). value ) { e . preventDefault (); alert ( 'Field cannot be empty!' ); } }); } }; });","title":"Adding JavaScript to Forms"},{"location":"Moodle/Javascript/phpMoodleJS/#using-javascript-for-ajax-requests","text":"Making AJAX Calls : Moodle provides a way to make AJAX calls using the core/ajax module. define ([ 'core/ajax' ], function ( ajax ) { return { init : function () { ajax . call ([{ methodname : 'yourplugin_get_data' , args : {}, done : function ( response ) { console . log ( response ); }, fail : function ( error ) { console . error ( error ); } }]); } }; });","title":"Using JavaScript for AJAX Requests"},{"location":"Moodle/Javascript/phpMoodleJS/#working-with-strings","text":"One of the most helpful core modules is core/str which allows you to fetch and render language Strings in JavaScript. The core/str module has several core methods to support fetching strings: getString - fetch a single string, returned in a native Promise getStrings - fetch a set of strings, returned in an array of native Promises get_string - fetch a single string, returned in a jQuery Promise get_strings - fetch a set of strings, returned in an array of jQuery Promises Strings are fetched on request from Moodle, and are then cached in LocalStorage. import { getString } from 'core/str' ; getString ( 'close' , 'core' ) . then (( closeString ) => { window . console . log ( closeString ); return closeString ; }) . catch ();","title":"Working with Strings"},{"location":"Moodle/Javascript/phpMoodleJS/#native-vs-jquery-promises","text":"The getString and getStrings methods should be preferred from Moodle 4.3 onwards. These return native Promises, which differ slightly in behaviour from jQuery Promises. Care should be taken in the following scenarios: when writing a plugin which supports Moodle 4.2 or earlier, you must use the get_string and get_strings methods you should never use .done or .fail as they do not exist in the native Promise specification, and their failure behaviour differs","title":"NATIVE VS JQUERY PROMISES"},{"location":"Moodle/Javascript/phpMoodleJS/#prefetch","text":"Since 3.9 Assets including strings, and templates, can be pre-fetched shortly after the page loads to improve the perceived performance of the page when consuming those components. // Example of fetching a string and template import Prefetch from 'core/prefetch' ; // Prefetch the string 'discussion' from the 'mod_forum' component. Prefetch . prefetchString ( 'discussion' , 'mod_forum' ); // Prefetch the strings yes, no, and maybe from the 'core' component. Prefetch . prefetchStrings ( 'core' , [ 'yes' , 'no' , 'maybe' ]); // Prefetch the templates 'core/toast'. Prefetch . prefetchTemplate ( 'core/toast' ); // Prefetch the templates 'core/toast' and 'core/modal'. Prefetch . prefetchTemplates ([ 'core/toast' , 'core/modal' ]);","title":"Prefetch"},{"location":"Moodle/Javascript/phpMoodleJS/#dropzone","text":"Since 4.4 The use of the core/dropzone module provides a simplified developer experience for creating drop zones within Moodle. The module attempts to ensure that accessibility requirements are met, including applying the correct styles and keyboard navigation. Drop zones will trigger callbacks for common actions that occur within the drop zone for other code to listen to and react accordingly. // Example of creating a dropzone import Dropzone from 'core/dropzone' ; // Get the element that will be the dropzone. const dropZoneContainer = document . querySelector ( '#dropZoneId' ); // Create a new dropzone accepting only images. const dropZone = new Dropzone ( dropZoneContainer , 'image/*' , function ( files ) { window . console . log ( files ); } ); // Set the custom message for the dropzone. Otherwise, it will use the default message. dropZone . setLabel ( 'Drop images here' ); // Initialising the dropzone. dropZone . init ();","title":"Dropzone"},{"location":"Moodle/Javascript/phpMoodleJS/#debugging-javascript-in-moodle","text":"Developer Tools : Use browser developer tools to debug your JavaScript code. Set breakpoints, inspect variables, and view console logs. Moodle Debugging : Enable debugging in Moodle to get detailed error messages. Go to Site administration > Development > Debugging and set Debug messages to DEVELOPER .","title":"Debugging JavaScript in Moodle"},{"location":"Moodle/Javascript/phpMoodleJS/#sample-code","text":"You can explore the code in the following Github repository . The page that the user views is located at local_greetings/view.php. This page loads the template local_greetings/greeting that displays the input controls and the greeting message. The greeting.mustache template file: Contains a text input field, identified in JS by a data-region attribute. Contains a button named \"Go\". It is identified in JS by a data-action attribute. Contains a button named \"Reset\". It is identified in JS by a data-action attribute. Contains a div region to display the greeting message. It is identified in JS by a data-region attribute. Loads the local_greetings/greetings JS module. The local_greetings/greetings JS module: Implements the main interaction in the greetings.js file. Has a local/selectors.js file for the DOM elements which are identified by CSS Selectors. If web service calls were required, they would be placed in the local/repository.js file.","title":"Sample Code"},{"location":"Moodle/Javascript/phpMoodleJS/#best-practices-for-using-javascript-in-moodle","text":"Modularity : Use AMD modules to keep your code modular and avoid conflicts. Performance : Minimize the use of global variables and optimize your code for performance. Accessibility : Ensure that your JavaScript enhances accessibility and does not hinder it. Security : Validate and sanitize inputs to prevent XSS and other security vulnerabilities. Other preferences: Here are some general recommendations and preferences when writing JS modules for Moodle: Do not use var in ESM. const/let is preferred over var. const is preferred over let. Promise.then is preferred over Promise.done. Promise.catch is preferred over Promise.fail. Promise.done and Promise.fail are jQuery-specific. Promises are preferred over callbacks.","title":"Best Practices for Using JavaScript in Moodle"},{"location":"Moodle/Javascript/phpMoodleJS/#summary_1","text":"Using JavaScript in Moodle enhances the interactivity and functionality of your plugins. By following the AMD module format, integrating with Moodle forms, and making AJAX calls, you can create dynamic and responsive plugins. Always follow best practices for modularity, performance, accessibility, and security to ensure a high-quality user experience. For more detailed information and examples, refer to the official Moodle documentation .","title":"Summary"},{"location":"Moodle/Javascript/phpMoodleJS/#useful-resources","text":"Here are some useful resources on JavaScript: MDN JavaScript guide Chrome dev tools Introduction to JavaScript source maps JSDoc JavaScript style guide - AirBnB We have a problem with promises","title":"Useful resources"},{"location":"Moodle/Javascript/phpMoodleJSTools/","text":"NodeJS NodeJS is a JavaScript runtime built on Chrome's V8 JavaScript engine. It allows developers to run JavaScript on the server-side and is widely used for building scalable network applications. In the context of Moodle, NodeJS is used to run various build tools and package managers that streamline the development process. Moodle uses a NodeJS toolchain to perform a number of development actions, including linting, transpilation of JavaScript, compilation of the Component Library, and a number of other routine tasks. Use of NVM for installation of NodeJS is highly recommended over direct installation. Setup and installation Install NVM and Node The recommended way of installing NodeJS is via the Node Version Manager , or NVM. NVM allows you to have several different versions of NodeJS installed and in-use at once on your computer. For Linux and Mac, follow https://github.com/nvm-sh/nvm#installing-and-updating For Windows, use https://github.com/coreybutler/nvm-windows/releases -- Note! NVM 1.1.7 for Windows has bugs. You should upgrade to at least 1.1.9. nvm --version Moodle provides a .nvmrc file which can be used to automatically install the correct version of NodeJS for the current directory. After you have installed NVM, you can install the correct version of NodeJS by running the following commands from your Moodle directory: # Installing the version of NodeJS for the current directory nvm install nvm use The Moodle JavaScript toolchain currently uses the Grunt build tool, along with other common tooling including eslint. To install these build dependencies, you should use the Node Package Manager, or NPM. Key Uses in Moodle: Package Management with npm: npm (Node Package Manager) is bundled with NodeJS and is used to manage JavaScript packages and dependencies. In Moodle, npm is used to install development dependencies such as Grunt, ESLint, and other build tools. npm install Running Build Tools: Build tools like Grunt (which we\u2019ll discuss next) are executed using NodeJS. These tools automate repetitive tasks like minification, compilation, linting, and testing. Grunt Grunt is a JavaScript task runner that automates repetitive tasks such as minification, compilation, unit testing, and linting. It is widely used in front-end development workflows to streamline the process of preparing code for production. As part of its build stack, Moodle uses the Grunt task runner. Grunt is a command line tool used to prepare our JavaScript and CSS for production usage. After making any change to JavaScript or CSS files in Moodle, you must run grunt to lint, minify and package the JavaScript/CSS properly so that it can be served by Moodle. Grunt is composed of a set of tasks, defined within the Moodle code repository in the Gruntfile.js file, and a grunt CLI tool which must also be installed. Setup and installation Install Grunt - JavaScript and CSS in Moodle must be processed by some build tools before they will be visible to the web browser. Grunt is a build tool written in JavaScript that runs in the nodejs environment. You will need to install NodeJS and the Grunt tools: #Installing grunt nvm install && nvm use npm install npm install -g grunt-cli Key Uses in Moodle: Automating Tasks: Grunt helps automate common development tasks such as CSS preprocessing, JavaScript minification, and linting. This ensures that the codebase adheres to coding standards and is optimized for performance. Configuring Grunt: Grunt uses a configuration file named Gruntfile.js to define tasks. Here\u2019s an example of what a Gruntfile.js might look like in a Moodle plugin: module . exports = function ( grunt ) { // Project configuration grunt . initConfig ({ pkg : grunt . file . readJSON ( 'package.json' ), // Task configuration eslint : { target : [ 'src/**/*.js' ] }, uglify : { build : { src : 'src/<%= pkg.name %>.js' , dest : 'build/<%= pkg.name %>.min.js' } }, cssmin : { target : { files : [{ expand : true , cwd : 'src/css' , src : [ '*.css' , '!*.min.css' ], dest : 'build/css' , ext : '.min.css' }] } } }); // Load the plugins grunt . loadNpmTasks ( 'grunt-contrib-uglify' ); grunt . loadNpmTasks ( 'grunt-contrib-cssmin' ); grunt . loadNpmTasks ( 'grunt-eslint' ); // Default tasks grunt . registerTask ( 'default' , [ 'eslint' , 'uglify' , 'cssmin' ]); }; Running Grunt Tasks: Once Grunt is configured, you can run the defined tasks using the command line. For example, to run the default tasks defined in the Gruntfile.js , you would use: Typical commands: grunt amd # Alias for \"ignorefiles\", \"eslint:amd\", \"rollup\" grunt js # Alias for \"amd\", \"yui\" tasks. grunt css # Alias for \"scss\", \"rawcss\" tasks. grunt shifter # Run Shifter grunt componentlibrary # Build the component library grunt eslint --show-lint-warnings # Show pedantic lint warnings for JS grunt # Try to do the right thing: # * If you are in a folder called amd, do grunt amd # * If you are in a folder called yui/src/something, do grunt shifter # * Otherwise build everything (grunt css js). grunt watch # Run tasks on file changes Note that: On Linux/Mac it will build everything in the current folder and below. You need to cd into the amd folder of your module root, for example dirroot/blocks/foo/amd, before running grunt amd (this will compile only your plugins AMD source files). You can make output more verbose by adding -v parameter. If used with grunt shifter you will have to cd into the module/yui/src folder, and to show what your lint errors are you can also use the -v parameter. On Windows, you need to specify the path on the command line like --root=admin/tool/templatelibrary.","title":"Tools"},{"location":"Moodle/Javascript/phpMoodleJSTools/#nodejs","text":"NodeJS is a JavaScript runtime built on Chrome's V8 JavaScript engine. It allows developers to run JavaScript on the server-side and is widely used for building scalable network applications. In the context of Moodle, NodeJS is used to run various build tools and package managers that streamline the development process. Moodle uses a NodeJS toolchain to perform a number of development actions, including linting, transpilation of JavaScript, compilation of the Component Library, and a number of other routine tasks. Use of NVM for installation of NodeJS is highly recommended over direct installation.","title":"NodeJS"},{"location":"Moodle/Javascript/phpMoodleJSTools/#setup-and-installation","text":"Install NVM and Node The recommended way of installing NodeJS is via the Node Version Manager , or NVM. NVM allows you to have several different versions of NodeJS installed and in-use at once on your computer. For Linux and Mac, follow https://github.com/nvm-sh/nvm#installing-and-updating For Windows, use https://github.com/coreybutler/nvm-windows/releases -- Note! NVM 1.1.7 for Windows has bugs. You should upgrade to at least 1.1.9. nvm --version Moodle provides a .nvmrc file which can be used to automatically install the correct version of NodeJS for the current directory. After you have installed NVM, you can install the correct version of NodeJS by running the following commands from your Moodle directory: # Installing the version of NodeJS for the current directory nvm install nvm use The Moodle JavaScript toolchain currently uses the Grunt build tool, along with other common tooling including eslint. To install these build dependencies, you should use the Node Package Manager, or NPM. Key Uses in Moodle: Package Management with npm: npm (Node Package Manager) is bundled with NodeJS and is used to manage JavaScript packages and dependencies. In Moodle, npm is used to install development dependencies such as Grunt, ESLint, and other build tools. npm install Running Build Tools: Build tools like Grunt (which we\u2019ll discuss next) are executed using NodeJS. These tools automate repetitive tasks like minification, compilation, linting, and testing.","title":"Setup and installation"},{"location":"Moodle/Javascript/phpMoodleJSTools/#grunt","text":"Grunt is a JavaScript task runner that automates repetitive tasks such as minification, compilation, unit testing, and linting. It is widely used in front-end development workflows to streamline the process of preparing code for production. As part of its build stack, Moodle uses the Grunt task runner. Grunt is a command line tool used to prepare our JavaScript and CSS for production usage. After making any change to JavaScript or CSS files in Moodle, you must run grunt to lint, minify and package the JavaScript/CSS properly so that it can be served by Moodle. Grunt is composed of a set of tasks, defined within the Moodle code repository in the Gruntfile.js file, and a grunt CLI tool which must also be installed.","title":"Grunt"},{"location":"Moodle/Javascript/phpMoodleJSTools/#setup-and-installation_1","text":"Install Grunt - JavaScript and CSS in Moodle must be processed by some build tools before they will be visible to the web browser. Grunt is a build tool written in JavaScript that runs in the nodejs environment. You will need to install NodeJS and the Grunt tools: #Installing grunt nvm install && nvm use npm install npm install -g grunt-cli Key Uses in Moodle: Automating Tasks: Grunt helps automate common development tasks such as CSS preprocessing, JavaScript minification, and linting. This ensures that the codebase adheres to coding standards and is optimized for performance. Configuring Grunt: Grunt uses a configuration file named Gruntfile.js to define tasks. Here\u2019s an example of what a Gruntfile.js might look like in a Moodle plugin: module . exports = function ( grunt ) { // Project configuration grunt . initConfig ({ pkg : grunt . file . readJSON ( 'package.json' ), // Task configuration eslint : { target : [ 'src/**/*.js' ] }, uglify : { build : { src : 'src/<%= pkg.name %>.js' , dest : 'build/<%= pkg.name %>.min.js' } }, cssmin : { target : { files : [{ expand : true , cwd : 'src/css' , src : [ '*.css' , '!*.min.css' ], dest : 'build/css' , ext : '.min.css' }] } } }); // Load the plugins grunt . loadNpmTasks ( 'grunt-contrib-uglify' ); grunt . loadNpmTasks ( 'grunt-contrib-cssmin' ); grunt . loadNpmTasks ( 'grunt-eslint' ); // Default tasks grunt . registerTask ( 'default' , [ 'eslint' , 'uglify' , 'cssmin' ]); }; Running Grunt Tasks: Once Grunt is configured, you can run the defined tasks using the command line. For example, to run the default tasks defined in the Gruntfile.js , you would use: Typical commands: grunt amd # Alias for \"ignorefiles\", \"eslint:amd\", \"rollup\" grunt js # Alias for \"amd\", \"yui\" tasks. grunt css # Alias for \"scss\", \"rawcss\" tasks. grunt shifter # Run Shifter grunt componentlibrary # Build the component library grunt eslint --show-lint-warnings # Show pedantic lint warnings for JS grunt # Try to do the right thing: # * If you are in a folder called amd, do grunt amd # * If you are in a folder called yui/src/something, do grunt shifter # * Otherwise build everything (grunt css js). grunt watch # Run tasks on file changes Note that: On Linux/Mac it will build everything in the current folder and below. You need to cd into the amd folder of your module root, for example dirroot/blocks/foo/amd, before running grunt amd (this will compile only your plugins AMD source files). You can make output more verbose by adding -v parameter. If used with grunt shifter you will have to cd into the module/yui/src folder, and to show what your lint errors are you can also use the -v parameter. On Windows, you need to specify the path on the command line like --root=admin/tool/templatelibrary.","title":"Setup and installation"},{"location":"Moodle/Javascript/phpMoodleModal/","text":"Modal dialogues are a useful UI component in Moodle for displaying content and interacting with users without navigating away from the current page. They are typically used for forms, confirmations, alerts, and other content that needs user interaction. The use of modal modules provides a simplified developer experience for creating modal dialogues within Moodle. The module attempts to ensure that all accessibility requirements are met, including applying the correct aria roles, focus control, aria hiding background elements, and locking keyboard navigation. Modals will fire events for common actions that occur within the modal for other code to listen to and react accordingly. Moodle ships with several standard modal types for you to re-use including a simple cancel modal, and a save/cancel modal. User Experience : Enhance the user experience by providing information or requesting input without leaving the current page. Focus : Keep the user's focus on a specific task or piece of information. Efficiency : Reduce page loads and provide a smoother, more interactive experience. The use of modal modules provides a simplified developer experience for creating modal dialogues within Moodle. The module attempts to ensure that all accessibility requirements are met, including applying the correct aria roles, focus control, aria hiding background elements, and locking keyboard navigation. Modals will fire events for common actions that occur within the modal for other code to listen to and react accordingly. Moodle ships with several standard modal types for you to re-use including a simple cancel modal, and a save/cancel modal. Creating a basic modal - Since 4.3 Modals can be created by calling the static create method on the modal type you wish to create, for example: // Creating a standard modal import Modal from 'core/modal' ; export const init = async () => { const modal = await Modal . create ({ title : 'Test title' , body : '<p>Example body content</p>' , footer : 'An example footer content' , show : true , removeOnClose : true , }); } Other standard options are described in the JS Documentation for the MoodleConfig type. SUPPORT FOR EARLIER VERSIONS If you are supporting an earlier version of Moodle, then you must use the Modal Factory and register your modal. Modal Factory The Modal Factory can be used to instantiate a new Modal. The factory provides a create function, accepting some configuration which is used to create the modal instance, and an optional trigger element. The create function returns a Promise that is resolved with the created modal. The configuration is provided as an object with key/value pairs. The options are: key description title the title to display in the modal header - note: this will render HTML body the main content to be rendered in the modal body footer the content to be rendered in the modal footer type one of the modal types registered with the factory large a boolean to indicate if the modal should be wider than the default size // Basic instantiation of a modal import ModalFactory from 'core/modal_factory' ; export const init = async () => { const modal = await ModalFactory . create ({ title : 'test title' , body : '<p>Example body content</p>' , footer : 'An example footer content' , }); modal . show (); // ... }; Where text, language strings, or HTML is accepted, a Promise can also be provided. // Using a template to render the body import ModalFactory from 'core/modal_factory' ; import Templates from 'core/templates' ; export const init = async () => { const modal = await ModalFactory . create ({ title : 'test title' , body : Templates . render ( 'mod_example/example_modal_content' , { id : 42 }), footer : 'An example footer content' , }); modal . show (); // ... }; Using the 'trigger' Moodle Modals created using the Modal Factory support an optional trigger element. Whilst this is available, it is no longer recommended and support for it will likely be removed in Moodle 4.3. // Providing a trigger import ModalFactory from 'core/modal_factory' ; import Templates from 'core/templates' ; import $ from 'jquery' ; export const init = async () => { const modal = await ModalFactory . create ({ title : 'test title' , body : Templates . render ( 'mod_example/example_modal_content' , { id : 42 }), footer : 'An example footer content' , }, $ ( 'a.item-delete' )); // ... }; Instantiating modal types A number of commonly used modals are available as standard, these include: a Delete / Cancel modal a Save / Cancel modal a Cancel modal For Moodle 4.3 NOTE: If you are developing code for use in Moodle 4.2, or earlier, then you must continue to follow the 4.2 guidelines. To use these modals you can call the create method on the relevant Modal Class. // Creating a save/cancel modal import ModalSaveCancel from 'core/modal_save_cancel' ; import { get_string as getString } from 'core/str' ; export const init = async () => { const modal = await ModalSaveCancel . create ({ title : 'test title' , body : getString ( 'confirmchange' , 'mod_example' ), }); // ... }; Each type of modal may fire additional events to allow your code to handle the new functionality being offered -- for example, if you wanted to have a save/cancel modal that you did some form validation on before saving you could do something like the example below. //Listening to a Save event import ModalSaveCancel from 'core/modal_save_cancel' ; import ModalEvents from 'core/modal_events' ; import { get_string as getString } from 'core/str' ; export const init = async () => { const modal = await ModalSaveCancel . create ({ title : 'test title' , body : getString ( 'confirmchange' , 'mod_example' ), }); modal . getRoot (). on ( ModalEvents . save , ( e ) => { // ... }) // ... }; For Moodle 4.2 and earlier To use these modals you can provide the type argument to the ModalFactory.create method. This argument takes a string value and values can be found for these modals in ModalFactory.TYPES. // Creating a save/cancel modal import ModalFactory from 'core/modal_factory' ; import { get_string as getString } from 'core/str' ; export const init = async () => { const modal = await ModalFactory . create ({ type : ModalFactory . types . SAVE_CANCEL , title : 'test title' , body : getString ( 'confirmchange' , 'mod_example' ), }); // ... }; Each type of modal may fire additional events to allow your code to handle the new functionality being offered -- for example, if you wanted to have a save/cancel modal that you did some form validation on before saving you could do something like the example below. // Listening to a Save event import ModalFactory from 'core/modal_factory' ; import ModalEvents from 'core/modal_events' ; import { get_string as getString } from 'core/str' ; export const init = async () => { const modal = await ModalFactory . create ({ type : ModalFactory . types . SAVE_CANCEL , title : 'test title' , body : getString ( 'confirmchange' , 'mod_example' ), }); modal . getRoot (). on ( ModalEvents . save , ( e ) => { // ... }) // ... }; Creating a custom modal In some situations it is desirable to write a brand new modal. There are two parts to this: a new Modal class which extends the core/modal class; and a template CUSTOM MODALS IN MOODLE 4.2 AND EARLIER Since Moodle 4.3, creating the Modal class is as simple as extending the core/modal class, and providing a TYPE property, and TEMPLATE property. For older versions of Moodle, refer to the Moodle 4.2 documentation . // mod/example/amd/src/my_modal.js import Modal from 'core/modal' ; export default class MyModal extends Modal { static TYPE = \"mod_example/my_modal\" ; static TEMPLATE = \"mod_example/my_modal\" ; } The template should extend the core/modal core template and can override any of the title, body, or footer regions, for example: // mod/example/templates/my_modal.mustache {{ < core / modal }} {{ $title }}{{ # str }} login {{ /str}}{{/title}} {{ $body }} < div class = \"container\" > < form > < div class = \"form-group row\" > < label for = \"inputEmail\" class = \"col-sm-2 col-form-label\" > {{ # str }} email {{ /str}}</label> < div class = \"col-sm-10\" > < input type = \"email\" class = \"form-control\" id = \"inputEmail\" placeholder = \"{{#str}} email {{/str}}\" > < /div> < /div> < div class = \"form-group row\" > < label for = \"inputPassword\" class = \"col-sm-2 col-form-label\" > {{ # str }} password {{ /str}}</label> < div class = \"col-sm-10\" > < input type = \"password\" class = \"form-control\" id = \"inputPassword\" placeholder = \"{{#str}} password {{/str}}\" > < /div> < /div> < /form> < /div> {{ /body}} {{ $footer }} < button type = \"button\" class = \"btn btn-primary\" data - action = \"login\" > {{ # str }} login {{ /str}}</button> < button type = \"button\" class = \"btn btn-secondary\" data - action = \"cancel\" > {{ # str }} cancel {{ /str}}</button> {{ /footer}} {{ / core/modal }} Once defined, the new modal can be instantiated using the standard create method, for example: // Instantiating a custom modal import MyModal from 'mod_example/my_modal' ; export default const init = async () => { // ... const modal = await MyModal . create ({}); modal . show (); } Overriding default configuration When creating your own modal type, you may wish to override the standard configuration. This can be achieved by overriding the configure class and providing your own options, for example: //Overriding standard options import Modal from 'core/modal' ; export default class MyModal extends Modal { static TYPE = \"mod_example/my_modal\" ; static TEMPLATE = \"mod_example/my_modal\" ; configure ( modalConfig ) { // Show this modal on instantiation. modalConfig . show = true ; // Remove from the DOM on close. modalConfig . removeOnClose = true ; super . configure ( modalConfig ); // Accept our own custom arguments too. if ( modalConfig . someValue ) { this . setSomeValue ( someValue ); } } setSomeValue ( value ) { this . someValue = value ; } } Creating Modal Dialogues in Moodle Moodle provides a built-in way to create modal dialogues using JavaScript, specifically through the core/modal_factory and core/modal AMD modules. Load Required JavaScript Modules Load the necessary JavaScript modules using Moodle's AMD loader. $PAGE->requires->js_call_amd('yourpluginname/modal_handler', 'init'); Create the Modal Handler Create a JavaScript file in your plugin's amd/src directory, for example, amd/src/modal_handler.js . define ([ 'core/modal_factory' , 'core/modal_events' , 'core/str' ], function ( ModalFactory , ModalEvents , Str ) { return { init : function () { // Define the content for the modal var content = '<p>This is the content of the modal.</p>' ; // Create the modal ModalFactory . create ({ type : ModalFactory . types . DEFAULT , title : Str . get_string ( 'modaltitle' , 'yourpluginname' ), body : content }). done ( function ( modal ) { // Add event listeners modal . getRoot (). on ( ModalEvents . hidden , function () { // Actions to perform when the modal is hidden console . log ( 'Modal closed' ); }); // Show the modal modal . show (); }); } }; }); Add Strings for Internationalization Define the strings used in your modal in the lang/en/yourpluginname.php file. $string['modaltitle'] = 'Modal Title'; Trigger the Modal Add the necessary HTML and JavaScript to trigger the modal when needed. For example, you can trigger the modal when a button is clicked. < button id = \"showModal\" > Show Modal </ button > document . getElementById ( 'showModal' ). addEventListener ( 'click' , function () { require ([ 'yourpluginname/modal_handler' ], function ( modalHandler ) { modalHandler . init (); }); }); Advanced Usage 1. Form in a Modal You can also embed forms within a modal. Create a form as usual and place it in the modal content. define ([ 'core/modal_factory' , 'core/modal_events' , 'core/str' , 'core/ajax' ], function ( ModalFactory , ModalEvents , Str , Ajax ) { return { init : function () { var content = '<form id=\"modalForm\">' + '<label for=\"inputField\">Input:</label>' + '<input type=\"text\" id=\"inputField\" name=\"inputField\">' + '<button type=\"submit\">Submit</button>' + '</form>' ; ModalFactory . create ({ type : ModalFactory . types . DEFAULT , title : Str . get_string ( 'modaltitle' , 'yourpluginname' ), body : content }). done ( function ( modal ) { modal . getRoot (). on ( ModalEvents . hidden , function () { console . log ( 'Modal closed' ); }); modal . getRoot (). on ( 'submit' , '#modalForm' , function ( e ) { e . preventDefault (); var inputValue = document . getElementById ( 'inputField' ). value ; console . log ( 'Form submitted with value:' , inputValue ); // Example AJAX request Ajax . call ([{ methodname : 'yourpluginname_submit_form' , args : { input : inputValue }, done : function ( response ) { console . log ( 'Form submitted successfully:' , response ); modal . hide (); }, fail : function ( error ) { console . error ( 'Form submission failed:' , error ); } }]); }); modal . show (); }); } }; }); 2. Custom Modal Types Moodle provides different types of modals: DEFAULT , SAVE_CANCEL , and ALERT . You can use these to create different styles of modals. ModalFactory . create ({ type : ModalFactory . types . SAVE_CANCEL , title : Str . get_string ( 'modaltitle' , 'yourpluginname' ), body : content }). done ( function ( modal ) { modal . getRoot (). on ( ModalEvents . hidden , function () { console . log ( 'Modal closed' ); }); modal . getRoot (). on ( ModalEvents . save , function () { console . log ( 'Save button clicked' ); modal . hide (); }); modal . show (); }); 3. Modal with Templates Moodle's template system allows for more dynamic and maintainable code by separating HTML structure from JavaScript logic. This is particularly useful for creating complex modal dialogues. For example, you can dynamically choose which template to render based on the context or user interaction. Separation of Concerns : Keep HTML and JavaScript separate for better readability and maintainability. Reusability : Easily reuse templates across different parts of your plugin or even different plugins. Flexibility : Dynamically render content based on context or user interaction. Step 1: Create a Template Create the Template File : Create a Mustache template file in your plugin\u2019s templates directory. For example, templates/modal_content.mustache . < div class = \"modal-body\" > < p > {{message}} </ p > < form id = \"modalForm\" > < label for = \"inputField\" > Input: </ label > < input type = \"text\" id = \"inputField\" name = \"inputField\" > < button type = \"submit\" > Submit </ button > </ form > </ div > Step 2: Load and Render the Template in JavaScript Load Required JavaScript Modules Load the necessary JavaScript modules using Moodle's AMD loader. Create a JavaScript file in your plugin's amd/src directory, for example, amd/src/modal_handler.js . define ([ 'core/modal_factory' , 'core/modal_events' , 'core/str' , 'core/templates' , 'core/ajax' ], function ( ModalFactory , ModalEvents , Str , Templates , Ajax ) { return { init : function () { // Load the template and render it Templates . render ( 'yourpluginname/modal_content' , { message : 'This is a message' }). done ( function ( html , js ) { ModalFactory . create ({ type : ModalFactory . types . DEFAULT , title : Str . get_string ( 'modaltitle' , 'yourpluginname' ), body : html }). done ( function ( modal ) { modal . getRoot (). on ( ModalEvents . hidden , function () { console . log ( 'Modal closed' ); }); modal . getRoot (). on ( 'submit' , '#modalForm' , function ( e ) { e . preventDefault (); var inputValue = document . getElementById ( 'inputField' ). value ; console . log ( 'Form submitted with value:' , inputValue ); // Example AJAX request Ajax . call ([{ methodname : 'yourpluginname_submit_form' , args : { input : inputValue }, done : function ( response ) { console . log ( 'Form submitted successfully:' , response ); modal . hide (); }, fail : function ( error ) { console . error ( 'Form submission failed:' , error ); } }]); }); modal . show (); Templates . runTemplateJS ( js ); }); }). fail ( function () { console . error ( 'Failed to load template' ); }); } }; }); Include JavaScript in Your Plugin Add the following line to your view.php or another relevant PHP file to load the JavaScript module. $PAGE->requires->js_call_amd('yourpluginname/modal_handler', 'init'); Step 3: Define Strings for Internationalization Define the strings used in your modal in the lang/en/yourpluginname.php file. $string['modaltitle'] = 'Modal Title'; Step 4: Trigger the Modal Add the necessary HTML and JavaScript to trigger the modal when needed. For example, you can trigger the modal when a button is clicked. < button id = \"showModal\" > Show Modal </ button > document . getElementById ( 'showModal' ). addEventListener ( 'click' , function () { require ([ 'yourpluginname/modal_handler' ], function ( modalHandler ) { modalHandler . init (); }); }); Advanced Usage Dynamic Content : You can pass dynamic data to the template by modifying the context object passed to the Templates.render method. var context = { message : 'Dynamic message' , anotherfield : 'Another value' }; Templates . render ( 'yourpluginname/modal_content' , context ). done ( function ( html , js ) { // Proceed as before }); Handling Multiple Templates : If your modal needs to load different templates based on the context, you can dynamically choose which template to render. var templateName = condition ? 'yourpluginname/first_template' : 'yourpluginname/second_template' ; Templates . render ( templateName , context ). done ( function ( html , js ) { // Proceed as before }); Complex Interactions : For complex interactions, you can define additional JavaScript logic within the template and execute it using Templates.runTemplateJS(js) after the modal is shown. Summary Modal dialogues in Moodle provide a powerful way to interact with users without navigating away from the current page. By using Moodle's core/modal_factory and core/modal modules, you can create dynamic and interactive modals for displaying information, capturing user input, and more. Always follow best practices for user experience, accessibility, and performance to ensure a high-quality implementation. For more detailed information and examples, refer to the official Moodle documentation . It is possible to display moodleform in a popup or use AJAX form submission. Refer to the Modal and AJAX forms developer docs for details on their use case and how to use them in your code.","title":"Modal Dialogues"},{"location":"Moodle/Javascript/phpMoodleModal/#creating-a-basic-modal-since-43","text":"Modals can be created by calling the static create method on the modal type you wish to create, for example: // Creating a standard modal import Modal from 'core/modal' ; export const init = async () => { const modal = await Modal . create ({ title : 'Test title' , body : '<p>Example body content</p>' , footer : 'An example footer content' , show : true , removeOnClose : true , }); } Other standard options are described in the JS Documentation for the MoodleConfig type. SUPPORT FOR EARLIER VERSIONS If you are supporting an earlier version of Moodle, then you must use the Modal Factory and register your modal.","title":"Creating a basic modal - Since 4.3"},{"location":"Moodle/Javascript/phpMoodleModal/#modal-factory","text":"The Modal Factory can be used to instantiate a new Modal. The factory provides a create function, accepting some configuration which is used to create the modal instance, and an optional trigger element. The create function returns a Promise that is resolved with the created modal. The configuration is provided as an object with key/value pairs. The options are: key description title the title to display in the modal header - note: this will render HTML body the main content to be rendered in the modal body footer the content to be rendered in the modal footer type one of the modal types registered with the factory large a boolean to indicate if the modal should be wider than the default size // Basic instantiation of a modal import ModalFactory from 'core/modal_factory' ; export const init = async () => { const modal = await ModalFactory . create ({ title : 'test title' , body : '<p>Example body content</p>' , footer : 'An example footer content' , }); modal . show (); // ... }; Where text, language strings, or HTML is accepted, a Promise can also be provided. // Using a template to render the body import ModalFactory from 'core/modal_factory' ; import Templates from 'core/templates' ; export const init = async () => { const modal = await ModalFactory . create ({ title : 'test title' , body : Templates . render ( 'mod_example/example_modal_content' , { id : 42 }), footer : 'An example footer content' , }); modal . show (); // ... }; Using the 'trigger' Moodle Modals created using the Modal Factory support an optional trigger element. Whilst this is available, it is no longer recommended and support for it will likely be removed in Moodle 4.3. // Providing a trigger import ModalFactory from 'core/modal_factory' ; import Templates from 'core/templates' ; import $ from 'jquery' ; export const init = async () => { const modal = await ModalFactory . create ({ title : 'test title' , body : Templates . render ( 'mod_example/example_modal_content' , { id : 42 }), footer : 'An example footer content' , }, $ ( 'a.item-delete' )); // ... };","title":"Modal Factory"},{"location":"Moodle/Javascript/phpMoodleModal/#instantiating-modal-types","text":"A number of commonly used modals are available as standard, these include: a Delete / Cancel modal a Save / Cancel modal a Cancel modal","title":"Instantiating modal types"},{"location":"Moodle/Javascript/phpMoodleModal/#for-moodle-43","text":"NOTE: If you are developing code for use in Moodle 4.2, or earlier, then you must continue to follow the 4.2 guidelines. To use these modals you can call the create method on the relevant Modal Class. // Creating a save/cancel modal import ModalSaveCancel from 'core/modal_save_cancel' ; import { get_string as getString } from 'core/str' ; export const init = async () => { const modal = await ModalSaveCancel . create ({ title : 'test title' , body : getString ( 'confirmchange' , 'mod_example' ), }); // ... }; Each type of modal may fire additional events to allow your code to handle the new functionality being offered -- for example, if you wanted to have a save/cancel modal that you did some form validation on before saving you could do something like the example below. //Listening to a Save event import ModalSaveCancel from 'core/modal_save_cancel' ; import ModalEvents from 'core/modal_events' ; import { get_string as getString } from 'core/str' ; export const init = async () => { const modal = await ModalSaveCancel . create ({ title : 'test title' , body : getString ( 'confirmchange' , 'mod_example' ), }); modal . getRoot (). on ( ModalEvents . save , ( e ) => { // ... }) // ... };","title":"For Moodle 4.3"},{"location":"Moodle/Javascript/phpMoodleModal/#for-moodle-42-and-earlier","text":"To use these modals you can provide the type argument to the ModalFactory.create method. This argument takes a string value and values can be found for these modals in ModalFactory.TYPES. // Creating a save/cancel modal import ModalFactory from 'core/modal_factory' ; import { get_string as getString } from 'core/str' ; export const init = async () => { const modal = await ModalFactory . create ({ type : ModalFactory . types . SAVE_CANCEL , title : 'test title' , body : getString ( 'confirmchange' , 'mod_example' ), }); // ... }; Each type of modal may fire additional events to allow your code to handle the new functionality being offered -- for example, if you wanted to have a save/cancel modal that you did some form validation on before saving you could do something like the example below. // Listening to a Save event import ModalFactory from 'core/modal_factory' ; import ModalEvents from 'core/modal_events' ; import { get_string as getString } from 'core/str' ; export const init = async () => { const modal = await ModalFactory . create ({ type : ModalFactory . types . SAVE_CANCEL , title : 'test title' , body : getString ( 'confirmchange' , 'mod_example' ), }); modal . getRoot (). on ( ModalEvents . save , ( e ) => { // ... }) // ... };","title":"For Moodle 4.2 and earlier"},{"location":"Moodle/Javascript/phpMoodleModal/#creating-a-custom-modal","text":"In some situations it is desirable to write a brand new modal. There are two parts to this: a new Modal class which extends the core/modal class; and a template CUSTOM MODALS IN MOODLE 4.2 AND EARLIER Since Moodle 4.3, creating the Modal class is as simple as extending the core/modal class, and providing a TYPE property, and TEMPLATE property. For older versions of Moodle, refer to the Moodle 4.2 documentation . // mod/example/amd/src/my_modal.js import Modal from 'core/modal' ; export default class MyModal extends Modal { static TYPE = \"mod_example/my_modal\" ; static TEMPLATE = \"mod_example/my_modal\" ; } The template should extend the core/modal core template and can override any of the title, body, or footer regions, for example: // mod/example/templates/my_modal.mustache {{ < core / modal }} {{ $title }}{{ # str }} login {{ /str}}{{/title}} {{ $body }} < div class = \"container\" > < form > < div class = \"form-group row\" > < label for = \"inputEmail\" class = \"col-sm-2 col-form-label\" > {{ # str }} email {{ /str}}</label> < div class = \"col-sm-10\" > < input type = \"email\" class = \"form-control\" id = \"inputEmail\" placeholder = \"{{#str}} email {{/str}}\" > < /div> < /div> < div class = \"form-group row\" > < label for = \"inputPassword\" class = \"col-sm-2 col-form-label\" > {{ # str }} password {{ /str}}</label> < div class = \"col-sm-10\" > < input type = \"password\" class = \"form-control\" id = \"inputPassword\" placeholder = \"{{#str}} password {{/str}}\" > < /div> < /div> < /form> < /div> {{ /body}} {{ $footer }} < button type = \"button\" class = \"btn btn-primary\" data - action = \"login\" > {{ # str }} login {{ /str}}</button> < button type = \"button\" class = \"btn btn-secondary\" data - action = \"cancel\" > {{ # str }} cancel {{ /str}}</button> {{ /footer}} {{ / core/modal }} Once defined, the new modal can be instantiated using the standard create method, for example: // Instantiating a custom modal import MyModal from 'mod_example/my_modal' ; export default const init = async () => { // ... const modal = await MyModal . create ({}); modal . show (); }","title":"Creating a custom modal"},{"location":"Moodle/Javascript/phpMoodleModal/#overriding-default-configuration","text":"When creating your own modal type, you may wish to override the standard configuration. This can be achieved by overriding the configure class and providing your own options, for example: //Overriding standard options import Modal from 'core/modal' ; export default class MyModal extends Modal { static TYPE = \"mod_example/my_modal\" ; static TEMPLATE = \"mod_example/my_modal\" ; configure ( modalConfig ) { // Show this modal on instantiation. modalConfig . show = true ; // Remove from the DOM on close. modalConfig . removeOnClose = true ; super . configure ( modalConfig ); // Accept our own custom arguments too. if ( modalConfig . someValue ) { this . setSomeValue ( someValue ); } } setSomeValue ( value ) { this . someValue = value ; } }","title":"Overriding default configuration"},{"location":"Moodle/Javascript/phpMoodleModal/#creating-modal-dialogues-in-moodle","text":"Moodle provides a built-in way to create modal dialogues using JavaScript, specifically through the core/modal_factory and core/modal AMD modules. Load Required JavaScript Modules Load the necessary JavaScript modules using Moodle's AMD loader. $PAGE->requires->js_call_amd('yourpluginname/modal_handler', 'init'); Create the Modal Handler Create a JavaScript file in your plugin's amd/src directory, for example, amd/src/modal_handler.js . define ([ 'core/modal_factory' , 'core/modal_events' , 'core/str' ], function ( ModalFactory , ModalEvents , Str ) { return { init : function () { // Define the content for the modal var content = '<p>This is the content of the modal.</p>' ; // Create the modal ModalFactory . create ({ type : ModalFactory . types . DEFAULT , title : Str . get_string ( 'modaltitle' , 'yourpluginname' ), body : content }). done ( function ( modal ) { // Add event listeners modal . getRoot (). on ( ModalEvents . hidden , function () { // Actions to perform when the modal is hidden console . log ( 'Modal closed' ); }); // Show the modal modal . show (); }); } }; }); Add Strings for Internationalization Define the strings used in your modal in the lang/en/yourpluginname.php file. $string['modaltitle'] = 'Modal Title'; Trigger the Modal Add the necessary HTML and JavaScript to trigger the modal when needed. For example, you can trigger the modal when a button is clicked. < button id = \"showModal\" > Show Modal </ button > document . getElementById ( 'showModal' ). addEventListener ( 'click' , function () { require ([ 'yourpluginname/modal_handler' ], function ( modalHandler ) { modalHandler . init (); }); });","title":"Creating Modal Dialogues in Moodle"},{"location":"Moodle/Javascript/phpMoodleModal/#advanced-usage","text":"","title":"Advanced Usage"},{"location":"Moodle/Javascript/phpMoodleModal/#1-form-in-a-modal","text":"You can also embed forms within a modal. Create a form as usual and place it in the modal content. define ([ 'core/modal_factory' , 'core/modal_events' , 'core/str' , 'core/ajax' ], function ( ModalFactory , ModalEvents , Str , Ajax ) { return { init : function () { var content = '<form id=\"modalForm\">' + '<label for=\"inputField\">Input:</label>' + '<input type=\"text\" id=\"inputField\" name=\"inputField\">' + '<button type=\"submit\">Submit</button>' + '</form>' ; ModalFactory . create ({ type : ModalFactory . types . DEFAULT , title : Str . get_string ( 'modaltitle' , 'yourpluginname' ), body : content }). done ( function ( modal ) { modal . getRoot (). on ( ModalEvents . hidden , function () { console . log ( 'Modal closed' ); }); modal . getRoot (). on ( 'submit' , '#modalForm' , function ( e ) { e . preventDefault (); var inputValue = document . getElementById ( 'inputField' ). value ; console . log ( 'Form submitted with value:' , inputValue ); // Example AJAX request Ajax . call ([{ methodname : 'yourpluginname_submit_form' , args : { input : inputValue }, done : function ( response ) { console . log ( 'Form submitted successfully:' , response ); modal . hide (); }, fail : function ( error ) { console . error ( 'Form submission failed:' , error ); } }]); }); modal . show (); }); } }; });","title":"1. Form in a Modal"},{"location":"Moodle/Javascript/phpMoodleModal/#2-custom-modal-types","text":"Moodle provides different types of modals: DEFAULT , SAVE_CANCEL , and ALERT . You can use these to create different styles of modals. ModalFactory . create ({ type : ModalFactory . types . SAVE_CANCEL , title : Str . get_string ( 'modaltitle' , 'yourpluginname' ), body : content }). done ( function ( modal ) { modal . getRoot (). on ( ModalEvents . hidden , function () { console . log ( 'Modal closed' ); }); modal . getRoot (). on ( ModalEvents . save , function () { console . log ( 'Save button clicked' ); modal . hide (); }); modal . show (); });","title":"2. Custom Modal Types"},{"location":"Moodle/Javascript/phpMoodleModal/#3-modal-with-templates","text":"Moodle's template system allows for more dynamic and maintainable code by separating HTML structure from JavaScript logic. This is particularly useful for creating complex modal dialogues. For example, you can dynamically choose which template to render based on the context or user interaction. Separation of Concerns : Keep HTML and JavaScript separate for better readability and maintainability. Reusability : Easily reuse templates across different parts of your plugin or even different plugins. Flexibility : Dynamically render content based on context or user interaction. Step 1: Create a Template Create the Template File : Create a Mustache template file in your plugin\u2019s templates directory. For example, templates/modal_content.mustache . < div class = \"modal-body\" > < p > {{message}} </ p > < form id = \"modalForm\" > < label for = \"inputField\" > Input: </ label > < input type = \"text\" id = \"inputField\" name = \"inputField\" > < button type = \"submit\" > Submit </ button > </ form > </ div > Step 2: Load and Render the Template in JavaScript Load Required JavaScript Modules Load the necessary JavaScript modules using Moodle's AMD loader. Create a JavaScript file in your plugin's amd/src directory, for example, amd/src/modal_handler.js . define ([ 'core/modal_factory' , 'core/modal_events' , 'core/str' , 'core/templates' , 'core/ajax' ], function ( ModalFactory , ModalEvents , Str , Templates , Ajax ) { return { init : function () { // Load the template and render it Templates . render ( 'yourpluginname/modal_content' , { message : 'This is a message' }). done ( function ( html , js ) { ModalFactory . create ({ type : ModalFactory . types . DEFAULT , title : Str . get_string ( 'modaltitle' , 'yourpluginname' ), body : html }). done ( function ( modal ) { modal . getRoot (). on ( ModalEvents . hidden , function () { console . log ( 'Modal closed' ); }); modal . getRoot (). on ( 'submit' , '#modalForm' , function ( e ) { e . preventDefault (); var inputValue = document . getElementById ( 'inputField' ). value ; console . log ( 'Form submitted with value:' , inputValue ); // Example AJAX request Ajax . call ([{ methodname : 'yourpluginname_submit_form' , args : { input : inputValue }, done : function ( response ) { console . log ( 'Form submitted successfully:' , response ); modal . hide (); }, fail : function ( error ) { console . error ( 'Form submission failed:' , error ); } }]); }); modal . show (); Templates . runTemplateJS ( js ); }); }). fail ( function () { console . error ( 'Failed to load template' ); }); } }; }); Include JavaScript in Your Plugin Add the following line to your view.php or another relevant PHP file to load the JavaScript module. $PAGE->requires->js_call_amd('yourpluginname/modal_handler', 'init'); Step 3: Define Strings for Internationalization Define the strings used in your modal in the lang/en/yourpluginname.php file. $string['modaltitle'] = 'Modal Title'; Step 4: Trigger the Modal Add the necessary HTML and JavaScript to trigger the modal when needed. For example, you can trigger the modal when a button is clicked. < button id = \"showModal\" > Show Modal </ button > document . getElementById ( 'showModal' ). addEventListener ( 'click' , function () { require ([ 'yourpluginname/modal_handler' ], function ( modalHandler ) { modalHandler . init (); }); }); Advanced Usage Dynamic Content : You can pass dynamic data to the template by modifying the context object passed to the Templates.render method. var context = { message : 'Dynamic message' , anotherfield : 'Another value' }; Templates . render ( 'yourpluginname/modal_content' , context ). done ( function ( html , js ) { // Proceed as before }); Handling Multiple Templates : If your modal needs to load different templates based on the context, you can dynamically choose which template to render. var templateName = condition ? 'yourpluginname/first_template' : 'yourpluginname/second_template' ; Templates . render ( templateName , context ). done ( function ( html , js ) { // Proceed as before }); Complex Interactions : For complex interactions, you can define additional JavaScript logic within the template and execute it using Templates.runTemplateJS(js) after the modal is shown.","title":"3. Modal with Templates"},{"location":"Moodle/Javascript/phpMoodleModal/#summary","text":"Modal dialogues in Moodle provide a powerful way to interact with users without navigating away from the current page. By using Moodle's core/modal_factory and core/modal modules, you can create dynamic and interactive modals for displaying information, capturing user input, and more. Always follow best practices for user experience, accessibility, and performance to ensure a high-quality implementation. For more detailed information and examples, refer to the official Moodle documentation . It is possible to display moodleform in a popup or use AJAX form submission. Refer to the Modal and AJAX forms developer docs for details on their use case and how to use them in your code.","title":"Summary"},{"location":"Moodle/Javascript/phpMoodlePromises/","text":"Promises in JavaScript represent the eventual completion (or failure) of an asynchronous operation and its resulting value. In Moodle, promises are commonly used for handling asynchronous tasks such as AJAX requests, loading modules, and other operations that involve waiting for some data or action to complete. Basic Structure of Promises A promise can be in one of three states: Pending : Initial state, neither fulfilled nor rejected. Fulfilled : The operation completed successfully. Rejected : The operation failed. Promises allow you to write asynchronous code that is more readable and easier to manage than using traditional callback functions. Using Promises in Moodle Here\u2019s how you can effectively use promises in Moodle, focusing on the proper use of then and catch methods: 1. Creating and Returning Promises When creating a function that primarily handles asynchronous operations, it\u2019s a good practice to return a promise from the function. This allows for better chaining and handling of subsequent asynchronous actions. define ([ 'core/ajax' ], function ( Ajax ) { return { getUserData : function () { return Ajax . call ([{ methodname : 'yourpluginname_get_user_data' , args : {} }]); } }; }); 2. Chaining with then Use the then method to handle the resolved value of a promise. Ensure that you return a value or another promise at the end of a then block for proper chaining. define ([ 'core/ajax' ], function ( Ajax ) { return { getUserData : function () { return Ajax . call ([{ methodname : 'yourpluginname_get_user_data' , args : {} }]). then ( function ( response ) { console . log ( 'User ID:' , response . userId ); console . log ( 'User Name:' , response . userName ); return response ; // Always return at the end of a then block }); } }; }); 3. Handling Errors with catch Use the catch method to handle any errors that occur during the promise chain. Only use catch if you intend to handle errors explicitly. define ([ 'core/ajax' ], function ( Ajax ) { return { getUserData : function () { return Ajax . call ([{ methodname : 'yourpluginname_get_user_data' , args : {} }]). then ( function ( response ) { console . log ( 'User ID:' , response . userId ); console . log ( 'User Name:' , response . userName ); return response ; }). catch ( function ( error ) { console . error ( 'Error:' , error ); // Handle the error appropriately }); } }; }); Note : You shouldn't use the done , fail , or always functions on Promises. These are a jQuery feature and aren't present in the Native Promise implementation. 4. Returning Promises from Functions If a function is designed to create and handle a promise, make sure it returns that promise. This allows the caller of the function to continue chaining then and catch blocks as needed. define ([ 'core/ajax' ], function ( Ajax ) { return { fetchData : function () { return Ajax . call ([{ methodname : 'yourpluginname_get_data' , args : {} }]); }, processData : function () { return this . fetchData (). then ( function ( response ) { console . log ( 'Data:' , response ); return response ; // Return the data for further chaining }). catch ( function ( error ) { console . error ( 'Error:' , error ); // Handle the error appropriately }); } }; }); In this example: loadUserData : This function creates and returns a promise for loading user data using an AJAX call. displayUserData : This function calls loadUserData , processes the response, and handles any errors using catch . Best Practices Always return or throw When writing promises they must: Return another promise, or; Return a synchronous value (or undefined), or; Throw a synchronous error. Chain rather than nest Promises are a construct which help prevent the pyramid of doom and regain linear control flow and error handling. Promises should not be nested. Promises should be chained rather than nested. Avoid mixing callbacks and promises Avoid mixing callbacks and promises. Design code to embrace promise-y patterns for asynchronous code to make maximum use of promises. Additional reading: User talk: Poltawski/Javascript promises . We have a problem with promises . Summary Promises in Moodle are a powerful way to handle asynchronous operations. By using then for handling successful resolutions, catch for error handling, and ensuring functions return promises when appropriate, you can create maintainable and readable asynchronous code. Always remember to return a value or another promise at the end of a then block to allow for proper chaining and further processing. Avoid using done , fail , or always functions, as they are specific to jQuery and not part of the native Promise implementation.","title":"Promises"},{"location":"Moodle/Javascript/phpMoodlePromises/#basic-structure-of-promises","text":"A promise can be in one of three states: Pending : Initial state, neither fulfilled nor rejected. Fulfilled : The operation completed successfully. Rejected : The operation failed. Promises allow you to write asynchronous code that is more readable and easier to manage than using traditional callback functions.","title":"Basic Structure of Promises"},{"location":"Moodle/Javascript/phpMoodlePromises/#using-promises-in-moodle","text":"Here\u2019s how you can effectively use promises in Moodle, focusing on the proper use of then and catch methods:","title":"Using Promises in Moodle"},{"location":"Moodle/Javascript/phpMoodlePromises/#1-creating-and-returning-promises","text":"When creating a function that primarily handles asynchronous operations, it\u2019s a good practice to return a promise from the function. This allows for better chaining and handling of subsequent asynchronous actions. define ([ 'core/ajax' ], function ( Ajax ) { return { getUserData : function () { return Ajax . call ([{ methodname : 'yourpluginname_get_user_data' , args : {} }]); } }; });","title":"1. Creating and Returning Promises"},{"location":"Moodle/Javascript/phpMoodlePromises/#2-chaining-with-then","text":"Use the then method to handle the resolved value of a promise. Ensure that you return a value or another promise at the end of a then block for proper chaining. define ([ 'core/ajax' ], function ( Ajax ) { return { getUserData : function () { return Ajax . call ([{ methodname : 'yourpluginname_get_user_data' , args : {} }]). then ( function ( response ) { console . log ( 'User ID:' , response . userId ); console . log ( 'User Name:' , response . userName ); return response ; // Always return at the end of a then block }); } }; });","title":"2. Chaining with then"},{"location":"Moodle/Javascript/phpMoodlePromises/#3-handling-errors-with-catch","text":"Use the catch method to handle any errors that occur during the promise chain. Only use catch if you intend to handle errors explicitly. define ([ 'core/ajax' ], function ( Ajax ) { return { getUserData : function () { return Ajax . call ([{ methodname : 'yourpluginname_get_user_data' , args : {} }]). then ( function ( response ) { console . log ( 'User ID:' , response . userId ); console . log ( 'User Name:' , response . userName ); return response ; }). catch ( function ( error ) { console . error ( 'Error:' , error ); // Handle the error appropriately }); } }; }); Note : You shouldn't use the done , fail , or always functions on Promises. These are a jQuery feature and aren't present in the Native Promise implementation.","title":"3. Handling Errors with catch"},{"location":"Moodle/Javascript/phpMoodlePromises/#4-returning-promises-from-functions","text":"If a function is designed to create and handle a promise, make sure it returns that promise. This allows the caller of the function to continue chaining then and catch blocks as needed. define ([ 'core/ajax' ], function ( Ajax ) { return { fetchData : function () { return Ajax . call ([{ methodname : 'yourpluginname_get_data' , args : {} }]); }, processData : function () { return this . fetchData (). then ( function ( response ) { console . log ( 'Data:' , response ); return response ; // Return the data for further chaining }). catch ( function ( error ) { console . error ( 'Error:' , error ); // Handle the error appropriately }); } }; }); In this example: loadUserData : This function creates and returns a promise for loading user data using an AJAX call. displayUserData : This function calls loadUserData , processes the response, and handles any errors using catch .","title":"4. Returning Promises from Functions"},{"location":"Moodle/Javascript/phpMoodlePromises/#best-practices","text":"Always return or throw When writing promises they must: Return another promise, or; Return a synchronous value (or undefined), or; Throw a synchronous error. Chain rather than nest Promises are a construct which help prevent the pyramid of doom and regain linear control flow and error handling. Promises should not be nested. Promises should be chained rather than nested. Avoid mixing callbacks and promises Avoid mixing callbacks and promises. Design code to embrace promise-y patterns for asynchronous code to make maximum use of promises. Additional reading: User talk: Poltawski/Javascript promises . We have a problem with promises .","title":"Best Practices"},{"location":"Moodle/Javascript/phpMoodlePromises/#summary","text":"Promises in Moodle are a powerful way to handle asynchronous operations. By using then for handling successful resolutions, catch for error handling, and ensuring functions return promises when appropriate, you can create maintainable and readable asynchronous code. Always remember to return a value or another promise at the end of a then block to allow for proper chaining and further processing. Avoid using done , fail , or always functions, as they are specific to jQuery and not part of the native Promise implementation.","title":"Summary"},{"location":"Moodle/Plugin/phpMoodlePlugin_booktool/","text":"A booktool plugin adds new tools or actions to be used within the Book activity, which allows for structured content with chapters and subchapters, making it a highly organized resource for learners. Understanding the Book Module's Structure The Book module provides a hierarchical structure of chapters and subchapters, and a booktool plugin interacts with this structure. The main idea of a booktool plugin is to provide additional functionality (like exporting, printing, annotating, etc.) inside the context of a Book activity. The Book module\u2019s core functionality ( /mod/book/ ). The way chapters and subchapters are stored and managed. How navigation between chapters works. Plugin Structure and Location A booktool plugin resides within the /mod/book/tool/ directory. Each plugin gets its own subfolder inside this directory. The basic structure looks like: /mod/book/tool/ /yourbooktool/ version.php lang/ lib.php index.php settings.php (optional) Adding Functionality to the Book (lib.php) The lib.php file is crucial for defining the plugin\u2019s integration points with the Book module. Here, you'll implement callbacks to add buttons, actions, or tools to the Book activity interface. Important functions to implement: booktool_yourtool_extend_navigation() : Adds your tool to the book's navigation block. booktool_yourtool_extend_settings_navigation() : Adds your tool to the settings navigation for a book. Example: function booktool_yourtool_extend_navigation($navigation, $book, $cm, $context) { $url = new moodle_url('/mod/book/tool/yourtool/index.php', array('id' => $cm->id)); $navigation->add(get_string('yourtool', 'booktool_yourtool'), $url, navigation_node::TYPE_SETTING, null, null, new pix_icon('i/gear', '')); } This function will add a link to your booktool inside the Book module\u2019s navigation or settings block. Depending on the tool\u2019s purpose, this could lead to an export function, a print option, or another form of interaction. Interaction with Book Data (index.php) The index.php file is the entry point for your plugin\u2019s functionality. This file contains the logic for interacting with the book's chapters and subchapters, and performs the main functionality of the tool (such as exporting, printing, or providing additional content for each chapter). Key aspects: Use Moodle\u2019s page context and book data structures to interact with the Book content (chapters, subchapters). Always ensure the user has the necessary permissions ( require_login() and require_capability() ). Example index.php : require_once(__DIR__.'/../../../config.php'); require_once($CFG->dirroot.'/mod/book/lib.php'); $id = required_param('id', PARAM_INT); // Course Module ID. $cm = get_coursemodule_from_id('book', $id, 0, false, MUST_EXIST); $context = context_module::instance($cm->id); require_login($cm->course, true, $cm); require_capability('mod/book:view', $context); $PAGE->set_url('/mod/book/tool/yourtool/index.php', array('id' => $id)); $PAGE->set_title(get_string('yourtool', 'booktool_yourtool')); $PAGE->set_heading($COURSE->fullname); // Perform your tool's main function here (e.g., export, print, annotate). Permissions and Capabilities (db/access.php) Permissions define which roles can use your booktool. In the db/access.php file, you can define custom capabilities for your tool. Example access.php : $capabilities = array( 'booktool/yourtool:view' => array( 'riskbitmask' => RISK_PERSONAL, 'captype' => 'read', 'contextlevel' => CONTEXT_MODULE, 'archetypes' => array( 'teacher' => CAP_ALLOW, 'student' => CAP_PREVENT, ), ), ); User Interface and Styling Booktool plugins often provide user-facing tools (buttons, options). Ensure the UI is clean and intuitive by using Moodle\u2019s standard renderers and templates . Where necessary, include custom styles or JS, but try to integrate with the existing theme as much as possible. You can add styles via a styles.css file inside your plugin directory: /mod/book/tool/yourtool/styles.css Conclusion The most important aspects of developing a booktool plugin in Moodle involve understanding the structure of the Book module, integrating your tool seamlessly into its interface, and managing permissions, data handling, and functionality effectively. Properly structuring the plugin, using Moodle\u2019s API functions, ensuring efficient navigation, and maintaining security and performance are crucial for creating a reliable and useful tool within the Book module.","title":"Book Tool"},{"location":"Moodle/Plugin/phpMoodlePlugin_booktool/#understanding-the-book-modules-structure","text":"The Book module provides a hierarchical structure of chapters and subchapters, and a booktool plugin interacts with this structure. The main idea of a booktool plugin is to provide additional functionality (like exporting, printing, annotating, etc.) inside the context of a Book activity. The Book module\u2019s core functionality ( /mod/book/ ). The way chapters and subchapters are stored and managed. How navigation between chapters works.","title":"Understanding the Book Module's Structure"},{"location":"Moodle/Plugin/phpMoodlePlugin_booktool/#plugin-structure-and-location","text":"A booktool plugin resides within the /mod/book/tool/ directory. Each plugin gets its own subfolder inside this directory. The basic structure looks like: /mod/book/tool/ /yourbooktool/ version.php lang/ lib.php index.php settings.php (optional)","title":"Plugin Structure and Location"},{"location":"Moodle/Plugin/phpMoodlePlugin_booktool/#adding-functionality-to-the-book-libphp","text":"The lib.php file is crucial for defining the plugin\u2019s integration points with the Book module. Here, you'll implement callbacks to add buttons, actions, or tools to the Book activity interface. Important functions to implement: booktool_yourtool_extend_navigation() : Adds your tool to the book's navigation block. booktool_yourtool_extend_settings_navigation() : Adds your tool to the settings navigation for a book. Example: function booktool_yourtool_extend_navigation($navigation, $book, $cm, $context) { $url = new moodle_url('/mod/book/tool/yourtool/index.php', array('id' => $cm->id)); $navigation->add(get_string('yourtool', 'booktool_yourtool'), $url, navigation_node::TYPE_SETTING, null, null, new pix_icon('i/gear', '')); } This function will add a link to your booktool inside the Book module\u2019s navigation or settings block. Depending on the tool\u2019s purpose, this could lead to an export function, a print option, or another form of interaction.","title":"Adding Functionality to the Book (lib.php)"},{"location":"Moodle/Plugin/phpMoodlePlugin_booktool/#interaction-with-book-data-indexphp","text":"The index.php file is the entry point for your plugin\u2019s functionality. This file contains the logic for interacting with the book's chapters and subchapters, and performs the main functionality of the tool (such as exporting, printing, or providing additional content for each chapter). Key aspects: Use Moodle\u2019s page context and book data structures to interact with the Book content (chapters, subchapters). Always ensure the user has the necessary permissions ( require_login() and require_capability() ). Example index.php : require_once(__DIR__.'/../../../config.php'); require_once($CFG->dirroot.'/mod/book/lib.php'); $id = required_param('id', PARAM_INT); // Course Module ID. $cm = get_coursemodule_from_id('book', $id, 0, false, MUST_EXIST); $context = context_module::instance($cm->id); require_login($cm->course, true, $cm); require_capability('mod/book:view', $context); $PAGE->set_url('/mod/book/tool/yourtool/index.php', array('id' => $id)); $PAGE->set_title(get_string('yourtool', 'booktool_yourtool')); $PAGE->set_heading($COURSE->fullname); // Perform your tool's main function here (e.g., export, print, annotate).","title":"Interaction with Book Data (index.php)"},{"location":"Moodle/Plugin/phpMoodlePlugin_booktool/#permissions-and-capabilities-dbaccessphp","text":"Permissions define which roles can use your booktool. In the db/access.php file, you can define custom capabilities for your tool. Example access.php : $capabilities = array( 'booktool/yourtool:view' => array( 'riskbitmask' => RISK_PERSONAL, 'captype' => 'read', 'contextlevel' => CONTEXT_MODULE, 'archetypes' => array( 'teacher' => CAP_ALLOW, 'student' => CAP_PREVENT, ), ), );","title":"Permissions and Capabilities (db/access.php)"},{"location":"Moodle/Plugin/phpMoodlePlugin_booktool/#user-interface-and-styling","text":"Booktool plugins often provide user-facing tools (buttons, options). Ensure the UI is clean and intuitive by using Moodle\u2019s standard renderers and templates . Where necessary, include custom styles or JS, but try to integrate with the existing theme as much as possible. You can add styles via a styles.css file inside your plugin directory: /mod/book/tool/yourtool/styles.css","title":"User Interface and Styling"},{"location":"Moodle/Plugin/phpMoodlePlugin_booktool/#conclusion","text":"The most important aspects of developing a booktool plugin in Moodle involve understanding the structure of the Book module, integrating your tool seamlessly into its interface, and managing permissions, data handling, and functionality effectively. Properly structuring the plugin, using Moodle\u2019s API functions, ensuring efficient navigation, and maintaining security and performance are crucial for creating a reliable and useful tool within the Book module.","title":"Conclusion"},{"location":"Moodle/Plugin/phpMoodlePlugin_datafield/","text":"The Database activity included with Moodle includes support for several predefined field types, including text, date, and URL. It is also possible to create new field types. For example, you might like to create: Discipline-specific field types - For example \"Protein PDB code\": users can enter the PDB code for a protein, and then the display 3D viewer for the protein structure, or link out to molecular databases. Institution-specific field types - For example \"library reference number\": Allow users to enter a reference number which can be automatically turned into a direct link for local library services. Module-specific field types - For example \"wiki page\": users see a drop-down list containing the names of pages in your wiki, and can choose which page this particular entry refers to. The mod_data activity can be extended using two sub-plugin types, namely Database field types, used to create custom field data types; and Database presets, a legacy plugintype used to share configurations. File structure Database field sub-plugins are located in the /mod/data/field directory. Each plugin is in a separate subdirectory and consists of a number of mandatory files and any other files the developer is going to use. mod/data/field/number \u251c\u2500\u2500 classes \u2502 \u2514\u2500\u2500 privacy \u2502 \u2514\u2500\u2500 provider.php \u251c\u2500\u2500 field.class.php \u251c\u2500\u2500 lang \u2502 \u2514\u2500\u2500 en \u2502 \u2514\u2500\u2500 datafield_number.php \u251c\u2500\u2500 mod.html \u2514\u2500\u2500 version.php Some of the important files for the database field plugintype are described below. See the common plugin files documentation for details of other files which may be useful in your plugin. Field class Definition of the field type Required File path: /field.class.php The field, its behaviours, and its properties, are defined in a class named data_field_[pluginname] located in field.class.php . This class must extend the data_field_base base class. Class locations The field definition is currently located in the field.class.php file and is not yet autoloaded by Moodle. The base class defines some simple behaviours which you can override in your plugin. The following functions are of particular interest: display_add_field($recordid = 0) - Return some HTML for use when a user is adding/editing a record display_browse_field($recordid, $template) - Return some HTML for displaying a record update_content($recordid, $value, $name = '') - Store the data entered by a user for a record get_sort_sql($fieldname) - Specify SQL for how this field should be sorted get_content_value($value) - Useful if the info stored in the database if different from the info that ends up being presented to the user Field configuration form Form definition for adding and editing the field configuration Required File path: /mod.html The field definition is one of the older parts of Moodle and does not use best practice.","title":"Database Fields"},{"location":"Moodle/Plugin/phpMoodlePlugin_datafield/#file-structure","text":"Database field sub-plugins are located in the /mod/data/field directory. Each plugin is in a separate subdirectory and consists of a number of mandatory files and any other files the developer is going to use. mod/data/field/number \u251c\u2500\u2500 classes \u2502 \u2514\u2500\u2500 privacy \u2502 \u2514\u2500\u2500 provider.php \u251c\u2500\u2500 field.class.php \u251c\u2500\u2500 lang \u2502 \u2514\u2500\u2500 en \u2502 \u2514\u2500\u2500 datafield_number.php \u251c\u2500\u2500 mod.html \u2514\u2500\u2500 version.php Some of the important files for the database field plugintype are described below. See the common plugin files documentation for details of other files which may be useful in your plugin.","title":"File structure"},{"location":"Moodle/Plugin/phpMoodlePlugin_datafield/#field-class","text":"","title":"Field class"},{"location":"Moodle/Plugin/phpMoodlePlugin_datafield/#field-configuration-form","text":"Form definition for adding and editing the field configuration Required File path: /mod.html The field definition is one of the older parts of Moodle and does not use best practice.","title":"Field configuration form"},{"location":"Moodle/Plugin/phpMoodlePlugin_mod/","text":"Creating an activity module plugin in Moodle is a comprehensive process that involves several steps to ensure the plugin is well-integrated, functional, and follows Moodle's coding standards. Activity modules are a fundamental course feature and are usually the primary delivery method for learning content in Moodle. The plugintype of an Activity module is mod, and the frankenstyle name of a plugin is therefore mod_[modname]. All activity module plugins are located in the /mod/ folder of Moodle. Activity modules in Moodle allow you to add new types of activities to a course, such as assignments, quizzes, forums, and more. Each activity module has its own directory and a set of required files and directories. Setting Up the Plugin Directory Structure Activity modules reside in the /mod directory. Each module is in a separate subdirectory and consists of a number of mandatory files and any other files the developer is going to use. First, create a directory for your plugin inside the mod directory of your Moodle installation. For example, if your plugin is called \"survey\": . \u251c\u2500\u2500 backup \u2502 \u251c\u2500\u2500 moodle1 \u2502 \u2502 \u2514\u2500\u2500 lib.php \u2502 \u2514\u2500\u2500 moodle2 \u2502 \u251c\u2500\u2500 backup_folder_activity_task.class.php \u2502 \u251c\u2500\u2500 backup_folder_stepslib.php \u2502 \u251c\u2500\u2500 restore_folder_activity_task.class.php \u2502 \u2514\u2500\u2500 restore_folder_stepslib.php \u251c\u2500\u2500 classes \u2502 \u251c\u2500\u2500 analytics \u2502 \u2502 \u2514\u2500\u2500 indicator \u2502 \u2502 \u251c\u2500\u2500 activity_base.php \u2502 \u2502 \u251c\u2500\u2500 cognitive_depth.php \u2502 \u2502 \u2514\u2500\u2500 social_breadth.php \u2502 \u251c\u2500\u2500 content \u2502 \u2502 \u2514\u2500\u2500 exporter.php \u2502 \u251c\u2500\u2500 event \u2502 \u2502 \u251c\u2500\u2500 all_files_downloaded.php \u2502 \u2502 \u251c\u2500\u2500 course_module_instance_list_viewed.php \u2502 \u2502 \u251c\u2500\u2500 course_module_viewed.php \u2502 \u2502 \u2514\u2500\u2500 folder_updated.php \u2502 \u251c\u2500\u2500 external.php \u2502 \u251c\u2500\u2500 privacy \u2502 \u2502 \u2514\u2500\u2500 provider.php \u2502 \u2514\u2500\u2500 search \u2502 \u2514\u2500\u2500 activity.php \u251c\u2500\u2500 db \u2502 \u251c\u2500\u2500 access.php \u2502 \u251c\u2500\u2500 install.php \u2502 \u251c\u2500\u2500 install.xml \u2502 \u251c\u2500\u2500 log.php \u2502 \u251c\u2500\u2500 services.php \u2502 \u2514\u2500\u2500 upgrade.php \u251c\u2500\u2500 download_folder.php \u251c\u2500\u2500 edit.php \u251c\u2500\u2500 edit_form.php \u251c\u2500\u2500 index.php \u251c\u2500\u2500 lang \u2502 \u2514\u2500\u2500 en \u2502 \u2514\u2500\u2500 folder.php \u251c\u2500\u2500 lib.php \u251c\u2500\u2500 locallib.php \u251c\u2500\u2500 mod_form.php \u251c\u2500\u2500 module.js \u251c\u2500\u2500 phpunit.xml \u251c\u2500\u2500 pix \u2502 \u251c\u2500\u2500 icon.png \u2502 \u2514\u2500\u2500 icon.svg \u251c\u2500\u2500 readme.txt \u251c\u2500\u2500 renderer.php \u251c\u2500\u2500 settings.php \u251c\u2500\u2500 styles.css \u251c\u2500\u2500 tests \u2502 \u251c\u2500\u2500 backup \u2502 \u2502 \u2514\u2500\u2500 restore_date_test.php \u2502 \u251c\u2500\u2500 behat \u2502 \u2502 \u2514\u2500\u2500 folder_activity_completion.feature \u2502 \u251c\u2500\u2500 event \u2502 \u2502 \u2514\u2500\u2500 events_test.php \u2502 \u251c\u2500\u2500 externallib_test.php \u2502 \u251c\u2500\u2500 generator \u2502 \u2502 \u2514\u2500\u2500 lib.php \u2502 \u251c\u2500\u2500 generator_test.php \u2502 \u251c\u2500\u2500 lib_test.php \u2502 \u251c\u2500\u2500 phpunit.xml \u2502 \u2514\u2500\u2500 search \u2502 \u2514\u2500\u2500 search_test.php \u251c\u2500\u2500 version.php \u2514\u2500\u2500 view.php access.php - Capability defaults For activities the following capabilities are required: mod/[modname]:addinstance: Controls whether a user may create a new instance of the activity mod/[modname]:view: Controls whether a user may view an instance of the activity The example below shows the recommended configuration for the addinstance and view capabilities. This configuration will allow: editing teachers and managers to create new instances, but not non-editing teachers. all roles to view the activity. Granting the view capability to archetypes like guest does not allow any user to view all activities. Users are still subject to standard access controls like course enrolment. For further information on what each attribute in that capabilities array means visit NEWMODULE Adding capabilities . // mod/[modname]/db/access.php <?php $capabilities = [ 'mod/[modname]:addinstance' => [ 'riskbitmask' => RISK_XSS , 'captype' => 'write' , 'contextlevel' => CONTEXT_COURSE , 'archetypes' => [ 'editingteacher' => CAP_ALLOW , 'manager' => CAP_ALLOW , ], 'clonepermissionsfrom' => 'moodle/course:manageactivities' , ], 'mod/[modname]:view' => [ 'captype' => 'read' , 'contextlevel' => CONTEXT_MODULE , 'archetypes' => [ 'guest' => CAP_ALLOW , 'student' => CAP_ALLOW , 'teacher' => CAP_ALLOW , 'editingteacher' => CAP_ALLOW , 'manager' => CAP_ALLOW , ], ], ]; lib.php - Library functions The lib.php file is a legacy file which acts as a bridge between Moodle core, and the plugin. In recent plugins it is should only used to define callbacks and related functionality which currently is not supported as an auto-loadable class. For an Activity, you must define the following three functions, which are described below: // mod/[modname]/lib.php function [modname]_add_instance($instancedata, $mform = null): int; function [modname]_update_instance($instancedata, $mform): bool; function [modname]_delete_instance($id): bool; The [modname]_add_instance() function is called when the activity creation form is submitted. This function is only called when adding an activity and should contain any logic required to add the activity. The [modname]_update_instance() function is called when the activity editing form is submitted. The [modname]_delete_instance() function is called when the activity deletion is confirmed. It is responsible for removing all data associated with the instance. The lib.php file is one of the older parts of Moodle and functionality is gradually being migrated to class-based function calls. Activity module support functions Activity modules can implement a global function to provide additional information about the module features. These functions are optional and can be used to provide additional features or to modify the behaviour of the activity module. // mod/[modname]/lib.php function [modname]_supports(string $feature): bool|string|null; The function [modname]_supports is used to check if the activity module supports a particular feature. The function should return true if the feature is supported, false if it is not supported, null if the feature is unknown, or string for the module purpose for some features. Each feature is identified by a constant, which is defined in the lib /moodlelib.php file. Some of the available features are: FEATURE_GROUPS and FEATURE_GROUPINGS: The activity module supports groups and groupings. FEATURE_SHOW_DESCRIPTION: The activity module supports showing the description on the course page. FEATURE_QUICKCREATE: The activity [modname]_add_instance() function is able to create an instance without showing a form using the default settings. It is used by the core_courseformat_create_module webservice to know which activities are compatible. If this feature is supported, the activity module should provide a quickcreatename string in the language file that will be used as the name of the instance created. function [modname]_supports($feature) { return match ($feature) { FEATURE_GROUPS => true, FEATURE_GROUPINGS => true, FEATURE_MOD_INTRO => true, FEATURE_COMPLETION_TRACKS_VIEWS => true, FEATURE_GRADE_HAS_GRADE => true, FEATURE_BACKUP_MOODLE2 => true, FEATURE_SHOW_DESCRIPTION => true, FEATURE_MOD_PURPOSE => MOD_PURPOSE_COLLABORATION, default => null, }; } To have your Activity plugin classified in the right Activity category, you must define the function [modname]_supports and add the FEATURE_MOD_PURPOSE constant: function [modname]_supports(string $feature) { switch ($feature) { [...] case FEATURE_MOD_PURPOSE: return MOD_PURPOSE_XXXXXX; default: return null; } } The available activity purposes for this feature are: Administration (MOD_PURPOSE_ADMINISTRATION) Tools for course administration, such as attendance tracking or appointment scheduling. Assessment (MOD_PURPOSE_ASSESSMENT) Activities that allow the evaluation and measurement of student understanding and performance. Core activities in this category: Assignment, Quiz, Workshop. Collaboration (MOD_PURPOSE_COLLABORATION) Tools for collaborative learning that encourage knowledge sharing, discussions, and teamwork. Core activities in this category: Database, Forum, Glossary, Wiki. Communication (MOD_PURPOSE_COMMUNICATION) Activities that facilitate real-time communication, asynchronous interaction, and feedback collection. Core activities in this category: BigBlueButton, Chat, Choice, Feedback, Survey. Interactive content (MOD_PURPOSE_INTERACTIVECONTENT) Engaging interactive activities that encourage active learner participation. Core activities in this category: H5P, IMS package, Lesson, SCORM package. Resources (MOD_PURPOSE_CONTENT) Activities and tools to organise and display course materials like documents, web links, and multimedia. Core activities in this category: Book, File, Folder, Page, URL, Text and media area. Other (MOD_PURPOSE_OTHER) Other types of activities. Activity Examples Quiz ( mod_quiz ) Allows instructors to create quizzes with various question types, such as multiple choice, true/false, short answer, and more. It supports randomization, time limits, and feedback. Common Use : Assessing student knowledge, conducting exams, and providing practice quizzes. Assignment ( mod_assign ) Enables instructors to collect, review, and provide feedback on student submissions. It supports file uploads, online text, and various grading methods. Common Use : Collecting essays, projects, and other student assignments. Forum ( mod_forum ) Facilitates asynchronous discussions among students and instructors. It supports various types of forums, including single simple discussions, question-and-answer forums, and standard forums. Common Use : Promoting discussions, Q&A sessions, and collaborative learning. Workshop ( mod_workshop ) A peer assessment activity that allows students to submit their work and then evaluate each other's submissions according to a rubric provided by the instructor. Common Use : Peer reviews, collaborative projects, and enhancing critical thinking skills. Choice ( mod_choice ) Allows instructors to ask a single question and offer multiple responses, which students can select. Results can be published for students to see. Common Use : Quick polls, attendance tracking, and decision-making processes. Feedback ( mod_feedback ) Enables instructors to create custom surveys for collecting feedback from students. It supports multiple question types and anonymous submissions. Common Use : Course evaluations, gathering student opinions, and conducting research surveys. SCORM ( mod_scorm ) Supports the integration of SCORM packages, which are standardized e-learning content created in various authoring tools. It tracks user progress and scores. Common Use : Delivering interactive e-learning modules and training materials. Wiki ( mod_wiki ) Provides a collaborative space where students can create and edit a collection of web pages. It supports group work and version tracking. Common Use : Collaborative projects, group documentation, and knowledge sharing. Glossary ( mod_glossary ) Allows instructors and students to create and maintain a list of definitions, like a dictionary. Entries can be searched and categorized. Common Use : Building a shared repository of key terms and concepts for a course. H5P Interactive Content ( mod_h5pactivity ) Integrates H5P content types into Moodle, enabling the creation and sharing of interactive HTML5 content such as quizzes, presentations, interactive videos, and more. Common Use : Enhancing course content with interactive and multimedia elements to engage students.","title":"Activity"},{"location":"Moodle/Plugin/phpMoodlePlugin_mod/#setting-up-the-plugin-directory-structure","text":"Activity modules reside in the /mod directory. Each module is in a separate subdirectory and consists of a number of mandatory files and any other files the developer is going to use. First, create a directory for your plugin inside the mod directory of your Moodle installation. For example, if your plugin is called \"survey\": . \u251c\u2500\u2500 backup \u2502 \u251c\u2500\u2500 moodle1 \u2502 \u2502 \u2514\u2500\u2500 lib.php \u2502 \u2514\u2500\u2500 moodle2 \u2502 \u251c\u2500\u2500 backup_folder_activity_task.class.php \u2502 \u251c\u2500\u2500 backup_folder_stepslib.php \u2502 \u251c\u2500\u2500 restore_folder_activity_task.class.php \u2502 \u2514\u2500\u2500 restore_folder_stepslib.php \u251c\u2500\u2500 classes \u2502 \u251c\u2500\u2500 analytics \u2502 \u2502 \u2514\u2500\u2500 indicator \u2502 \u2502 \u251c\u2500\u2500 activity_base.php \u2502 \u2502 \u251c\u2500\u2500 cognitive_depth.php \u2502 \u2502 \u2514\u2500\u2500 social_breadth.php \u2502 \u251c\u2500\u2500 content \u2502 \u2502 \u2514\u2500\u2500 exporter.php \u2502 \u251c\u2500\u2500 event \u2502 \u2502 \u251c\u2500\u2500 all_files_downloaded.php \u2502 \u2502 \u251c\u2500\u2500 course_module_instance_list_viewed.php \u2502 \u2502 \u251c\u2500\u2500 course_module_viewed.php \u2502 \u2502 \u2514\u2500\u2500 folder_updated.php \u2502 \u251c\u2500\u2500 external.php \u2502 \u251c\u2500\u2500 privacy \u2502 \u2502 \u2514\u2500\u2500 provider.php \u2502 \u2514\u2500\u2500 search \u2502 \u2514\u2500\u2500 activity.php \u251c\u2500\u2500 db \u2502 \u251c\u2500\u2500 access.php \u2502 \u251c\u2500\u2500 install.php \u2502 \u251c\u2500\u2500 install.xml \u2502 \u251c\u2500\u2500 log.php \u2502 \u251c\u2500\u2500 services.php \u2502 \u2514\u2500\u2500 upgrade.php \u251c\u2500\u2500 download_folder.php \u251c\u2500\u2500 edit.php \u251c\u2500\u2500 edit_form.php \u251c\u2500\u2500 index.php \u251c\u2500\u2500 lang \u2502 \u2514\u2500\u2500 en \u2502 \u2514\u2500\u2500 folder.php \u251c\u2500\u2500 lib.php \u251c\u2500\u2500 locallib.php \u251c\u2500\u2500 mod_form.php \u251c\u2500\u2500 module.js \u251c\u2500\u2500 phpunit.xml \u251c\u2500\u2500 pix \u2502 \u251c\u2500\u2500 icon.png \u2502 \u2514\u2500\u2500 icon.svg \u251c\u2500\u2500 readme.txt \u251c\u2500\u2500 renderer.php \u251c\u2500\u2500 settings.php \u251c\u2500\u2500 styles.css \u251c\u2500\u2500 tests \u2502 \u251c\u2500\u2500 backup \u2502 \u2502 \u2514\u2500\u2500 restore_date_test.php \u2502 \u251c\u2500\u2500 behat \u2502 \u2502 \u2514\u2500\u2500 folder_activity_completion.feature \u2502 \u251c\u2500\u2500 event \u2502 \u2502 \u2514\u2500\u2500 events_test.php \u2502 \u251c\u2500\u2500 externallib_test.php \u2502 \u251c\u2500\u2500 generator \u2502 \u2502 \u2514\u2500\u2500 lib.php \u2502 \u251c\u2500\u2500 generator_test.php \u2502 \u251c\u2500\u2500 lib_test.php \u2502 \u251c\u2500\u2500 phpunit.xml \u2502 \u2514\u2500\u2500 search \u2502 \u2514\u2500\u2500 search_test.php \u251c\u2500\u2500 version.php \u2514\u2500\u2500 view.php","title":"Setting Up the Plugin Directory Structure"},{"location":"Moodle/Plugin/phpMoodlePlugin_mod/#accessphp-capability-defaults","text":"For activities the following capabilities are required: mod/[modname]:addinstance: Controls whether a user may create a new instance of the activity mod/[modname]:view: Controls whether a user may view an instance of the activity The example below shows the recommended configuration for the addinstance and view capabilities. This configuration will allow: editing teachers and managers to create new instances, but not non-editing teachers. all roles to view the activity. Granting the view capability to archetypes like guest does not allow any user to view all activities. Users are still subject to standard access controls like course enrolment. For further information on what each attribute in that capabilities array means visit NEWMODULE Adding capabilities . // mod/[modname]/db/access.php <?php $capabilities = [ 'mod/[modname]:addinstance' => [ 'riskbitmask' => RISK_XSS , 'captype' => 'write' , 'contextlevel' => CONTEXT_COURSE , 'archetypes' => [ 'editingteacher' => CAP_ALLOW , 'manager' => CAP_ALLOW , ], 'clonepermissionsfrom' => 'moodle/course:manageactivities' , ], 'mod/[modname]:view' => [ 'captype' => 'read' , 'contextlevel' => CONTEXT_MODULE , 'archetypes' => [ 'guest' => CAP_ALLOW , 'student' => CAP_ALLOW , 'teacher' => CAP_ALLOW , 'editingteacher' => CAP_ALLOW , 'manager' => CAP_ALLOW , ], ], ];","title":"access.php - Capability defaults"},{"location":"Moodle/Plugin/phpMoodlePlugin_mod/#libphp-library-functions","text":"The lib.php file is a legacy file which acts as a bridge between Moodle core, and the plugin. In recent plugins it is should only used to define callbacks and related functionality which currently is not supported as an auto-loadable class. For an Activity, you must define the following three functions, which are described below: // mod/[modname]/lib.php function [modname]_add_instance($instancedata, $mform = null): int; function [modname]_update_instance($instancedata, $mform): bool; function [modname]_delete_instance($id): bool; The [modname]_add_instance() function is called when the activity creation form is submitted. This function is only called when adding an activity and should contain any logic required to add the activity. The [modname]_update_instance() function is called when the activity editing form is submitted. The [modname]_delete_instance() function is called when the activity deletion is confirmed. It is responsible for removing all data associated with the instance. The lib.php file is one of the older parts of Moodle and functionality is gradually being migrated to class-based function calls.","title":"lib.php - Library functions"},{"location":"Moodle/Plugin/phpMoodlePlugin_mod/#activity-module-support-functions","text":"Activity modules can implement a global function to provide additional information about the module features. These functions are optional and can be used to provide additional features or to modify the behaviour of the activity module. // mod/[modname]/lib.php function [modname]_supports(string $feature): bool|string|null; The function [modname]_supports is used to check if the activity module supports a particular feature. The function should return true if the feature is supported, false if it is not supported, null if the feature is unknown, or string for the module purpose for some features. Each feature is identified by a constant, which is defined in the lib /moodlelib.php file. Some of the available features are: FEATURE_GROUPS and FEATURE_GROUPINGS: The activity module supports groups and groupings. FEATURE_SHOW_DESCRIPTION: The activity module supports showing the description on the course page. FEATURE_QUICKCREATE: The activity [modname]_add_instance() function is able to create an instance without showing a form using the default settings. It is used by the core_courseformat_create_module webservice to know which activities are compatible. If this feature is supported, the activity module should provide a quickcreatename string in the language file that will be used as the name of the instance created. function [modname]_supports($feature) { return match ($feature) { FEATURE_GROUPS => true, FEATURE_GROUPINGS => true, FEATURE_MOD_INTRO => true, FEATURE_COMPLETION_TRACKS_VIEWS => true, FEATURE_GRADE_HAS_GRADE => true, FEATURE_BACKUP_MOODLE2 => true, FEATURE_SHOW_DESCRIPTION => true, FEATURE_MOD_PURPOSE => MOD_PURPOSE_COLLABORATION, default => null, }; } To have your Activity plugin classified in the right Activity category, you must define the function [modname]_supports and add the FEATURE_MOD_PURPOSE constant: function [modname]_supports(string $feature) { switch ($feature) { [...] case FEATURE_MOD_PURPOSE: return MOD_PURPOSE_XXXXXX; default: return null; } } The available activity purposes for this feature are: Administration (MOD_PURPOSE_ADMINISTRATION) Tools for course administration, such as attendance tracking or appointment scheduling. Assessment (MOD_PURPOSE_ASSESSMENT) Activities that allow the evaluation and measurement of student understanding and performance. Core activities in this category: Assignment, Quiz, Workshop. Collaboration (MOD_PURPOSE_COLLABORATION) Tools for collaborative learning that encourage knowledge sharing, discussions, and teamwork. Core activities in this category: Database, Forum, Glossary, Wiki. Communication (MOD_PURPOSE_COMMUNICATION) Activities that facilitate real-time communication, asynchronous interaction, and feedback collection. Core activities in this category: BigBlueButton, Chat, Choice, Feedback, Survey. Interactive content (MOD_PURPOSE_INTERACTIVECONTENT) Engaging interactive activities that encourage active learner participation. Core activities in this category: H5P, IMS package, Lesson, SCORM package. Resources (MOD_PURPOSE_CONTENT) Activities and tools to organise and display course materials like documents, web links, and multimedia. Core activities in this category: Book, File, Folder, Page, URL, Text and media area. Other (MOD_PURPOSE_OTHER) Other types of activities.","title":"Activity module support functions"},{"location":"Moodle/Plugin/phpMoodlePlugin_mod/#activity-examples","text":"Quiz ( mod_quiz ) Allows instructors to create quizzes with various question types, such as multiple choice, true/false, short answer, and more. It supports randomization, time limits, and feedback. Common Use : Assessing student knowledge, conducting exams, and providing practice quizzes. Assignment ( mod_assign ) Enables instructors to collect, review, and provide feedback on student submissions. It supports file uploads, online text, and various grading methods. Common Use : Collecting essays, projects, and other student assignments. Forum ( mod_forum ) Facilitates asynchronous discussions among students and instructors. It supports various types of forums, including single simple discussions, question-and-answer forums, and standard forums. Common Use : Promoting discussions, Q&A sessions, and collaborative learning. Workshop ( mod_workshop ) A peer assessment activity that allows students to submit their work and then evaluate each other's submissions according to a rubric provided by the instructor. Common Use : Peer reviews, collaborative projects, and enhancing critical thinking skills. Choice ( mod_choice ) Allows instructors to ask a single question and offer multiple responses, which students can select. Results can be published for students to see. Common Use : Quick polls, attendance tracking, and decision-making processes. Feedback ( mod_feedback ) Enables instructors to create custom surveys for collecting feedback from students. It supports multiple question types and anonymous submissions. Common Use : Course evaluations, gathering student opinions, and conducting research surveys. SCORM ( mod_scorm ) Supports the integration of SCORM packages, which are standardized e-learning content created in various authoring tools. It tracks user progress and scores. Common Use : Delivering interactive e-learning modules and training materials. Wiki ( mod_wiki ) Provides a collaborative space where students can create and edit a collection of web pages. It supports group work and version tracking. Common Use : Collaborative projects, group documentation, and knowledge sharing. Glossary ( mod_glossary ) Allows instructors and students to create and maintain a list of definitions, like a dictionary. Entries can be searched and categorized. Common Use : Building a shared repository of key terms and concepts for a course. H5P Interactive Content ( mod_h5pactivity ) Integrates H5P content types into Moodle, enabling the creation and sharing of interactive HTML5 content such as quizzes, presentations, interactive videos, and more. Common Use : Enhancing course content with interactive and multimedia elements to engage students.","title":"Activity Examples"},{"location":"Moodle/Plugin/phpMoodlePlugin_qbank/","text":"When developing a Qbank plugin in Moodle, the most important aspect is managing how the question bank (the repository of quiz questions) is enhanced or extended. This type of plugin allows developers to customize how questions are created, viewed, stored, searched, categorized, or manipulated within Moodle's question bank system. Key Aspects of Developing a Qbank Plugin Plugin Structure and Location A Qbank plugin extends or modifies the behavior of the question bank. The plugin is located in the /question/bank/ directory. When you create a new Qbank plugin, you place it under the following structure: /question/bank/yourpluginname/ The plugin structure typically includes the following essential files: - classes/local/yourpluginname.php : Core functionality, often defining classes or extending base classes. - lang/en/qbank_yourpluginname.php : Language strings. - db/services.php : Defining any services or APIs. - version.php : Plugin version and metadata. Modifying Question Bank Functionality Qbank plugins are used to extend or customize how users interact with the question bank. You might add new tabs, filtering options, sorting functionality, bulk actions, or even custom question types. Core classes : Extend the base question bank classes, such as question_bank_view or question_bank_search to customize how questions are viewed, searched, or categorized. For example, if you want to add a new feature to filter questions by difficulty level: - You would extend question_bank_search_condition to create a custom filtering mechanism. Modifying the User Interface (UI) The user interface is a critical element of Qbank plugins, as the plugin should provide an intuitive way for users to interact with the question bank. This involves: Custom tabs : You may want to add additional tabs or menus in the question bank interface to allow access to new features. Custom forms : Adding or modifying forms (e.g., adding new fields for question metadata). JavaScript enhancements : Use JavaScript to add dynamic behavior to the UI, like loading search results without refreshing the page. Example of adding a new tab: class myplugin_question_bank_view extends question_bank_view { public function get_tabs() { $tabs = parent::get_tabs(); // Add your new tab here. $tabs[] = new my_custom_tab(); return $tabs; } } Handling Question Metadata Depending on your plugin's purpose, you might need to handle additional question metadata . For instance, if you are adding features like question tagging, categorization by difficulty, or custom fields, you'll need to manage this additional metadata in a way that integrates smoothly with Moodle's core data structures. This involves: - Modifying the question creation/editing forms. - Ensuring that this metadata is stored in Moodle\u2019s database. - Making sure your metadata is displayed and used correctly in question searches and sorting. Database Integration Qbank plugins often require modifications to Moodle\u2019s database to store custom data related to questions. You\u2019ll need to carefully define the necessary database tables in db/install.xml to handle any new data fields, such as tags, difficulty levels, or question statistics. Example for adding a new database table: <table name= \"qbank_difficulty\" > <field name= \"id\" type= \"int\" length= \"10\" unsigned= \"true\" notnull= \"true\" sequence= \"true\" /> <field name= \"questionid\" type= \"int\" length= \"10\" unsigned= \"true\" notnull= \"true\" /> <field name= \"difficulty\" type= \"int\" length= \"10\" unsigned= \"true\" notnull= \"true\" /> <key name= \"primary\" primary= \"true\" fields= \"id\" /> </table> Permission and Capability Handling One of the key aspects when extending the question bank is managing permissions and capabilities. You might want certain actions to be limited to specific roles or users. You\u2019ll need to define these capabilities in db/access.php , ensuring that only authorized users can perform certain actions (e.g., viewing certain questions, performing bulk actions). Example: $capabilities = array( 'qbank/myplugin:view' => array( 'captype' => 'read', 'contextlevel' => CONTEXT_COURSE, 'archetypes' => array( 'teacher' => CAP_ALLOW, 'editingteacher' => CAP_ALLOW, ), ), ); Custom Bulk Actions One of the strengths of the Qbank plugin system is the ability to introduce new bulk actions . You can allow users to perform actions on multiple questions at once, such as bulk moving questions, tagging, or even exporting. Extend the question_bank_bulk_action class to define custom bulk actions. Ensure that the bulk action integrates with the existing question bank interface and respects the permissions of users. Performance Considerations The question bank can contain thousands of questions, so performance is a key concern. When developing a Qbank plugin, ensure that your code efficiently handles large datasets and doesn\u2019t degrade Moodle's performance. Implement efficient database queries . Avoid unnecessary page loads by utilizing AJAX for actions like search or filtering. Cache common queries or data when possible to minimize database load. Testing Testing your plugin is crucial to ensure that it works across different question types, courses, and contexts. Consider writing unit tests and Behat tests to verify that the plugin behaves as expected. Ensure that the plugin handles edge cases, such as missing data or incorrect user input. Test that your plugin integrates smoothly with Moodle\u2019s backup/restore system and handles questions correctly when restored. Conclusion The most important aspect of developing a Qbank plugin in Moodle is customizing how questions are displayed, searched, or managed within the question bank, while maintaining performance and ensuring seamless user interaction. By extending core classes, handling custom metadata, ensuring proper permissions, and optimizing for large datasets, you can create a powerful plugin that enhances Moodle\u2019s question management system.","title":"Question Bank"},{"location":"Moodle/Plugin/phpMoodlePlugin_qbank/#key-aspects-of-developing-a-qbank-plugin","text":"Plugin Structure and Location A Qbank plugin extends or modifies the behavior of the question bank. The plugin is located in the /question/bank/ directory. When you create a new Qbank plugin, you place it under the following structure: /question/bank/yourpluginname/ The plugin structure typically includes the following essential files: - classes/local/yourpluginname.php : Core functionality, often defining classes or extending base classes. - lang/en/qbank_yourpluginname.php : Language strings. - db/services.php : Defining any services or APIs. - version.php : Plugin version and metadata. Modifying Question Bank Functionality Qbank plugins are used to extend or customize how users interact with the question bank. You might add new tabs, filtering options, sorting functionality, bulk actions, or even custom question types. Core classes : Extend the base question bank classes, such as question_bank_view or question_bank_search to customize how questions are viewed, searched, or categorized. For example, if you want to add a new feature to filter questions by difficulty level: - You would extend question_bank_search_condition to create a custom filtering mechanism. Modifying the User Interface (UI) The user interface is a critical element of Qbank plugins, as the plugin should provide an intuitive way for users to interact with the question bank. This involves: Custom tabs : You may want to add additional tabs or menus in the question bank interface to allow access to new features. Custom forms : Adding or modifying forms (e.g., adding new fields for question metadata). JavaScript enhancements : Use JavaScript to add dynamic behavior to the UI, like loading search results without refreshing the page. Example of adding a new tab: class myplugin_question_bank_view extends question_bank_view { public function get_tabs() { $tabs = parent::get_tabs(); // Add your new tab here. $tabs[] = new my_custom_tab(); return $tabs; } } Handling Question Metadata Depending on your plugin's purpose, you might need to handle additional question metadata . For instance, if you are adding features like question tagging, categorization by difficulty, or custom fields, you'll need to manage this additional metadata in a way that integrates smoothly with Moodle's core data structures. This involves: - Modifying the question creation/editing forms. - Ensuring that this metadata is stored in Moodle\u2019s database. - Making sure your metadata is displayed and used correctly in question searches and sorting. Database Integration Qbank plugins often require modifications to Moodle\u2019s database to store custom data related to questions. You\u2019ll need to carefully define the necessary database tables in db/install.xml to handle any new data fields, such as tags, difficulty levels, or question statistics. Example for adding a new database table: <table name= \"qbank_difficulty\" > <field name= \"id\" type= \"int\" length= \"10\" unsigned= \"true\" notnull= \"true\" sequence= \"true\" /> <field name= \"questionid\" type= \"int\" length= \"10\" unsigned= \"true\" notnull= \"true\" /> <field name= \"difficulty\" type= \"int\" length= \"10\" unsigned= \"true\" notnull= \"true\" /> <key name= \"primary\" primary= \"true\" fields= \"id\" /> </table> Permission and Capability Handling One of the key aspects when extending the question bank is managing permissions and capabilities. You might want certain actions to be limited to specific roles or users. You\u2019ll need to define these capabilities in db/access.php , ensuring that only authorized users can perform certain actions (e.g., viewing certain questions, performing bulk actions). Example: $capabilities = array( 'qbank/myplugin:view' => array( 'captype' => 'read', 'contextlevel' => CONTEXT_COURSE, 'archetypes' => array( 'teacher' => CAP_ALLOW, 'editingteacher' => CAP_ALLOW, ), ), ); Custom Bulk Actions One of the strengths of the Qbank plugin system is the ability to introduce new bulk actions . You can allow users to perform actions on multiple questions at once, such as bulk moving questions, tagging, or even exporting. Extend the question_bank_bulk_action class to define custom bulk actions. Ensure that the bulk action integrates with the existing question bank interface and respects the permissions of users. Performance Considerations The question bank can contain thousands of questions, so performance is a key concern. When developing a Qbank plugin, ensure that your code efficiently handles large datasets and doesn\u2019t degrade Moodle's performance. Implement efficient database queries . Avoid unnecessary page loads by utilizing AJAX for actions like search or filtering. Cache common queries or data when possible to minimize database load. Testing Testing your plugin is crucial to ensure that it works across different question types, courses, and contexts. Consider writing unit tests and Behat tests to verify that the plugin behaves as expected. Ensure that the plugin handles edge cases, such as missing data or incorrect user input. Test that your plugin integrates smoothly with Moodle\u2019s backup/restore system and handles questions correctly when restored.","title":"Key Aspects of Developing a Qbank Plugin"},{"location":"Moodle/Plugin/phpMoodlePlugin_qbank/#conclusion","text":"The most important aspect of developing a Qbank plugin in Moodle is customizing how questions are displayed, searched, or managed within the question bank, while maintaining performance and ensuring seamless user interaction. By extending core classes, handling custom metadata, ensuring proper permissions, and optimizing for large datasets, you can create a powerful plugin that enhances Moodle\u2019s question management system.","title":"Conclusion"},{"location":"Moodle/Plugin/phpMoodlePlugin_qbehavior/","text":"When developing a Qbehavior plugin in Moodle, the most important aspect is managing how questions behave during attempts in a quiz . A question behavior plugin controls how a user interacts with a question, how responses are processed, and how feedback is provided. It determines the user experience during quizzes, such as whether users can retry incorrect answers, how immediate feedback is shown, and how marks are adjusted based on responses. Key Aspects of Developing a Qbehavior Plugin Plugin Structure and Location A Qbehavior plugin is located in the /question/behaviour/ directory. When you create a new plugin (e.g., mybehavior ), it will be structured like this: /question/behaviour/mybehavior/ Essential files include: behaviour.php : This is the core file that defines how the question behaves. lang/en/qbehaviour_mybehavior.php : This file contains language strings for the plugin. version.php : Metadata about the plugin's version and Moodle compatibility. behaviour.php : Core Logic of the Plugin The heart of a Qbehavior plugin is the behaviour.php file. This file extends the base class question_behaviour and implements specific methods that define the behavior of the question during a quiz attempt. Response processing : Determines how student responses are handled (e.g., whether multiple attempts are allowed, how answers are graded). Feedback : Manages how feedback is provided to the user (immediate, deferred, or based on multiple tries). Question state transitions : Controls how a question moves between states (e.g., unanswered, partially answered, correct, incorrect). Example: class qbehaviour_mybehavior extends question_behaviour { public function process_action($submitteddata, $response) { // Logic for handling the user's submission and moving to the next state. } public function adjust_fraction($fraction) { // Logic for adjusting the score based on the user's attempts or responses. } } Key Methods to Implement When developing a Qbehavior plugin, there are several critical methods you need to implement to define how the behavior works. The most important ones include: process_action($submitteddata, $response) : Defines how the system processes the student's answer submission and evaluates the state. is_complete_response($response) : Determines whether the user's response is considered complete, which is important for handling submissions. adjust_fraction($fraction) : Adjusts the score or grade based on the number of attempts or quality of the response. is_graded() : Specifies whether the question is graded immediately or deferred until the end of the quiz. These methods collectively control how the question transitions between states (e.g., whether the user can try again after an incorrect answer or receive partial marks). States and Transitions A critical part of developing a Qbehavior plugin is managing the question states and state transitions . Each question can go through various states, such as todo , complete , graded , and invalid . The behavior plugin is responsible for handling these transitions based on user interaction. States like question_state_todo , question_state_complete , question_state_graded , etc., are important for controlling what happens at each stage of the quiz attempt. For example, in adaptive behavior, a student may be allowed to submit multiple attempts at the same question, while in deferred feedback, they submit answers only once. Example of handling state transition: public function process_action($submitteddata, $response) { if ($this->is_correct_response($response)) { return question_state::graded_state_for_fraction(1); } else { return question_state::todo(); } } User Interaction and Feedback A significant focus of a Qbehavior plugin is how feedback is provided to users during the quiz. Immediate Feedback : Some behaviors provide feedback right after the user submits their answer, showing whether they were correct or incorrect (e.g., immediate feedback behavior). Deferred Feedback : Feedback is provided only after the quiz is completed (e.g., deferred feedback behavior). Partially Correct : Some behaviors allow partial marks and provide feedback after multiple attempts (e.g., interactive behavior). Example: public function get_feedback($response) { if ($this->is_correct_response($response)) { return new question_feedback('Correct!', 1); } else { return new question_feedback('Try again!', 0); } } Grading and Fraction Adjustment Another important part of developing a Qbehavior plugin is how marks (fractions) are assigned based on user responses. You might want to adjust the score depending on how many attempts a student made or how close their response is to being correct. In some behaviors, full marks are awarded for the correct answer on the first try, and partial marks for subsequent attempts (adaptive behavior). In others, the score may remain the same regardless of the number of attempts (deferred feedback). Example: public function adjust_fraction($fraction) { // Decrease the fraction for each additional attempt. $attempts = $this->get_num_attempts(); return max(0, $fraction - ($attempts * 0.1)); } Handling User Actions and Validation The Qbehavior plugin defines how user actions like submitting an answer or trying again are processed. Validation of responses : Your plugin must validate the user's submission to ensure it's a valid response for the question type. Partial or multiple attempts : Depending on the behavior, the user may be allowed to attempt the question multiple times. Example: public function process_action($submitteddata, $response) { if ($this->is_valid_response($submitteddata)) { // Save the user's response and transition to the appropriate state. } else { return question_state::invalid(); } } Performance Considerations Performance is important, especially when many students are taking a quiz simultaneously. Qbehavior plugins should be optimized for efficiency: Minimize database queries during state transitions. Use caching where necessary. Avoid unnecessarily loading large amounts of data. Testing and Compatibility Testing is critical to ensure that the Qbehavior plugin works correctly across different question types and quiz scenarios. Unit tests : Write unit tests to cover the various question behaviors, especially for edge cases like invalid submissions, retries, and multiple attempts. Compatibility : Ensure that your plugin is compatible with various question types (e.g., multiple choice, short answer) and integrates smoothly with Moodle\u2019s grading and feedback systems. Example of Developing a Qbehavior Plugin: Adaptive Mode Suppose you are developing a custom adaptive behavior that allows students to submit multiple attempts for a question, but with diminishing marks for each incorrect attempt. Core Logic ( behaviour.php ) The process_action() method checks if the student's response is correct or incorrect. If correct, the question is marked as complete and fully graded. If incorrect, the user can retry, but with a reduced mark (e.g., 10% less for each wrong attempt). Example: class qbehaviour_adaptive_custom extends question_behaviour { public function process_action($submitteddata, $response) { if ($this->is_correct_response($response)) { return question_state::graded_state_for_fraction(1); } else { return question_state::todo(); } } public function adjust_fraction($fraction) { $attempts = $this->get_num_attempts(); return max(0, $fraction - ($attempts * 0.1)); } } User Feedback The user receives feedback after each attempt, with immediate feedback on whether the response was correct or incorrect. public function get_feedback($response) { if ($this->is_correct_response($response)) { return new question_feedback('Correct! Full marks.', 1); } else { return new question_feedback('Incorrect! Try again.', 0); } } Conclusion The most important aspect of developing a Qbehavior plugin in Moodle is defining how questions behave during quiz attempts. This involves managing question state transitions, processing user responses, providing appropriate feedback, and handling grading or score adjustments. By extending the core behavior classes, customizing the user interaction flow, and ensuring optimal performance, you can create a Qbehavior plugin that enhances the quiz-taking experience in Moodle.","title":"Question Behavior"},{"location":"Moodle/Plugin/phpMoodlePlugin_qbehavior/#key-aspects-of-developing-a-qbehavior-plugin","text":"Plugin Structure and Location A Qbehavior plugin is located in the /question/behaviour/ directory. When you create a new plugin (e.g., mybehavior ), it will be structured like this: /question/behaviour/mybehavior/ Essential files include: behaviour.php : This is the core file that defines how the question behaves. lang/en/qbehaviour_mybehavior.php : This file contains language strings for the plugin. version.php : Metadata about the plugin's version and Moodle compatibility. behaviour.php : Core Logic of the Plugin The heart of a Qbehavior plugin is the behaviour.php file. This file extends the base class question_behaviour and implements specific methods that define the behavior of the question during a quiz attempt. Response processing : Determines how student responses are handled (e.g., whether multiple attempts are allowed, how answers are graded). Feedback : Manages how feedback is provided to the user (immediate, deferred, or based on multiple tries). Question state transitions : Controls how a question moves between states (e.g., unanswered, partially answered, correct, incorrect). Example: class qbehaviour_mybehavior extends question_behaviour { public function process_action($submitteddata, $response) { // Logic for handling the user's submission and moving to the next state. } public function adjust_fraction($fraction) { // Logic for adjusting the score based on the user's attempts or responses. } } Key Methods to Implement When developing a Qbehavior plugin, there are several critical methods you need to implement to define how the behavior works. The most important ones include: process_action($submitteddata, $response) : Defines how the system processes the student's answer submission and evaluates the state. is_complete_response($response) : Determines whether the user's response is considered complete, which is important for handling submissions. adjust_fraction($fraction) : Adjusts the score or grade based on the number of attempts or quality of the response. is_graded() : Specifies whether the question is graded immediately or deferred until the end of the quiz. These methods collectively control how the question transitions between states (e.g., whether the user can try again after an incorrect answer or receive partial marks). States and Transitions A critical part of developing a Qbehavior plugin is managing the question states and state transitions . Each question can go through various states, such as todo , complete , graded , and invalid . The behavior plugin is responsible for handling these transitions based on user interaction. States like question_state_todo , question_state_complete , question_state_graded , etc., are important for controlling what happens at each stage of the quiz attempt. For example, in adaptive behavior, a student may be allowed to submit multiple attempts at the same question, while in deferred feedback, they submit answers only once. Example of handling state transition: public function process_action($submitteddata, $response) { if ($this->is_correct_response($response)) { return question_state::graded_state_for_fraction(1); } else { return question_state::todo(); } } User Interaction and Feedback A significant focus of a Qbehavior plugin is how feedback is provided to users during the quiz. Immediate Feedback : Some behaviors provide feedback right after the user submits their answer, showing whether they were correct or incorrect (e.g., immediate feedback behavior). Deferred Feedback : Feedback is provided only after the quiz is completed (e.g., deferred feedback behavior). Partially Correct : Some behaviors allow partial marks and provide feedback after multiple attempts (e.g., interactive behavior). Example: public function get_feedback($response) { if ($this->is_correct_response($response)) { return new question_feedback('Correct!', 1); } else { return new question_feedback('Try again!', 0); } } Grading and Fraction Adjustment Another important part of developing a Qbehavior plugin is how marks (fractions) are assigned based on user responses. You might want to adjust the score depending on how many attempts a student made or how close their response is to being correct. In some behaviors, full marks are awarded for the correct answer on the first try, and partial marks for subsequent attempts (adaptive behavior). In others, the score may remain the same regardless of the number of attempts (deferred feedback). Example: public function adjust_fraction($fraction) { // Decrease the fraction for each additional attempt. $attempts = $this->get_num_attempts(); return max(0, $fraction - ($attempts * 0.1)); } Handling User Actions and Validation The Qbehavior plugin defines how user actions like submitting an answer or trying again are processed. Validation of responses : Your plugin must validate the user's submission to ensure it's a valid response for the question type. Partial or multiple attempts : Depending on the behavior, the user may be allowed to attempt the question multiple times. Example: public function process_action($submitteddata, $response) { if ($this->is_valid_response($submitteddata)) { // Save the user's response and transition to the appropriate state. } else { return question_state::invalid(); } } Performance Considerations Performance is important, especially when many students are taking a quiz simultaneously. Qbehavior plugins should be optimized for efficiency: Minimize database queries during state transitions. Use caching where necessary. Avoid unnecessarily loading large amounts of data. Testing and Compatibility Testing is critical to ensure that the Qbehavior plugin works correctly across different question types and quiz scenarios. Unit tests : Write unit tests to cover the various question behaviors, especially for edge cases like invalid submissions, retries, and multiple attempts. Compatibility : Ensure that your plugin is compatible with various question types (e.g., multiple choice, short answer) and integrates smoothly with Moodle\u2019s grading and feedback systems.","title":"Key Aspects of Developing a Qbehavior Plugin"},{"location":"Moodle/Plugin/phpMoodlePlugin_qbehavior/#example-of-developing-a-qbehavior-plugin-adaptive-mode","text":"Suppose you are developing a custom adaptive behavior that allows students to submit multiple attempts for a question, but with diminishing marks for each incorrect attempt. Core Logic ( behaviour.php ) The process_action() method checks if the student's response is correct or incorrect. If correct, the question is marked as complete and fully graded. If incorrect, the user can retry, but with a reduced mark (e.g., 10% less for each wrong attempt). Example: class qbehaviour_adaptive_custom extends question_behaviour { public function process_action($submitteddata, $response) { if ($this->is_correct_response($response)) { return question_state::graded_state_for_fraction(1); } else { return question_state::todo(); } } public function adjust_fraction($fraction) { $attempts = $this->get_num_attempts(); return max(0, $fraction - ($attempts * 0.1)); } } User Feedback The user receives feedback after each attempt, with immediate feedback on whether the response was correct or incorrect. public function get_feedback($response) { if ($this->is_correct_response($response)) { return new question_feedback('Correct! Full marks.', 1); } else { return new question_feedback('Incorrect! Try again.', 0); } }","title":"Example of Developing a Qbehavior Plugin: Adaptive Mode"},{"location":"Moodle/Plugin/phpMoodlePlugin_qbehavior/#conclusion","text":"The most important aspect of developing a Qbehavior plugin in Moodle is defining how questions behave during quiz attempts. This involves managing question state transitions, processing user responses, providing appropriate feedback, and handling grading or score adjustments. By extending the core behavior classes, customizing the user interaction flow, and ensuring optimal performance, you can create a Qbehavior plugin that enhances the quiz-taking experience in Moodle.","title":"Conclusion"},{"location":"Moodle/Plugin/phpMoodlePlugin_qformat/","text":"A Qformat plugin in Moodle allows users to import and export quiz questions in various file formats. Developing a qformat plugin enables you to support custom formats beyond the default ones like Moodle XML or GIFT. The most important aspects of developing a qformat plugin involve handling the parsing of external data during imports, and generating structured data during exports. Key Aspects of Developing a Qformat Plugin Plugin Structure and Location Qformat plugins reside in the /question/format/ directory of Moodle. When developing a new plugin (let\u2019s call it myformat ), you will create the following directory: /question/format/myformat/ Essential files include: format.php : Core logic for import/export functionality. lang/en/qformat_myformat.php : Language strings. db/install.xml (optional): For any database-related changes. format.php : Core Plugin File This is where the majority of the import and export logic resides. Your plugin will extend either the qformat_default class (for text-based formats like GIFT or Moodle XML) or qformat_base if you're developing a completely new format. Here, you define methods to read questions from a file and write questions to a file . Key methods: - readquestions : Parses the incoming data (e.g., from a file) and converts it into an array of Moodle question objects. - writequestions : Exports Moodle question objects into your desired format. Example Skeleton for format.php : class qformat_myformat extends qformat_default { public function readquestions($lines) { $questions = array(); // Custom logic for parsing the input data into Moodle question objects. return $questions; } public function writequestions($questions) { $output = ''; foreach ($questions as $question) { // Custom logic for converting question objects into the export format. $output .= $this->format_question($question); } return $output; } // Optional: You can define other helper functions specific to your format. } Importing Questions The readquestions() method is responsible for parsing the imported file (like a CSV or JSON file) and converting its data into Moodle's internal question object format. The main challenge here is accurately mapping the external file structure to Moodle\u2019s question structure. You may need to validate the file format, handle encoding issues, and check for missing fields. Ensure file parsing is robust : Invalid or missing data should be handled gracefully (e.g., by reporting an error to the user). Use Moodle\u2019s built-in question classes (like question ) and fill in the required fields based on the parsed data. Exporting Questions The writequestions() method takes an array of Moodle question objects and converts them into the desired file format (e.g., JSON, CSV, XML). You\u2019ll need to create the correct structure to meet the requirements of the target format. Make sure to include all relevant question details like question text, answer choices, feedback, and grades. Handle special characters and encoding issues to ensure the exported file is valid. Handling File Types Depending on your file format, Moodle can support different MIME types for import/export. The format.php file may need to define how to handle specific file extensions and types. public function mime_type() { return 'application/myformat'; // Define your specific format's MIME type. } Error Handling and Validation It\u2019s important to implement thorough error handling during both the import and export processes. Any invalid question format, unsupported data, or unexpected characters should be handled gracefully, with user-friendly error messages. For import errors , you can use Moodle\u2019s notification system to show errors and logs. Export should avoid generating broken files by validating all the questions before outputting the final file. Language Strings The lang/en/qformat_myformat.php file contains all the language strings necessary for your plugin\u2019s interface. Ensure all error messages, titles, and settings are translatable. Example: $string['pluginname'] = 'MyFormat question format'; $string['exporterror'] = 'Error exporting questions in MyFormat'; $string['importerror'] = 'Error importing questions in MyFormat'; Backup and Restore Considerations When developing a qformat plugin, you should consider how the import/export process interacts with Moodle's backup and restore mechanisms. Questions exported or imported via your plugin should integrate seamlessly with Moodle\u2019s backup format. Ensure your format correctly handles metadata like question categories, feedback, and version history, which may be relevant during backup/restore. Testing Properly test your qformat plugin across various scenarios: Different question types : Ensure that your plugin supports importing and exporting multiple question types like multiple choice, true/false, short answer, etc. Edge cases : Handle questions with complex metadata (e.g., embedded media, equations). Error conditions : Verify that errors like malformed files, missing fields, or incorrect encodings are handled well. Example of a Qformat Plugin: CSV-based Plugin Let\u2019s say you are developing a CSV-based qformat plugin that allows users to import/export quiz questions in CSV format. In the readquestions method, you would parse the CSV file, split the fields, and map them to Moodle\u2019s question structure: First row: Question text Second row: Possible answers Third row: Correct answers Example: public function readquestions($lines) { $questions = array(); foreach ($lines as $line) { $data = str_getcsv($line); // Assuming $data contains question and answer details. $question = new stdClass(); $question->questiontext = $data[0]; $question->answer = $data[1]; // More logic here to fill in question details. $questions[] = $question; } return $questions; } In the writequestions method, you would convert Moodle\u2019s question objects into a CSV format: Example: public function writequestions($questions) { $output = \"Question,Answer\\n\"; foreach ($questions as $question) { $output .= $question->questiontext . \",\" . $question->answer . \"\\n\"; } return $output; } Conclusion The most important aspects of developing a qformat plugin in Moodle involve handling the parsing of external data during import and generating properly structured data during export. The core logic resides in the format.php file, where you define the logic for reading questions from an input file and writing questions to an output file. By implementing robust error handling, ensuring seamless integration with Moodle\u2019s question bank, and thoroughly testing across different question types, you can create a flexible and reliable qformat plugin.","title":"Question Format"},{"location":"Moodle/Plugin/phpMoodlePlugin_qformat/#key-aspects-of-developing-a-qformat-plugin","text":"Plugin Structure and Location Qformat plugins reside in the /question/format/ directory of Moodle. When developing a new plugin (let\u2019s call it myformat ), you will create the following directory: /question/format/myformat/ Essential files include: format.php : Core logic for import/export functionality. lang/en/qformat_myformat.php : Language strings. db/install.xml (optional): For any database-related changes. format.php : Core Plugin File This is where the majority of the import and export logic resides. Your plugin will extend either the qformat_default class (for text-based formats like GIFT or Moodle XML) or qformat_base if you're developing a completely new format. Here, you define methods to read questions from a file and write questions to a file . Key methods: - readquestions : Parses the incoming data (e.g., from a file) and converts it into an array of Moodle question objects. - writequestions : Exports Moodle question objects into your desired format. Example Skeleton for format.php : class qformat_myformat extends qformat_default { public function readquestions($lines) { $questions = array(); // Custom logic for parsing the input data into Moodle question objects. return $questions; } public function writequestions($questions) { $output = ''; foreach ($questions as $question) { // Custom logic for converting question objects into the export format. $output .= $this->format_question($question); } return $output; } // Optional: You can define other helper functions specific to your format. } Importing Questions The readquestions() method is responsible for parsing the imported file (like a CSV or JSON file) and converting its data into Moodle's internal question object format. The main challenge here is accurately mapping the external file structure to Moodle\u2019s question structure. You may need to validate the file format, handle encoding issues, and check for missing fields. Ensure file parsing is robust : Invalid or missing data should be handled gracefully (e.g., by reporting an error to the user). Use Moodle\u2019s built-in question classes (like question ) and fill in the required fields based on the parsed data. Exporting Questions The writequestions() method takes an array of Moodle question objects and converts them into the desired file format (e.g., JSON, CSV, XML). You\u2019ll need to create the correct structure to meet the requirements of the target format. Make sure to include all relevant question details like question text, answer choices, feedback, and grades. Handle special characters and encoding issues to ensure the exported file is valid. Handling File Types Depending on your file format, Moodle can support different MIME types for import/export. The format.php file may need to define how to handle specific file extensions and types. public function mime_type() { return 'application/myformat'; // Define your specific format's MIME type. } Error Handling and Validation It\u2019s important to implement thorough error handling during both the import and export processes. Any invalid question format, unsupported data, or unexpected characters should be handled gracefully, with user-friendly error messages. For import errors , you can use Moodle\u2019s notification system to show errors and logs. Export should avoid generating broken files by validating all the questions before outputting the final file. Language Strings The lang/en/qformat_myformat.php file contains all the language strings necessary for your plugin\u2019s interface. Ensure all error messages, titles, and settings are translatable. Example: $string['pluginname'] = 'MyFormat question format'; $string['exporterror'] = 'Error exporting questions in MyFormat'; $string['importerror'] = 'Error importing questions in MyFormat'; Backup and Restore Considerations When developing a qformat plugin, you should consider how the import/export process interacts with Moodle's backup and restore mechanisms. Questions exported or imported via your plugin should integrate seamlessly with Moodle\u2019s backup format. Ensure your format correctly handles metadata like question categories, feedback, and version history, which may be relevant during backup/restore. Testing Properly test your qformat plugin across various scenarios: Different question types : Ensure that your plugin supports importing and exporting multiple question types like multiple choice, true/false, short answer, etc. Edge cases : Handle questions with complex metadata (e.g., embedded media, equations). Error conditions : Verify that errors like malformed files, missing fields, or incorrect encodings are handled well.","title":"Key Aspects of Developing a Qformat Plugin"},{"location":"Moodle/Plugin/phpMoodlePlugin_qformat/#example-of-a-qformat-plugin-csv-based-plugin","text":"Let\u2019s say you are developing a CSV-based qformat plugin that allows users to import/export quiz questions in CSV format. In the readquestions method, you would parse the CSV file, split the fields, and map them to Moodle\u2019s question structure: First row: Question text Second row: Possible answers Third row: Correct answers Example: public function readquestions($lines) { $questions = array(); foreach ($lines as $line) { $data = str_getcsv($line); // Assuming $data contains question and answer details. $question = new stdClass(); $question->questiontext = $data[0]; $question->answer = $data[1]; // More logic here to fill in question details. $questions[] = $question; } return $questions; } In the writequestions method, you would convert Moodle\u2019s question objects into a CSV format: Example: public function writequestions($questions) { $output = \"Question,Answer\\n\"; foreach ($questions as $question) { $output .= $question->questiontext . \",\" . $question->answer . \"\\n\"; } return $output; }","title":"Example of a Qformat Plugin: CSV-based Plugin"},{"location":"Moodle/Plugin/phpMoodlePlugin_qformat/#conclusion","text":"The most important aspects of developing a qformat plugin in Moodle involve handling the parsing of external data during import and generating properly structured data during export. The core logic resides in the format.php file, where you define the logic for reading questions from an input file and writing questions to an output file. By implementing robust error handling, ensuring seamless integration with Moodle\u2019s question bank, and thoroughly testing across different question types, you can create a flexible and reliable qformat plugin.","title":"Conclusion"},{"location":"Moodle/Plugin/phpMoodlePlugin_qtypes/","text":"Question types are one of the plugins used by the question subsystem . They are used to create and edit questions. Question types have to do many things: edit_..._form.php Provide an editing form so that teachers can create and edit questions of this type. This file contains the form displayed in the quiz administration interface, allowing teachers to create and edit this specific question type. It extends question_edit_form. class qtype_example_edit_form extends question_edit_form { protected function definition_inner($mform) { // Add form elements specific to your question type. $mform->addElement('text', 'examplefield', get_string('examplefield', 'qtype_example')); $mform->setType('examplefield', PARAM_TEXT); } // Define how to save the form data to the database. public function set_data($question) { // Load any previously saved question data. } public function validation($data, $files) { // Add validation for custom fields. return array(); // Return any errors as an associative array. } } questiontypes.php Define a class to handle loading and saving data from this form. and related methods providing metadata about this question types. and import and export in any Question formats that the type wants to support. question.php This class represents one instance of this question type, while it is being attempted by a user. It must do many things: Start a new attempt (e.g. in a multiple choice question, this is where we randomly shuffle the choices). or if we are continuing an existing attempt, re-initialise the question to the same state, using the data from the DB. Tell the question engine what data this question type is expecting to be submitted. Analyse those submitted responses: e.g. has it changed? is it complete. Automatically grade the response to give a 'fraction' (mark between 0 and 1) and a state (correct / partially correct / incorrect). Check access to files for the file API. class qtype_example extends question_type { // Define how to save and load question data. public function save_question_options($question) { global $DB; // Save the question-specific data to your custom table. } // Define how to get the question data when loading the question. public function get_question_options($question) { global $DB; // Load the question-specific data from your custom table. } // Define grading behavior. public function grade_response($question, $response) { // Implement your custom grading logic here. } // Any other necessary methods related to this question type. } renderer.php To display the key bits of this question types for the core_question_renderer to combine into the overall question display. This file defines how the question is displayed when users take a quiz. The renderer contains functions for rendering the question form and the question preview. class qtype_example_renderer extends qtype_renderer { public function formulation_and_controls(question_attempt $qa, question_display_options $options) { // Display the question to the student. } public function specific_feedback(question_attempt $qa) { // Show feedback after the student submits the answer. } public function correct_response(question_attempt $qa) { // Show the correct response. } } Backup and restore Implements Backup and restore, and all the other standard parts of a Moodle plugin like DB tables. This XML file defines the database schema for your question type plugin. Typically, you\u2019ll need to create custom tables to store additional data specific to your question type. <?xml version=\"1.0\" encoding=\"UTF-8\" ?> <XMLDB PATH= \"yourplugin/db\" VERSION= \"2024031600\" COMMENT= \"Question type example tables\" > <TABLES> <TABLE NAME= \"qtype_example_options\" COMMENT= \"Stores example-specific question options\" > <FIELDS> <FIELD NAME= \"id\" TYPE= \"int\" LENGTH= \"10\" NOTNULL= \"true\" SEQUENCE= \"true\" /> <FIELD NAME= \"questionid\" TYPE= \"int\" LENGTH= \"10\" NOTNULL= \"true\" /> <FIELD NAME= \"examplefield\" TYPE= \"text\" NOTNULL= \"false\" /> </FIELDS> <KEYS> <KEY NAME= \"primary\" TYPE= \"primary\" FIELDS= \"id\" /> <KEY NAME= \"questionid_fk\" TYPE= \"foreign\" FIELDS= \"questionid\" REFERENCES= \"question\" /> </KEYS> </TABLE> </TABLES> </XMLDB> backup/moodle2/backup_qtype_example_plugin.class.php & restore_qtype_example_plugin.class.php These files handle backup and restore functionality for your question type. They ensure that your question data is properly saved when a quiz is backed up and correctly restored when imported. // backup_qtype_example_plugin.class.php class backup_qtype_example_plugin extends backup_qtype_plugin { protected function define_question_plugin_structure() { $plugin = $this->get_plugin_element(null, $this->plugin_name, array()); $pluginwrapper = new backup_nested_element($this->plugin_name); $plugin->add_child($pluginwrapper); $example = new backup_nested_element('example', array('id'), array('examplefield')); $pluginwrapper->add_child($example); return $plugin; } } // restore_qtype_example_plugin.class.php class restore_qtype_example_plugin extends restore_qtype_plugin { protected function define_question_plugin_structure() { return $this->prepare_question_structure( new restore_nested_element('example', array('id'), array('examplefield')) ); } } Meta data Track users preferences for the settings used for newly created questions. Default for new question types Many question types are quite flexible, and so have a lot of options on their editing form. Quite often, when a teacher is creating a number of questions, it is likely they will want to keep using the same values for some options. Therefore, the question system has a way for question types to save some settings as user-preferences, and then use them as the default when creating a new question. Note, this is only done when a teacher creates and saves a new question. We don't save the preferences when a teacher edits an existing question (which might have been created by someone else with different preferences). How to implement this feature Decide which settings should be saved It is not appropriate to save all the settings. For example, name and question text are what uniquely define a particular question. It would be unhelpful to remember and re-use these since they need to be different each time. The kind of settings we want to save are the ones like do you want the choices in your multiple-choice question numbered 'a, b, c, ...' or '1, 2, 3, ...' or not numbered at all? As you think about this, looking through what other question types do is probably a good way to get a feel for what sorts of things it makes sense to remember. That will also promote consistency. Search for implementations of save_defaults_for_new_questions . In the form class - use any previously saved defaults Before implementing this feature, your form class is likely to have code like $mform->setDefault('shuffleanswers', 1); For all the settings where you want to implement this feature, need to change the hard-coded default (1 here) to instead fetch the default from the user's preferences using the get_default_value method: $mform->setDefault('shuffleanswers', $this->get_default_value('shuffleanswers', 1)); In the question-type class Here we need to override the method save_defaults_for_new_questions to save the values these settings. For example: public function save_defaults_for_new_questions(stdClass $fromform): void { parent::save_defaults_for_new_questions($fromform); $this->set_default_value('shuffleanswers', $fromform->shuffleanswers); } All the settings save here should match the ones fetched by get_default_value in the form. You need to call parent because Moodle core saves some settings that apply to all question types. Privacy provider Because this feature works using user preferences, you need to declare that in your privacy provider. This is boring but necessary. Easiest way to see what to do is to copy another question type. Note, it is necessary for your provider to declare the ones saved by core. (I suppose, ideally, someone would make a helpful base class, or trait, to make it easier to implement this.) Automated tests Always a good idea. You are likely to need: Unit tests for the privacy provider . Behat test to show that the saved settings are re-used. Many question types have a behat/add.feature file where it is easy to add coverage for this . The links in that list go to examples of how these are implemented in qtype_match. Examples Multiple Choice ( qtype_multichoice ) : Standard multiple-choice question type. True/False ( qtype_truefalse ) : Simple true/false question type. Drag and Drop onto Image ( qtype_ddimageortext ) : Allows users to drag and drop text or images onto predefined areas of an image. Gapfill ( qtype_gapfill ) : Provides a fill-in-the-gap question type for cloze tests.","title":"Question Types"},{"location":"Moodle/Plugin/phpMoodlePlugin_qtypes/#edit__formphp","text":"Provide an editing form so that teachers can create and edit questions of this type. This file contains the form displayed in the quiz administration interface, allowing teachers to create and edit this specific question type. It extends question_edit_form. class qtype_example_edit_form extends question_edit_form { protected function definition_inner($mform) { // Add form elements specific to your question type. $mform->addElement('text', 'examplefield', get_string('examplefield', 'qtype_example')); $mform->setType('examplefield', PARAM_TEXT); } // Define how to save the form data to the database. public function set_data($question) { // Load any previously saved question data. } public function validation($data, $files) { // Add validation for custom fields. return array(); // Return any errors as an associative array. } }","title":"edit_..._form.php"},{"location":"Moodle/Plugin/phpMoodlePlugin_qtypes/#questiontypesphp","text":"Define a class to handle loading and saving data from this form. and related methods providing metadata about this question types. and import and export in any Question formats that the type wants to support.","title":"questiontypes.php"},{"location":"Moodle/Plugin/phpMoodlePlugin_qtypes/#questionphp","text":"This class represents one instance of this question type, while it is being attempted by a user. It must do many things: Start a new attempt (e.g. in a multiple choice question, this is where we randomly shuffle the choices). or if we are continuing an existing attempt, re-initialise the question to the same state, using the data from the DB. Tell the question engine what data this question type is expecting to be submitted. Analyse those submitted responses: e.g. has it changed? is it complete. Automatically grade the response to give a 'fraction' (mark between 0 and 1) and a state (correct / partially correct / incorrect). Check access to files for the file API. class qtype_example extends question_type { // Define how to save and load question data. public function save_question_options($question) { global $DB; // Save the question-specific data to your custom table. } // Define how to get the question data when loading the question. public function get_question_options($question) { global $DB; // Load the question-specific data from your custom table. } // Define grading behavior. public function grade_response($question, $response) { // Implement your custom grading logic here. } // Any other necessary methods related to this question type. }","title":"question.php"},{"location":"Moodle/Plugin/phpMoodlePlugin_qtypes/#rendererphp","text":"To display the key bits of this question types for the core_question_renderer to combine into the overall question display. This file defines how the question is displayed when users take a quiz. The renderer contains functions for rendering the question form and the question preview. class qtype_example_renderer extends qtype_renderer { public function formulation_and_controls(question_attempt $qa, question_display_options $options) { // Display the question to the student. } public function specific_feedback(question_attempt $qa) { // Show feedback after the student submits the answer. } public function correct_response(question_attempt $qa) { // Show the correct response. } }","title":"renderer.php"},{"location":"Moodle/Plugin/phpMoodlePlugin_qtypes/#backup-and-restore","text":"Implements Backup and restore, and all the other standard parts of a Moodle plugin like DB tables. This XML file defines the database schema for your question type plugin. Typically, you\u2019ll need to create custom tables to store additional data specific to your question type. <?xml version=\"1.0\" encoding=\"UTF-8\" ?> <XMLDB PATH= \"yourplugin/db\" VERSION= \"2024031600\" COMMENT= \"Question type example tables\" > <TABLES> <TABLE NAME= \"qtype_example_options\" COMMENT= \"Stores example-specific question options\" > <FIELDS> <FIELD NAME= \"id\" TYPE= \"int\" LENGTH= \"10\" NOTNULL= \"true\" SEQUENCE= \"true\" /> <FIELD NAME= \"questionid\" TYPE= \"int\" LENGTH= \"10\" NOTNULL= \"true\" /> <FIELD NAME= \"examplefield\" TYPE= \"text\" NOTNULL= \"false\" /> </FIELDS> <KEYS> <KEY NAME= \"primary\" TYPE= \"primary\" FIELDS= \"id\" /> <KEY NAME= \"questionid_fk\" TYPE= \"foreign\" FIELDS= \"questionid\" REFERENCES= \"question\" /> </KEYS> </TABLE> </TABLES> </XMLDB> backup/moodle2/backup_qtype_example_plugin.class.php & restore_qtype_example_plugin.class.php These files handle backup and restore functionality for your question type. They ensure that your question data is properly saved when a quiz is backed up and correctly restored when imported. // backup_qtype_example_plugin.class.php class backup_qtype_example_plugin extends backup_qtype_plugin { protected function define_question_plugin_structure() { $plugin = $this->get_plugin_element(null, $this->plugin_name, array()); $pluginwrapper = new backup_nested_element($this->plugin_name); $plugin->add_child($pluginwrapper); $example = new backup_nested_element('example', array('id'), array('examplefield')); $pluginwrapper->add_child($example); return $plugin; } } // restore_qtype_example_plugin.class.php class restore_qtype_example_plugin extends restore_qtype_plugin { protected function define_question_plugin_structure() { return $this->prepare_question_structure( new restore_nested_element('example', array('id'), array('examplefield')) ); } }","title":"Backup and restore"},{"location":"Moodle/Plugin/phpMoodlePlugin_qtypes/#meta-data","text":"Track users preferences for the settings used for newly created questions.","title":"Meta data"},{"location":"Moodle/Plugin/phpMoodlePlugin_qtypes/#default-for-new-question-types","text":"Many question types are quite flexible, and so have a lot of options on their editing form. Quite often, when a teacher is creating a number of questions, it is likely they will want to keep using the same values for some options. Therefore, the question system has a way for question types to save some settings as user-preferences, and then use them as the default when creating a new question. Note, this is only done when a teacher creates and saves a new question. We don't save the preferences when a teacher edits an existing question (which might have been created by someone else with different preferences).","title":"Default for new question types"},{"location":"Moodle/Plugin/phpMoodlePlugin_qtypes/#examples","text":"Multiple Choice ( qtype_multichoice ) : Standard multiple-choice question type. True/False ( qtype_truefalse ) : Simple true/false question type. Drag and Drop onto Image ( qtype_ddimageortext ) : Allows users to drag and drop text or images onto predefined areas of an image. Gapfill ( qtype_gapfill ) : Provides a fill-in-the-gap question type for cloze tests.","title":"Examples"},{"location":"PR/phpConst/","text":"A valid constant name starts with a letter or underscore (no $ sign before the constant name). Unlike variables, constants are automatically global across the entire script. Create a PHP Constant There are 2 ways to create a constant: 1. Using the define() function 2. Using the const keyword const vs. define() const are always case-sensitive define() has has a case-insensitive option. const cannot be created inside another block scope, like inside a function or inside an if statement. define can be created inside another block scope. Using the define() function. Syntax define(name, value, case-insensitive) Parameters: name: Specifies the name of the constant value: Specifies the value of the constant case-insensitive: Specifies whether the constant name should be case-insensitive. Default is false. Note: Defining case-insensitive constants was deprecated in PHP 7.3. PHP 8.0 accepts only false, the value true will produce a warning. <?php define ( \"GREETING\" , \"Hello World!\" ); // Create a constant with a case-sensitive name define ( \"GREETING\" , \"Welcome to W3Schools.com!\" , true ); // Create a constant with a case-insensitive name echo GREETING ; ?> PHP Constant Arrays In PHP7, you can create an Array constant using the define() function. <?php define ( \"cars\" , [ \"Alfa Romeo\" , \"BMW\" , \"Toyota\" ]); echo cars [ 0 ]; ?> PHP const Keyword You can also create a constant by using the const keyword. <?php const MYCAR = \"Volvo\" ; echo MYCAR ; ?>","title":"Constant"},{"location":"PR/phpConst/#create-a-php-constant","text":"There are 2 ways to create a constant: 1. Using the define() function 2. Using the const keyword","title":"Create a PHP Constant"},{"location":"PR/phpConst/#const-vs-define","text":"const are always case-sensitive define() has has a case-insensitive option. const cannot be created inside another block scope, like inside a function or inside an if statement. define can be created inside another block scope.","title":"const vs. define()"},{"location":"PR/phpConst/#using-the-define-function","text":"Syntax define(name, value, case-insensitive) Parameters: name: Specifies the name of the constant value: Specifies the value of the constant case-insensitive: Specifies whether the constant name should be case-insensitive. Default is false. Note: Defining case-insensitive constants was deprecated in PHP 7.3. PHP 8.0 accepts only false, the value true will produce a warning. <?php define ( \"GREETING\" , \"Hello World!\" ); // Create a constant with a case-sensitive name define ( \"GREETING\" , \"Welcome to W3Schools.com!\" , true ); // Create a constant with a case-insensitive name echo GREETING ; ?>","title":"Using the define() function."},{"location":"PR/phpConst/#php-constant-arrays","text":"In PHP7, you can create an Array constant using the define() function. <?php define ( \"cars\" , [ \"Alfa Romeo\" , \"BMW\" , \"Toyota\" ]); echo cars [ 0 ]; ?>","title":"PHP Constant Arrays"},{"location":"PR/phpConst/#php-const-keyword","text":"You can also create a constant by using the const keyword. <?php const MYCAR = \"Volvo\" ; echo MYCAR ; ?>","title":"PHP const Keyword"},{"location":"PR/phpForms/","text":"Forms Handling PHP - A Simple HTML Form The example below displays a simple HTML form with two input fields and a submit button. < html > < body > < form action = \"welcome.php\" method = \"post\" > Name: < input type = \"text\" name = \"name\" >< br > E-mail: < input type = \"text\" name = \"email\" >< br > < input type = \"submit\" > </ form > </ body > </ html > When the user fills out the form above and clicks the submit button, the form data is sent for processing to a PHP file named \"welcome.php\". The form data is sent with the HTTP POST method. To display the submitted data you could simply echo all the variables. The \"welcome.php\" looks like this: <html> <body> Welcome <?php echo $_POST [ \"name\" ]; ?> <br> Your email address is: <?php echo $_POST [ \"email\" ]; ?> </body> </html> The output could be something like this: Welcome John Your email address is john.doe@example.com The same result could also be achieved using the HTTP GET method: < html > < body > < form action = \"welcome_get.php\" method = \"get\" > Name: < input type = \"text\" name = \"name\" >< br > E-mail: < input type = \"text\" name = \"email\" >< br > < input type = \"submit\" > </ form > </ body > </ html > and \"welcome_get.php\" looks like this: < html > < body > Welcome <?php echo $_GET[\"name\"]; ?> < br > Your email address is: <?php echo $_GET[\"email\"]; ?> </ body > </ html > The code above is quite simple. However, the most important thing is missing. You need to validate form data to protect your script from malicious code. GET vs. POST Both GET and POST create an array (e.g. array( key1 => value1, key2 => value2, key3 => value3, ...)). This array holds key/value pairs, where keys are the names of the form controls and values are the input data from the user. Both GET and POST are treated as $_GET and $_POST. These are superglobals, which means that they are always accessible, regardless of scope - and you can access them from any function, class or file without having to do anything special. $_GET is an array of variables passed to the current script via the URL parameters. $_POST is an array of variables passed to the current script via the HTTP POST method. When to use GET? Information sent from a form with the GET method is visible to everyone (all variable names and values are displayed in the URL). GET also has limits on the amount of information to send. The limitation is about 2000 characters. However, because the variables are displayed in the URL, it is possible to bookmark the page. This can be useful in some cases. GET may be used for sending non-sensitive data. GET should NEVER be used for sending passwords or other sensitive information! When to use POST? Information sent from a form with the POST method is invisible to others (all names/values are embedded within the body of the HTTP request) and has no limits on the amount of information to send. Moreover POST supports advanced functionality such as support for multi-part binary input while uploading files to server. However, because the variables are not displayed in the URL, it is not possible to bookmark the page. Developers prefer POST for sending form data. Forms Validation Text Fields The name, email, and website fields are text input elements, and the comment field is a textarea. The HTML code looks like this: Name: < input type = \"text\" name = \"name\" > E-mail: < input type = \"text\" name = \"email\" > Website: < input type = \"text\" name = \"website\" > Comment: < textarea name = \"comment\" rows = \"5\" cols = \"40\" ></ textarea > Radio Buttons The gender fields are radio buttons and the HTML code looks like this: Gender: < input type = \"radio\" name = \"gender\" value = \"female\" > Female < input type = \"radio\" name = \"gender\" value = \"male\" > Male < input type = \"radio\" name = \"gender\" value = \"other\" > Other The Form Element The HTML code of the form looks like this: < form method = \"post\" action = \"<?php echo htmlspecialchars($_SERVER[\" PHP_SELF \"]);? > \"> When the form is submitted, the form data is sent with method=\"post\". The $_SERVER[\"PHP_SELF\"] is a super global variable that returns the filename of the currently executing script. The $_SERVER[\"PHP_SELF\"] sends the submitted form data to the page itself, instead of jumping to a different page. This way, the user will get error messages on the same page as the form. The htmlspecialchars() function converts special characters to HTML entities. This means that it will replace HTML characters like < and > with & lt; and & gt;. This prevents attackers from exploiting the code by injecting HTML or Javascript code (Cross-site Scripting attacks) in forms. PHP Form Security The $_SERVER[\"PHP_SELF\"] variable can be used by hackers! If PHP_SELF is used in your page then a user can enter a slash (/) and then some Cross Site Scripting (XSS) commands to execute. Cross-site scripting (XSS) is a type of computer security vulnerability typically found in Web applications. XSS enables attackers to inject client-side script into Web pages viewed by other users. Assume we have the following form in a page named \"test_form.php\": < form method = \"post\" action = \"<?php echo $_SERVER[\" PHP_SELF \"];? > \"> Now, if a user enters the normal URL in the address bar like \"http://www.example.com/test_form.php\", the above code will be translated to: < form method = \"post\" action = \"test_form.php\" > So far, so good. However, consider that a user enters the following URL in the address bar: http://www.example.com/test_form.php/%22%3E%3Cscript%3Ealert('hacked')%3C/script%3E In this case, the above code will be translated to: < form method = \"post\" action = \"test_form.php/\" >< script > alert ( 'hacked' )</ script > This code adds a script tag and an alert command. And when the page loads, the JavaScript code will be executed (the user will see an alert box). This is just a simple and harmless example how the PHP_SELF variable can be exploited. Be aware of that any JavaScript code can be added inside the <'script> tag! A hacker can redirect the user to a file on another server, and that file can hold malicious code that can alter the global variables or submit the form to another address to save the user data, for example. How To Avoid $_SERVER[\"PHP_SELF\"] Exploits? $_SERVER[\"PHP_SELF\"] exploits can be avoided by using the htmlspecialchars() function. The form code should look like this: <form method=\"post\" action=\" <?php echo htmlspecialchars ( $_SERVER [ \"PHP_SELF\" ]); ?> \"> The htmlspecialchars() function converts special characters to HTML entities. Now if the user tries to exploit the PHP_SELF variable, it will result in the following output: < form method = \"post\" action = \"test_form.php/&quot;&gt;&lt;script&gt;alert('hacked')&lt;/script&gt;\" > The exploit attempt fails, and no harm is done! Validate Form Data With PHP The first thing we will do is to pass all variables through PHP's htmlspecialchars() function. When we use the htmlspecialchars() function; then if a user tries to submit the following in a text field: < script > location . href ( 'http://www.hacked.com' )</ script > This would not be executed, because it would be saved as HTML escaped code, like this: &lt; script &gt; location.href('http://www.hacked.com') &lt; /script &gt; The code is now safe to be displayed on a page or inside an e-mail. We will also do two more things when the user submits the form: Strip unnecessary characters (extra space, tab, newline) from the user input data (with the PHP trim() function) Remove backslashes (\\) from the user input data (with the PHP stripslashes() function) The next step is to create a function that will do all the checking for us (which is much more convenient than writing the same code over and over again). We will name the function test_input(). Now, we can check each $_POST variable with the test_input() function, and the script looks like this: <?php // define variables and set to empty values $name = $email = $gender = $comment = $website = \"\" ; if ( $_SERVER [ \"REQUEST_METHOD\" ] == \"POST\" ) { $name = test_input ( $_POST [ \"name\" ]); $email = test_input ( $_POST [ \"email\" ]); $website = test_input ( $_POST [ \"website\" ]); $comment = test_input ( $_POST [ \"comment\" ]); $gender = test_input ( $_POST [ \"gender\" ]); } function test_input ( $data ) { $data = trim ( $data ); $data = stripslashes ( $data ); $data = htmlspecialchars ( $data ); return $data ; } ?> Notice that at the start of the script, we check whether the form has been submitted using $_SERVER[\"REQUEST_METHOD\"]. If the REQUEST_METHOD is POST, then the form has been submitted - and it should be validated. If it has not been submitted, skip the validation and display a blank form. However, in the example above, all input fields are optional. The script works fine even if the user does not enter any data. Required Fields In the following code we have added some new variables: $nameErr, $emailErr, $genderErr, and $websiteErr. These error variables will hold error messages for the required fields. We have also added an if else statement for each $_POST variable. This checks if the $_POST variable is empty (with the PHP empty() function). If it is empty, an error message is stored in the different error variables, and if it is not empty, it sends the user input data through the test_input() function. <?php // define variables and set to empty values $nameErr = $emailErr = $genderErr = $websiteErr = \"\" ; $name = $email = $gender = $comment = $website = \"\" ; if ( $_SERVER [ \"REQUEST_METHOD\" ] == \"POST\" ) { if ( empty ( $_POST [ \"name\" ])) { $nameErr = \"Name is required\" ; } else { $name = test_input ( $_POST [ \"name\" ]); } if ( empty ( $_POST [ \"email\" ])) { $emailErr = \"Email is required\" ; } else { $email = test_input ( $_POST [ \"email\" ]); } if ( empty ( $_POST [ \"website\" ])) { $website = \"\" ; } else { $website = test_input ( $_POST [ \"website\" ]); } if ( empty ( $_POST [ \"comment\" ])) { $comment = \"\" ; } else { $comment = test_input ( $_POST [ \"comment\" ]); } if ( empty ( $_POST [ \"gender\" ])) { $genderErr = \"Gender is required\" ; } else { $gender = test_input ( $_POST [ \"gender\" ]); } } ?> Display The Error Messages Then in the HTML form, we add a little script after each required field, which generates the correct error message if needed (that is if the user tries to submit the form without filling out the required fields). <!-- HTML form --> < form method = \"post\" action = \"<?php echo htmlspecialchars($_SERVER[\" PHP_SELF \"]);? > \"> Name: < input type = \"text\" name = \"name\" > < span class = \"error\" > * <?php echo $nameErr;?> </ span > < br >< br > E-mail: < input type = \"text\" name = \"email\" > < span class = \"error\" > * <?php echo $emailErr;?> </ span > < br >< br > Website: < input type = \"text\" name = \"website\" > < span class = \"error\" > <?php echo $websiteErr;?> </ span > < br >< br > Comment: < textarea name = \"comment\" rows = \"5\" cols = \"40\" ></ textarea > < br >< br > Gender: < input type = \"radio\" name = \"gender\" value = \"female\" > Female < input type = \"radio\" name = \"gender\" value = \"male\" > Male < input type = \"radio\" name = \"gender\" value = \"other\" > Other < span class = \"error\" > * <?php echo $genderErr;?> </ span > < br >< br > < input type = \"submit\" name = \"submit\" value = \"Submit\" > </ form > Validate Name The code below shows a simple way to check if the name field only contains letters, dashes, apostrophes and whitespaces. If the value of the name field is not valid, then store an error message: $name = test_input($_POST[\"name\"]); if (!preg_match(\"/^[a-zA-Z-' ]*$/\",$name)) { $nameErr = \"Only letters and white space allowed\"; } Validate E-mail The easiest and safest way to check whether an email address is well-formed is to use PHP's filter_var() function. In the code below, if the e-mail address is not well-formed, then store an error message: $email = test_input($_POST[\"email\"]); if (!filter_var($email, FILTER_VALIDATE_EMAIL)) { $emailErr = \"Invalid email format\"; } Validate URL The code below shows a way to check if a URL address syntax is valid (this regular expression also allows dashes in the URL). If the URL address syntax is not valid, then store an error message: $website = test_input($_POST[\"website\"]); if (!preg_match(\"/\\b(?:(?:https?|ftp):\\/\\/|www\\.)[-a-z0-9+&@#\\/%?=~_|!:,.;]*[-a-z0-9+&@#\\/%=~_|]/i\",$website)) { $websiteErr = \"Invalid URL\"; } Validate Name, E-mail, and URL Now, the script looks like this. <?php // define variables and set to empty values $nameErr = $emailErr = $genderErr = $websiteErr = \"\" ; $name = $email = $gender = $comment = $website = \"\" ; if ( $_SERVER [ \"REQUEST_METHOD\" ] == \"POST\" ) { if ( empty ( $_POST [ \"name\" ])) { $nameErr = \"Name is required\" ; } else { $name = test_input ( $_POST [ \"name\" ]); // check if name only contains letters and whitespace if ( ! preg_match ( \"/^[a-zA-Z-' ]*$/\" , $name )) { $nameErr = \"Only letters and white space allowed\" ; } } if ( empty ( $_POST [ \"email\" ])) { $emailErr = \"Email is required\" ; } else { $email = test_input ( $_POST [ \"email\" ]); // check if e-mail address is well-formed if ( ! filter_var ( $email , FILTER_VALIDATE_EMAIL )) { $emailErr = \"Invalid email format\" ; } } if ( empty ( $_POST [ \"website\" ])) { $website = \"\" ; } else { $website = test_input ( $_POST [ \"website\" ]); // check if URL address syntax is valid (this regular expression also allows dashes in the URL) if ( ! preg_match ( \"/\\b(?:(?:https?|ftp):\\/\\/|www\\.)[-a-z0-9+&@#\\/%?=~_|!:,.;]*[-a-z0-9+&@#\\/%=~_|]/i\" , $website )) { $websiteErr = \"Invalid URL\" ; } } if ( empty ( $_POST [ \"comment\" ])) { $comment = \"\" ; } else { $comment = test_input ( $_POST [ \"comment\" ]); } if ( empty ( $_POST [ \"gender\" ])) { $genderErr = \"Gender is required\" ; } else { $gender = test_input ( $_POST [ \"gender\" ]); } } ?> Keep The Values in The Form To show the values in the input fields after the user hits the submit button, we add a little PHP script inside the value attribute of the following input fields: name, email, and website. In the comment textarea field, we put the script between the <'textarea> and <'/textarea> tags. The little script outputs the value of the $name, $email, $website, and $comment variables. Then, we also need to show which radio button that was checked. For this, we must manipulate the checked attribute (not the value attribute for radio buttons): Name: <input type=\"text\" name=\"name\" value=\" <?php echo $name ; ?> \"> E-mail: <input type=\"text\" name=\"email\" value=\" <?php echo $email ; ?> \"> Website: <input type=\"text\" name=\"website\" value=\" <?php echo $website ; ?> \"> Comment: <textarea name=\"comment\" rows=\"5\" cols=\"40\"> <?php echo $comment ; ?> </textarea> Gender: <input type=\"radio\" name=\"gender\" <?php if ( isset ( $gender ) && $gender == \"female\" ) echo \"checked\" ; ?> value=\"female\">Female <input type=\"radio\" name=\"gender\" <?php if ( isset ( $gender ) && $gender == \"male\" ) echo \"checked\" ; ?> value=\"male\">Male <input type=\"radio\" name=\"gender\" <?php if ( isset ( $gender ) && $gender == \"other\" ) echo \"checked\" ; ?> value=\"other\">Other Complete <!DOCTYPE HTML> <html> <head> <style> .error {color: #FF0000;} </style> </head> <body> <?php // define variables and set to empty values $nameErr = $emailErr = $genderErr = $websiteErr = \"\" ; $name = $email = $gender = $comment = $website = \"\" ; if ( $_SERVER [ \"REQUEST_METHOD\" ] == \"POST\" ) { if ( empty ( $_POST [ \"name\" ])) { $nameErr = \"Name is required\" ; } else { $name = test_input ( $_POST [ \"name\" ]); // check if name only contains letters and whitespace if ( ! preg_match ( \"/^[a-zA-Z-' ]*$/\" , $name )) { $nameErr = \"Only letters and white space allowed\" ; } } if ( empty ( $_POST [ \"email\" ])) { $emailErr = \"Email is required\" ; } else { $email = test_input ( $_POST [ \"email\" ]); // check if e-mail address is well-formed if ( ! filter_var ( $email , FILTER_VALIDATE_EMAIL )) { $emailErr = \"Invalid email format\" ; } } if ( empty ( $_POST [ \"website\" ])) { $website = \"\" ; } else { $website = test_input ( $_POST [ \"website\" ]); // check if URL address syntax is valid (this regular expression also allows dashes in the URL) if ( ! preg_match ( \"/\\b(?:(?:https?|ftp):\\/\\/|www\\.)[-a-z0-9+&@#\\/%?=~_|!:,.;]*[-a-z0-9+&@#\\/%=~_|]/i\" , $website )) { $websiteErr = \"Invalid URL\" ; } } if ( empty ( $_POST [ \"comment\" ])) { $comment = \"\" ; } else { $comment = test_input ( $_POST [ \"comment\" ]); } if ( empty ( $_POST [ \"gender\" ])) { $genderErr = \"Gender is required\" ; } else { $gender = test_input ( $_POST [ \"gender\" ]); } } function test_input ( $data ) { $data = trim ( $data ); $data = stripslashes ( $data ); $data = htmlspecialchars ( $data ); return $data ; } ?> <h2>PHP Form Validation Example</h2> <p><span class=\"error\">* required field</span></p> <form method=\"post\" action=\" <?php echo htmlspecialchars ( $_SERVER [ \"PHP_SELF\" ]); ?> \"> Name: <input type=\"text\" name=\"name\" value=\" <?php echo $name ; ?> \"> <span class=\"error\">* <?php echo $nameErr ; ?> </span> <br><br> E-mail: <input type=\"text\" name=\"email\" value=\" <?php echo $email ; ?> \"> <span class=\"error\">* <?php echo $emailErr ; ?> </span> <br><br> Website: <input type=\"text\" name=\"website\" value=\" <?php echo $website ; ?> \"> <span class=\"error\"> <?php echo $websiteErr ; ?> </span> <br><br> Comment: <textarea name=\"comment\" rows=\"5\" cols=\"40\"> <?php echo $comment ; ?> </textarea> <br><br> Gender: <input type=\"radio\" name=\"gender\" <?php if ( isset ( $gender ) && $gender == \"female\" ) echo \"checked\" ; ?> value=\"female\">Female <input type=\"radio\" name=\"gender\" <?php if ( isset ( $gender ) && $gender == \"male\" ) echo \"checked\" ; ?> value=\"male\">Male <input type=\"radio\" name=\"gender\" <?php if ( isset ( $gender ) && $gender == \"other\" ) echo \"checked\" ; ?> value=\"other\">Other <span class=\"error\">* <?php echo $genderErr ; ?> </span> <br><br> <input type=\"submit\" name=\"submit\" value=\"Submit\"> </form> <?php echo \"<h2>Your Input:</h2>\" ; echo $name ; echo \"<br>\" ; echo $email ; echo \"<br>\" ; echo $website ; echo \"<br>\" ; echo $comment ; echo \"<br>\" ; echo $gender ; ?> </body> </html>","title":"Forms"},{"location":"PR/phpForms/#forms-handling","text":"PHP - A Simple HTML Form The example below displays a simple HTML form with two input fields and a submit button. < html > < body > < form action = \"welcome.php\" method = \"post\" > Name: < input type = \"text\" name = \"name\" >< br > E-mail: < input type = \"text\" name = \"email\" >< br > < input type = \"submit\" > </ form > </ body > </ html > When the user fills out the form above and clicks the submit button, the form data is sent for processing to a PHP file named \"welcome.php\". The form data is sent with the HTTP POST method. To display the submitted data you could simply echo all the variables. The \"welcome.php\" looks like this: <html> <body> Welcome <?php echo $_POST [ \"name\" ]; ?> <br> Your email address is: <?php echo $_POST [ \"email\" ]; ?> </body> </html> The output could be something like this: Welcome John Your email address is john.doe@example.com The same result could also be achieved using the HTTP GET method: < html > < body > < form action = \"welcome_get.php\" method = \"get\" > Name: < input type = \"text\" name = \"name\" >< br > E-mail: < input type = \"text\" name = \"email\" >< br > < input type = \"submit\" > </ form > </ body > </ html > and \"welcome_get.php\" looks like this: < html > < body > Welcome <?php echo $_GET[\"name\"]; ?> < br > Your email address is: <?php echo $_GET[\"email\"]; ?> </ body > </ html > The code above is quite simple. However, the most important thing is missing. You need to validate form data to protect your script from malicious code.","title":"Forms Handling"},{"location":"PR/phpForms/#get-vs-post","text":"Both GET and POST create an array (e.g. array( key1 => value1, key2 => value2, key3 => value3, ...)). This array holds key/value pairs, where keys are the names of the form controls and values are the input data from the user. Both GET and POST are treated as $_GET and $_POST. These are superglobals, which means that they are always accessible, regardless of scope - and you can access them from any function, class or file without having to do anything special. $_GET is an array of variables passed to the current script via the URL parameters. $_POST is an array of variables passed to the current script via the HTTP POST method.","title":"GET vs. POST"},{"location":"PR/phpForms/#when-to-use-get","text":"Information sent from a form with the GET method is visible to everyone (all variable names and values are displayed in the URL). GET also has limits on the amount of information to send. The limitation is about 2000 characters. However, because the variables are displayed in the URL, it is possible to bookmark the page. This can be useful in some cases. GET may be used for sending non-sensitive data. GET should NEVER be used for sending passwords or other sensitive information!","title":"When to use GET?"},{"location":"PR/phpForms/#when-to-use-post","text":"Information sent from a form with the POST method is invisible to others (all names/values are embedded within the body of the HTTP request) and has no limits on the amount of information to send. Moreover POST supports advanced functionality such as support for multi-part binary input while uploading files to server. However, because the variables are not displayed in the URL, it is not possible to bookmark the page. Developers prefer POST for sending form data.","title":"When to use POST?"},{"location":"PR/phpForms/#forms-validation","text":"","title":"Forms Validation"},{"location":"PR/phpForms/#text-fields","text":"The name, email, and website fields are text input elements, and the comment field is a textarea. The HTML code looks like this: Name: < input type = \"text\" name = \"name\" > E-mail: < input type = \"text\" name = \"email\" > Website: < input type = \"text\" name = \"website\" > Comment: < textarea name = \"comment\" rows = \"5\" cols = \"40\" ></ textarea >","title":"Text Fields"},{"location":"PR/phpForms/#radio-buttons","text":"The gender fields are radio buttons and the HTML code looks like this: Gender: < input type = \"radio\" name = \"gender\" value = \"female\" > Female < input type = \"radio\" name = \"gender\" value = \"male\" > Male < input type = \"radio\" name = \"gender\" value = \"other\" > Other","title":"Radio Buttons"},{"location":"PR/phpForms/#the-form-element","text":"The HTML code of the form looks like this: < form method = \"post\" action = \"<?php echo htmlspecialchars($_SERVER[\" PHP_SELF \"]);? > \"> When the form is submitted, the form data is sent with method=\"post\". The $_SERVER[\"PHP_SELF\"] is a super global variable that returns the filename of the currently executing script. The $_SERVER[\"PHP_SELF\"] sends the submitted form data to the page itself, instead of jumping to a different page. This way, the user will get error messages on the same page as the form. The htmlspecialchars() function converts special characters to HTML entities. This means that it will replace HTML characters like < and > with & lt; and & gt;. This prevents attackers from exploiting the code by injecting HTML or Javascript code (Cross-site Scripting attacks) in forms.","title":"The Form Element"},{"location":"PR/phpForms/#php-form-security","text":"The $_SERVER[\"PHP_SELF\"] variable can be used by hackers! If PHP_SELF is used in your page then a user can enter a slash (/) and then some Cross Site Scripting (XSS) commands to execute. Cross-site scripting (XSS) is a type of computer security vulnerability typically found in Web applications. XSS enables attackers to inject client-side script into Web pages viewed by other users. Assume we have the following form in a page named \"test_form.php\": < form method = \"post\" action = \"<?php echo $_SERVER[\" PHP_SELF \"];? > \"> Now, if a user enters the normal URL in the address bar like \"http://www.example.com/test_form.php\", the above code will be translated to: < form method = \"post\" action = \"test_form.php\" > So far, so good. However, consider that a user enters the following URL in the address bar: http://www.example.com/test_form.php/%22%3E%3Cscript%3Ealert('hacked')%3C/script%3E In this case, the above code will be translated to: < form method = \"post\" action = \"test_form.php/\" >< script > alert ( 'hacked' )</ script > This code adds a script tag and an alert command. And when the page loads, the JavaScript code will be executed (the user will see an alert box). This is just a simple and harmless example how the PHP_SELF variable can be exploited. Be aware of that any JavaScript code can be added inside the <'script> tag! A hacker can redirect the user to a file on another server, and that file can hold malicious code that can alter the global variables or submit the form to another address to save the user data, for example.","title":"PHP Form Security"},{"location":"PR/phpForms/#how-to-avoid-_serverphp_self-exploits","text":"$_SERVER[\"PHP_SELF\"] exploits can be avoided by using the htmlspecialchars() function. The form code should look like this: <form method=\"post\" action=\" <?php echo htmlspecialchars ( $_SERVER [ \"PHP_SELF\" ]); ?> \"> The htmlspecialchars() function converts special characters to HTML entities. Now if the user tries to exploit the PHP_SELF variable, it will result in the following output: < form method = \"post\" action = \"test_form.php/&quot;&gt;&lt;script&gt;alert('hacked')&lt;/script&gt;\" > The exploit attempt fails, and no harm is done!","title":"How To Avoid $_SERVER[\"PHP_SELF\"] Exploits?"},{"location":"PR/phpForms/#validate-form-data-with-php","text":"The first thing we will do is to pass all variables through PHP's htmlspecialchars() function. When we use the htmlspecialchars() function; then if a user tries to submit the following in a text field: < script > location . href ( 'http://www.hacked.com' )</ script > This would not be executed, because it would be saved as HTML escaped code, like this: &lt; script &gt; location.href('http://www.hacked.com') &lt; /script &gt; The code is now safe to be displayed on a page or inside an e-mail. We will also do two more things when the user submits the form: Strip unnecessary characters (extra space, tab, newline) from the user input data (with the PHP trim() function) Remove backslashes (\\) from the user input data (with the PHP stripslashes() function) The next step is to create a function that will do all the checking for us (which is much more convenient than writing the same code over and over again). We will name the function test_input(). Now, we can check each $_POST variable with the test_input() function, and the script looks like this: <?php // define variables and set to empty values $name = $email = $gender = $comment = $website = \"\" ; if ( $_SERVER [ \"REQUEST_METHOD\" ] == \"POST\" ) { $name = test_input ( $_POST [ \"name\" ]); $email = test_input ( $_POST [ \"email\" ]); $website = test_input ( $_POST [ \"website\" ]); $comment = test_input ( $_POST [ \"comment\" ]); $gender = test_input ( $_POST [ \"gender\" ]); } function test_input ( $data ) { $data = trim ( $data ); $data = stripslashes ( $data ); $data = htmlspecialchars ( $data ); return $data ; } ?> Notice that at the start of the script, we check whether the form has been submitted using $_SERVER[\"REQUEST_METHOD\"]. If the REQUEST_METHOD is POST, then the form has been submitted - and it should be validated. If it has not been submitted, skip the validation and display a blank form. However, in the example above, all input fields are optional. The script works fine even if the user does not enter any data.","title":"Validate Form Data With PHP"},{"location":"PR/phpForms/#required-fields","text":"In the following code we have added some new variables: $nameErr, $emailErr, $genderErr, and $websiteErr. These error variables will hold error messages for the required fields. We have also added an if else statement for each $_POST variable. This checks if the $_POST variable is empty (with the PHP empty() function). If it is empty, an error message is stored in the different error variables, and if it is not empty, it sends the user input data through the test_input() function. <?php // define variables and set to empty values $nameErr = $emailErr = $genderErr = $websiteErr = \"\" ; $name = $email = $gender = $comment = $website = \"\" ; if ( $_SERVER [ \"REQUEST_METHOD\" ] == \"POST\" ) { if ( empty ( $_POST [ \"name\" ])) { $nameErr = \"Name is required\" ; } else { $name = test_input ( $_POST [ \"name\" ]); } if ( empty ( $_POST [ \"email\" ])) { $emailErr = \"Email is required\" ; } else { $email = test_input ( $_POST [ \"email\" ]); } if ( empty ( $_POST [ \"website\" ])) { $website = \"\" ; } else { $website = test_input ( $_POST [ \"website\" ]); } if ( empty ( $_POST [ \"comment\" ])) { $comment = \"\" ; } else { $comment = test_input ( $_POST [ \"comment\" ]); } if ( empty ( $_POST [ \"gender\" ])) { $genderErr = \"Gender is required\" ; } else { $gender = test_input ( $_POST [ \"gender\" ]); } } ?>","title":"Required Fields"},{"location":"PR/phpForms/#display-the-error-messages","text":"Then in the HTML form, we add a little script after each required field, which generates the correct error message if needed (that is if the user tries to submit the form without filling out the required fields). <!-- HTML form --> < form method = \"post\" action = \"<?php echo htmlspecialchars($_SERVER[\" PHP_SELF \"]);? > \"> Name: < input type = \"text\" name = \"name\" > < span class = \"error\" > * <?php echo $nameErr;?> </ span > < br >< br > E-mail: < input type = \"text\" name = \"email\" > < span class = \"error\" > * <?php echo $emailErr;?> </ span > < br >< br > Website: < input type = \"text\" name = \"website\" > < span class = \"error\" > <?php echo $websiteErr;?> </ span > < br >< br > Comment: < textarea name = \"comment\" rows = \"5\" cols = \"40\" ></ textarea > < br >< br > Gender: < input type = \"radio\" name = \"gender\" value = \"female\" > Female < input type = \"radio\" name = \"gender\" value = \"male\" > Male < input type = \"radio\" name = \"gender\" value = \"other\" > Other < span class = \"error\" > * <?php echo $genderErr;?> </ span > < br >< br > < input type = \"submit\" name = \"submit\" value = \"Submit\" > </ form >","title":"Display The Error Messages"},{"location":"PR/phpForms/#validate-name","text":"The code below shows a simple way to check if the name field only contains letters, dashes, apostrophes and whitespaces. If the value of the name field is not valid, then store an error message: $name = test_input($_POST[\"name\"]); if (!preg_match(\"/^[a-zA-Z-' ]*$/\",$name)) { $nameErr = \"Only letters and white space allowed\"; }","title":"Validate Name"},{"location":"PR/phpForms/#validate-e-mail","text":"The easiest and safest way to check whether an email address is well-formed is to use PHP's filter_var() function. In the code below, if the e-mail address is not well-formed, then store an error message: $email = test_input($_POST[\"email\"]); if (!filter_var($email, FILTER_VALIDATE_EMAIL)) { $emailErr = \"Invalid email format\"; }","title":"Validate E-mail"},{"location":"PR/phpForms/#validate-url","text":"The code below shows a way to check if a URL address syntax is valid (this regular expression also allows dashes in the URL). If the URL address syntax is not valid, then store an error message: $website = test_input($_POST[\"website\"]); if (!preg_match(\"/\\b(?:(?:https?|ftp):\\/\\/|www\\.)[-a-z0-9+&@#\\/%?=~_|!:,.;]*[-a-z0-9+&@#\\/%=~_|]/i\",$website)) { $websiteErr = \"Invalid URL\"; }","title":"Validate URL"},{"location":"PR/phpForms/#validate-name-e-mail-and-url","text":"Now, the script looks like this. <?php // define variables and set to empty values $nameErr = $emailErr = $genderErr = $websiteErr = \"\" ; $name = $email = $gender = $comment = $website = \"\" ; if ( $_SERVER [ \"REQUEST_METHOD\" ] == \"POST\" ) { if ( empty ( $_POST [ \"name\" ])) { $nameErr = \"Name is required\" ; } else { $name = test_input ( $_POST [ \"name\" ]); // check if name only contains letters and whitespace if ( ! preg_match ( \"/^[a-zA-Z-' ]*$/\" , $name )) { $nameErr = \"Only letters and white space allowed\" ; } } if ( empty ( $_POST [ \"email\" ])) { $emailErr = \"Email is required\" ; } else { $email = test_input ( $_POST [ \"email\" ]); // check if e-mail address is well-formed if ( ! filter_var ( $email , FILTER_VALIDATE_EMAIL )) { $emailErr = \"Invalid email format\" ; } } if ( empty ( $_POST [ \"website\" ])) { $website = \"\" ; } else { $website = test_input ( $_POST [ \"website\" ]); // check if URL address syntax is valid (this regular expression also allows dashes in the URL) if ( ! preg_match ( \"/\\b(?:(?:https?|ftp):\\/\\/|www\\.)[-a-z0-9+&@#\\/%?=~_|!:,.;]*[-a-z0-9+&@#\\/%=~_|]/i\" , $website )) { $websiteErr = \"Invalid URL\" ; } } if ( empty ( $_POST [ \"comment\" ])) { $comment = \"\" ; } else { $comment = test_input ( $_POST [ \"comment\" ]); } if ( empty ( $_POST [ \"gender\" ])) { $genderErr = \"Gender is required\" ; } else { $gender = test_input ( $_POST [ \"gender\" ]); } } ?>","title":"Validate Name, E-mail, and URL"},{"location":"PR/phpForms/#keep-the-values-in-the-form","text":"To show the values in the input fields after the user hits the submit button, we add a little PHP script inside the value attribute of the following input fields: name, email, and website. In the comment textarea field, we put the script between the <'textarea> and <'/textarea> tags. The little script outputs the value of the $name, $email, $website, and $comment variables. Then, we also need to show which radio button that was checked. For this, we must manipulate the checked attribute (not the value attribute for radio buttons): Name: <input type=\"text\" name=\"name\" value=\" <?php echo $name ; ?> \"> E-mail: <input type=\"text\" name=\"email\" value=\" <?php echo $email ; ?> \"> Website: <input type=\"text\" name=\"website\" value=\" <?php echo $website ; ?> \"> Comment: <textarea name=\"comment\" rows=\"5\" cols=\"40\"> <?php echo $comment ; ?> </textarea> Gender: <input type=\"radio\" name=\"gender\" <?php if ( isset ( $gender ) && $gender == \"female\" ) echo \"checked\" ; ?> value=\"female\">Female <input type=\"radio\" name=\"gender\" <?php if ( isset ( $gender ) && $gender == \"male\" ) echo \"checked\" ; ?> value=\"male\">Male <input type=\"radio\" name=\"gender\" <?php if ( isset ( $gender ) && $gender == \"other\" ) echo \"checked\" ; ?> value=\"other\">Other","title":"Keep The Values in The Form"},{"location":"PR/phpForms/#complete","text":"<!DOCTYPE HTML> <html> <head> <style> .error {color: #FF0000;} </style> </head> <body> <?php // define variables and set to empty values $nameErr = $emailErr = $genderErr = $websiteErr = \"\" ; $name = $email = $gender = $comment = $website = \"\" ; if ( $_SERVER [ \"REQUEST_METHOD\" ] == \"POST\" ) { if ( empty ( $_POST [ \"name\" ])) { $nameErr = \"Name is required\" ; } else { $name = test_input ( $_POST [ \"name\" ]); // check if name only contains letters and whitespace if ( ! preg_match ( \"/^[a-zA-Z-' ]*$/\" , $name )) { $nameErr = \"Only letters and white space allowed\" ; } } if ( empty ( $_POST [ \"email\" ])) { $emailErr = \"Email is required\" ; } else { $email = test_input ( $_POST [ \"email\" ]); // check if e-mail address is well-formed if ( ! filter_var ( $email , FILTER_VALIDATE_EMAIL )) { $emailErr = \"Invalid email format\" ; } } if ( empty ( $_POST [ \"website\" ])) { $website = \"\" ; } else { $website = test_input ( $_POST [ \"website\" ]); // check if URL address syntax is valid (this regular expression also allows dashes in the URL) if ( ! preg_match ( \"/\\b(?:(?:https?|ftp):\\/\\/|www\\.)[-a-z0-9+&@#\\/%?=~_|!:,.;]*[-a-z0-9+&@#\\/%=~_|]/i\" , $website )) { $websiteErr = \"Invalid URL\" ; } } if ( empty ( $_POST [ \"comment\" ])) { $comment = \"\" ; } else { $comment = test_input ( $_POST [ \"comment\" ]); } if ( empty ( $_POST [ \"gender\" ])) { $genderErr = \"Gender is required\" ; } else { $gender = test_input ( $_POST [ \"gender\" ]); } } function test_input ( $data ) { $data = trim ( $data ); $data = stripslashes ( $data ); $data = htmlspecialchars ( $data ); return $data ; } ?> <h2>PHP Form Validation Example</h2> <p><span class=\"error\">* required field</span></p> <form method=\"post\" action=\" <?php echo htmlspecialchars ( $_SERVER [ \"PHP_SELF\" ]); ?> \"> Name: <input type=\"text\" name=\"name\" value=\" <?php echo $name ; ?> \"> <span class=\"error\">* <?php echo $nameErr ; ?> </span> <br><br> E-mail: <input type=\"text\" name=\"email\" value=\" <?php echo $email ; ?> \"> <span class=\"error\">* <?php echo $emailErr ; ?> </span> <br><br> Website: <input type=\"text\" name=\"website\" value=\" <?php echo $website ; ?> \"> <span class=\"error\"> <?php echo $websiteErr ; ?> </span> <br><br> Comment: <textarea name=\"comment\" rows=\"5\" cols=\"40\"> <?php echo $comment ; ?> </textarea> <br><br> Gender: <input type=\"radio\" name=\"gender\" <?php if ( isset ( $gender ) && $gender == \"female\" ) echo \"checked\" ; ?> value=\"female\">Female <input type=\"radio\" name=\"gender\" <?php if ( isset ( $gender ) && $gender == \"male\" ) echo \"checked\" ; ?> value=\"male\">Male <input type=\"radio\" name=\"gender\" <?php if ( isset ( $gender ) && $gender == \"other\" ) echo \"checked\" ; ?> value=\"other\">Other <span class=\"error\">* <?php echo $genderErr ; ?> </span> <br><br> <input type=\"submit\" name=\"submit\" value=\"Submit\"> </form> <?php echo \"<h2>Your Input:</h2>\" ; echo $name ; echo \"<br>\" ; echo $email ; echo \"<br>\" ; echo $website ; echo \"<br>\" ; echo $comment ; echo \"<br>\" ; echo $gender ; ?> </body> </html>","title":"Complete"},{"location":"PR/phpIF/","text":"Conditional statements are used to perform different actions based on different conditions. PHP Conditional Statements In PHP we have the following conditional statements: if statement - executes some code if one condition is true if...else statement - executes some code if a condition is true and another code if that condition is false if...elseif...else statement - executes different codes for more than two conditions switch statement - selects one of many blocks of code to be executed if statement <?php $t = date ( \"H\" ); if ( $t < \"20\" ) { echo \"Have a good day!\" ; } ?> if...else statement <?php $t = date ( \"H\" ); if ( $t < \"20\" ) { echo \"Have a good day!\" ; } else { echo \"Have a good night!\" ; } ?> if...elseif...else statement <?php $t = date ( \"H\" ); if ( $t < \"10\" ) { echo \"Have a good morning!\" ; } elseif ( $t < \"20\" ) { echo \"Have a good day!\" ; } else { echo \"Have a good night!\" ; } ?> endif The endif keyword is used to mark the end of an if conditional which was started with the if(...): syntax. It also applies to any variation of the if conditional, such as if...elseif and if...else. <?php $a = 4 ; if ( $a < 5 ) : echo \"Less than five\" ; endif ; ?> <?php $a = 4 ; if ( $a < 5 ) : echo \"Less than five\" ; elseif ( $a < 10 ) : echo \"More than five but less than ten\" ; else : echo \"Greater than ten\" ; endif ; ?> switch statement <?php $favcolor = \"red\" ; switch ( $favcolor ) { case \"red\" : echo \"Your favorite color is red!\" ; break ; case \"blue\" : echo \"Your favorite color is blue!\" ; break ; case \"green\" : echo \"Your favorite color is green!\" ; break ; //Use default to handle unspecified cases in a switch block default : echo \"Your favorite color is neither red, blue, nor green!\" ; } ?> endswitch The endswitch keyword is used to mark the end of a switch conditional which was started with the switch(...): syntax. <?php $a = 4 ; switch ( $a ) : case 1 : echo \"One\" ; break ; case 2 : echo \"Two\" ; break ; case 3 : echo \"Three\" ; break ; default : echo \"Many\" ; break ; endswitch ; ?>","title":"Conditionals"},{"location":"PR/phpIF/#php-conditional-statements","text":"In PHP we have the following conditional statements: if statement - executes some code if one condition is true if...else statement - executes some code if a condition is true and another code if that condition is false if...elseif...else statement - executes different codes for more than two conditions switch statement - selects one of many blocks of code to be executed","title":"PHP Conditional Statements"},{"location":"PR/phpIF/#if-statement","text":"<?php $t = date ( \"H\" ); if ( $t < \"20\" ) { echo \"Have a good day!\" ; } ?>","title":"if statement"},{"location":"PR/phpIF/#ifelse-statement","text":"<?php $t = date ( \"H\" ); if ( $t < \"20\" ) { echo \"Have a good day!\" ; } else { echo \"Have a good night!\" ; } ?>","title":"if...else statement"},{"location":"PR/phpIF/#ifelseifelse-statement","text":"<?php $t = date ( \"H\" ); if ( $t < \"10\" ) { echo \"Have a good morning!\" ; } elseif ( $t < \"20\" ) { echo \"Have a good day!\" ; } else { echo \"Have a good night!\" ; } ?>","title":"if...elseif...else statement"},{"location":"PR/phpIF/#endif","text":"The endif keyword is used to mark the end of an if conditional which was started with the if(...): syntax. It also applies to any variation of the if conditional, such as if...elseif and if...else. <?php $a = 4 ; if ( $a < 5 ) : echo \"Less than five\" ; endif ; ?> <?php $a = 4 ; if ( $a < 5 ) : echo \"Less than five\" ; elseif ( $a < 10 ) : echo \"More than five but less than ten\" ; else : echo \"Greater than ten\" ; endif ; ?>","title":"endif"},{"location":"PR/phpIF/#switch-statement","text":"<?php $favcolor = \"red\" ; switch ( $favcolor ) { case \"red\" : echo \"Your favorite color is red!\" ; break ; case \"blue\" : echo \"Your favorite color is blue!\" ; break ; case \"green\" : echo \"Your favorite color is green!\" ; break ; //Use default to handle unspecified cases in a switch block default : echo \"Your favorite color is neither red, blue, nor green!\" ; } ?>","title":"switch statement"},{"location":"PR/phpIF/#endswitch","text":"The endswitch keyword is used to mark the end of a switch conditional which was started with the switch(...): syntax. <?php $a = 4 ; switch ( $a ) : case 1 : echo \"One\" ; break ; case 2 : echo \"Two\" ; break ; case 3 : echo \"Three\" ; break ; default : echo \"Many\" ; break ; endswitch ; ?>","title":"endswitch"},{"location":"PR/phpKeywords/","text":"PHP has a set of keywords that are reserved words which cannot be used as function names, class names or method names. Prior to PHP 7, these keywords could not be used as class property names either: Logical OPs Keywords Keyword Description and A logical operator or A logical operator xor A logical operator Conditional Keywords Keyword Description switch Create a switch block case Used in the switch conditional default Used in the switch statement break Break out of loops and switch statements continue Jump to the next iteration of a loop endswitch End a switch block if Create a conditional statement else Used in conditional statements elseif Used in conditional statements endif End an if or elseif block empty Check if an expression is empty isset Check if a variable exists and is not null Loop Keywords Keyword Description do Create a do...while loop while Create a while loop or end a do...while loop endwhile End a while block for Create a for loop endfor End a for block foreach Create a foreach loop as Used in the foreach loop to traverse an associative array To give an alias to the method of a trait , or To give an alias to a namespace endforeach End a foreach block break Break out of loops and switch statements continue Jump to the next iteration of a loop I/O Keywords Keyword Description echo Output text print Output text Exception Keywords Keyword Description try Create a try...catch structure catch Used in the try..catch statement finally Used in the try...catch statement throw Throw an exception Functions Keywords Keyword Description fn Declare an arrow function function Create a function return Exit a function and return a value yield Used in generator functions yield from Used in generator functions callable A data type which can be executed as a function OOP Keywords Keyword Description abstract Declare a class as abstract class Declare a class clone Create a copy of an object const Define a class constant extends Extends a class or interface final Declare a class, property or method as final global Import variables from the global scope private Declare a property, method or constant as private protected Declare a property, method or constant as protected public Declare a property, method or constant as public static Declare a property or method as static implements Implement an interface instanceof Test an object's class insteadof Resolve conflicts with traits interface Declare an interface namespace Declares a namespace new Creates an object trait Declare a trait use Tells a class to inherit a trait and it gives an alias to a namespace Code Keywords Keyword Description declare Set directives for a block of code enddeclare End a declare block goto Jump to a line of code include Embed code from another file include_once Embed code from another file require Embed code from another file require_once Embed code from another file unset Delete a variable or array element var Declare a variable list Assigns array elements into variables","title":"Keywords"},{"location":"PR/phpKeywords/#logical-ops-keywords","text":"Keyword Description and A logical operator or A logical operator xor A logical operator","title":"Logical OPs Keywords"},{"location":"PR/phpKeywords/#conditional-keywords","text":"Keyword Description switch Create a switch block case Used in the switch conditional default Used in the switch statement break Break out of loops and switch statements continue Jump to the next iteration of a loop endswitch End a switch block if Create a conditional statement else Used in conditional statements elseif Used in conditional statements endif End an if or elseif block empty Check if an expression is empty isset Check if a variable exists and is not null","title":"Conditional Keywords"},{"location":"PR/phpKeywords/#loop-keywords","text":"Keyword Description do Create a do...while loop while Create a while loop or end a do...while loop endwhile End a while block for Create a for loop endfor End a for block foreach Create a foreach loop as Used in the foreach loop to traverse an associative array To give an alias to the method of a trait , or To give an alias to a namespace endforeach End a foreach block break Break out of loops and switch statements continue Jump to the next iteration of a loop","title":"Loop Keywords"},{"location":"PR/phpKeywords/#io-keywords","text":"Keyword Description echo Output text print Output text","title":"I/O Keywords"},{"location":"PR/phpKeywords/#exception-keywords","text":"Keyword Description try Create a try...catch structure catch Used in the try..catch statement finally Used in the try...catch statement throw Throw an exception","title":"Exception Keywords"},{"location":"PR/phpKeywords/#functions-keywords","text":"Keyword Description fn Declare an arrow function function Create a function return Exit a function and return a value yield Used in generator functions yield from Used in generator functions callable A data type which can be executed as a function","title":"Functions Keywords"},{"location":"PR/phpKeywords/#oop-keywords","text":"Keyword Description abstract Declare a class as abstract class Declare a class clone Create a copy of an object const Define a class constant extends Extends a class or interface final Declare a class, property or method as final global Import variables from the global scope private Declare a property, method or constant as private protected Declare a property, method or constant as protected public Declare a property, method or constant as public static Declare a property or method as static implements Implement an interface instanceof Test an object's class insteadof Resolve conflicts with traits interface Declare an interface namespace Declares a namespace new Creates an object trait Declare a trait use Tells a class to inherit a trait and it gives an alias to a namespace","title":"OOP Keywords"},{"location":"PR/phpKeywords/#code-keywords","text":"Keyword Description declare Set directives for a block of code enddeclare End a declare block goto Jump to a line of code include Embed code from another file include_once Embed code from another file require Embed code from another file require_once Embed code from another file unset Delete a variable or array element var Declare a variable list Assigns array elements into variables","title":"Code Keywords"},{"location":"PR/phpLoops/","text":"In PHP, we have the following loop types: while - loops through a block of code as long as the specified condition is true do...while - loops through a block of code once, and then repeats the loop as long as the specified condition is true for - loops through a block of code a specified number of times foreach - loops through a block of code for each element in an array To control further the flow of a loop, you can use the break and continue statements. while The while loop - Loops through a block of code as long as the specified condition is true. <?php $x = 1 ; while ( $x <= 5 ) { echo \"The number is: $x <br>\" ; $x ++ ; } ?> endwhile The endwhile keyword is used to close the code block of a while loop which was started using the while(...): syntax. <?php $x = 1 ; while ( $x <= 5 ) : echo \"The number is: $x <br>\" ; $x ++ ; endwhile ; ?> do...while The do...while loop - Loops through a block of code once, and then repeats the loop as long as the specified condition is true. In a do...while loop the condition is tested AFTER executing the statements within the loop. This means that the do...while loop will execute its statements at least once, even if the condition is false. See example below. <?php $x = 1 ; do { echo \"The number is: $x <br>\" ; $x ++ ; } while ( $x <= 5 ); ?> for The for loop - Loops through a block of code a specified number of times. <?php for ( $x = 0 ; $x <= 10 ; $x ++ ) { echo \"The number is: $x <br>\" ; } ?> endfor The endfor keyword is used to close the code block of a for loop which was started using the for(...): syntax. <?php for ( $i = 0 ; $i < 10 ; $i += 2 ) : echo \" $i <br>\" ; endfor ; ?> foreach The foreach loop - Loops through a block of code for each element in an array. <?php $colors = array ( \"red\" , \"green\" , \"blue\" , \"yellow\" ); foreach ( $colors as $value ) { echo \" $value <br>\" ; } ?> <?php $age = array ( \"Peter\" => \"35\" , \"Ben\" => \"37\" , \"Joe\" => \"43\" ); foreach ( $age as $x => $val ) { echo \" $x = $val <br>\" ; } ?> endforeach The endforeach keyword is used to close the code block of a foreach loop which was started using the foreach(...): syntax. <?php $cars = [ \"Ford\" , \"Volvo\" , \"BMW\" ]; foreach ( $cars as $car ) : echo \" $car <br>\" ; endforeach ; ?> Break and Continue PHP Break You have already seen the break statement used to \"jump out\" of a switch statement. The break statement can also be used to jump out of a loop. This example jumps out of the loop when x is equal to 4. <?php $x = 0 ; while ( $x < 10 ) { echo \"The number is: $x <br>\" ; $x ++ ; if ( $x == 4 ) { break ; } } ?> PHP Continue The continue statement breaks one iteration (in the loop), if a specified condition occurs, and continues with the next iteration in the loop. This example skips the value of 4. <?php for ( $x = 0 ; $x < 10 ; $x ++ ) { if ( $x == 4 ) { continue ; } echo \"The number is: $x <br>\" ; } ?>","title":"Loops"},{"location":"PR/phpLoops/#while","text":"The while loop - Loops through a block of code as long as the specified condition is true. <?php $x = 1 ; while ( $x <= 5 ) { echo \"The number is: $x <br>\" ; $x ++ ; } ?>","title":"while"},{"location":"PR/phpLoops/#endwhile","text":"The endwhile keyword is used to close the code block of a while loop which was started using the while(...): syntax. <?php $x = 1 ; while ( $x <= 5 ) : echo \"The number is: $x <br>\" ; $x ++ ; endwhile ; ?>","title":"endwhile"},{"location":"PR/phpLoops/#dowhile","text":"The do...while loop - Loops through a block of code once, and then repeats the loop as long as the specified condition is true. In a do...while loop the condition is tested AFTER executing the statements within the loop. This means that the do...while loop will execute its statements at least once, even if the condition is false. See example below. <?php $x = 1 ; do { echo \"The number is: $x <br>\" ; $x ++ ; } while ( $x <= 5 ); ?>","title":"do...while"},{"location":"PR/phpLoops/#for","text":"The for loop - Loops through a block of code a specified number of times. <?php for ( $x = 0 ; $x <= 10 ; $x ++ ) { echo \"The number is: $x <br>\" ; } ?>","title":"for"},{"location":"PR/phpLoops/#endfor","text":"The endfor keyword is used to close the code block of a for loop which was started using the for(...): syntax. <?php for ( $i = 0 ; $i < 10 ; $i += 2 ) : echo \" $i <br>\" ; endfor ; ?>","title":"endfor"},{"location":"PR/phpLoops/#foreach","text":"The foreach loop - Loops through a block of code for each element in an array. <?php $colors = array ( \"red\" , \"green\" , \"blue\" , \"yellow\" ); foreach ( $colors as $value ) { echo \" $value <br>\" ; } ?> <?php $age = array ( \"Peter\" => \"35\" , \"Ben\" => \"37\" , \"Joe\" => \"43\" ); foreach ( $age as $x => $val ) { echo \" $x = $val <br>\" ; } ?>","title":"foreach"},{"location":"PR/phpLoops/#endforeach","text":"The endforeach keyword is used to close the code block of a foreach loop which was started using the foreach(...): syntax. <?php $cars = [ \"Ford\" , \"Volvo\" , \"BMW\" ]; foreach ( $cars as $car ) : echo \" $car <br>\" ; endforeach ; ?>","title":"endforeach"},{"location":"PR/phpLoops/#break-and-continue","text":"","title":"Break and Continue"},{"location":"PR/phpLoops/#php-break","text":"You have already seen the break statement used to \"jump out\" of a switch statement. The break statement can also be used to jump out of a loop. This example jumps out of the loop when x is equal to 4. <?php $x = 0 ; while ( $x < 10 ) { echo \"The number is: $x <br>\" ; $x ++ ; if ( $x == 4 ) { break ; } } ?>","title":"PHP Break"},{"location":"PR/phpLoops/#php-continue","text":"The continue statement breaks one iteration (in the loop), if a specified condition occurs, and continues with the next iteration in the loop. This example skips the value of 4. <?php for ( $x = 0 ; $x < 10 ; $x ++ ) { if ( $x == 4 ) { continue ; } echo \"The number is: $x <br>\" ; } ?>","title":"PHP Continue"},{"location":"PR/phpMath1/","text":"Comparing Floating-Point Numbers Floating-point numbers are represented in binary form with only a finite number of bits for the mantissa and the exponent. You get overflows when you exceed those bits. As a result, sometimes PHP (just like some other languages) doesn\u2019t believe that two equal numbers are actually equal because they may differ toward the very end. To avoid this problem, instead of checking if $a == \\(b, make sure the first number is within a very small amount (\\) delta) of the second one. The size of your delta should be the smallest amount of difference you care about between two numbers. Then use abs() to get the absolute value of the difference. <?php $a = 1.00000001 ; $b = 1.00000000 ; $delta = 0.00001 ; if ( abs ( $a - $b ) < $delta ) { echo \"The numbers are almost equal\" ; } ?> Most Common Functions pi() The pi() function returns the value of PI. <?php echo ( pi ()); // returns 3.1415926535898 ?> min() and max() The min() and max() functions can be used to find the lowest or highest value in a list of arguments. <?php echo ( min ( 1 , 2 , 3 )); // returns 1 echo ( max ( 1 , 2 , 3 )); // returns 3 ?> floor() and ceil() The floor() and ceil() functions can be used to round a number down or up. <?php echo ( floor ( 3.7 )); // returns 3 echo ( ceil ( 3.1 )); // returns 4 ?> abs() The abs() function returns the absolute value of a number. <?php echo ( abs ( - 3.7 )); // returns 3.7 ?> sqrt() The sqrt() function returns the square root of a number. <?php echo ( sqrt ( 9 )); // returns 3 ?> round() The round() function rounds a number to the nearest integer. <?php echo ( round ( 3.7 )); // returns 4 ?> If a number falls exactly between two integers, PHP rounds away from 0: <?php $number = round ( 2.5 ); printf ( \"Rounding a positive number rounds up: %s \\n \" , $number ); $number = round ( - 2.5 ); printf ( \"Rounding a negative number rounds down: %s \\n \" , $number ); ?> Rounding a positive number rounds up: 3 Rounding a negative number rounds down: -3 To keep a set number of digits after the decimal point, round() accepts an optional precision argument. For example, perhaps you are calculating the total price for the items in a user\u2019s shopping cart: <?php $cart = 54.23 ; $tax = $cart * . 05 ; $total = $cart + $tax ; $final = round ( $total , 2 ); print \"Tax calculation uses all the digits it needs: $total , but \" ; print \"round() trims it to two decimal places: $final \" ; ?> Tax calculation uses all the digits it needs: 56.9415, but round() trims it to two decimal places: 56.94 rand() The rand() function generates a random number. <?php echo ( rand ( 1 , 10 )); // returns a random number between 1 and 10 (inclusive) ?> mt_rand() is less predictable and faster than rand(). <?php $lower = 65 ; $upper = 97 ; // random number between $upper and $lower, inclusive $random_number = mt_rand ( $lower , $upper ); ?> mt_srand() The mt_srand() function is used to seed the random number generator. When you want to make the random number generate predictable numbers so you can guarantee repeatable behavior. Seed the random number generator with a known value using mt_srand() (or srand()): <?php function pick_color () { $colors = array ( 'red' , 'orange' , 'yellow' , 'blue' , 'green' , 'indigo' , 'violet' ); $i = mt_rand ( 0 , count ( $colors ) - 1 ); return $colors [ $i ]; } mt_srand ( 34534 ); $first = pick_color (); $second = pick_color (); // Because a specific value was passed to mt_srand(), we can be // sure the same colors will get picked each time: red and yellow print \" $first is red and $second is yellow.\" ; ?> For unpredictable random numbers, letting PHP generate the seed is perfect. But seeding your random number generator with a known value is useful when you want the random number generator to generate a predictable series of values. This is handy when writing tests for your code. If you are writing a unit test to verify the behavior of a function that retrieves a random element from an array, the condition you\u2019re testing for will change each time the test runs if your numbers are really random. But by calling mt_srand() (or srand()) with a specific value at the beginning of your test, you can ensure that the sequence of random numbers that is generated is the same each time the test is run. Generating Biased Random Numbers You want to generate random numbers, but you want these numbers to be somewhat biased, so that numbers in certain ranges appear more frequently than others. For example, you want to spread out a series of banner ad impressions in proportion to the number of impressions remaining for each ad campaign. <?php // returns the weighted randomly selected key function rand_weighted ( $numbers ) { $total = 0 ; foreach ( $numbers as $number => $weight ) { $total += $weight ; $distribution [ $number ] = $total ; } $rand = mt_rand ( 0 , $total - 1 ); foreach ( $distribution as $number => $weights ) { if ( $rand < $weights ) { return $number ; } } } ?> With a generator in PHP 5.5, you could select the weighted random number without having to build the distribution array first: <?php function incremental_total ( $numbers ) { $total = 0 ; foreach ( $numbers as $number => $weight ) { $total += $weight ; yield $number => $total ; } } // returns the weighted randomly selected key function rand_weighted_generator ( $numbers ) { $total = array_sum ( $numbers ); $rand = mt_rand ( 0 , $total - 1 ); foreach ( incremental_total ( $numbers ) as $number => $weight ) { if ( $rand < $weight ) { return $number ; } } } ?> Converting Between Bases base_convert() The PHP base_convert() function converts a number from one base to another. The base_convert() function changes a string representing a number in one base to the correct string in another base. It works for all bases from 2 to 36 inclusive, using the letters a through z as additional symbols for bases above 10. The first argument is the number to be converted, followed by the base it is in and the base you want it to become. There are also a few specialized functions for conversions to and from base 10 and the most commonly used other bases of 2, 8, and 16. They\u2019re bindec() and decbin(), octdec() and decoct(), and hexdec() and dechex(): <?php echo base_convert ( 100 , 10 , 2 ); // outputs 1100100 // hexadecimal number (base 16) $hex = 'a1' ; // convert from base 16 to base 10 // $decimal is '161' $decimal = base_convert ( $hex , 16 , 10 ); // convert from base 2 to base 10 // $a = 27 $a = bindec ( 11011 ); // convert from base 8 to base 10 // $b = 27 $b = octdec ( 33 ); // convert from base 16 to base 10 // $c = 27 $c = hexdec ( '1b' ); // convert from base 10 to base 2 // $d = '11011' $d = decbin ( 27 ); // $e = '33' $e = decoct ( 27 ); // $f = '1b' $f = dechex ( 27 ); ?> Note that the specialized functions that convert to base 10 return integers. The functions that convert from base 10 return strings. Another alternative is to use the printf() family of functions. All Math Functions The PHP math functions are part of the PHP core. No installation is required to use these functions. Base Conversion Function Description base_convert() Converts a number from one number base to another bindec() Converts a binary number to a decimal number decbin() Converts a decimal number to a binary number dechex() Converts a decimal number to a hexadecimal number hexdec() Converts a hexadecimal number to a decimal number decoct() Converts a decimal number to an octal number octdec() Converts an octal number to a decimal number deg2rad() Converts a degree value to a radian value rad2deg() Converts a radian value to a degree value Trigonometric Functions Function Description acos() Returns the arc cosine of a number acosh() Returns the inverse hyperbolic cosine of a number asin() Returns the arc sine of a number asinh() Returns the inverse hyperbolic sine of a number atan() Returns the arc tangent of a number in radians atan2() Returns the arc tangent of two variables x and y atanh() Returns the inverse hyperbolic tangent of a number cos() Returns the cosine of a number cosh() Returns the hyperbolic cosine of a number hypot() Calculates the hypotenuse of a right-angle triangle sin() Returns the sine of a number sinh() Returns the hyperbolic sine of a number tan() Returns the tangent of a number tanh() Returns the hyperbolic tangent of a number Random Number Functions Function Description getrandmax() Returns the largest possible value returned by rand() lcg_value() Returns a pseudo random number in a range between 0 and 1 mt_getrandmax() Returns the largest possible value returned by mt_rand() mt_rand() Generates a random integer using Mersenne Twister algorithm mt_srand() Seeds the Mersenne Twister random number generator rand() Generates a random integer srand() Seeds the random number generator Power Functions Function Description exp() Calculates the exponent of e expm1() Returns exp(x) - 1 log() Returns the natural logarithm of a number log10() Returns the base-10 logarithm of a number log1p() Returns log(1+number) pow() Returns x raised to the power of y sqrt() Returns the square root of a number Miscellaneous Functions Function Description abs() Returns the absolute (positive) value of a number ceil() Rounds a number up to the nearest integer floor() Rounds a number down to the nearest integer fmod() Returns the remainder of x/y intdiv() Performs integer division is_finite() Checks whether a value is finite or not is_infinite() Checks whether a value is infinite or not is_nan() Checks whether a value is 'not-a-number' max() Returns the highest value in an array, or the highest value of several specified values min() Returns the lowest value in an array, or the lowest value of several specified values pi() Returns the value of PI round() Rounds a floating-point number Predefined Math Constants Constant Value Description INF INF The infinite M_E 2.7182818284590452354 Returns e M_EULER 0.57721566490153286061 Returns Euler constant M_LNPI 1.14472988584940017414 Returns the natural logarithm of PI: log_e(pi) M_LN2 0.69314718055994530942 Returns the natural logarithm of 2: log_e 2 M_LN10 2.30258509299404568402 Returns the natural logarithm of 10: log_e 10 M_LOG2E 1.4426950408889634074 Returns the base-2 logarithm of E: log_2 e M_LOG10E 0.43429448190325182765 Returns the base-10 logarithm of E: log_10 e M_PI 3.14159265358979323846 Returns Pi M_PI_2 1.57079632679489661923 Returns Pi/2 M_PI_4 0.78539816339744830962 Returns Pi/4 M_1_PI 0.31830988618379067154 Returns 1/Pi M_2_PI 0.63661977236758134308 Returns 2/Pi M_SQRTPI 1.77245385090551602729 Returns the square root of PI: sqrt(pi) M_2_SQRTPI 1.12837916709551257390 Returns 2/square root of PI: 2/sqrt(pi) M_SQRT1_2 0.70710678118654752440 Returns the square root of 1/2: 1/sqrt(2) M_SQRT2 1.41421356237309504880 Returns the square root of 2: sqrt(2) M_SQRT3 1.73205080756887729352 Returns the square root of 3: sqrt(3) NAN NAN Not A Number PHP_ROUND_HALF_UP 1 Round halves up PHP_ROUND_HALF_DOWN 2 Round halves down PHP_ROUND_HALF_EVEN 3 Round halves to even numbers PHP_ROUND_HALF_ODD 4 Round halves to odd numbers","title":"Functions"},{"location":"PR/phpMath1/#comparing-floating-point-numbers","text":"Floating-point numbers are represented in binary form with only a finite number of bits for the mantissa and the exponent. You get overflows when you exceed those bits. As a result, sometimes PHP (just like some other languages) doesn\u2019t believe that two equal numbers are actually equal because they may differ toward the very end. To avoid this problem, instead of checking if $a == \\(b, make sure the first number is within a very small amount (\\) delta) of the second one. The size of your delta should be the smallest amount of difference you care about between two numbers. Then use abs() to get the absolute value of the difference. <?php $a = 1.00000001 ; $b = 1.00000000 ; $delta = 0.00001 ; if ( abs ( $a - $b ) < $delta ) { echo \"The numbers are almost equal\" ; } ?>","title":"Comparing Floating-Point Numbers"},{"location":"PR/phpMath1/#most-common-functions","text":"","title":"Most Common Functions"},{"location":"PR/phpMath1/#pi","text":"The pi() function returns the value of PI. <?php echo ( pi ()); // returns 3.1415926535898 ?>","title":"pi()"},{"location":"PR/phpMath1/#min-and-max","text":"The min() and max() functions can be used to find the lowest or highest value in a list of arguments. <?php echo ( min ( 1 , 2 , 3 )); // returns 1 echo ( max ( 1 , 2 , 3 )); // returns 3 ?>","title":"min() and max()"},{"location":"PR/phpMath1/#floor-and-ceil","text":"The floor() and ceil() functions can be used to round a number down or up. <?php echo ( floor ( 3.7 )); // returns 3 echo ( ceil ( 3.1 )); // returns 4 ?>","title":"floor() and ceil()"},{"location":"PR/phpMath1/#abs","text":"The abs() function returns the absolute value of a number. <?php echo ( abs ( - 3.7 )); // returns 3.7 ?>","title":"abs()"},{"location":"PR/phpMath1/#sqrt","text":"The sqrt() function returns the square root of a number. <?php echo ( sqrt ( 9 )); // returns 3 ?>","title":"sqrt()"},{"location":"PR/phpMath1/#round","text":"The round() function rounds a number to the nearest integer. <?php echo ( round ( 3.7 )); // returns 4 ?> If a number falls exactly between two integers, PHP rounds away from 0: <?php $number = round ( 2.5 ); printf ( \"Rounding a positive number rounds up: %s \\n \" , $number ); $number = round ( - 2.5 ); printf ( \"Rounding a negative number rounds down: %s \\n \" , $number ); ?> Rounding a positive number rounds up: 3 Rounding a negative number rounds down: -3 To keep a set number of digits after the decimal point, round() accepts an optional precision argument. For example, perhaps you are calculating the total price for the items in a user\u2019s shopping cart: <?php $cart = 54.23 ; $tax = $cart * . 05 ; $total = $cart + $tax ; $final = round ( $total , 2 ); print \"Tax calculation uses all the digits it needs: $total , but \" ; print \"round() trims it to two decimal places: $final \" ; ?> Tax calculation uses all the digits it needs: 56.9415, but round() trims it to two decimal places: 56.94","title":"round()"},{"location":"PR/phpMath1/#rand","text":"The rand() function generates a random number. <?php echo ( rand ( 1 , 10 )); // returns a random number between 1 and 10 (inclusive) ?> mt_rand() is less predictable and faster than rand(). <?php $lower = 65 ; $upper = 97 ; // random number between $upper and $lower, inclusive $random_number = mt_rand ( $lower , $upper ); ?>","title":"rand()"},{"location":"PR/phpMath1/#mt_srand","text":"The mt_srand() function is used to seed the random number generator. When you want to make the random number generate predictable numbers so you can guarantee repeatable behavior. Seed the random number generator with a known value using mt_srand() (or srand()): <?php function pick_color () { $colors = array ( 'red' , 'orange' , 'yellow' , 'blue' , 'green' , 'indigo' , 'violet' ); $i = mt_rand ( 0 , count ( $colors ) - 1 ); return $colors [ $i ]; } mt_srand ( 34534 ); $first = pick_color (); $second = pick_color (); // Because a specific value was passed to mt_srand(), we can be // sure the same colors will get picked each time: red and yellow print \" $first is red and $second is yellow.\" ; ?> For unpredictable random numbers, letting PHP generate the seed is perfect. But seeding your random number generator with a known value is useful when you want the random number generator to generate a predictable series of values. This is handy when writing tests for your code. If you are writing a unit test to verify the behavior of a function that retrieves a random element from an array, the condition you\u2019re testing for will change each time the test runs if your numbers are really random. But by calling mt_srand() (or srand()) with a specific value at the beginning of your test, you can ensure that the sequence of random numbers that is generated is the same each time the test is run.","title":"mt_srand()"},{"location":"PR/phpMath1/#generating-biased-random-numbers","text":"You want to generate random numbers, but you want these numbers to be somewhat biased, so that numbers in certain ranges appear more frequently than others. For example, you want to spread out a series of banner ad impressions in proportion to the number of impressions remaining for each ad campaign. <?php // returns the weighted randomly selected key function rand_weighted ( $numbers ) { $total = 0 ; foreach ( $numbers as $number => $weight ) { $total += $weight ; $distribution [ $number ] = $total ; } $rand = mt_rand ( 0 , $total - 1 ); foreach ( $distribution as $number => $weights ) { if ( $rand < $weights ) { return $number ; } } } ?> With a generator in PHP 5.5, you could select the weighted random number without having to build the distribution array first: <?php function incremental_total ( $numbers ) { $total = 0 ; foreach ( $numbers as $number => $weight ) { $total += $weight ; yield $number => $total ; } } // returns the weighted randomly selected key function rand_weighted_generator ( $numbers ) { $total = array_sum ( $numbers ); $rand = mt_rand ( 0 , $total - 1 ); foreach ( incremental_total ( $numbers ) as $number => $weight ) { if ( $rand < $weight ) { return $number ; } } } ?>","title":"Generating Biased Random Numbers"},{"location":"PR/phpMath1/#converting-between-bases","text":"","title":"Converting Between Bases"},{"location":"PR/phpMath1/#base_convert","text":"The PHP base_convert() function converts a number from one base to another. The base_convert() function changes a string representing a number in one base to the correct string in another base. It works for all bases from 2 to 36 inclusive, using the letters a through z as additional symbols for bases above 10. The first argument is the number to be converted, followed by the base it is in and the base you want it to become. There are also a few specialized functions for conversions to and from base 10 and the most commonly used other bases of 2, 8, and 16. They\u2019re bindec() and decbin(), octdec() and decoct(), and hexdec() and dechex(): <?php echo base_convert ( 100 , 10 , 2 ); // outputs 1100100 // hexadecimal number (base 16) $hex = 'a1' ; // convert from base 16 to base 10 // $decimal is '161' $decimal = base_convert ( $hex , 16 , 10 ); // convert from base 2 to base 10 // $a = 27 $a = bindec ( 11011 ); // convert from base 8 to base 10 // $b = 27 $b = octdec ( 33 ); // convert from base 16 to base 10 // $c = 27 $c = hexdec ( '1b' ); // convert from base 10 to base 2 // $d = '11011' $d = decbin ( 27 ); // $e = '33' $e = decoct ( 27 ); // $f = '1b' $f = dechex ( 27 ); ?> Note that the specialized functions that convert to base 10 return integers. The functions that convert from base 10 return strings. Another alternative is to use the printf() family of functions.","title":"base_convert()"},{"location":"PR/phpMath1/#all-math-functions","text":"The PHP math functions are part of the PHP core. No installation is required to use these functions.","title":"All Math Functions"},{"location":"PR/phpMath1/#base-conversion","text":"Function Description base_convert() Converts a number from one number base to another bindec() Converts a binary number to a decimal number decbin() Converts a decimal number to a binary number dechex() Converts a decimal number to a hexadecimal number hexdec() Converts a hexadecimal number to a decimal number decoct() Converts a decimal number to an octal number octdec() Converts an octal number to a decimal number deg2rad() Converts a degree value to a radian value rad2deg() Converts a radian value to a degree value","title":"Base Conversion"},{"location":"PR/phpMath1/#trigonometric-functions","text":"Function Description acos() Returns the arc cosine of a number acosh() Returns the inverse hyperbolic cosine of a number asin() Returns the arc sine of a number asinh() Returns the inverse hyperbolic sine of a number atan() Returns the arc tangent of a number in radians atan2() Returns the arc tangent of two variables x and y atanh() Returns the inverse hyperbolic tangent of a number cos() Returns the cosine of a number cosh() Returns the hyperbolic cosine of a number hypot() Calculates the hypotenuse of a right-angle triangle sin() Returns the sine of a number sinh() Returns the hyperbolic sine of a number tan() Returns the tangent of a number tanh() Returns the hyperbolic tangent of a number","title":"Trigonometric Functions"},{"location":"PR/phpMath1/#random-number-functions","text":"Function Description getrandmax() Returns the largest possible value returned by rand() lcg_value() Returns a pseudo random number in a range between 0 and 1 mt_getrandmax() Returns the largest possible value returned by mt_rand() mt_rand() Generates a random integer using Mersenne Twister algorithm mt_srand() Seeds the Mersenne Twister random number generator rand() Generates a random integer srand() Seeds the random number generator","title":"Random Number Functions"},{"location":"PR/phpMath1/#power-functions","text":"Function Description exp() Calculates the exponent of e expm1() Returns exp(x) - 1 log() Returns the natural logarithm of a number log10() Returns the base-10 logarithm of a number log1p() Returns log(1+number) pow() Returns x raised to the power of y sqrt() Returns the square root of a number","title":"Power Functions"},{"location":"PR/phpMath1/#miscellaneous-functions","text":"Function Description abs() Returns the absolute (positive) value of a number ceil() Rounds a number up to the nearest integer floor() Rounds a number down to the nearest integer fmod() Returns the remainder of x/y intdiv() Performs integer division is_finite() Checks whether a value is finite or not is_infinite() Checks whether a value is infinite or not is_nan() Checks whether a value is 'not-a-number' max() Returns the highest value in an array, or the highest value of several specified values min() Returns the lowest value in an array, or the lowest value of several specified values pi() Returns the value of PI round() Rounds a floating-point number","title":"Miscellaneous Functions"},{"location":"PR/phpMath1/#predefined-math-constants","text":"Constant Value Description INF INF The infinite M_E 2.7182818284590452354 Returns e M_EULER 0.57721566490153286061 Returns Euler constant M_LNPI 1.14472988584940017414 Returns the natural logarithm of PI: log_e(pi) M_LN2 0.69314718055994530942 Returns the natural logarithm of 2: log_e 2 M_LN10 2.30258509299404568402 Returns the natural logarithm of 10: log_e 10 M_LOG2E 1.4426950408889634074 Returns the base-2 logarithm of E: log_2 e M_LOG10E 0.43429448190325182765 Returns the base-10 logarithm of E: log_10 e M_PI 3.14159265358979323846 Returns Pi M_PI_2 1.57079632679489661923 Returns Pi/2 M_PI_4 0.78539816339744830962 Returns Pi/4 M_1_PI 0.31830988618379067154 Returns 1/Pi M_2_PI 0.63661977236758134308 Returns 2/Pi M_SQRTPI 1.77245385090551602729 Returns the square root of PI: sqrt(pi) M_2_SQRTPI 1.12837916709551257390 Returns 2/square root of PI: 2/sqrt(pi) M_SQRT1_2 0.70710678118654752440 Returns the square root of 1/2: 1/sqrt(2) M_SQRT2 1.41421356237309504880 Returns the square root of 2: sqrt(2) M_SQRT3 1.73205080756887729352 Returns the square root of 3: sqrt(3) NAN NAN Not A Number PHP_ROUND_HALF_UP 1 Round halves up PHP_ROUND_HALF_DOWN 2 Round halves down PHP_ROUND_HALF_EVEN 3 Round halves to even numbers PHP_ROUND_HALF_ODD 4 Round halves to odd numbers","title":"Predefined Math Constants"},{"location":"PR/phpNum1/","text":"PHP Numbers One thing to notice about PHP is that it provides automatic data type conversion. So, if you assign an integer value to a variable, the type of that variable will automatically be an integer. Then, if you assign a string to the same variable, the type will change to a string. This automatic conversion can sometimes break your code. PHP Integers An integer data type is a non-decimal number between -2147483648 and 2147483647 in 32 bit systems, and between -9223372036854775808 and 9223372036854775807 in 64 bit systems. A value greater (or lower) than this, will be stored as float, because it exceeds the limit of an integer. Another important thing to know is that even if 4 * 2.5 is 10, the result is stored as float, because one of the operands is a float (2.5). Integers can be specified in three formats: decimal (10-based), hexadecimal (16-based - prefixed with 0x) or octal (8-based - prefixed with 0) PHP Integer Constants PHP has the following predefined constants for integers: PHP_INT_MAX - The largest integer supported PHP_INT_MIN - The smallest integer supported PHP_INT_SIZE - The size of an integer in bytes PHP Integer Functions PHP has the following functions to check if the type of a variable is integer: is_int() is_integer() - alias of is_int() is_long() - alias of is_int() PHP Floats The float data type can commonly store a value up to 1.7976931348623E+308 (platform dependent), and have a maximum precision of 14 digits. PHP Float Constants PHP has the following predefined constants for floats (from PHP 7.2): PHP_FLOAT_MAX - The largest representable floating point number PHP_FLOAT_MIN - The smallest representable positive floating point number PHP_FLOAT_DIG - The number of decimal digits that can be rounded into a float and back without precision loss PHP_FLOAT_EPSILON - The smallest representable positive number x, so that x + 1.0 != 1.0 PHP Float Functions PHP has the following functions to check if the type of a variable is float: is_float() is_double() - alias of is_float() PHP Infinity A numeric value that is larger than PHP_FLOAT_MAX is considered infinite. PHP has the following functions to check if a numeric value is finite or infinite: is_finite() is_infinite() <!DOCTYPE html> <html> <body> <?php // Check if a numeric value is finite or infinite $x = 1.9e411 ; var_dump ( $x ); ?> </body> </html> PHP NaN NaN stands for Not a Number. NaN is used for impossible mathematical operations. PHP has the following functions to check if a value is not a number: is_nan() <!DOCTYPE html> <html> <body> <?php // Invalid calculation will return a NaN value $x = acos ( 8 ); var_dump ( $x ); ?> </body> </html> Numerical Strings - is_numeric() The PHP is_numeric() function can be used to find whether a variable is numeric. The function returns true if the variable is a number or a numeric string, false otherwise. From PHP 7.0: The is_numeric() function will return FALSE for numeric strings in hexadecimal form (e.g. 0xf4c3b00c), as they are no longer considered as numeric strings. <!DOCTYPE html> <html> <body> <?php // Check if the variable is numeric $x = 5985 ; var_dump ( is_numeric ( $x )); echo \"<br>\" ; $x = \"5985\" ; var_dump ( is_numeric ( $x )); echo \"<br>\" ; $x = \"59.85\" + 100 ; var_dump ( is_numeric ( $x )); echo \"<br>\" ; $x = \"Hello\" ; var_dump ( is_numeric ( $x )); ?> </body> </html> When you want to ensure that a variable contains a number, even if it\u2019s typed as a string. Alternatively, you want to check if a variable is not only a number, but is also specifically typed as one. <?php foreach ([ 5 , '5' , '05' , 12.3 , '16.7' , 'five' , 0xDECAFBAD , '10e200' ] as $maybeNumber ) { $isItNumeric = is_numeric ( $maybeNumber ); $actualType = gettype ( $maybeNumber ); print \"Is the $actualType $maybeNumber numeric? \" ; if ( is_numeric ( $maybeNumber )) { print \"yes\" ; } else { print \"no\" ; } print \" \\n \" ; } ?> Is the integer 5 numeric? yes Is the string 5 numeric? yes Is the string 05 numeric? yes Is the double 12.3 numeric? yes Is the string 16.7 numeric? yes Is the string five numeric? no Is the integer 3737844653 numeric? yes Is the string 10e200 numeric? yes Helpfully, is_numeric() properly parses decimal numbers, such as 5.1; however, numbers with thousands separators, such as 5,100, cause is_numeric() to return false. To strip the thousands separators from your number before calling is_numeric(), use str_replace() . <?php $number = \"5,100\" ; // This is_numeric() call returns false $withCommas = is_numeric ( $number ); // This is_numeric() call returns true $withoutCommas = is_numeric ( str_replace ( ',' , '' , $number )); ?> PHP Casting to Integers Sometimes you need to cast a numerical value into another data type. The (int), (integer), or intval() function are often used to convert a value to an integer. <!DOCTYPE html> <html> <body> <?php // Cast float to int $x = 23465.768 ; $int_cast = ( int ) $x ; echo $int_cast ; echo \"<br>\" ; // Cast string to int $x = \"23465.768\" ; $int_cast = ( int ) $x ; echo $int_cast ; ?> </body> </html> Handling Very Large or Very Small Numbers You need to use numbers that are too large (or small) for PHP\u2019s built-in floating-point numbers. Use either the BCMath or GMP libraries. Using BCMath <?php // $sum = \"9999999999999999\" $sum = bcadd ( '1234567812345678' , '8765432187654321' ); // $sum is now a string print $sum ; // prints 9999999999999999 ?> The BCMath library is easy to use. You pass in your numbers as strings, and the function returns the sum (or difference, product, etc.) as a string. However, the range of actions you can apply to numbers using BCMath is limited to basic arithmetic. Using GMP <?php $sum = gmp_add ( '1234567812345678' , '8765432187654321' ); // $sum is now a GMP resource, not a string; use gmp_strval() to convert print gmp_strval ( $sum ); // prints 9999999999999999 ?> While most members of the GMP family of functions accept integers and strings as arguments, they prefer to pass numbers around as resources, which are essentially pointers to internal representations of the numbers. So unlike BCMath functions, which return strings, GMP functions return only resources. You then pass the resource to any GMP function, and it acts as your number. The only downside is that when you want to view or use the resource with a non-GMP function, you need to explicitly convert it using gmp_strval() or gmp_intval(). <?php //Adding numbers using GMP $four = gmp_add ( 2 , 2 ); // You can pass integers $eight = gmp_add ( '4' , '4' ); // Or strings $twelve = gmp_add ( $four , $eight ); // Or GMP resources // Raising a number to a power $pow = gmp_pow ( 2 , 10 ); // Computing large factorials very quickly $factorial = gmp_fact ( 20 ); // Finding a GCD $gcd = gmp_gcd ( 123 , 456 ); // Other fancy mathematical stuff $legendre = gmp_legendre ( 1 , 7 ); ?> The BCMath and GMP libraries aren\u2019t necessarily enabled with all PHP configurations. BCMath is bundled with PHP, so it\u2019s likely to be available. However, GMP isn\u2019t bundled with PHP, so you\u2019ll need to download, install it, and instruct PHP to use it during the configuration process. Check the values of function_defined('bcadd') and function_defined('gmp_init') to see if you can use BCMath and GMP. PECL\u2019s big_int library It\u2019s faster than BCMath, and almost as powerful as GMP. However, whereas GMP is licensed under the LGPL, big_int is under a BSD-style license. <?php $two = bi_from_str ( '2' ); $four = bi_add ( $two , $two ); // Use bi_to_str() to get strings from big_int resources print bi_to_str ( $four ); // prints 4 // Computing large factorials very quickly $factorial = bi_fact ( 20 ); ?>","title":"Basics"},{"location":"PR/phpNum1/#php-numbers","text":"One thing to notice about PHP is that it provides automatic data type conversion. So, if you assign an integer value to a variable, the type of that variable will automatically be an integer. Then, if you assign a string to the same variable, the type will change to a string. This automatic conversion can sometimes break your code.","title":"PHP Numbers"},{"location":"PR/phpNum1/#php-integers","text":"An integer data type is a non-decimal number between -2147483648 and 2147483647 in 32 bit systems, and between -9223372036854775808 and 9223372036854775807 in 64 bit systems. A value greater (or lower) than this, will be stored as float, because it exceeds the limit of an integer. Another important thing to know is that even if 4 * 2.5 is 10, the result is stored as float, because one of the operands is a float (2.5). Integers can be specified in three formats: decimal (10-based), hexadecimal (16-based - prefixed with 0x) or octal (8-based - prefixed with 0)","title":"PHP Integers"},{"location":"PR/phpNum1/#php-integer-constants","text":"PHP has the following predefined constants for integers: PHP_INT_MAX - The largest integer supported PHP_INT_MIN - The smallest integer supported PHP_INT_SIZE - The size of an integer in bytes","title":"PHP Integer Constants"},{"location":"PR/phpNum1/#php-integer-functions","text":"PHP has the following functions to check if the type of a variable is integer: is_int() is_integer() - alias of is_int() is_long() - alias of is_int()","title":"PHP Integer Functions"},{"location":"PR/phpNum1/#php-floats","text":"The float data type can commonly store a value up to 1.7976931348623E+308 (platform dependent), and have a maximum precision of 14 digits.","title":"PHP Floats"},{"location":"PR/phpNum1/#php-float-constants","text":"PHP has the following predefined constants for floats (from PHP 7.2): PHP_FLOAT_MAX - The largest representable floating point number PHP_FLOAT_MIN - The smallest representable positive floating point number PHP_FLOAT_DIG - The number of decimal digits that can be rounded into a float and back without precision loss PHP_FLOAT_EPSILON - The smallest representable positive number x, so that x + 1.0 != 1.0","title":"PHP Float Constants"},{"location":"PR/phpNum1/#php-float-functions","text":"PHP has the following functions to check if the type of a variable is float: is_float() is_double() - alias of is_float()","title":"PHP Float Functions"},{"location":"PR/phpNum1/#php-infinity","text":"A numeric value that is larger than PHP_FLOAT_MAX is considered infinite. PHP has the following functions to check if a numeric value is finite or infinite: is_finite() is_infinite() <!DOCTYPE html> <html> <body> <?php // Check if a numeric value is finite or infinite $x = 1.9e411 ; var_dump ( $x ); ?> </body> </html>","title":"PHP Infinity"},{"location":"PR/phpNum1/#php-nan","text":"NaN stands for Not a Number. NaN is used for impossible mathematical operations. PHP has the following functions to check if a value is not a number: is_nan() <!DOCTYPE html> <html> <body> <?php // Invalid calculation will return a NaN value $x = acos ( 8 ); var_dump ( $x ); ?> </body> </html>","title":"PHP NaN"},{"location":"PR/phpNum1/#numerical-strings-is_numeric","text":"The PHP is_numeric() function can be used to find whether a variable is numeric. The function returns true if the variable is a number or a numeric string, false otherwise. From PHP 7.0: The is_numeric() function will return FALSE for numeric strings in hexadecimal form (e.g. 0xf4c3b00c), as they are no longer considered as numeric strings. <!DOCTYPE html> <html> <body> <?php // Check if the variable is numeric $x = 5985 ; var_dump ( is_numeric ( $x )); echo \"<br>\" ; $x = \"5985\" ; var_dump ( is_numeric ( $x )); echo \"<br>\" ; $x = \"59.85\" + 100 ; var_dump ( is_numeric ( $x )); echo \"<br>\" ; $x = \"Hello\" ; var_dump ( is_numeric ( $x )); ?> </body> </html> When you want to ensure that a variable contains a number, even if it\u2019s typed as a string. Alternatively, you want to check if a variable is not only a number, but is also specifically typed as one. <?php foreach ([ 5 , '5' , '05' , 12.3 , '16.7' , 'five' , 0xDECAFBAD , '10e200' ] as $maybeNumber ) { $isItNumeric = is_numeric ( $maybeNumber ); $actualType = gettype ( $maybeNumber ); print \"Is the $actualType $maybeNumber numeric? \" ; if ( is_numeric ( $maybeNumber )) { print \"yes\" ; } else { print \"no\" ; } print \" \\n \" ; } ?> Is the integer 5 numeric? yes Is the string 5 numeric? yes Is the string 05 numeric? yes Is the double 12.3 numeric? yes Is the string 16.7 numeric? yes Is the string five numeric? no Is the integer 3737844653 numeric? yes Is the string 10e200 numeric? yes Helpfully, is_numeric() properly parses decimal numbers, such as 5.1; however, numbers with thousands separators, such as 5,100, cause is_numeric() to return false. To strip the thousands separators from your number before calling is_numeric(), use str_replace() . <?php $number = \"5,100\" ; // This is_numeric() call returns false $withCommas = is_numeric ( $number ); // This is_numeric() call returns true $withoutCommas = is_numeric ( str_replace ( ',' , '' , $number )); ?>","title":"Numerical Strings - is_numeric()"},{"location":"PR/phpNum1/#php-casting-to-integers","text":"Sometimes you need to cast a numerical value into another data type. The (int), (integer), or intval() function are often used to convert a value to an integer. <!DOCTYPE html> <html> <body> <?php // Cast float to int $x = 23465.768 ; $int_cast = ( int ) $x ; echo $int_cast ; echo \"<br>\" ; // Cast string to int $x = \"23465.768\" ; $int_cast = ( int ) $x ; echo $int_cast ; ?> </body> </html>","title":"PHP Casting to Integers"},{"location":"PR/phpNum1/#handling-very-large-or-very-small-numbers","text":"You need to use numbers that are too large (or small) for PHP\u2019s built-in floating-point numbers. Use either the BCMath or GMP libraries.","title":"Handling Very Large or Very Small Numbers"},{"location":"PR/phpNum1/#using-bcmath","text":"<?php // $sum = \"9999999999999999\" $sum = bcadd ( '1234567812345678' , '8765432187654321' ); // $sum is now a string print $sum ; // prints 9999999999999999 ?> The BCMath library is easy to use. You pass in your numbers as strings, and the function returns the sum (or difference, product, etc.) as a string. However, the range of actions you can apply to numbers using BCMath is limited to basic arithmetic.","title":"Using BCMath"},{"location":"PR/phpNum1/#using-gmp","text":"<?php $sum = gmp_add ( '1234567812345678' , '8765432187654321' ); // $sum is now a GMP resource, not a string; use gmp_strval() to convert print gmp_strval ( $sum ); // prints 9999999999999999 ?> While most members of the GMP family of functions accept integers and strings as arguments, they prefer to pass numbers around as resources, which are essentially pointers to internal representations of the numbers. So unlike BCMath functions, which return strings, GMP functions return only resources. You then pass the resource to any GMP function, and it acts as your number. The only downside is that when you want to view or use the resource with a non-GMP function, you need to explicitly convert it using gmp_strval() or gmp_intval(). <?php //Adding numbers using GMP $four = gmp_add ( 2 , 2 ); // You can pass integers $eight = gmp_add ( '4' , '4' ); // Or strings $twelve = gmp_add ( $four , $eight ); // Or GMP resources // Raising a number to a power $pow = gmp_pow ( 2 , 10 ); // Computing large factorials very quickly $factorial = gmp_fact ( 20 ); // Finding a GCD $gcd = gmp_gcd ( 123 , 456 ); // Other fancy mathematical stuff $legendre = gmp_legendre ( 1 , 7 ); ?> The BCMath and GMP libraries aren\u2019t necessarily enabled with all PHP configurations. BCMath is bundled with PHP, so it\u2019s likely to be available. However, GMP isn\u2019t bundled with PHP, so you\u2019ll need to download, install it, and instruct PHP to use it during the configuration process. Check the values of function_defined('bcadd') and function_defined('gmp_init') to see if you can use BCMath and GMP.","title":"Using GMP"},{"location":"PR/phpNum1/#pecls-big_int-library","text":"It\u2019s faster than BCMath, and almost as powerful as GMP. However, whereas GMP is licensed under the LGPL, big_int is under a BSD-style license. <?php $two = bi_from_str ( '2' ); $four = bi_add ( $two , $two ); // Use bi_to_str() to get strings from big_int resources print bi_to_str ( $four ); // prints 4 // Computing large factorials very quickly $factorial = bi_fact ( 20 ); ?>","title":"PECL\u2019s big_int library"},{"location":"PR/phpOperators1/","text":"Operators are used to perform operations on variables and values. PHP divides the operators in the following groups: Arithmetic operators Assignment operators Comparison operators Increment/Decrement operators Logical operators String operators Array operators Conditional assignment operators PHP Arithmetic Operators The PHP arithmetic operators are used with numeric values to perform common arithmetical operations, such as addition, subtraction, multiplication etc. Operator Description Example Result + Addition $x + $y Sum of $x and $y - Subtraction $x - $y Difference of $x and $y * Multiplication $x * $y Product of $x and $y / Division $x / $y Quotient of $x and $y % Modulus $x % $y Remainder of $x divided by $y ** Exponentiation $x ** $y $x to the power of $y PHP Assignment Operators The PHP assignment operators are used with numeric values to write a value to a variable. The basic assignment operator in PHP is \"=\". It means that the left operand gets set to the value of the assignment expression on the right. Operator Description Example Result = Assignment $x = $y Assign $y to $x += Addition Assignment $x = $x + $y Add $y to $x and assign the result to $x -= Subtraction Assignment $x = $x - $y Subtract $y from $x and assign the result to $x *= Multiplication Assignment $x = $x * $y Multiply $x by $y and assign the result to $x /= Division Assignment $x = $x / $y Divide $x by $y and assign the result to $x %= Modulus Assignment $x = $x % $y Modulus of $x divided by $y and assign the result to $x Avoiding == Versus = Confusion Use: if (12 == $dwarves) { ... } instead of: if ($dwarves == 12) { ... } Putting the constant on the left triggers a parse error with the assignment operator. In other words, PHP complains when you write: if (12 = $dwarves) { ... } but: if ($dwarves = 12) { ... } silently executes, assigning 12 to the variable dwarves, and then executing the code inside the block. ($dwarves = 12 evaluates to 12, which is true.) Putting a constant on the left side of a comparison coerces the comparison to the type of the constant. This causes problems when you are comparing an integer with a variable that could be an integer or a string. 0 == $dwarves is true when $dwarves is 0, but it\u2019s also true when $dwarves is sleepy. Because an integer (0) is on the left side of the comparison, PHP converts what\u2019s on the right (the string sleepy) to an integer (0) before comparing. To avoid this, use the identity operator, 0 === $dwarves, instead. PHP Comparison Operators The PHP comparison operators are used to compare two values (number or string): Operator Description Example Result == Equal to $x == $y Returns true if $x is equal to $y === Identical to $x === $y Returns true if $x is equal to $y, and they are of the same type != Not equal to $x != $y Returns true if $x is not equal to $y <> Not equal to $x <> $y Returns true if $x is not equal to $y !== Not identical to $x !== $y Returns true if $x is not equal to $y, or they are not of the same type < Less than $x < $y Returns true if $x is less than $y <= Less than or equal to $x <= $y Returns true if $x is less than or equal to $y > Greater than $x > $y Returns true if $x is greater than $y >= Greater than or equal to $x >= $y Returns true if $x is greater than or equal to $y <=> Spaceship operator $x <=> $y Returns an integer less than, equal to, or greater than zero, depending on if $x is less than, equal to, or greater than $y. Introduced in PHP 7. PHP Increment / Decrement Operators The PHP increment and decrement operators are used to increase or decrease the value of a variable. Operator Description Result ++$x Pre-increment Increments $x by one, then returns $x $x++ Post-increment Returns $x, then increments $x by one --$x Pre-decrement Decrements $x by one, then returns $x $x-- Post-decrement Returns $x, then decrements $x by one PHP Logical Operators The PHP logical operators are used to combine conditional statements. Operator Description Example Result && Logical AND $x && $y Returns true if both $x and $y are true || Logical OR $x || $y Returns true if either $x or $y is true ! Logical NOT ! $x Returns the opposite of $x and Logical AND $x and $y Returns true if both $x and $y are true or Logical OR $x or $y Returns true if either $x or $y is true xor Logical Xor $x xor $y True if either $x or $y is true, but not both PHP String Operators The PHP string operators are used to concatenate strings. Operator Description Example Result . Concatenation $x . $y Concatenates $x and $y .= Concatenation assignment $x .= $y Appends $y to $x PHP Array Operators The PHP array operators are used to perform operations on arrays. Operator Description Example Result + Union $x + $y Union of $x and $y == Equality $x == $y Returns true if $x and $y have the same key/value pairs === Identity $x === $y Returns true if $x and $y have the same key/value pairs in the same order and of the same types != Inequality $x != $y Returns true if $x is not equal to $y <> Inequality $x <> $y Returns true if $x is not equal to $y !== Non-identity $x !== $y Returns true if $x is not identical to $y Conditional Assignment Operators Operator Description Example Result ?: Ternary Operator $x = expr1 ? expr2 : expr3 Returns the value of $x. The value of $x is expr2 if expr1 = TRUE. The value of $x is expr3 if expr1 = FALSE ?? Null coalescing $x = expr1 ?? expr2 Returns the value of $x. The value of $x is expr1 if expr1 exists, and is not NULL. If expr1 does not exist, or is NULL, the value of $x is expr2. Introduced in PHP 7","title":"Operators"},{"location":"PR/phpOperators1/#php-arithmetic-operators","text":"The PHP arithmetic operators are used with numeric values to perform common arithmetical operations, such as addition, subtraction, multiplication etc. Operator Description Example Result + Addition $x + $y Sum of $x and $y - Subtraction $x - $y Difference of $x and $y * Multiplication $x * $y Product of $x and $y / Division $x / $y Quotient of $x and $y % Modulus $x % $y Remainder of $x divided by $y ** Exponentiation $x ** $y $x to the power of $y","title":"PHP Arithmetic Operators"},{"location":"PR/phpOperators1/#php-assignment-operators","text":"The PHP assignment operators are used with numeric values to write a value to a variable. The basic assignment operator in PHP is \"=\". It means that the left operand gets set to the value of the assignment expression on the right. Operator Description Example Result = Assignment $x = $y Assign $y to $x += Addition Assignment $x = $x + $y Add $y to $x and assign the result to $x -= Subtraction Assignment $x = $x - $y Subtract $y from $x and assign the result to $x *= Multiplication Assignment $x = $x * $y Multiply $x by $y and assign the result to $x /= Division Assignment $x = $x / $y Divide $x by $y and assign the result to $x %= Modulus Assignment $x = $x % $y Modulus of $x divided by $y and assign the result to $x","title":"PHP Assignment Operators"},{"location":"PR/phpOperators1/#avoiding-versus-confusion","text":"Use: if (12 == $dwarves) { ... } instead of: if ($dwarves == 12) { ... } Putting the constant on the left triggers a parse error with the assignment operator. In other words, PHP complains when you write: if (12 = $dwarves) { ... } but: if ($dwarves = 12) { ... } silently executes, assigning 12 to the variable dwarves, and then executing the code inside the block. ($dwarves = 12 evaluates to 12, which is true.) Putting a constant on the left side of a comparison coerces the comparison to the type of the constant. This causes problems when you are comparing an integer with a variable that could be an integer or a string. 0 == $dwarves is true when $dwarves is 0, but it\u2019s also true when $dwarves is sleepy. Because an integer (0) is on the left side of the comparison, PHP converts what\u2019s on the right (the string sleepy) to an integer (0) before comparing. To avoid this, use the identity operator, 0 === $dwarves, instead.","title":"Avoiding == Versus = Confusion"},{"location":"PR/phpOperators1/#php-comparison-operators","text":"The PHP comparison operators are used to compare two values (number or string): Operator Description Example Result == Equal to $x == $y Returns true if $x is equal to $y === Identical to $x === $y Returns true if $x is equal to $y, and they are of the same type != Not equal to $x != $y Returns true if $x is not equal to $y <> Not equal to $x <> $y Returns true if $x is not equal to $y !== Not identical to $x !== $y Returns true if $x is not equal to $y, or they are not of the same type < Less than $x < $y Returns true if $x is less than $y <= Less than or equal to $x <= $y Returns true if $x is less than or equal to $y > Greater than $x > $y Returns true if $x is greater than $y >= Greater than or equal to $x >= $y Returns true if $x is greater than or equal to $y <=> Spaceship operator $x <=> $y Returns an integer less than, equal to, or greater than zero, depending on if $x is less than, equal to, or greater than $y. Introduced in PHP 7.","title":"PHP Comparison Operators"},{"location":"PR/phpOperators1/#php-increment-decrement-operators","text":"The PHP increment and decrement operators are used to increase or decrease the value of a variable. Operator Description Result ++$x Pre-increment Increments $x by one, then returns $x $x++ Post-increment Returns $x, then increments $x by one --$x Pre-decrement Decrements $x by one, then returns $x $x-- Post-decrement Returns $x, then decrements $x by one","title":"PHP Increment / Decrement Operators"},{"location":"PR/phpOperators1/#php-logical-operators","text":"The PHP logical operators are used to combine conditional statements. Operator Description Example Result && Logical AND $x && $y Returns true if both $x and $y are true || Logical OR $x || $y Returns true if either $x or $y is true ! Logical NOT ! $x Returns the opposite of $x and Logical AND $x and $y Returns true if both $x and $y are true or Logical OR $x or $y Returns true if either $x or $y is true xor Logical Xor $x xor $y True if either $x or $y is true, but not both","title":"PHP Logical Operators"},{"location":"PR/phpOperators1/#php-string-operators","text":"The PHP string operators are used to concatenate strings. Operator Description Example Result . Concatenation $x . $y Concatenates $x and $y .= Concatenation assignment $x .= $y Appends $y to $x","title":"PHP String Operators"},{"location":"PR/phpOperators1/#php-array-operators","text":"The PHP array operators are used to perform operations on arrays. Operator Description Example Result + Union $x + $y Union of $x and $y == Equality $x == $y Returns true if $x and $y have the same key/value pairs === Identity $x === $y Returns true if $x and $y have the same key/value pairs in the same order and of the same types != Inequality $x != $y Returns true if $x is not equal to $y <> Inequality $x <> $y Returns true if $x is not equal to $y !== Non-identity $x !== $y Returns true if $x is not identical to $y","title":"PHP Array Operators"},{"location":"PR/phpOperators1/#conditional-assignment-operators","text":"Operator Description Example Result ?: Ternary Operator $x = expr1 ? expr2 : expr3 Returns the value of $x. The value of $x is expr2 if expr1 = TRUE. The value of $x is expr3 if expr1 = FALSE ?? Null coalescing $x = expr1 ?? expr2 Returns the value of $x. The value of $x is expr1 if expr1 exists, and is not NULL. If expr1 does not exist, or is NULL, the value of $x is expr2. Introduced in PHP 7","title":"Conditional Assignment Operators"},{"location":"PR/phpStr/","text":"PHP strings are binary-safe (i.e., they can contain null bytes) and can grow and shrink on demand. Their size is limited only by the amount of memory that is available to PHP. Usually, PHP strings are ASCII strings. You must do extra work to handle non-ASCII data like UTF-8 or other multibyte character encodings. Initialization Similar in form and behavior to Perl and the Unix shell, strings can be initialized in four ways: With single quotes , With double quotes , With the \u201chere document\u201d (heredoc) format , and With the \u201cnowdoc\u201d (nowdoc) format . Single-quoted strings With single-quoted strings, the only special characters you need to escape inside a string are the backslash and the single quote itself. <?php print 'I\\'ve gone to the store.' ; ?> Double-quoted strings Double-quoted strings don\u2019t recognize escaped single quotes, but they do recognize interpolated variables and the following escape sequences. Escape sequence Character \\n Newline (ASCII 10) \\r Carriage return (ASCII 13) \\t Tab (ASCII 9) \\ Backslash $ Dollar sign \" Double quote \\0 through \\777 Octal value \\x0 through \\xFF Hex value <?php print \"I've gone to the store.\" ; print \"The sauce cost \\$ 10.25.\" ; $cost = '$10.25' ; print \"The sauce cost $cost .\" ; print \"The sauce cost \\$\\061\\060 . \\x32\\x35 .\" ; ?> Heredoc strings Heredoc-specified strings recognize all the interpolations and escapes of double-quoted strings, but they don\u2019t require double quotes to be escaped. Heredocs start with <<< and a token. That token (with no leading or trailing whitespace), followed by a semicolon to end the statement (if necessary), ends the heredoc. <?php print <<< END It ' s funny when signs say things like : Original \"Root\" Beer \"Free\" Gift Shoes cleaned while \"you\" wait or have other misquoted words . END ; Newlines, spacing, and quotes are all preserved in a heredoc. By convention, the endof-string identifier is usually all caps, and it is case sensitive. <?php print <<< PARSLEY It ' s easy to grow fresh : Parsley Chives on your windowsill PARSLEY ; print <<< DOGS If you like pets , yell out : DOGS AND CATS ARE GREAT ! DOGS ; ?> Heredocs are especially useful for printing out HTML with interpolated variables be\u2010 cause you don\u2019t have to escape the double quotes that appear in the HTML elements. Printing HTML with a here document <?php if ( $remaining_cards > 0 ) { $url = '/deal.php' ; $text = 'Deal More Cards' ; } else { $url = '/new-game.php' ; $text = 'Start a New Game' ; } print <<< HTML There are < b > $remaining_cards </ b > left . < p > < a href = \" $url \" > $text </ a > HTML ; ?> Concatenation with a here document The semicolon needs to go after the end-of-string delimiter to tell PHP the statement is ended. In some cases, however, you shouldn\u2019t use the semicolon. <?php $html = <<< END < div class = \" $divClass \" > < ul class = \" $ulClass \" > < li > END . $listItem . '</li></div>' ; print $html ; ?> The expression needs to continue on the next line, so you don\u2019t use a semicolon. Note also that in order for PHP to recognize the end-of-string delimiter, the . string concatenation operator needs to go on a separate line from the end-of-string delimiter. NowDoc strings Nowdocs are similar to heredocs, but there is no variable interpolation. So, nowdocs are to heredocs as single-quoted strings are to double-quoted strings. They\u2019re best when you have a block of non-PHP code, such as JavaScript, that you want to print as part of an HTML page or send to another program. For example, if you\u2019re using jQuery: <?php $js = <<<' __JS__ ' $.ajax({ 'url': '/api/getStock', 'data': { 'ticker': 'LNKD' }, 'success': function( data ) { $( \"#stock-price\" ).html( \"<strong>$\" + data + \"</strong>\" ); } }); __JS__ ; print $js ; ?> Heredoc strings are like double-quoted strings without escaping. Nowdoc strings are like single-quoted strings without escaping. Interpolating Functions and Expressions Within Strings You want to include the results of executing a function or expression within a string. Use the string concatenation operator (.), when the value you want to include can\u2019t be inside the string. <?php //String concatenation print 'You have ' . ( $_POST [ 'boys' ] + $_POST [ 'girls' ]) . ' children.' ; print \"The word ' $word ' is \" . strlen ( $word ) . ' characters long.' ; print 'You owe ' . $amounts [ 'payment' ] . ' immediately.' ; print \"My circle's diameter is \" . $circle -> getDiameter () . ' inches.' ; ?> You can put variables, object properties, and array elements (if the subscript is unquo\u2010 ted) directly in double-quoted strings. <?php print \"I have $children children.\" ; print \"You owe $amounts[payment] immediately.\" ; print \"My circle's diameter is $circle->diameter inches.\" ; ?> Interpolation with double-quoted strings places some limitations on the syntax of what can be interpolated. In the previous example, $amounts['payment'] had to be written as $amounts[payment] so it would be interpolated properly. Use curly braces around more complicated expressions to interpolate them into a string. For example: <?php print \"I have { $children } children.\" ; print \"You owe { $amounts [ 'payment' ] } immediately.\" ; print \"My circle's diameter is { $circle -> getDiameter () } inches.\" ; ?> Direct interpolation or using string concatenation also works with heredocs. Interpo\u2010 lating with string concatenation in heredocs can look a little strange because the closing heredoc delimiter and the string concatenation operator have to be on separate lines: <?php print <<< END Right now , the time is END . strftime ( '%c' ) . <<< END but tomorrow it will be END . strftime ( '%c' , time () + 86400 ); ?> Also, if you\u2019re interpolating with heredocs, make sure to include appropriate spacing for the whole string to appear properly. In the previous example, Right now, the time is has to include a trailing space, and but tomorrow it will be has to include leading and trailing spaces. Processing a String One Byte at a Time Loop through each byte in the string with for. $string = \"This weekend, I'm going shopping for a pet chicken.\"; $vowels = 0; for ($i = 0, $j = strlen($string); $i < $j; $i++) { if (strstr('aeiouAEIOU',$string[$i])) { $vowels++; } } ?> The \"Look and Say\" Algorithm function lookandsay($s) { // initialize the return value to the empty string $r = ''; // $m holds the character we're counting, initialize to the first // character in the string $m = $s[0]; // $n is the number of $m's we've seen, initialize to 1 $n = 1; for ($i = 1, $j = strlen($s); $i < $j; $i++) { // if this character is the same as the last one if ($s[$i] == $m) { // increment the count of this character $n++; } else { // otherwise, add the count and character to the return value $r .= $n.$m; // set the character we're looking for to the current one $m = $s[$i]; // and reset the count to 1 $n = 1; } } // return the built up string as well as the last count and character return $r.$n.$m; } for ($i = 0, $s = 1; $i < 10; $i++) { $s = lookandsay($s); print \"$s\\n\"; } ?> 1 11 21 1211 111221 312211 13112221 1113213211 31131211131221 It\u2019s called the \u201cLook and Say\u201d sequence because each element is what you get by looking at the previous element and saying what\u2019s in it. For example, looking at the first element, 1, you say \u201cone one.\u201d So the second element is \u201c11.\u201d That\u2019s two ones, so the third element is \u201c21.\u201d Similarly, that\u2019s one two and one one, so the fourth element is \u201c1211,\u201d and so on.","title":"Basics"},{"location":"PR/phpStr/#initialization","text":"Similar in form and behavior to Perl and the Unix shell, strings can be initialized in four ways: With single quotes , With double quotes , With the \u201chere document\u201d (heredoc) format , and With the \u201cnowdoc\u201d (nowdoc) format .","title":"Initialization"},{"location":"PR/phpStr/#single-quoted-strings","text":"With single-quoted strings, the only special characters you need to escape inside a string are the backslash and the single quote itself. <?php print 'I\\'ve gone to the store.' ; ?>","title":"Single-quoted strings"},{"location":"PR/phpStr/#double-quoted-strings","text":"Double-quoted strings don\u2019t recognize escaped single quotes, but they do recognize interpolated variables and the following escape sequences. Escape sequence Character \\n Newline (ASCII 10) \\r Carriage return (ASCII 13) \\t Tab (ASCII 9) \\ Backslash $ Dollar sign \" Double quote \\0 through \\777 Octal value \\x0 through \\xFF Hex value <?php print \"I've gone to the store.\" ; print \"The sauce cost \\$ 10.25.\" ; $cost = '$10.25' ; print \"The sauce cost $cost .\" ; print \"The sauce cost \\$\\061\\060 . \\x32\\x35 .\" ; ?>","title":"Double-quoted strings"},{"location":"PR/phpStr/#heredoc-strings","text":"Heredoc-specified strings recognize all the interpolations and escapes of double-quoted strings, but they don\u2019t require double quotes to be escaped. Heredocs start with <<< and a token. That token (with no leading or trailing whitespace), followed by a semicolon to end the statement (if necessary), ends the heredoc. <?php print <<< END It ' s funny when signs say things like : Original \"Root\" Beer \"Free\" Gift Shoes cleaned while \"you\" wait or have other misquoted words . END ; Newlines, spacing, and quotes are all preserved in a heredoc. By convention, the endof-string identifier is usually all caps, and it is case sensitive. <?php print <<< PARSLEY It ' s easy to grow fresh : Parsley Chives on your windowsill PARSLEY ; print <<< DOGS If you like pets , yell out : DOGS AND CATS ARE GREAT ! DOGS ; ?> Heredocs are especially useful for printing out HTML with interpolated variables be\u2010 cause you don\u2019t have to escape the double quotes that appear in the HTML elements.","title":"Heredoc strings"},{"location":"PR/phpStr/#printing-html-with-a-here-document","text":"<?php if ( $remaining_cards > 0 ) { $url = '/deal.php' ; $text = 'Deal More Cards' ; } else { $url = '/new-game.php' ; $text = 'Start a New Game' ; } print <<< HTML There are < b > $remaining_cards </ b > left . < p > < a href = \" $url \" > $text </ a > HTML ; ?>","title":"Printing HTML with a here document"},{"location":"PR/phpStr/#concatenation-with-a-here-document","text":"The semicolon needs to go after the end-of-string delimiter to tell PHP the statement is ended. In some cases, however, you shouldn\u2019t use the semicolon. <?php $html = <<< END < div class = \" $divClass \" > < ul class = \" $ulClass \" > < li > END . $listItem . '</li></div>' ; print $html ; ?> The expression needs to continue on the next line, so you don\u2019t use a semicolon. Note also that in order for PHP to recognize the end-of-string delimiter, the . string concatenation operator needs to go on a separate line from the end-of-string delimiter.","title":"Concatenation with a here document"},{"location":"PR/phpStr/#nowdoc-strings","text":"Nowdocs are similar to heredocs, but there is no variable interpolation. So, nowdocs are to heredocs as single-quoted strings are to double-quoted strings. They\u2019re best when you have a block of non-PHP code, such as JavaScript, that you want to print as part of an HTML page or send to another program. For example, if you\u2019re using jQuery: <?php $js = <<<' __JS__ ' $.ajax({ 'url': '/api/getStock', 'data': { 'ticker': 'LNKD' }, 'success': function( data ) { $( \"#stock-price\" ).html( \"<strong>$\" + data + \"</strong>\" ); } }); __JS__ ; print $js ; ?> Heredoc strings are like double-quoted strings without escaping. Nowdoc strings are like single-quoted strings without escaping.","title":"NowDoc strings"},{"location":"PR/phpStr/#interpolating-functions-and-expressions-within-strings","text":"You want to include the results of executing a function or expression within a string. Use the string concatenation operator (.), when the value you want to include can\u2019t be inside the string. <?php //String concatenation print 'You have ' . ( $_POST [ 'boys' ] + $_POST [ 'girls' ]) . ' children.' ; print \"The word ' $word ' is \" . strlen ( $word ) . ' characters long.' ; print 'You owe ' . $amounts [ 'payment' ] . ' immediately.' ; print \"My circle's diameter is \" . $circle -> getDiameter () . ' inches.' ; ?> You can put variables, object properties, and array elements (if the subscript is unquo\u2010 ted) directly in double-quoted strings. <?php print \"I have $children children.\" ; print \"You owe $amounts[payment] immediately.\" ; print \"My circle's diameter is $circle->diameter inches.\" ; ?> Interpolation with double-quoted strings places some limitations on the syntax of what can be interpolated. In the previous example, $amounts['payment'] had to be written as $amounts[payment] so it would be interpolated properly. Use curly braces around more complicated expressions to interpolate them into a string. For example: <?php print \"I have { $children } children.\" ; print \"You owe { $amounts [ 'payment' ] } immediately.\" ; print \"My circle's diameter is { $circle -> getDiameter () } inches.\" ; ?> Direct interpolation or using string concatenation also works with heredocs. Interpo\u2010 lating with string concatenation in heredocs can look a little strange because the closing heredoc delimiter and the string concatenation operator have to be on separate lines: <?php print <<< END Right now , the time is END . strftime ( '%c' ) . <<< END but tomorrow it will be END . strftime ( '%c' , time () + 86400 ); ?> Also, if you\u2019re interpolating with heredocs, make sure to include appropriate spacing for the whole string to appear properly. In the previous example, Right now, the time is has to include a trailing space, and but tomorrow it will be has to include leading and trailing spaces.","title":"Interpolating Functions and Expressions Within Strings"},{"location":"PR/phpStr/#processing-a-string-one-byte-at-a-time","text":"Loop through each byte in the string with for. $string = \"This weekend, I'm going shopping for a pet chicken.\"; $vowels = 0; for ($i = 0, $j = strlen($string); $i < $j; $i++) { if (strstr('aeiouAEIOU',$string[$i])) { $vowels++; } } ?>","title":"Processing a String One Byte at a Time"},{"location":"PR/phpStr/#the-look-and-say-algorithm","text":"function lookandsay($s) { // initialize the return value to the empty string $r = ''; // $m holds the character we're counting, initialize to the first // character in the string $m = $s[0]; // $n is the number of $m's we've seen, initialize to 1 $n = 1; for ($i = 1, $j = strlen($s); $i < $j; $i++) { // if this character is the same as the last one if ($s[$i] == $m) { // increment the count of this character $n++; } else { // otherwise, add the count and character to the return value $r .= $n.$m; // set the character we're looking for to the current one $m = $s[$i]; // and reset the count to 1 $n = 1; } } // return the built up string as well as the last count and character return $r.$n.$m; } for ($i = 0, $s = 1; $i < 10; $i++) { $s = lookandsay($s); print \"$s\\n\"; } ?> 1 11 21 1211 111221 312211 13112221 1113213211 31131211131221 It\u2019s called the \u201cLook and Say\u201d sequence because each element is what you get by looking at the previous element and saying what\u2019s in it. For example, looking at the first element, 1, you say \u201cone one.\u201d So the second element is \u201c11.\u201d That\u2019s two ones, so the third element is \u201c21.\u201d Similarly, that\u2019s one two and one one, so the fourth element is \u201c1211,\u201d and so on.","title":"The \"Look and Say\" Algorithm"},{"location":"PR/phpStr1/","text":"PHP contains many useful built-in functions and methods to accomplish common tasks. Most Common Functions strlen() The PHP strlen() function returns the length of a string. <?php echo strlen ( \"Hello world!\" ); // outputs 12 ?> str_word_count() The PHP str_word_count() function counts the number of words in a string. <?php echo str_word_count ( \"Hello world!\" ); // outputs 2 ?> strrev() Reverse by byte The PHP strrev() function reverses a string by byte. <?php echo strrev ( \"Hello world!\" ); // outputs !dlrow olleH ?> Reverse by words To reverse by words, explode the string by word boundary, reverse the words, and then rejoin. <?php echo implode ( \" \" , array_reverse ( explode ( \" \" , \"Hello world!\" ))); // outputs world! Hello ?> <?php $s = \"Once upon a time there was a turtle.\" ; // break the string up into words $words = explode ( ' ' , $s ); // reverse the array of words $words = array_reverse ( $words ); // rebuild the string $s = implode ( ' ' , $words ); print $s ; ?> turtle. a was there time a upon Once join() When you have an array, and you want to convert it into a nicely formatted string. Use join(): <?php // make a comma delimited list $string = join ( ',' , $array ); ?> Or loop yourself: <?php $string = '' ; foreach ( $array as $key => $value ) { $string .= \", $value \" ; } $string = substr ( $string , 1 ); // remove leading \",\" ?> strpos() The PHP strpos() function searches for a specific text within a string. If a match is found, the function returns the character position of the first match. If no match is found, it will return FALSE. <?php echo strpos ( \"Hello world!\" , \"world\" ); // outputs 6 ?> The first character position in a string is 0 (not 1). You want to know if a string contains a particular substring. For example, you want to find out if an email address contains a @. <?php if ( strpos ( $_POST [ 'email' ], '@' ) === false ) { print 'There was no @ in the e-mail address!' ; } ?> To differentiate between return values of 0 and false, you must use the identity operator (===) or the not\u2013identity operator (!==) instead of regular equals (==) or not-equals (!=). Fixed-Width Field Data Records pack() The PHP pack() function converts an array into a binary string. When you need to format data records such that each field takes up a set amount of characters. Use pack() with a format string that specifies a sequence of space-padded strings. Format characters for pack( ) and unpack( ) Format character Data type a NUL-padded string A Space-padded string h Hex string, low nibble first H Hex string, high nibble first c signed char C unsigned char s signed short (16 bit, machine byte order) S unsigned short (16 bit, machine byte order) n unsigned short (16 bit, big endian byte order) v unsigned short (16 bit, little endian byte order) i signed int (machine-dependent size and byte order) I unsigned int (machine-dependent size and byte order) l signed long (32 bit, machine byte order) L unsigned long (32 bit, machine byte order) N unsigned long (32 bit, big endian byte order) V unsigned long (32 bit, little endian byte order) f float (machine-dependent size and representation) d double (machine-dependent size and representation) x NUL byte X Back up one byte @ NUL-fill to absolute position <?php //Generating fixed-width field data records $books = array ( array ( 'Elmer Gantry' , 'Sinclair Lewis' , 1927 ), array ( 'The Scarlatti Inheritance' , 'Robert Ludlum' , 1971 ), array ( 'The Parsifal Mosaic' , 'William Styron' , 1979 ) ); foreach ( $books as $book ) { print pack ( 'A25A15A4' , $book [ 0 ], $book [ 1 ], $book [ 2 ]) . \" \\n \" ; } ?> The format string A25A14A4 tells pack() to transform its subsequent arguments into a 25-character space-padded string, a 14-character space-padded string, and a 4-character space-padded string. For space-padded fields in fixed-width records, pack() provides a concise solution. Storing Binary Data in Strings You can use pack() to store binary data in strings. When you want to parse a string that contains values encoded as a binary structure or encode values into a string. For example, you want to store numbers in their binary representation instead of as sequences of ASCII characters. <?php $packed = pack ( 'S4' , 1974 , 106 , 28225 , 32725 ); ?> Use unpack() to extract binary data from a string: <?php $nums = unpack ( 'S4' , $packed ); print_r ( $nums ); ?> str_pad() To pad fields with something other than a space, however, use substr() to ensure that the field values aren\u2019t too long and str_pad() to ensure that the field values aren\u2019t too short. <?php //Generating fixed-width field data records without pack( ) $books = array ( array ( 'Elmer Gantry' , 'Sinclair Lewis' , 1927 ), array ( 'The Scarlatti Inheritance' , 'Robert Ludlum' , 1971 ), array ( 'The Parsifal Mosaic' , 'William Styron' , 1979 ) ); foreach ( $books as $book ) { $title = str_pad ( substr ( $book [ 0 ], 0 , 25 ), 25 , '.' ); $author = str_pad ( substr ( $book [ 1 ], 0 , 15 ), 15 , '.' ); $year = str_pad ( substr ( $book [ 2 ], 0 , 4 ), 4 , '.' ); print \" $title$author$year\\n \" ; } ?> substr() The PHP substr() function extracts a part of a string and returns the extracted part as a new string. You want to extract part of a string, starting at a particular place in the string. For example, you want the first eight characters of a username entered into a form. If $start and $length are positive, substr() returns $length characters in the string, starting at $start. If $start is negative, the string is counted from the end of the string. If $length is negative, the string is counted from the end of the string. <?php //$substring = substr($string,$start,$length); $username = substr ( $_GET [ 'username' ], 0 , 8 ); ?> When you need to break apart fixed-width records in strings and parsing Fixed-Width Field Data Records, use substr() instead of explode(). <?php Parsing fixed - width records with substr ( ) $fp = fopen ( 'fixed-width-records.txt' , 'r' , true ) or die ( \"can't open file\" ); while ( $s = fgets ( $fp , 1024 )) { $fields [ 1 ] = substr ( $s , 0 , 25 ); // first field: first 25 characters of the line $fields [ 2 ] = substr ( $s , 25 , 15 ); // second field: next 15 characters of the line $fields [ 3 ] = substr ( $s , 40 , 4 ); // third field: next 4 characters of the line $fields = array_map ( 'rtrim' , $fields ); // strip the trailing whitespace // a function to do something with the fields process_fields ( $fields ); } fclose ( $fp ) or die ( \"can't close file\" ); ?> unpack() The PHP unpack() function unpacks binary data from a string. Multiple format characters must be separated with / in unpack(): <?php $packed = pack ( 'S4' , 1974 , 106 , 28225 , 32725 ); $nums = unpack ( 'S1a/S1b/S1c/S1d' , $packed ); print_r ( $nums ); ?> Array ( [a] => 1974 [b] => 106 [c] => 28225 [d] => 32725 ) <?php //Parsing fixed-width records with unpack( ) function fixed_width_unpack ( $format_string , $data ) { $r = array (); for ( $i = 0 , $j = count ( $data ); $i < $j ; $i ++ ) { $r [ $i ] = unpack ( $format_string , $data [ $i ]); } return $r ; } ?> Data in which each field is allotted a fixed number of characters per line may look like this list of books, titles, and publication dates: $booklist=<<<END Elmer Gantry Sinclair Lewis 1927 The Scarlatti InheritanceRobert Ludlum 1971 The Parsifal Mosaic Robert Ludlum 1982 Sophie's Choice William Styron 1979 END; In each line, the title occupies the first 25 characters, the author\u2019s name the next 15 characters, and the publication year the next 4 characters. Knowing those field widths, you can easily use substr() to parse the fields into an array: <?php $books = explode ( \" \\n \" , $booklist ); for ( $i = 0 , $j = count ( $books ); $i < $j ; $i ++ ) { $book_array [ $i ][ 'title' ] = substr ( $books [ $i ], 0 , 25 ); $book_array [ $i ][ 'author' ] = substr ( $books [ $i ], 25 , 15 ); $book_array [ $i ][ 'publication_year' ] = substr ( $books [ $i ], 40 , 4 ); } ?> Exploding $booklist into an array of lines makes the looping code the same whether it\u2019s operating over a string or a series of lines read in from a file. The loop can be made more flexible by specifying the field names and widths in a separate array that can be passed to a parsing function, as shown in the fixed_width_substr() function below. <?php //fixed_width_substr( ) function fixed_width_substr ( $fields , $data ) { $r = array (); for ( $i = 0 , $j = count ( $data ); $i < $j ; $i ++ ) { $line_pos = 0 ; foreach ( $fields as $field_name => $field_length ) { $r [ $i ][ $field_name ] = rtrim ( substr ( $data [ $i ], $line_pos , $field_length )); $line_pos += $field_length ; } } return $r ; } $book_fields = array ( 'title' => 25 , 'author' => 15 , 'publication_year' => 4 ); $book_array = fixed_width_substr ( $book_fields , $booklist ); ?> The variable $line_pos keeps track of the start of each field and is advanced by the previous field\u2019s width as the code moves through each line. Use rtrim() to remove trailing whitespace from each field. You can use unpack() as a substitute for substr() to extract fields. Instead of specifying the field names and widths as an associative array, create a format string for unpack(). A fixed-width field extractor using unpack() looks like the fixed_width_unpack() function below. <?php //fixed_width_unpack( ) function fixed_width_unpack ( $format_string , $data ) { $r = array (); for ( $i = 0 , $j = count ( $data ); $i < $j ; $i ++ ) { $r [ $i ] = unpack ( $format_string , $data [ $i ]); } return $r ; } ?> Because the A format to unpack() means space-padded string, there\u2019s no need to rtrim() off the trailing spaces. Once the fields have been parsed into $book_array by either function, the data can be printed as an HTML table, for example: <?php $book_array = fixed_width_unpack ( 'A25title/A15author/A4publication_year' , $books ); print \"<table> \\n \" ; // print a header row print '<tr><td>' ; print join ( '</td><td>' , array_keys ( $book_array [ 0 ])); print \"</td></tr> \\n \" ; // print each data row foreach ( $book_array as $row ) { print '<tr><td>' ; print join ( '</td><td>' , array_values ( $row )); print \"</td></tr> \\n \" ; } print \"</table> \\n \" ; ?> Both substr() and unpack() have equivalent capabilities when the fixed-width fields are strings, but unpack() is the better solution when the elements of the fields aren\u2019t just strings. Taking Strings Apart When you need to break a string into pieces. For example, you want to access each line that a user enters in a textarea form field. explode() Use explode() if what separates the pieces is a constant string: $words = explode(' ','My sentence is not very complicated'); The simplest solution of the bunch is explode(). Pass it your separator string, the string to be separated, and an optional limit on how many elements should be returned: <?php $dwarves = 'dopey,sleepy,happy,grumpy,sneezy,bashful,doc' ; $dwarf_array = explode ( ',' , $dwarves ); ?> Array ( [0] => dopey [1] => sleepy [2] => happy [3] => grumpy [4] => sneezy [5] => bashful [6] => doc ) If the specified limit is less than the number of possible chunks, the last chunk contains the remainder: <?php $dwarves = 'dopey,sleepy,happy,grumpy,sneezy,bashful,doc' ; $dwarf_array = explode ( ',' , $dwarves , 5 ); print_r ( $dwarf_array ); ?> Array ( [0] => dopey [1] => sleepy [2] => happy [3] => grumpy [4] => sneezy,bashful,doc ) The separator is treated literally by explode(). If you specify a comma and a space as a separator, it breaks the string only on a comma followed by a space, not on a comma or a space. With preg_split() , you have more flexibility. Instead of a string literal as a separator, it uses a Perl-compatible regular expression engine. With preg_split(), you can take advantage of various Perl-ish regular expression extensions, as well as tricks such as including the separator text in the returned array of strings: <?php $math = \"3 + 2 / 7 - 9\" ; $stack = preg_split ( '/ *([+\\-\\/*]) */' , $math , - 1 , PREG_SPLIT_DELIM_CAPTURE ); print_r ( $stack ); ?> Array ( [0] => 3 [1] => + [2] => 2 [3] => / [4] => 7 [5] => - [6] => 9 ) The separator regular expression looks for the four mathematical operators (+, -, /, *), surrounded by optional leading or trailing spaces. The PREG_SPLIT_DELIM_CAPTURE flag tells preg_split() to include the matches as part of the separator regular expression in parentheses in the returned array of strings. Only the mathematical operator character class is in parentheses, so the returned array doesn\u2019t have any spaces in it. str_split() Use preg_split() if you need a Perl-compatible regular expression to describe the separator: $words = preg_split('/\\d\\. /','my day: 1. get up 2. get dressed 3. eat toast'); $lines = preg_split('/[\\n\\r]+/',$_POST['textarea']); Use the /i flag to preg_split() for case-insensitive separator matching: $words = preg_split('/ x /i','31 inches x 22 inches X 9 inches'); If all of your fields are the same size, str_split() is a handy shortcut for chopping up incoming data. It returns an array made up of sections of a string. <?php $book_array = str_split ( $booklist , 25 ); ?> The str_split() function splits a string into an array. <?php echo str_split ( \"Hello world!\" ); // outputs [\"H\", \"e\", \"l\", \"l\", \"o\", \" \", \"w\", \"o\", \"r\", \"l\", \"d\", \"!\"] ?> substr_replace() The PHP substr_replace() function replaces part of a string with another string. You want to replace a substring with a different string. For example, you want to obscure all but the last four digits of a credit card number before printing it. <?php // Everything from position $start to the end of $old_string // becomes $new_substring $new_string = substr_replace ( $old_string , $new_substring , $start ); //$length characters, starting at position $start, become $new_substring $new_string = substr_replace ( $old_string , $new_substring , $start , $length ); ?> Without the $length argument, substr_replace() replaces everything from $start to the end of the string. If $length is specified, only that many characters are replaced. <?php print substr_replace ( 'My pet is a blue dog.' , 'fish.' , 12 ); print substr_replace ( 'My pet is a blue dog.' , 'green' , 12 , 4 ); $credit_card = '4111 1111 1111 1111' ; print substr_replace ( $credit_card , 'xxxx ' , 0 , strlen ( $credit_card ) - 4 ); ?> My pet is a fish. My pet is a green dog. xxxx 1111 If $start is negative, the new substring is placed by counting $start characters from the end of $old_string, not from the beginning. If $start and $length are 0, the new substring is inserted at the start of $old_string. The function substr_replace() is useful when you\u2019ve got text that\u2019s too big to display all at once, and you want to display some of the text with a link to the rest. <?php /* Displays the first 25 characters of a message with an ellipsis after it as a link to a page that displays more text */ $r = mysql_query ( \"SELECT id,message FROM messages WHERE id = $id \" ) or die (); $ob = mysql_fetch_object ( $r ); printf ( '<a href=\"more-text.php?id=%d\">%s</a>' , $ob -> id , substr_replace ( $ob -> message , ' ...' , 25 )); ?> /* The more-text.php page referenced can use the message ID passed in the query string to retrieve the full message and display it. */ str_replace() The PHP str_replace() function replaces some characters with some other characters in a string. <?php echo str_replace ( \"world\" , \"Earth\" , \"Hello world!\" ); // outputs Hello Earth! ?> Expanding and Compressing Tabs You want to change spaces to tabs (or tabs to spaces) in a string while keeping text aligned with tab stops. For example, you want to display formatted text to users in a standardized way. <?php // Switching tabs and spaces $rows = $db -> query ( 'SELECT message FROM messages WHERE id = 1' ); $obj = $rows -> fetch ( PDO :: FETCH_OBJ ); $tabbed = str_replace ( ' ' , \" \\t \" , $obj -> message ); $spaced = str_replace ( \" \\t \" , ' ' , $obj -> message ); print \"With Tabs: <pre> $tabbed </pre>\" ; print \"With Spaces: <pre> $spaced </pre>\" ; ?> Using str_replace() for conversion, however, doesn\u2019t respect tab stops. If you want tab stops every eight characters, a line beginning with a five-letter word and a tab should have that tab replaced with three spaces, not one. Use the tab_expand() function shown below to turn tabs to spaces in a way that respects tab stops. <?php function tab_expand ( $text ) { while ( strstr ( $text , \" \\t \" )) { $text = preg_replace_callback ( '/^([^\\t\\n]*)(\\t+)/m' , 'tab_expand_helper' , $text ); } return $text ; } function tab_expand_helper ( $matches ) { $tab_stop = 8 ; return $matches [ 1 ] . str_repeat ( ' ' , strlen ( $matches [ 2 ]) * $tab_stop - ( strlen ( $matches [ 1 ]) % $tab_stop )); } $spaced = tab_expand ( $obj -> message ); ?> You can use the tab_unexpand() function shown below to reverse the process to turn spaces back to tabs. <?php function tab_unexpand ( $text ) { $tab_stop = 8 ; $lines = explode ( \" \\n \" , $text ); foreach ( $lines as $i => $line ) { // Expand any tabs to spaces $line = tab_expand ( $line ); $chunks = str_split ( $line , $tab_stop ); $chunkCount = count ( $chunks ); // Scan all but the last chunk for ( $j = 0 ; $j < $chunkCount - 1 ; $j ++ ) { $chunks [ $j ] = preg_replace ( '/ {2,}$/' , \" \\t \" , $chunks [ $j ]); } // If the last chunk is a tab-stop's worth of spaces // convert it to a tab; Otherwise, leave it alone if ( $chunks [ $chunkCount - 1 ] == str_repeat ( ' ' , $tab_stop )) { $chunks [ $chunkCount - 1 ] = \" \\t \" ; } // Recombine the chunks $lines [ $i ] = implode ( '' , $chunks ); } // Recombine the lines return implode ( \" \\n \" , $lines ); } $tabbed = tab_unexpand ( $obj -> message ); ?> Each function assumes tab stops are every eight spaces, but that can be modified by changing the setting of the $tab_stop variable. The regular expression in tab_expand() matches both a group of tabs and all the text in a line before that group of tabs. It needs to match the text before the tabs because the length of that text affects how many spaces the tabs should be replaced with so that subsequent text is aligned with the next tab stop. The function doesn\u2019t just replace each tab with eight spaces; it adjusts text after tabs to line up with tab stops. Similarly, tab_unexpand() doesn\u2019t just look for eight consecutive spaces and then replace them with one tab character. It divides up each line into eight-character chunks and then substitutes ending whitespace in those chunks (at least two spaces) with tabs. This not only preserves text alignment with tab stops; it also saves space in the string. str_repeat() The str_repeat() function repeats a string a specified number of times. <?php echo str_repeat ( \"Hello \" , 3 ); // outputs Hello Hello Hello ?> str_shuffle() The str_shuffle() function randomly shuffles all the characters of a string. <?php echo str_shuffle ( \"Hello world!\" ); // outputs !Wdroel loHl ?> str_rand() The str_rand() function returns a random string of specified length. <?php function str_rand ( $length = 32 , $characters = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ' ) { if ( ! is_int ( $length ) || $length < 0 ) { return false ; } $characters_length = strlen ( $characters ) - 1 ; $string = '' ; for ( $i = $length ; $i > 0 ; $i -- ) { $string .= $characters [ mt_rand ( 0 , $characters_length )]; } return $string ; } ?> PHP has native functions for generating random numbers, but nothing for random strings. The str_rand() function returns a 32-character string constructed from letters and numbers. Pass in an integer to change the length of the returned string. To use an alternative set of characters, pass them as a string as the second argument. For example, to get a 16-digit Morse Code: <?php print str_rand ( 16 , '.-' ); ?> .--..-.-.--.---- Case Conversion ucfirst() The PHP ucfirst() function capitalizes the first character of a string. <?php echo ucfirst ( \"hello world!\" ); // outputs Hello world! ?> ucwords() The PHP ucwords() function capitalizes the first character of each word in a string. <?php echo ucwords ( \"hello world!\" ); // outputs Hello World! ?> strtolower() The PHP strtolower() function converts a string to lowercase. <?php echo strtolower ( \"Hello world!\" ); // outputs hello world! ?> strtoupper() The PHP strtoupper() function converts a string to uppercase. <?php echo strtoupper ( \"Hello world!\" ); // outputs HELLO WORLD! ?> Trimming Blanks from a String You want to remove whitespace from the beginning or end of a string. For example, you want to clean up user input before validating it. Use ltrim(), rtrim(), or trim(). The ltrim() function removes whitespace from the beginning of a string, rtrim() from the end of a string, and trim() from both the beginning and end of a string. For these functions, whitespace is defined as the following characters: newline, carriage return, space, horizontal and vertical tab, and null. Trimming whitespace off of strings saves storage space and can make for more precise display of formatted data or text. The trim() functions can also remove user-specified characters from strings. Pass the characters you want to remove as a second argument. You can indicate a range of characters with two dots between the first and last characters in the range. <?php // Remove numerals and space from the beginning of the line print ltrim ( '10 PRINT A$' , ' 0..9' ); // Remove semicolon from the end of the line print rtrim ( 'SELECT * FROM turtles;' , ';' ); ?> ltrim() The PHP ltrim() function removes leading whitespace from a string. <?php echo ltrim ( \" Hello world!\" ); // outputs \"Hello world!\" ?> rtrim() The PHP rtrim() function removes trailing whitespace from a string. <?php echo rtrim ( \"Hello world! \" ); // outputs \"Hello world!\" ?> trim() The PHP trim() function removes leading and trailing whitespace from a string. <?php echo trim ( \" Hello world! \" ); // outputs \"Hello world!\" ?> Formatting to CSV fgetcsv() The PHP str_getcsv() function parses a CSV string into an array. Parsing Comma-Separated Data. You have data in comma-separated values (CSV) format\u2014for example, a file exported from Excel or a database\u2014and you want to extract the records and fields into a format you can manipulate in PHP. If the CSV data is in a file (or available via a URL), open the file with fopen() and read in the data with fgetcsv(). <?php //Reading CSV data from a file $fp = fopen ( $filename , 'r' ) or die ( \"can't open file\" ); print \"<table> \\n \" ; while ( $csv_line = fgetcsv ( $fp )) { print '<tr>' ; for ( $i = 0 , $j = count ( $csv_line ); $i < $j ; $i ++ ) { print '<td>' . htmlentities ( $csv_line [ $i ]) . '</td>' ; } print \"</tr> \\n \" ; } print \"</table> \\n \" ; fclose ( $fp ) or die ( \"can't close file\" ); ?> By default, fgetcsv() reads in an entire line of data. If your average line length is more than 8,192 bytes, your program may run faster if you specify an explicit line length instead of letting PHP figure it out. Do this by providing a second argument to fgetcsv() that is a value larger than the maximum length of a line in your CSV file. (Don\u2019t forget to count the end-of-line whitespace.) If you pass a line length of 0, PHP will use the default behavior. You can pass fgetcsv() an optional third argument, a delimiter to use instead of a comma (,). However, using a different delimiter somewhat defeats the purpose of CSV as an easy way to exchange tabular data. Don\u2019t be tempted to bypass fgetcsv() and just read a line in and explode() on the commas. CSV is more complicated than that so that it can deal with field values that have, for example, literal commas in them that should not be treated as field delimiters. Using fgetcsv() protects you and your code from subtle errors. str_getcsv() The PHP str_getcsv() function parses a CSV string into an array. Parsing Comma-Separated Data. Use str_getcsv() only when you have the CSV already as a string in your program. <?php $string = 'PHP,Java,Python,Kotlin,Swift' ; $data = str_getcsv ( $string ); var_dump ( $data ); ?> fputcsv() The PHP fputcsv() function converts an array into a CSV string and generating Comma-Separated Data. You want to format data as comma-separated values (CSV) so that it can be imported by a spreadsheet or database. <?php $sales = array ( array ( 'Northeast' , '2005-01-01' , '2005-02-01' , 12.54 ), array ( 'Northwest' , '2005-01-01' , '2005-02-01' , 546.33 ), array ( 'Southeast' , '2005-01-01' , '2005-02-01' , 93.26 ), array ( 'Southwest' , '2005-01-01' , '2005-02-01' , 945.21 ), array ( 'All Regions' , '--' , '--' , 1597.34 ) ); $filename = './sales.csv' ; $fh = fopen ( $filename , 'w' ) or die ( \"Can't open $filename \" ); foreach ( $sales as $sales_line ) { if ( fputcsv ( $fh , $sales_line ) === false ) { die ( \"Can't write CSV line\" ); } } fclose ( $fh ) or die ( \"Can't close $filename \" ); ?> To print the CSV-formatted data instead of writing it to a file, use the special output stream php://output . <?php $sales = array ( array ( 'Northeast' , '2005-01-01' , '2005-02-01' , 12.54 ), array ( 'Northwest' , '2005-01-01' , '2005-02-01' , 546.33 ), array ( 'Southeast' , '2005-01-01' , '2005-02-01' , 93.26 ), array ( 'Southwest' , '2005-01-01' , '2005-02-01' , 945.21 ), array ( 'All Regions' , '--' , '--' , 1597.34 ) ); $fh = fopen ( 'php://output' , 'w' ); foreach ( $sales as $sales_line ) { if ( fputcsv ( $fh , $sales_line ) === false ) { die ( \"Can't write CSV line\" ); } } fclose ( $fh ); ?> To put the CSV-formatted data into a string instead of printing it or writing it to a file. <?php $sales = array ( array ( 'Northeast' , '2005-01-01' , '2005-02-01' , 12.54 ), array ( 'Northwest' , '2005-01-01' , '2005-02-01' , 546.33 ), array ( 'Southeast' , '2005-01-01' , '2005-02-01' , 93.26 ), array ( 'Southwest' , '2005-01-01' , '2005-02-01' , 945.21 ), array ( 'All Regions' , '--' , '--' , 1597.34 ) ); ob_start (); $fh = fopen ( 'php://output' , 'w' ) or die ( \"Can't open php://output\" ); foreach ( $sales as $sales_line ) { if ( fputcsv ( $fh , $sales_line ) === false ) { die ( \"Can't write CSV line\" ); } } fclose ( $fh ) or die ( \"Can't close php://output\" ); $output = ob_get_contents (); ob_end_clean (); ?> Wrapping Text at a Certain Line Length When you need to wrap lines in a string. For example, you want to display text by using the pre tags but have it stay within a regularly sized browser window. wordwrap() <?php $s = \"Four score and seven years ago our fathers brought forth on this continent \u21b5 a new nation, conceived in liberty and dedicated to the proposition \u21b5 that all men are created equal.\" ; print \"<pre> \\n \" . wordwrap ( $s ) . \" \\n </pre>\" ; ?> <pre> Four score and seven years ago our fathers brought forth on this continent a new nation, conceived in liberty and dedicated to the proposition that all men are created equal. </pre> By default, wordwrap() wraps text at 75 characters per line. An optional second argu\u2010 ment specifies a different line length: <?php print wordwrap ( $s , 50 ); ?> Four score and seven years ago our fathers brought forth on this continent a new nation, conceived in liberty and dedicated to the proposition that all men are created equal. Other characters besides \\n can be used for line breaks. For double spacing, use \"\\n\\n\": <?php print wordwrap ( $s , 50 , \" \\n\\n \" ); ?> This prints: Four score and seven years ago our fathers brought forth on this continent a new nation, conceived in liberty and dedicated to the proposition that all men are created equal. There is an optional fourth argument to wordwrap() that controls the treatment of words that are longer than the specified line length. If this argument is 1, these words are wrapped. Otherwise, they span past the specified line length: <?php print wordwrap ( 'jabberwocky' , 5 ) . \" \\n \" ; print wordwrap ( 'jabberwocky' , 5 , \" \\n \" , 1 ); ?> This prints: jabberwocky jabbe rwock y Formatting Numbers When you have a number and you want to print it with thousands and decimal separators. For example, you want to display the number of people who have viewed a page, or the percentage of people who have voted for an option in a poll. number_format() <?php $number = 1234.56 ; // $formatted1 is \"1,235\" - 1234.56 gets rounded up and , is // the thousands separator\"); $formatted1 = number_format ( $number ); // Second argument specifies number of decimal places to use. // $formatted2 is 1,234.56 $formatted2 = number_format ( $number , 2 ); // Third argument specifies decimal point character // Fourth argument specifies thousands separator // $formatted3 is 1.234,56 $formatted3 = number_format ( $number , 2 , \",\" , \".\" ); ?> The number_format() function formats a number with decimal and thousands sepa\u2010 rators. By default, it rounds the number to the nearest integer. If you want to preserve the entire number, but you don\u2019t know ahead of time how many digits follow the decimal point in your number: <?php $number = 31415.92653 ; // your number list ( $int , $dec ) = explode ( '.' , $number ); // $formatted is 31,415.92653 $formatted = number_format ( $number , strlen ( $dec )); ?> NumberFormatter If you need to generate appropriate formats for a particular locale, use NumberFormatter: <?php $number = '1234.56' ; // $formatted1 is 1,234.56 $usa = new NumberFormatter ( \"en-US\" , NumberFormatter :: DEFAULT_STYLE ); $formatted1 = $usa -> format ( $number ); // $formatted2 is 1 234,56 // Note that it's a \"non breaking space (\\u00A0) between the 1 and the 2 $france = new NumberFormatter ( \"fr-FR\" , NumberFormatter :: DEFAULT_STYLE ); $formatted2 = $france -> format ( $number ); ?> The NumberFormatter class, part of the intl extension, uses the extensive formatting rules that are part of the ICU library to give you an easy and powerful way to format numbers appropriately for anywhere in the world. You can even do fancy things such as spell out a number in words. <?php $number = '1234.56' ; $france = new NumberFormatter ( \"fr-FR\" , NumberFormatter :: SPELLOUT ); // $formatted is \"mille-deux-cent-trente-quatre virgule cinq six\" $formatted = $france -> format ( $number ); ?> When you have a number and you want to print it with thousands and decimal separators. For instance, you want to display prices for items in a shopping cart. <?php $number = 1234.56 ; // US uses $ , and . // $formatted1 is $1,234.56 $usa = new NumberFormatter ( \"en-US\" , NumberFormatter :: CURRENCY ); $formatted1 = $usa -> format ( $number ); // France uses , and \u20ac // $formatted2 is 1 234,56 \u20ac $france = new NumberFormatter ( \"fr-FR\" , NumberFormatter :: CURRENCY ); $formatted2 = $france -> format ( $number ); ?> The NumberFormatter::CURRENCY format style formats a number by inserting the correct currency symbol, decimal, and thousands separators for the locale used to create the NumberFormatter object instance. It assumes that the currency to use is the one native to the locale\u2014US Dollars for the en-US locale, Euro for the fr-FR locale, and soon. To produce the right format for a currency other than the locale\u2019s native currency, use the formatCurrency() method. Its second argument lets you specify the currency to use. For example, what\u2019s the correct way, in the USA, to format the price of something in Euro? <?php $number = 1234.56 ; // US uses \u20ac , and . for Euro // $formatted is \u20ac1,234.56 $usa = new NumberFormatter ( \"en-US\" , NumberFormatter :: CURRENCY ); $formatted = $usa -> formatCurrency ( $number , 'EUR' ); ?> printf() printf() family of functions, which allows you to convert decimal numbers to binary, octal, and hexadecimal numbers with a wide range of formatting, such as leading zeros and a choice between upper- and lowercase letters for hexadecimal numbers. For instance, say you want to print out HTML color values. You can use the %02X format specifier. <?php $red = 0 ; $green = 102 ; $blue = 204 ; // $color is '#0066CC' $color = sprintf ( '#%02X%02X%02X' , $red , $green , $blue ); ?> All String Functions The PHP string functions are part of the PHP core. No installation is required to use these functions. For more information, see PHP String Functions Function Description addcslashes() Returns a string with backslashes in front of the specified characters addslashes() Returns a string with backslashes in front of predefined characters bin2hex() Converts a string of ASCII characters to hexadecimal values chop() Removes whitespace or other characters from the right end of a string chr() Returns a character from a specified ASCII value chunk_split() Splits a string into a series of smaller parts convert_cyr_string() Converts a string from one Cyrillic character-set to another convert_uudecode() Decodes a uuencoded string convert_uuencode() Encodes a string using the uuencode algorithm count_chars() Returns information about characters used in a string crc32() Calculates a 32-bit CRC for a string crypt() One-way string hashing echo() Outputs one or more strings explode() Breaks a string into an array fprintf() Writes a formatted string to a specified output stream get_html_translation_table() Returns the translation table used by htmlspecialchars() and htmlentities() hebrev() Converts Hebrew text to visual text hebrevc() Converts Hebrew text to visual text and new lines (\\n) into hex2bin() Converts a string of hexadecimal values to ASCII characters html_entity_decode() Converts HTML entities to characters htmlentities() Converts characters to HTML entities htmlspecialchars_decode() Converts some predefined HTML entities to characters htmlspecialchars() Converts some predefined characters to HTML entities implode() Returns a string from the elements of an array join() Alias of implode() lcfirst() Converts the first character of a string to lowercase levenshtein() Returns the Levenshtein distance between two strings localeconv() Returns locale numeric and monetary formatting information ltrim() Removes whitespace or other characters from the left side of a string md5() Calculates the MD5 hash of a string md5_file() Calculates the MD5 hash of a file metaphone() Calculates the metaphone key of a string money_format() Returns a string formatted as a currency string nl_langinfo() Returns specific local information nl2br() Inserts HTML line breaks in front of each newline in a string number_format() Formats a number with grouped thousands ord() Returns the ASCII value of the first character of a string parse_str() Parses a query string into variables print() Outputs one or more strings printf() Outputs a formatted string quoted_printable_decode() Converts a quoted-printable string to an 8-bit string quoted_printable_encode() Converts an 8-bit string to a quoted printable string quotemeta() Quotes meta characters rtrim() Removes whitespace or other characters from the right side of a string setlocale() Sets locale information sha1() Calculates the SHA-1 hash of a string sha1_file() Calculates the SHA-1 hash of a file similar_text() Calculates the similarity between two strings soundex() Calculates the soundex key of a string sprintf() Writes a formatted string to a variable sscanf() Parses input from a string according to a format str_getcsv() Parses a CSV string into an array str_ireplace() Replaces some characters in a string (case-insensitive) str_pad() Pads a string to a new length str_repeat() Repeats a string a specified number of times str_replace() Replaces some characters in a string (case-sensitive) str_rot13() Performs the ROT13 encoding on a string str_shuffle() Randomly shuffles all characters in a string str_split() Splits a string into an array str_word_count() Count the number of words in a string strcasecmp() Compares two strings (case-insensitive) strchr() Finds the first occurrence of a string inside another string (alias of strstr()) strcmp() Compares two strings (case-sensitive) strcoll() Compares two strings (locale based string comparison) strcspn() Returns the number of characters found in a string before any part of some specified characters are found strip_tags() Strips HTML and PHP tags from a string stripcslashes() Unquotes a string quoted with addcslashes() stripslashes() Unquotes a string quoted with addslashes() stripos() Returns the position of the first occurrence of a string inside another string (case-insensitive) stristr() Finds the first occurrence of a string inside another string (case-insensitive) strlen() Returns the length of a string strnatcasecmp() Compares two strings using a \"natural order\" algorithm (case-insensitive) strnatcmp() Compares two strings using a \"natural order\" algorithm (case-sensitive) strncasecmp() String comparison of the first n characters (case-insensitive) strncmp() String comparison of the first n characters (case-sensitive) strpbrk() Searches a string for any of a set of characters strpos() Returns the position of the first occurrence of a string inside another string (case-sensitive) strrchr() Finds the last occurrence of a string inside another string strrev() Reverses a string strripos() Finds the position of the last occurrence of a string inside another string (case-insensitive) strrpos() Finds the position of the last occurrence of a string inside another string (case-sensitive) strspn() Returns the number of characters found in a string that contains only characters from a specified charlist strstr() Finds the first occurrence of a string inside another string (case-sensitive) strtok() Splits a string into smaller strings strtolower() Converts a string to lowercase letters strtoupper() Converts a string to uppercase letters strtr() Translates certain characters in a string substr() Returns a part of a string substr_compare() Compares two strings from a specified start position (binary safe and optionally case-sensitive) substr_count() Counts the number of times a substring occurs in a string substr_replace() Replaces a part of a string with another string trim() Removes whitespace or other characters from both sides of a string ucfirst() Converts the first character of a string to uppercase ucwords() Converts the first character of each word in a string to uppercase vfprintf() Writes a formatted string to a specified output stream vprintf() Outputs a formatted string vsprintf() Writes a formatted string to a variable wordwrap() Wraps a string to a given number of characters","title":"Functions"},{"location":"PR/phpStr1/#most-common-functions","text":"","title":"Most Common Functions"},{"location":"PR/phpStr1/#strlen","text":"The PHP strlen() function returns the length of a string. <?php echo strlen ( \"Hello world!\" ); // outputs 12 ?>","title":"strlen()"},{"location":"PR/phpStr1/#str_word_count","text":"The PHP str_word_count() function counts the number of words in a string. <?php echo str_word_count ( \"Hello world!\" ); // outputs 2 ?>","title":"str_word_count()"},{"location":"PR/phpStr1/#strrev","text":"","title":"strrev()"},{"location":"PR/phpStr1/#reverse-by-byte","text":"The PHP strrev() function reverses a string by byte. <?php echo strrev ( \"Hello world!\" ); // outputs !dlrow olleH ?>","title":"Reverse by byte"},{"location":"PR/phpStr1/#reverse-by-words","text":"To reverse by words, explode the string by word boundary, reverse the words, and then rejoin. <?php echo implode ( \" \" , array_reverse ( explode ( \" \" , \"Hello world!\" ))); // outputs world! Hello ?> <?php $s = \"Once upon a time there was a turtle.\" ; // break the string up into words $words = explode ( ' ' , $s ); // reverse the array of words $words = array_reverse ( $words ); // rebuild the string $s = implode ( ' ' , $words ); print $s ; ?> turtle. a was there time a upon Once","title":"Reverse by words"},{"location":"PR/phpStr1/#join","text":"When you have an array, and you want to convert it into a nicely formatted string. Use join(): <?php // make a comma delimited list $string = join ( ',' , $array ); ?> Or loop yourself: <?php $string = '' ; foreach ( $array as $key => $value ) { $string .= \", $value \" ; } $string = substr ( $string , 1 ); // remove leading \",\" ?>","title":"join()"},{"location":"PR/phpStr1/#strpos","text":"The PHP strpos() function searches for a specific text within a string. If a match is found, the function returns the character position of the first match. If no match is found, it will return FALSE. <?php echo strpos ( \"Hello world!\" , \"world\" ); // outputs 6 ?> The first character position in a string is 0 (not 1). You want to know if a string contains a particular substring. For example, you want to find out if an email address contains a @. <?php if ( strpos ( $_POST [ 'email' ], '@' ) === false ) { print 'There was no @ in the e-mail address!' ; } ?> To differentiate between return values of 0 and false, you must use the identity operator (===) or the not\u2013identity operator (!==) instead of regular equals (==) or not-equals (!=).","title":"strpos()"},{"location":"PR/phpStr1/#fixed-width-field-data-records","text":"","title":"Fixed-Width Field Data Records"},{"location":"PR/phpStr1/#pack","text":"The PHP pack() function converts an array into a binary string. When you need to format data records such that each field takes up a set amount of characters. Use pack() with a format string that specifies a sequence of space-padded strings.","title":"pack()"},{"location":"PR/phpStr1/#format-characters-for-pack-and-unpack","text":"Format character Data type a NUL-padded string A Space-padded string h Hex string, low nibble first H Hex string, high nibble first c signed char C unsigned char s signed short (16 bit, machine byte order) S unsigned short (16 bit, machine byte order) n unsigned short (16 bit, big endian byte order) v unsigned short (16 bit, little endian byte order) i signed int (machine-dependent size and byte order) I unsigned int (machine-dependent size and byte order) l signed long (32 bit, machine byte order) L unsigned long (32 bit, machine byte order) N unsigned long (32 bit, big endian byte order) V unsigned long (32 bit, little endian byte order) f float (machine-dependent size and representation) d double (machine-dependent size and representation) x NUL byte X Back up one byte @ NUL-fill to absolute position <?php //Generating fixed-width field data records $books = array ( array ( 'Elmer Gantry' , 'Sinclair Lewis' , 1927 ), array ( 'The Scarlatti Inheritance' , 'Robert Ludlum' , 1971 ), array ( 'The Parsifal Mosaic' , 'William Styron' , 1979 ) ); foreach ( $books as $book ) { print pack ( 'A25A15A4' , $book [ 0 ], $book [ 1 ], $book [ 2 ]) . \" \\n \" ; } ?> The format string A25A14A4 tells pack() to transform its subsequent arguments into a 25-character space-padded string, a 14-character space-padded string, and a 4-character space-padded string. For space-padded fields in fixed-width records, pack() provides a concise solution.","title":"Format characters for pack( ) and unpack( )"},{"location":"PR/phpStr1/#storing-binary-data-in-strings","text":"You can use pack() to store binary data in strings. When you want to parse a string that contains values encoded as a binary structure or encode values into a string. For example, you want to store numbers in their binary representation instead of as sequences of ASCII characters. <?php $packed = pack ( 'S4' , 1974 , 106 , 28225 , 32725 ); ?> Use unpack() to extract binary data from a string: <?php $nums = unpack ( 'S4' , $packed ); print_r ( $nums ); ?>","title":"Storing Binary Data in Strings"},{"location":"PR/phpStr1/#str_pad","text":"To pad fields with something other than a space, however, use substr() to ensure that the field values aren\u2019t too long and str_pad() to ensure that the field values aren\u2019t too short. <?php //Generating fixed-width field data records without pack( ) $books = array ( array ( 'Elmer Gantry' , 'Sinclair Lewis' , 1927 ), array ( 'The Scarlatti Inheritance' , 'Robert Ludlum' , 1971 ), array ( 'The Parsifal Mosaic' , 'William Styron' , 1979 ) ); foreach ( $books as $book ) { $title = str_pad ( substr ( $book [ 0 ], 0 , 25 ), 25 , '.' ); $author = str_pad ( substr ( $book [ 1 ], 0 , 15 ), 15 , '.' ); $year = str_pad ( substr ( $book [ 2 ], 0 , 4 ), 4 , '.' ); print \" $title$author$year\\n \" ; } ?>","title":"str_pad()"},{"location":"PR/phpStr1/#substr","text":"The PHP substr() function extracts a part of a string and returns the extracted part as a new string. You want to extract part of a string, starting at a particular place in the string. For example, you want the first eight characters of a username entered into a form. If $start and $length are positive, substr() returns $length characters in the string, starting at $start. If $start is negative, the string is counted from the end of the string. If $length is negative, the string is counted from the end of the string. <?php //$substring = substr($string,$start,$length); $username = substr ( $_GET [ 'username' ], 0 , 8 ); ?> When you need to break apart fixed-width records in strings and parsing Fixed-Width Field Data Records, use substr() instead of explode(). <?php Parsing fixed - width records with substr ( ) $fp = fopen ( 'fixed-width-records.txt' , 'r' , true ) or die ( \"can't open file\" ); while ( $s = fgets ( $fp , 1024 )) { $fields [ 1 ] = substr ( $s , 0 , 25 ); // first field: first 25 characters of the line $fields [ 2 ] = substr ( $s , 25 , 15 ); // second field: next 15 characters of the line $fields [ 3 ] = substr ( $s , 40 , 4 ); // third field: next 4 characters of the line $fields = array_map ( 'rtrim' , $fields ); // strip the trailing whitespace // a function to do something with the fields process_fields ( $fields ); } fclose ( $fp ) or die ( \"can't close file\" ); ?>","title":"substr()"},{"location":"PR/phpStr1/#unpack","text":"The PHP unpack() function unpacks binary data from a string. Multiple format characters must be separated with / in unpack(): <?php $packed = pack ( 'S4' , 1974 , 106 , 28225 , 32725 ); $nums = unpack ( 'S1a/S1b/S1c/S1d' , $packed ); print_r ( $nums ); ?> Array ( [a] => 1974 [b] => 106 [c] => 28225 [d] => 32725 ) <?php //Parsing fixed-width records with unpack( ) function fixed_width_unpack ( $format_string , $data ) { $r = array (); for ( $i = 0 , $j = count ( $data ); $i < $j ; $i ++ ) { $r [ $i ] = unpack ( $format_string , $data [ $i ]); } return $r ; } ?> Data in which each field is allotted a fixed number of characters per line may look like this list of books, titles, and publication dates: $booklist=<<<END Elmer Gantry Sinclair Lewis 1927 The Scarlatti InheritanceRobert Ludlum 1971 The Parsifal Mosaic Robert Ludlum 1982 Sophie's Choice William Styron 1979 END; In each line, the title occupies the first 25 characters, the author\u2019s name the next 15 characters, and the publication year the next 4 characters. Knowing those field widths, you can easily use substr() to parse the fields into an array: <?php $books = explode ( \" \\n \" , $booklist ); for ( $i = 0 , $j = count ( $books ); $i < $j ; $i ++ ) { $book_array [ $i ][ 'title' ] = substr ( $books [ $i ], 0 , 25 ); $book_array [ $i ][ 'author' ] = substr ( $books [ $i ], 25 , 15 ); $book_array [ $i ][ 'publication_year' ] = substr ( $books [ $i ], 40 , 4 ); } ?> Exploding $booklist into an array of lines makes the looping code the same whether it\u2019s operating over a string or a series of lines read in from a file. The loop can be made more flexible by specifying the field names and widths in a separate array that can be passed to a parsing function, as shown in the fixed_width_substr() function below. <?php //fixed_width_substr( ) function fixed_width_substr ( $fields , $data ) { $r = array (); for ( $i = 0 , $j = count ( $data ); $i < $j ; $i ++ ) { $line_pos = 0 ; foreach ( $fields as $field_name => $field_length ) { $r [ $i ][ $field_name ] = rtrim ( substr ( $data [ $i ], $line_pos , $field_length )); $line_pos += $field_length ; } } return $r ; } $book_fields = array ( 'title' => 25 , 'author' => 15 , 'publication_year' => 4 ); $book_array = fixed_width_substr ( $book_fields , $booklist ); ?> The variable $line_pos keeps track of the start of each field and is advanced by the previous field\u2019s width as the code moves through each line. Use rtrim() to remove trailing whitespace from each field. You can use unpack() as a substitute for substr() to extract fields. Instead of specifying the field names and widths as an associative array, create a format string for unpack(). A fixed-width field extractor using unpack() looks like the fixed_width_unpack() function below. <?php //fixed_width_unpack( ) function fixed_width_unpack ( $format_string , $data ) { $r = array (); for ( $i = 0 , $j = count ( $data ); $i < $j ; $i ++ ) { $r [ $i ] = unpack ( $format_string , $data [ $i ]); } return $r ; } ?> Because the A format to unpack() means space-padded string, there\u2019s no need to rtrim() off the trailing spaces. Once the fields have been parsed into $book_array by either function, the data can be printed as an HTML table, for example: <?php $book_array = fixed_width_unpack ( 'A25title/A15author/A4publication_year' , $books ); print \"<table> \\n \" ; // print a header row print '<tr><td>' ; print join ( '</td><td>' , array_keys ( $book_array [ 0 ])); print \"</td></tr> \\n \" ; // print each data row foreach ( $book_array as $row ) { print '<tr><td>' ; print join ( '</td><td>' , array_values ( $row )); print \"</td></tr> \\n \" ; } print \"</table> \\n \" ; ?> Both substr() and unpack() have equivalent capabilities when the fixed-width fields are strings, but unpack() is the better solution when the elements of the fields aren\u2019t just strings.","title":"unpack()"},{"location":"PR/phpStr1/#taking-strings-apart","text":"When you need to break a string into pieces. For example, you want to access each line that a user enters in a textarea form field.","title":"Taking Strings Apart"},{"location":"PR/phpStr1/#explode","text":"Use explode() if what separates the pieces is a constant string: $words = explode(' ','My sentence is not very complicated'); The simplest solution of the bunch is explode(). Pass it your separator string, the string to be separated, and an optional limit on how many elements should be returned: <?php $dwarves = 'dopey,sleepy,happy,grumpy,sneezy,bashful,doc' ; $dwarf_array = explode ( ',' , $dwarves ); ?> Array ( [0] => dopey [1] => sleepy [2] => happy [3] => grumpy [4] => sneezy [5] => bashful [6] => doc ) If the specified limit is less than the number of possible chunks, the last chunk contains the remainder: <?php $dwarves = 'dopey,sleepy,happy,grumpy,sneezy,bashful,doc' ; $dwarf_array = explode ( ',' , $dwarves , 5 ); print_r ( $dwarf_array ); ?> Array ( [0] => dopey [1] => sleepy [2] => happy [3] => grumpy [4] => sneezy,bashful,doc ) The separator is treated literally by explode(). If you specify a comma and a space as a separator, it breaks the string only on a comma followed by a space, not on a comma or a space. With preg_split() , you have more flexibility. Instead of a string literal as a separator, it uses a Perl-compatible regular expression engine. With preg_split(), you can take advantage of various Perl-ish regular expression extensions, as well as tricks such as including the separator text in the returned array of strings: <?php $math = \"3 + 2 / 7 - 9\" ; $stack = preg_split ( '/ *([+\\-\\/*]) */' , $math , - 1 , PREG_SPLIT_DELIM_CAPTURE ); print_r ( $stack ); ?> Array ( [0] => 3 [1] => + [2] => 2 [3] => / [4] => 7 [5] => - [6] => 9 ) The separator regular expression looks for the four mathematical operators (+, -, /, *), surrounded by optional leading or trailing spaces. The PREG_SPLIT_DELIM_CAPTURE flag tells preg_split() to include the matches as part of the separator regular expression in parentheses in the returned array of strings. Only the mathematical operator character class is in parentheses, so the returned array doesn\u2019t have any spaces in it.","title":"explode()"},{"location":"PR/phpStr1/#str_split","text":"Use preg_split() if you need a Perl-compatible regular expression to describe the separator: $words = preg_split('/\\d\\. /','my day: 1. get up 2. get dressed 3. eat toast'); $lines = preg_split('/[\\n\\r]+/',$_POST['textarea']); Use the /i flag to preg_split() for case-insensitive separator matching: $words = preg_split('/ x /i','31 inches x 22 inches X 9 inches'); If all of your fields are the same size, str_split() is a handy shortcut for chopping up incoming data. It returns an array made up of sections of a string. <?php $book_array = str_split ( $booklist , 25 ); ?> The str_split() function splits a string into an array. <?php echo str_split ( \"Hello world!\" ); // outputs [\"H\", \"e\", \"l\", \"l\", \"o\", \" \", \"w\", \"o\", \"r\", \"l\", \"d\", \"!\"] ?>","title":"str_split()"},{"location":"PR/phpStr1/#substr_replace","text":"The PHP substr_replace() function replaces part of a string with another string. You want to replace a substring with a different string. For example, you want to obscure all but the last four digits of a credit card number before printing it. <?php // Everything from position $start to the end of $old_string // becomes $new_substring $new_string = substr_replace ( $old_string , $new_substring , $start ); //$length characters, starting at position $start, become $new_substring $new_string = substr_replace ( $old_string , $new_substring , $start , $length ); ?> Without the $length argument, substr_replace() replaces everything from $start to the end of the string. If $length is specified, only that many characters are replaced. <?php print substr_replace ( 'My pet is a blue dog.' , 'fish.' , 12 ); print substr_replace ( 'My pet is a blue dog.' , 'green' , 12 , 4 ); $credit_card = '4111 1111 1111 1111' ; print substr_replace ( $credit_card , 'xxxx ' , 0 , strlen ( $credit_card ) - 4 ); ?> My pet is a fish. My pet is a green dog. xxxx 1111 If $start is negative, the new substring is placed by counting $start characters from the end of $old_string, not from the beginning. If $start and $length are 0, the new substring is inserted at the start of $old_string. The function substr_replace() is useful when you\u2019ve got text that\u2019s too big to display all at once, and you want to display some of the text with a link to the rest. <?php /* Displays the first 25 characters of a message with an ellipsis after it as a link to a page that displays more text */ $r = mysql_query ( \"SELECT id,message FROM messages WHERE id = $id \" ) or die (); $ob = mysql_fetch_object ( $r ); printf ( '<a href=\"more-text.php?id=%d\">%s</a>' , $ob -> id , substr_replace ( $ob -> message , ' ...' , 25 )); ?> /* The more-text.php page referenced can use the message ID passed in the query string to retrieve the full message and display it. */","title":"substr_replace()"},{"location":"PR/phpStr1/#str_replace","text":"The PHP str_replace() function replaces some characters with some other characters in a string. <?php echo str_replace ( \"world\" , \"Earth\" , \"Hello world!\" ); // outputs Hello Earth! ?>","title":"str_replace()"},{"location":"PR/phpStr1/#expanding-and-compressing-tabs","text":"You want to change spaces to tabs (or tabs to spaces) in a string while keeping text aligned with tab stops. For example, you want to display formatted text to users in a standardized way. <?php // Switching tabs and spaces $rows = $db -> query ( 'SELECT message FROM messages WHERE id = 1' ); $obj = $rows -> fetch ( PDO :: FETCH_OBJ ); $tabbed = str_replace ( ' ' , \" \\t \" , $obj -> message ); $spaced = str_replace ( \" \\t \" , ' ' , $obj -> message ); print \"With Tabs: <pre> $tabbed </pre>\" ; print \"With Spaces: <pre> $spaced </pre>\" ; ?> Using str_replace() for conversion, however, doesn\u2019t respect tab stops. If you want tab stops every eight characters, a line beginning with a five-letter word and a tab should have that tab replaced with three spaces, not one. Use the tab_expand() function shown below to turn tabs to spaces in a way that respects tab stops. <?php function tab_expand ( $text ) { while ( strstr ( $text , \" \\t \" )) { $text = preg_replace_callback ( '/^([^\\t\\n]*)(\\t+)/m' , 'tab_expand_helper' , $text ); } return $text ; } function tab_expand_helper ( $matches ) { $tab_stop = 8 ; return $matches [ 1 ] . str_repeat ( ' ' , strlen ( $matches [ 2 ]) * $tab_stop - ( strlen ( $matches [ 1 ]) % $tab_stop )); } $spaced = tab_expand ( $obj -> message ); ?> You can use the tab_unexpand() function shown below to reverse the process to turn spaces back to tabs. <?php function tab_unexpand ( $text ) { $tab_stop = 8 ; $lines = explode ( \" \\n \" , $text ); foreach ( $lines as $i => $line ) { // Expand any tabs to spaces $line = tab_expand ( $line ); $chunks = str_split ( $line , $tab_stop ); $chunkCount = count ( $chunks ); // Scan all but the last chunk for ( $j = 0 ; $j < $chunkCount - 1 ; $j ++ ) { $chunks [ $j ] = preg_replace ( '/ {2,}$/' , \" \\t \" , $chunks [ $j ]); } // If the last chunk is a tab-stop's worth of spaces // convert it to a tab; Otherwise, leave it alone if ( $chunks [ $chunkCount - 1 ] == str_repeat ( ' ' , $tab_stop )) { $chunks [ $chunkCount - 1 ] = \" \\t \" ; } // Recombine the chunks $lines [ $i ] = implode ( '' , $chunks ); } // Recombine the lines return implode ( \" \\n \" , $lines ); } $tabbed = tab_unexpand ( $obj -> message ); ?> Each function assumes tab stops are every eight spaces, but that can be modified by changing the setting of the $tab_stop variable. The regular expression in tab_expand() matches both a group of tabs and all the text in a line before that group of tabs. It needs to match the text before the tabs because the length of that text affects how many spaces the tabs should be replaced with so that subsequent text is aligned with the next tab stop. The function doesn\u2019t just replace each tab with eight spaces; it adjusts text after tabs to line up with tab stops. Similarly, tab_unexpand() doesn\u2019t just look for eight consecutive spaces and then replace them with one tab character. It divides up each line into eight-character chunks and then substitutes ending whitespace in those chunks (at least two spaces) with tabs. This not only preserves text alignment with tab stops; it also saves space in the string.","title":"Expanding and Compressing Tabs"},{"location":"PR/phpStr1/#str_repeat","text":"The str_repeat() function repeats a string a specified number of times. <?php echo str_repeat ( \"Hello \" , 3 ); // outputs Hello Hello Hello ?>","title":"str_repeat()"},{"location":"PR/phpStr1/#str_shuffle","text":"The str_shuffle() function randomly shuffles all the characters of a string. <?php echo str_shuffle ( \"Hello world!\" ); // outputs !Wdroel loHl ?>","title":"str_shuffle()"},{"location":"PR/phpStr1/#str_rand","text":"The str_rand() function returns a random string of specified length. <?php function str_rand ( $length = 32 , $characters = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ' ) { if ( ! is_int ( $length ) || $length < 0 ) { return false ; } $characters_length = strlen ( $characters ) - 1 ; $string = '' ; for ( $i = $length ; $i > 0 ; $i -- ) { $string .= $characters [ mt_rand ( 0 , $characters_length )]; } return $string ; } ?> PHP has native functions for generating random numbers, but nothing for random strings. The str_rand() function returns a 32-character string constructed from letters and numbers. Pass in an integer to change the length of the returned string. To use an alternative set of characters, pass them as a string as the second argument. For example, to get a 16-digit Morse Code: <?php print str_rand ( 16 , '.-' ); ?> .--..-.-.--.----","title":"str_rand()"},{"location":"PR/phpStr1/#case-conversion","text":"","title":"Case Conversion"},{"location":"PR/phpStr1/#ucfirst","text":"The PHP ucfirst() function capitalizes the first character of a string. <?php echo ucfirst ( \"hello world!\" ); // outputs Hello world! ?>","title":"ucfirst()"},{"location":"PR/phpStr1/#ucwords","text":"The PHP ucwords() function capitalizes the first character of each word in a string. <?php echo ucwords ( \"hello world!\" ); // outputs Hello World! ?>","title":"ucwords()"},{"location":"PR/phpStr1/#strtolower","text":"The PHP strtolower() function converts a string to lowercase. <?php echo strtolower ( \"Hello world!\" ); // outputs hello world! ?>","title":"strtolower()"},{"location":"PR/phpStr1/#strtoupper","text":"The PHP strtoupper() function converts a string to uppercase. <?php echo strtoupper ( \"Hello world!\" ); // outputs HELLO WORLD! ?>","title":"strtoupper()"},{"location":"PR/phpStr1/#trimming-blanks-from-a-string","text":"You want to remove whitespace from the beginning or end of a string. For example, you want to clean up user input before validating it. Use ltrim(), rtrim(), or trim(). The ltrim() function removes whitespace from the beginning of a string, rtrim() from the end of a string, and trim() from both the beginning and end of a string. For these functions, whitespace is defined as the following characters: newline, carriage return, space, horizontal and vertical tab, and null. Trimming whitespace off of strings saves storage space and can make for more precise display of formatted data or text. The trim() functions can also remove user-specified characters from strings. Pass the characters you want to remove as a second argument. You can indicate a range of characters with two dots between the first and last characters in the range. <?php // Remove numerals and space from the beginning of the line print ltrim ( '10 PRINT A$' , ' 0..9' ); // Remove semicolon from the end of the line print rtrim ( 'SELECT * FROM turtles;' , ';' ); ?>","title":"Trimming Blanks from a String"},{"location":"PR/phpStr1/#ltrim","text":"The PHP ltrim() function removes leading whitespace from a string. <?php echo ltrim ( \" Hello world!\" ); // outputs \"Hello world!\" ?>","title":"ltrim()"},{"location":"PR/phpStr1/#rtrim","text":"The PHP rtrim() function removes trailing whitespace from a string. <?php echo rtrim ( \"Hello world! \" ); // outputs \"Hello world!\" ?>","title":"rtrim()"},{"location":"PR/phpStr1/#trim","text":"The PHP trim() function removes leading and trailing whitespace from a string. <?php echo trim ( \" Hello world! \" ); // outputs \"Hello world!\" ?>","title":"trim()"},{"location":"PR/phpStr1/#formatting-to-csv","text":"","title":"Formatting to CSV"},{"location":"PR/phpStr1/#fgetcsv","text":"The PHP str_getcsv() function parses a CSV string into an array. Parsing Comma-Separated Data. You have data in comma-separated values (CSV) format\u2014for example, a file exported from Excel or a database\u2014and you want to extract the records and fields into a format you can manipulate in PHP. If the CSV data is in a file (or available via a URL), open the file with fopen() and read in the data with fgetcsv(). <?php //Reading CSV data from a file $fp = fopen ( $filename , 'r' ) or die ( \"can't open file\" ); print \"<table> \\n \" ; while ( $csv_line = fgetcsv ( $fp )) { print '<tr>' ; for ( $i = 0 , $j = count ( $csv_line ); $i < $j ; $i ++ ) { print '<td>' . htmlentities ( $csv_line [ $i ]) . '</td>' ; } print \"</tr> \\n \" ; } print \"</table> \\n \" ; fclose ( $fp ) or die ( \"can't close file\" ); ?> By default, fgetcsv() reads in an entire line of data. If your average line length is more than 8,192 bytes, your program may run faster if you specify an explicit line length instead of letting PHP figure it out. Do this by providing a second argument to fgetcsv() that is a value larger than the maximum length of a line in your CSV file. (Don\u2019t forget to count the end-of-line whitespace.) If you pass a line length of 0, PHP will use the default behavior. You can pass fgetcsv() an optional third argument, a delimiter to use instead of a comma (,). However, using a different delimiter somewhat defeats the purpose of CSV as an easy way to exchange tabular data. Don\u2019t be tempted to bypass fgetcsv() and just read a line in and explode() on the commas. CSV is more complicated than that so that it can deal with field values that have, for example, literal commas in them that should not be treated as field delimiters. Using fgetcsv() protects you and your code from subtle errors.","title":"fgetcsv()"},{"location":"PR/phpStr1/#str_getcsv","text":"The PHP str_getcsv() function parses a CSV string into an array. Parsing Comma-Separated Data. Use str_getcsv() only when you have the CSV already as a string in your program. <?php $string = 'PHP,Java,Python,Kotlin,Swift' ; $data = str_getcsv ( $string ); var_dump ( $data ); ?>","title":"str_getcsv()"},{"location":"PR/phpStr1/#fputcsv","text":"The PHP fputcsv() function converts an array into a CSV string and generating Comma-Separated Data. You want to format data as comma-separated values (CSV) so that it can be imported by a spreadsheet or database. <?php $sales = array ( array ( 'Northeast' , '2005-01-01' , '2005-02-01' , 12.54 ), array ( 'Northwest' , '2005-01-01' , '2005-02-01' , 546.33 ), array ( 'Southeast' , '2005-01-01' , '2005-02-01' , 93.26 ), array ( 'Southwest' , '2005-01-01' , '2005-02-01' , 945.21 ), array ( 'All Regions' , '--' , '--' , 1597.34 ) ); $filename = './sales.csv' ; $fh = fopen ( $filename , 'w' ) or die ( \"Can't open $filename \" ); foreach ( $sales as $sales_line ) { if ( fputcsv ( $fh , $sales_line ) === false ) { die ( \"Can't write CSV line\" ); } } fclose ( $fh ) or die ( \"Can't close $filename \" ); ?> To print the CSV-formatted data instead of writing it to a file, use the special output stream php://output . <?php $sales = array ( array ( 'Northeast' , '2005-01-01' , '2005-02-01' , 12.54 ), array ( 'Northwest' , '2005-01-01' , '2005-02-01' , 546.33 ), array ( 'Southeast' , '2005-01-01' , '2005-02-01' , 93.26 ), array ( 'Southwest' , '2005-01-01' , '2005-02-01' , 945.21 ), array ( 'All Regions' , '--' , '--' , 1597.34 ) ); $fh = fopen ( 'php://output' , 'w' ); foreach ( $sales as $sales_line ) { if ( fputcsv ( $fh , $sales_line ) === false ) { die ( \"Can't write CSV line\" ); } } fclose ( $fh ); ?> To put the CSV-formatted data into a string instead of printing it or writing it to a file. <?php $sales = array ( array ( 'Northeast' , '2005-01-01' , '2005-02-01' , 12.54 ), array ( 'Northwest' , '2005-01-01' , '2005-02-01' , 546.33 ), array ( 'Southeast' , '2005-01-01' , '2005-02-01' , 93.26 ), array ( 'Southwest' , '2005-01-01' , '2005-02-01' , 945.21 ), array ( 'All Regions' , '--' , '--' , 1597.34 ) ); ob_start (); $fh = fopen ( 'php://output' , 'w' ) or die ( \"Can't open php://output\" ); foreach ( $sales as $sales_line ) { if ( fputcsv ( $fh , $sales_line ) === false ) { die ( \"Can't write CSV line\" ); } } fclose ( $fh ) or die ( \"Can't close php://output\" ); $output = ob_get_contents (); ob_end_clean (); ?>","title":"fputcsv()"},{"location":"PR/phpStr1/#wrapping-text-at-a-certain-line-length","text":"When you need to wrap lines in a string. For example, you want to display text by using the pre tags but have it stay within a regularly sized browser window.","title":"Wrapping Text at a Certain Line Length"},{"location":"PR/phpStr1/#wordwrap","text":"<?php $s = \"Four score and seven years ago our fathers brought forth on this continent \u21b5 a new nation, conceived in liberty and dedicated to the proposition \u21b5 that all men are created equal.\" ; print \"<pre> \\n \" . wordwrap ( $s ) . \" \\n </pre>\" ; ?> <pre> Four score and seven years ago our fathers brought forth on this continent a new nation, conceived in liberty and dedicated to the proposition that all men are created equal. </pre> By default, wordwrap() wraps text at 75 characters per line. An optional second argu\u2010 ment specifies a different line length: <?php print wordwrap ( $s , 50 ); ?> Four score and seven years ago our fathers brought forth on this continent a new nation, conceived in liberty and dedicated to the proposition that all men are created equal. Other characters besides \\n can be used for line breaks. For double spacing, use \"\\n\\n\": <?php print wordwrap ( $s , 50 , \" \\n\\n \" ); ?> This prints: Four score and seven years ago our fathers brought forth on this continent a new nation, conceived in liberty and dedicated to the proposition that all men are created equal. There is an optional fourth argument to wordwrap() that controls the treatment of words that are longer than the specified line length. If this argument is 1, these words are wrapped. Otherwise, they span past the specified line length: <?php print wordwrap ( 'jabberwocky' , 5 ) . \" \\n \" ; print wordwrap ( 'jabberwocky' , 5 , \" \\n \" , 1 ); ?> This prints: jabberwocky jabbe rwock y","title":"wordwrap()"},{"location":"PR/phpStr1/#formatting-numbers","text":"When you have a number and you want to print it with thousands and decimal separators. For example, you want to display the number of people who have viewed a page, or the percentage of people who have voted for an option in a poll.","title":"Formatting Numbers"},{"location":"PR/phpStr1/#number_format","text":"<?php $number = 1234.56 ; // $formatted1 is \"1,235\" - 1234.56 gets rounded up and , is // the thousands separator\"); $formatted1 = number_format ( $number ); // Second argument specifies number of decimal places to use. // $formatted2 is 1,234.56 $formatted2 = number_format ( $number , 2 ); // Third argument specifies decimal point character // Fourth argument specifies thousands separator // $formatted3 is 1.234,56 $formatted3 = number_format ( $number , 2 , \",\" , \".\" ); ?> The number_format() function formats a number with decimal and thousands sepa\u2010 rators. By default, it rounds the number to the nearest integer. If you want to preserve the entire number, but you don\u2019t know ahead of time how many digits follow the decimal point in your number: <?php $number = 31415.92653 ; // your number list ( $int , $dec ) = explode ( '.' , $number ); // $formatted is 31,415.92653 $formatted = number_format ( $number , strlen ( $dec )); ?>","title":"number_format()"},{"location":"PR/phpStr1/#numberformatter","text":"If you need to generate appropriate formats for a particular locale, use NumberFormatter: <?php $number = '1234.56' ; // $formatted1 is 1,234.56 $usa = new NumberFormatter ( \"en-US\" , NumberFormatter :: DEFAULT_STYLE ); $formatted1 = $usa -> format ( $number ); // $formatted2 is 1 234,56 // Note that it's a \"non breaking space (\\u00A0) between the 1 and the 2 $france = new NumberFormatter ( \"fr-FR\" , NumberFormatter :: DEFAULT_STYLE ); $formatted2 = $france -> format ( $number ); ?> The NumberFormatter class, part of the intl extension, uses the extensive formatting rules that are part of the ICU library to give you an easy and powerful way to format numbers appropriately for anywhere in the world. You can even do fancy things such as spell out a number in words. <?php $number = '1234.56' ; $france = new NumberFormatter ( \"fr-FR\" , NumberFormatter :: SPELLOUT ); // $formatted is \"mille-deux-cent-trente-quatre virgule cinq six\" $formatted = $france -> format ( $number ); ?> When you have a number and you want to print it with thousands and decimal separators. For instance, you want to display prices for items in a shopping cart. <?php $number = 1234.56 ; // US uses $ , and . // $formatted1 is $1,234.56 $usa = new NumberFormatter ( \"en-US\" , NumberFormatter :: CURRENCY ); $formatted1 = $usa -> format ( $number ); // France uses , and \u20ac // $formatted2 is 1 234,56 \u20ac $france = new NumberFormatter ( \"fr-FR\" , NumberFormatter :: CURRENCY ); $formatted2 = $france -> format ( $number ); ?> The NumberFormatter::CURRENCY format style formats a number by inserting the correct currency symbol, decimal, and thousands separators for the locale used to create the NumberFormatter object instance. It assumes that the currency to use is the one native to the locale\u2014US Dollars for the en-US locale, Euro for the fr-FR locale, and soon. To produce the right format for a currency other than the locale\u2019s native currency, use the formatCurrency() method. Its second argument lets you specify the currency to use. For example, what\u2019s the correct way, in the USA, to format the price of something in Euro? <?php $number = 1234.56 ; // US uses \u20ac , and . for Euro // $formatted is \u20ac1,234.56 $usa = new NumberFormatter ( \"en-US\" , NumberFormatter :: CURRENCY ); $formatted = $usa -> formatCurrency ( $number , 'EUR' ); ?>","title":"NumberFormatter"},{"location":"PR/phpStr1/#printf","text":"printf() family of functions, which allows you to convert decimal numbers to binary, octal, and hexadecimal numbers with a wide range of formatting, such as leading zeros and a choice between upper- and lowercase letters for hexadecimal numbers. For instance, say you want to print out HTML color values. You can use the %02X format specifier. <?php $red = 0 ; $green = 102 ; $blue = 204 ; // $color is '#0066CC' $color = sprintf ( '#%02X%02X%02X' , $red , $green , $blue ); ?>","title":"printf()"},{"location":"PR/phpStr1/#all-string-functions","text":"The PHP string functions are part of the PHP core. No installation is required to use these functions. For more information, see PHP String Functions Function Description addcslashes() Returns a string with backslashes in front of the specified characters addslashes() Returns a string with backslashes in front of predefined characters bin2hex() Converts a string of ASCII characters to hexadecimal values chop() Removes whitespace or other characters from the right end of a string chr() Returns a character from a specified ASCII value chunk_split() Splits a string into a series of smaller parts convert_cyr_string() Converts a string from one Cyrillic character-set to another convert_uudecode() Decodes a uuencoded string convert_uuencode() Encodes a string using the uuencode algorithm count_chars() Returns information about characters used in a string crc32() Calculates a 32-bit CRC for a string crypt() One-way string hashing echo() Outputs one or more strings explode() Breaks a string into an array fprintf() Writes a formatted string to a specified output stream get_html_translation_table() Returns the translation table used by htmlspecialchars() and htmlentities() hebrev() Converts Hebrew text to visual text hebrevc() Converts Hebrew text to visual text and new lines (\\n) into hex2bin() Converts a string of hexadecimal values to ASCII characters html_entity_decode() Converts HTML entities to characters htmlentities() Converts characters to HTML entities htmlspecialchars_decode() Converts some predefined HTML entities to characters htmlspecialchars() Converts some predefined characters to HTML entities implode() Returns a string from the elements of an array join() Alias of implode() lcfirst() Converts the first character of a string to lowercase levenshtein() Returns the Levenshtein distance between two strings localeconv() Returns locale numeric and monetary formatting information ltrim() Removes whitespace or other characters from the left side of a string md5() Calculates the MD5 hash of a string md5_file() Calculates the MD5 hash of a file metaphone() Calculates the metaphone key of a string money_format() Returns a string formatted as a currency string nl_langinfo() Returns specific local information nl2br() Inserts HTML line breaks in front of each newline in a string number_format() Formats a number with grouped thousands ord() Returns the ASCII value of the first character of a string parse_str() Parses a query string into variables print() Outputs one or more strings printf() Outputs a formatted string quoted_printable_decode() Converts a quoted-printable string to an 8-bit string quoted_printable_encode() Converts an 8-bit string to a quoted printable string quotemeta() Quotes meta characters rtrim() Removes whitespace or other characters from the right side of a string setlocale() Sets locale information sha1() Calculates the SHA-1 hash of a string sha1_file() Calculates the SHA-1 hash of a file similar_text() Calculates the similarity between two strings soundex() Calculates the soundex key of a string sprintf() Writes a formatted string to a variable sscanf() Parses input from a string according to a format str_getcsv() Parses a CSV string into an array str_ireplace() Replaces some characters in a string (case-insensitive) str_pad() Pads a string to a new length str_repeat() Repeats a string a specified number of times str_replace() Replaces some characters in a string (case-sensitive) str_rot13() Performs the ROT13 encoding on a string str_shuffle() Randomly shuffles all characters in a string str_split() Splits a string into an array str_word_count() Count the number of words in a string strcasecmp() Compares two strings (case-insensitive) strchr() Finds the first occurrence of a string inside another string (alias of strstr()) strcmp() Compares two strings (case-sensitive) strcoll() Compares two strings (locale based string comparison) strcspn() Returns the number of characters found in a string before any part of some specified characters are found strip_tags() Strips HTML and PHP tags from a string stripcslashes() Unquotes a string quoted with addcslashes() stripslashes() Unquotes a string quoted with addslashes() stripos() Returns the position of the first occurrence of a string inside another string (case-insensitive) stristr() Finds the first occurrence of a string inside another string (case-insensitive) strlen() Returns the length of a string strnatcasecmp() Compares two strings using a \"natural order\" algorithm (case-insensitive) strnatcmp() Compares two strings using a \"natural order\" algorithm (case-sensitive) strncasecmp() String comparison of the first n characters (case-insensitive) strncmp() String comparison of the first n characters (case-sensitive) strpbrk() Searches a string for any of a set of characters strpos() Returns the position of the first occurrence of a string inside another string (case-sensitive) strrchr() Finds the last occurrence of a string inside another string strrev() Reverses a string strripos() Finds the position of the last occurrence of a string inside another string (case-insensitive) strrpos() Finds the position of the last occurrence of a string inside another string (case-sensitive) strspn() Returns the number of characters found in a string that contains only characters from a specified charlist strstr() Finds the first occurrence of a string inside another string (case-sensitive) strtok() Splits a string into smaller strings strtolower() Converts a string to lowercase letters strtoupper() Converts a string to uppercase letters strtr() Translates certain characters in a string substr() Returns a part of a string substr_compare() Compares two strings from a specified start position (binary safe and optionally case-sensitive) substr_count() Counts the number of times a substring occurs in a string substr_replace() Replaces a part of a string with another string trim() Removes whitespace or other characters from both sides of a string ucfirst() Converts the first character of a string to uppercase ucwords() Converts the first character of each word in a string to uppercase vfprintf() Writes a formatted string to a specified output stream vprintf() Outputs a formatted string vsprintf() Writes a formatted string to a variable wordwrap() Wraps a string to a given number of characters","title":"All String Functions"},{"location":"PR/phpSuperGlobals/","text":"Superglobals were introduced in PHP 4.1.0, and are built-in variables that are always available in all scopes. The PHP superglobal variables are: $GLOBALS $_SERVER $_REQUEST $_POST $_GET $_FILES $_ENV $_COOKIE $_SESSION $GLOBALS $GLOBALS is a PHP super global variable which is used to access global variables from anywhere in the PHP script (also from within functions or methods). PHP stores all global variables in an array called $GLOBALS[index]. The index holds the name of the variable. <?php $x = 75 ; $y = 25 ; function addition () { $GLOBALS [ 'z' ] = $GLOBALS [ 'x' ] + $GLOBALS [ 'y' ]; } addition (); echo $z ; ?> $_SERVER $_SERVER is a PHP super global variable which holds information about headers, paths, and script locations. <?php echo $_SERVER [ 'PHP_SELF' ]; echo \"<br>\" ; echo $_SERVER [ 'SERVER_NAME' ]; echo \"<br>\" ; echo $_SERVER [ 'HTTP_HOST' ]; echo \"<br>\" ; echo $_SERVER [ 'HTTP_REFERER' ]; echo \"<br>\" ; echo $_SERVER [ 'HTTP_USER_AGENT' ]; echo \"<br>\" ; echo $_SERVER [ 'SCRIPT_NAME' ]; ?> The following table lists the most important elements that can go inside $_SERVER. Element Description $_SERVER['PHP_SELF'] Returns the filename of the currently executing script $_SERVER['GATEWAY_INTERFACE'] Returns the version of the Common Gateway Interface (CGI) the server is using $_SERVER['SERVER_ADDR'] Returns the IP address of the host server $_SERVER['SERVER_NAME'] Returns the name of the host server (such as www.w3schools.com) $_SERVER['SERVER_SOFTWARE'] Returns the server identification string (such as Apache/2.2.24) $_SERVER['SERVER_PROTOCOL'] Returns the name and revision of the information protocol (such as HTTP/1.1) $_SERVER['REQUEST_METHOD'] Returns the request method used to access the page (such as POST) $_SERVER['REQUEST_TIME'] Returns the timestamp of the start of the request (such as 1377687496) $_SERVER['QUERY_STRING'] Returns the query string if the page is accessed via a query string $_SERVER['HTTP_ACCEPT'] Returns the Accept header from the current request $_SERVER['HTTP_ACCEPT_CHARSET'] Returns the Accept_Charset header from the current request (such as utf-8,ISO-8859-1) $_SERVER['HTTP_HOST'] Returns the Host header from the current request $_SERVER['HTTP_REFERER'] Returns the complete URL of the current page (not reliable because not all user-agents support it) $_SERVER['HTTPS'] Is the script queried through a secure HTTP protocol $_SERVER['REMOTE_ADDR'] Returns the IP address from where the user is viewing the current page $_SERVER['REMOTE_HOST'] Returns the Host name from where the user is viewing the current page $_SERVER['REMOTE_PORT'] Returns the port being used on the user's machine to communicate with the web server $_SERVER['SCRIPT_FILENAME'] Returns the absolute pathname of the currently executing script $_SERVER['SERVER_ADMIN'] Returns the value given to the SERVER_ADMIN directive in the web server $_SERVER['SERVER_PORT'] Returns the port on the server machine being used by the web server for communication (such as 80) $_SERVER['SERVER_SIGNATURE'] Returns the server version and virtual host name which are added to server-generated pages $_SERVER['PATH_TRANSLATED'] Returns the file system based path to the current script $_SERVER['SCRIPT_NAME'] Returns the path of the current script $_SERVER['SCRIPT_URI'] Returns the URI of the current page $_REQUEST PHP $_REQUEST is a PHP super global variable which is used to collect data after submitting an HTML form. < html > < body > < form method = \"post\" action = \"<?php echo $_SERVER['PHP_SELF'];?>\" > Name: < input type = \"text\" name = \"fname\" > < input type = \"submit\" > </ form > <?php if ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") { // collect value of input field $name = $_REQUEST['fname']; if (empty($name)) { echo \"Name is empty\"; } else { echo $name; } } ?> </ body > </ html > $_POST PHP $_POST is a PHP super global variable which is used to collect form data after submitting an HTML form with method=\"post\". $_POST is also widely used to pass variables. < html > < body > < form method = \"post\" action = \"<?php echo $_SERVER['PHP_SELF'];?>\" > Name: < input type = \"text\" name = \"fname\" > < input type = \"submit\" > </ form > <?php if ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") { // collect value of input field $name = $_POST['fname']; if (empty($name)) { echo \"Name is empty\"; } else { echo $name; } } ?> </ body > </ html > $_GET PHP $_GET is a PHP super global variable which is used to collect form data after submitting an HTML form with method=\"get\". < html > < body > <?php echo \"Study \" . $_GET['subject'] . \" at \" . $_GET['web']; ?> </ body > </ html >","title":"Globals"},{"location":"PR/phpSuperGlobals/#globals","text":"$GLOBALS is a PHP super global variable which is used to access global variables from anywhere in the PHP script (also from within functions or methods). PHP stores all global variables in an array called $GLOBALS[index]. The index holds the name of the variable. <?php $x = 75 ; $y = 25 ; function addition () { $GLOBALS [ 'z' ] = $GLOBALS [ 'x' ] + $GLOBALS [ 'y' ]; } addition (); echo $z ; ?>","title":"$GLOBALS"},{"location":"PR/phpSuperGlobals/#_server","text":"$_SERVER is a PHP super global variable which holds information about headers, paths, and script locations. <?php echo $_SERVER [ 'PHP_SELF' ]; echo \"<br>\" ; echo $_SERVER [ 'SERVER_NAME' ]; echo \"<br>\" ; echo $_SERVER [ 'HTTP_HOST' ]; echo \"<br>\" ; echo $_SERVER [ 'HTTP_REFERER' ]; echo \"<br>\" ; echo $_SERVER [ 'HTTP_USER_AGENT' ]; echo \"<br>\" ; echo $_SERVER [ 'SCRIPT_NAME' ]; ?> The following table lists the most important elements that can go inside $_SERVER. Element Description $_SERVER['PHP_SELF'] Returns the filename of the currently executing script $_SERVER['GATEWAY_INTERFACE'] Returns the version of the Common Gateway Interface (CGI) the server is using $_SERVER['SERVER_ADDR'] Returns the IP address of the host server $_SERVER['SERVER_NAME'] Returns the name of the host server (such as www.w3schools.com) $_SERVER['SERVER_SOFTWARE'] Returns the server identification string (such as Apache/2.2.24) $_SERVER['SERVER_PROTOCOL'] Returns the name and revision of the information protocol (such as HTTP/1.1) $_SERVER['REQUEST_METHOD'] Returns the request method used to access the page (such as POST) $_SERVER['REQUEST_TIME'] Returns the timestamp of the start of the request (such as 1377687496) $_SERVER['QUERY_STRING'] Returns the query string if the page is accessed via a query string $_SERVER['HTTP_ACCEPT'] Returns the Accept header from the current request $_SERVER['HTTP_ACCEPT_CHARSET'] Returns the Accept_Charset header from the current request (such as utf-8,ISO-8859-1) $_SERVER['HTTP_HOST'] Returns the Host header from the current request $_SERVER['HTTP_REFERER'] Returns the complete URL of the current page (not reliable because not all user-agents support it) $_SERVER['HTTPS'] Is the script queried through a secure HTTP protocol $_SERVER['REMOTE_ADDR'] Returns the IP address from where the user is viewing the current page $_SERVER['REMOTE_HOST'] Returns the Host name from where the user is viewing the current page $_SERVER['REMOTE_PORT'] Returns the port being used on the user's machine to communicate with the web server $_SERVER['SCRIPT_FILENAME'] Returns the absolute pathname of the currently executing script $_SERVER['SERVER_ADMIN'] Returns the value given to the SERVER_ADMIN directive in the web server $_SERVER['SERVER_PORT'] Returns the port on the server machine being used by the web server for communication (such as 80) $_SERVER['SERVER_SIGNATURE'] Returns the server version and virtual host name which are added to server-generated pages $_SERVER['PATH_TRANSLATED'] Returns the file system based path to the current script $_SERVER['SCRIPT_NAME'] Returns the path of the current script $_SERVER['SCRIPT_URI'] Returns the URI of the current page","title":"$_SERVER"},{"location":"PR/phpSuperGlobals/#_request","text":"PHP $_REQUEST is a PHP super global variable which is used to collect data after submitting an HTML form. < html > < body > < form method = \"post\" action = \"<?php echo $_SERVER['PHP_SELF'];?>\" > Name: < input type = \"text\" name = \"fname\" > < input type = \"submit\" > </ form > <?php if ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") { // collect value of input field $name = $_REQUEST['fname']; if (empty($name)) { echo \"Name is empty\"; } else { echo $name; } } ?> </ body > </ html >","title":"$_REQUEST"},{"location":"PR/phpSuperGlobals/#_post","text":"PHP $_POST is a PHP super global variable which is used to collect form data after submitting an HTML form with method=\"post\". $_POST is also widely used to pass variables. < html > < body > < form method = \"post\" action = \"<?php echo $_SERVER['PHP_SELF'];?>\" > Name: < input type = \"text\" name = \"fname\" > < input type = \"submit\" > </ form > <?php if ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") { // collect value of input field $name = $_POST['fname']; if (empty($name)) { echo \"Name is empty\"; } else { echo $name; } } ?> </ body > </ html >","title":"$_POST"},{"location":"PR/phpSuperGlobals/#_get","text":"PHP $_GET is a PHP super global variable which is used to collect form data after submitting an HTML form with method=\"get\". < html > < body > <?php echo \"Study \" . $_GET['subject'] . \" at \" . $_GET['web']; ?> </ body > </ html >","title":"$_GET"},{"location":"PR/phpVar1/","text":"In PHP, we store all pieces of data -- numbers, characters, strings, everything -- as objects, and we refer to these objects using variables. As a simple case, we can assign a variable a value using the assignment operator, which is the \"equals\" sign. Creating (Declaring) PHP Variables In PHP, a variable starts with the $ sign, followed by the name of the variable: Remember that variables are case-sensitive! <?php $txt = \"Hello world!\" ; //No difference between \"\" and '' $x = 5 ; $y = 10.5 ; ?> After the execution of the statements above, the variable $txt will hold the value Hello world!, the variable $x will hold the value 5, and the variable $y will hold the value 10.5. Note: When you assign a text value to a variable, put quotes around the value. Note: Unlike other programming languages, PHP has no command for declaring a variable. It is created the moment you first assign a value to it. Rules for PHP variables: A variable starts with the $ sign, followed by the name of the variable A variable name must start with a letter or the underscore character A variable name cannot start with a number A variable name can only contain alpha-numeric characters and underscores (A-z, 0-9, and _ ) Variable names are case-sensitive ($age and $AGE are two different variables) Output Variables The PHP echo statement is often used to output data to the screen. The following example will show how to output text and a variable: <?php $txt = \"phpTutorial\" ; echo \"I love $txt !\" ; ?> Tools for understanding strange objects var_dump() function var_dump() displays structured information about one or more expressions that includes its type and value. Arrays and objects are explored recursively with values indented to show structure. <!DOCTYPE html> <html> <body> <?php $x = 5985 ; var_dump ( $x ); ?> </body> </html> int(5985) print_r() function print_r() displays the value of a variable, in a human-readable format. <?php $a = array ( \"red\" , \"green\" , \"blue\" ); print_r ( $a ); echo \"<br>\" ; $b = array ( \"Peter\" => \"35\" , \"Ben\" => \"37\" , \"Joe\" => \"43\" ); print_r ( $b ); ?> Array ( [0] => red [1] => green [2] => blue ) Array ( [Peter] => 35 [Ben] => 37 [Joe] => 43 ) NULL The null type is PHP's unit type, i.e. it has only one value: null. Undefined, and unset() variables will resolve to the value null. There is only one value of type null, and that is the case-insensitive constant null. <?php $var = NULL ; ?>","title":"Variables"},{"location":"PR/phpVar1/#creating-declaring-php-variables","text":"In PHP, a variable starts with the $ sign, followed by the name of the variable: Remember that variables are case-sensitive! <?php $txt = \"Hello world!\" ; //No difference between \"\" and '' $x = 5 ; $y = 10.5 ; ?> After the execution of the statements above, the variable $txt will hold the value Hello world!, the variable $x will hold the value 5, and the variable $y will hold the value 10.5. Note: When you assign a text value to a variable, put quotes around the value. Note: Unlike other programming languages, PHP has no command for declaring a variable. It is created the moment you first assign a value to it.","title":"Creating (Declaring) PHP Variables"},{"location":"PR/phpVar1/#rules-for-php-variables","text":"A variable starts with the $ sign, followed by the name of the variable A variable name must start with a letter or the underscore character A variable name cannot start with a number A variable name can only contain alpha-numeric characters and underscores (A-z, 0-9, and _ ) Variable names are case-sensitive ($age and $AGE are two different variables)","title":"Rules for PHP variables:"},{"location":"PR/phpVar1/#output-variables","text":"The PHP echo statement is often used to output data to the screen. The following example will show how to output text and a variable: <?php $txt = \"phpTutorial\" ; echo \"I love $txt !\" ; ?>","title":"Output Variables"},{"location":"PR/phpVar1/#tools-for-understanding-strange-objects","text":"","title":"Tools for understanding strange objects"},{"location":"PR/phpVar1/#var_dump-function","text":"var_dump() displays structured information about one or more expressions that includes its type and value. Arrays and objects are explored recursively with values indented to show structure. <!DOCTYPE html> <html> <body> <?php $x = 5985 ; var_dump ( $x ); ?> </body> </html> int(5985)","title":"var_dump() function"},{"location":"PR/phpVar1/#print_r-function","text":"print_r() displays the value of a variable, in a human-readable format. <?php $a = array ( \"red\" , \"green\" , \"blue\" ); print_r ( $a ); echo \"<br>\" ; $b = array ( \"Peter\" => \"35\" , \"Ben\" => \"37\" , \"Joe\" => \"43\" ); print_r ( $b ); ?> Array ( [0] => red [1] => green [2] => blue ) Array ( [Peter] => 35 [Ben] => 37 [Joe] => 43 )","title":"print_r() function"},{"location":"PR/phpVar1/#null","text":"The null type is PHP's unit type, i.e. it has only one value: null. Undefined, and unset() variables will resolve to the value null. There is only one value of type null, and that is the case-insensitive constant null. <?php $var = NULL ; ?>","title":"NULL"},{"location":"PR/phpVar2/","text":"Data Types PHP supports the following data types: String Integer Float Boolean Array Object NULL Resource PHP String A string is a sequence of characters, like \"Hello world!\". A string can be any text inside quotes. You can use single or double quotes. $x = \"Hello world!\"; PHP Integer An integer data type is a non-decimal number between -2,147,483,648 and 2,147,483,647. Integers can be specified in: decimal (base 10), hexadecimal (base 16), octal (base 8), or binary (base 2) notation <?php $a = 1234 ; // decimal number $a = 0123 ; // octal number (equivalent to 83 decimal) $a = 0 o123 ; // octal number (as of PHP 8.1.0) $a = 0x1A ; // hexadecimal number (equivalent to 26 decimal) $a = 0 b11111111 ; // binary number (equivalent to 255 decimal) $a = 1 _234_567 ; // decimal number (as of PHP 7.4.0) ?> PHP Float A float (floating point number) is a number with a decimal point or a number in exponential form. $x = 10.365; PHP Boolean A Boolean represents two possible states: TRUE or FALSE. $x = true; $y = false; PHP Array An array stores multiple values in one single variable. $x = array(\"Volvo\", \"BMW\", \"Toyota\"); PHP Object Classes and objects are the two main aspects of object-oriented programming. A class is a template for objects, and an object is an instance of a class. When the individual objects are created, they inherit all the properties and behaviors from the class, but each object will have different values for the properties. Let's assume we have a class named Car. A Car can have properties like model, color, etc. We can define variables like $model, $color, and so on, to hold the values of these properties. When the individual objects (Volvo, BMW, Toyota, etc.) are created, they inherit all the properties and behaviors from the class, but each object will have different values for the properties. If you create a __construct() function, PHP will automatically call this function when you create an object from a class. <?php class Car { public $color ; public $model ; public function __construct ( $color , $model ) { $this -> color = $color ; $this -> model = $model ; } public function message () { return \"My car is a \" . $this -> color . \" \" . $this -> model . \"!\" ; } } $myCar = new Car ( \"black\" , \"Volvo\" ); echo $myCar -> message (); echo \"<br>\" ; $myCar = new Car ( \"red\" , \"Toyota\" ); echo $myCar -> message (); ?> PHP NULL Value Null is a special data type which can have only one value: NULL. A variable of data type NULL is a variable that has no value assigned to it. Tip: If a variable is created without a value, it is automatically assigned a value of NULL. Variables can also be emptied by setting the value to NULL PHP Resource The special resource type is not an actual data type. It is the storing of a reference to functions and resources external to PHP. A common example of using the resource data type is a database call. Type Casting PHP does not require explicit type definition in variable declaration. In this case, the type of a variable is determined by the value it stores. That is to say, if a string is assigned to variable $var, then $var is of type string. If afterwards an int value is assigned to $var, it will be of type int. Type casting converts the value to a chosen type by writing the type within parentheses before the value to convert. The casts allowed are: (int) - cast to int (bool) - cast to bool (float) - cast to float (string) - cast to string (array) - cast to array (object) - cast to object (unset) - cast to NULL <?php $bool_false = false ; $int_val = ( int ) $bool_false ; var_dump ( $int_val ); //Output will be 0 $bool_true = true ; $int_val = ( int ) $bool_true ; var_dump ( $int_val ); //Output will be 1 ?> Casting literal strings and variables to binary strings: <?php $binary = ( binary ) $string ; $binary = b \"binary string\" ; ?> Instead of casting a variable to a string, it is also possible to enclose the variable in double quotes. <?php $foo = 10 ; // $foo is an integer $str = \" $foo \" ; // $str is a string $fst = ( string ) $foo ; // $fst is also a string // This prints out that \"they are the same\" if ( $fst === $str ) { echo \"they are the same\" ; } ?>","title":"Data Types and Casting"},{"location":"PR/phpVar2/#data-types","text":"PHP supports the following data types: String Integer Float Boolean Array Object NULL Resource","title":"Data Types"},{"location":"PR/phpVar2/#php-string","text":"A string is a sequence of characters, like \"Hello world!\". A string can be any text inside quotes. You can use single or double quotes. $x = \"Hello world!\";","title":"PHP String"},{"location":"PR/phpVar2/#php-integer","text":"An integer data type is a non-decimal number between -2,147,483,648 and 2,147,483,647. Integers can be specified in: decimal (base 10), hexadecimal (base 16), octal (base 8), or binary (base 2) notation <?php $a = 1234 ; // decimal number $a = 0123 ; // octal number (equivalent to 83 decimal) $a = 0 o123 ; // octal number (as of PHP 8.1.0) $a = 0x1A ; // hexadecimal number (equivalent to 26 decimal) $a = 0 b11111111 ; // binary number (equivalent to 255 decimal) $a = 1 _234_567 ; // decimal number (as of PHP 7.4.0) ?>","title":"PHP Integer"},{"location":"PR/phpVar2/#php-float","text":"A float (floating point number) is a number with a decimal point or a number in exponential form. $x = 10.365;","title":"PHP Float"},{"location":"PR/phpVar2/#php-boolean","text":"A Boolean represents two possible states: TRUE or FALSE. $x = true; $y = false;","title":"PHP Boolean"},{"location":"PR/phpVar2/#php-array","text":"An array stores multiple values in one single variable. $x = array(\"Volvo\", \"BMW\", \"Toyota\");","title":"PHP Array"},{"location":"PR/phpVar2/#php-object","text":"Classes and objects are the two main aspects of object-oriented programming. A class is a template for objects, and an object is an instance of a class. When the individual objects are created, they inherit all the properties and behaviors from the class, but each object will have different values for the properties. Let's assume we have a class named Car. A Car can have properties like model, color, etc. We can define variables like $model, $color, and so on, to hold the values of these properties. When the individual objects (Volvo, BMW, Toyota, etc.) are created, they inherit all the properties and behaviors from the class, but each object will have different values for the properties. If you create a __construct() function, PHP will automatically call this function when you create an object from a class. <?php class Car { public $color ; public $model ; public function __construct ( $color , $model ) { $this -> color = $color ; $this -> model = $model ; } public function message () { return \"My car is a \" . $this -> color . \" \" . $this -> model . \"!\" ; } } $myCar = new Car ( \"black\" , \"Volvo\" ); echo $myCar -> message (); echo \"<br>\" ; $myCar = new Car ( \"red\" , \"Toyota\" ); echo $myCar -> message (); ?>","title":"PHP Object"},{"location":"PR/phpVar2/#php-null-value","text":"Null is a special data type which can have only one value: NULL. A variable of data type NULL is a variable that has no value assigned to it. Tip: If a variable is created without a value, it is automatically assigned a value of NULL. Variables can also be emptied by setting the value to NULL","title":"PHP NULL Value"},{"location":"PR/phpVar2/#php-resource","text":"The special resource type is not an actual data type. It is the storing of a reference to functions and resources external to PHP. A common example of using the resource data type is a database call.","title":"PHP Resource"},{"location":"PR/phpVar2/#type-casting","text":"PHP does not require explicit type definition in variable declaration. In this case, the type of a variable is determined by the value it stores. That is to say, if a string is assigned to variable $var, then $var is of type string. If afterwards an int value is assigned to $var, it will be of type int. Type casting converts the value to a chosen type by writing the type within parentheses before the value to convert. The casts allowed are: (int) - cast to int (bool) - cast to bool (float) - cast to float (string) - cast to string (array) - cast to array (object) - cast to object (unset) - cast to NULL <?php $bool_false = false ; $int_val = ( int ) $bool_false ; var_dump ( $int_val ); //Output will be 0 $bool_true = true ; $int_val = ( int ) $bool_true ; var_dump ( $int_val ); //Output will be 1 ?> Casting literal strings and variables to binary strings: <?php $binary = ( binary ) $string ; $binary = b \"binary string\" ; ?> Instead of casting a variable to a string, it is also possible to enclose the variable in double quotes. <?php $foo = 10 ; // $foo is an integer $str = \" $foo \" ; // $str is a string $fst = ( string ) $foo ; // $fst is also a string // This prints out that \"they are the same\" if ( $fst === $str ) { echo \"they are the same\" ; } ?>","title":"Type Casting"},{"location":"PR/phpVar3/","text":"In PHP, variables can be declared anywhere in the script. The scope of a variable is the part of the script where the variable can be referenced/used. PHP has three different variable scopes: Local Global Static Local Scope A variable declared within a function has a LOCAL SCOPE and can only be accessed within that function: <?php function myTest () { $x = 5 ; // local scope echo \"<p>Variable x inside function is: $x </p>\" ; } myTest (); // using x outside the function will generate an error echo \"<p>Variable x outside function is: $x </p>\" ; ?> You can have local variables with the same name in different functions, because local variables are only recognized by the function in which they are declared. Global Scope A variable declared outside a function has a GLOBAL SCOPE and can only be accessed outside a function: <?php $x = 5 ; // global scope function myTest () { // using x inside this function will generate an error echo \"<p>Variable x inside function is: $x </p>\" ; } myTest (); echo \"<p>Variable x outside function is: $x </p>\" ; ?> PHP The global Keyword The global keyword is used to access a global variable from within a function. To do this, use the global keyword before the variables (inside the function): <?php $x = 5 ; $y = 10 ; function myTest () { global $x , $y ; $y = $x + $y ; } myTest (); echo $y ; // outputs 15 ?> PHP also stores all global variables in an array called $GLOBALS[index]. The index holds the name of the variable. This array is also accessible from within functions and can be used to update global variables directly. The example above can be rewritten like this: <?php $x = 5 ; $y = 10 ; function myTest () { $GLOBALS [ 'y' ] = $GLOBALS [ 'x' ] + $GLOBALS [ 'y' ]; } myTest (); echo $y ; // outputs 15 ?> PHP The static Keyword Normally, when a function is completed/executed, all of its variables are deleted. However, sometimes we want a local variable NOT to be deleted. We need it for a further job. To do this, use the static keyword when you first declare the variable: <?php function myTest () { static $x = 0 ; echo $x ; $x ++ ; } myTest (); myTest (); myTest (); ?> Then, each time the function is called, that variable will still have the information it contained from the last time the function was called. Note: The variable is still local to the function. Persisting a Local Variable\u2019s Value Across Function Invocations When you want a local variable to retain its value between invocations of a function. Declare the variable as static: <?php function track_times_called () { static $i = 0 ; $i ++ ; return $i ; } echo track_times_called (); echo track_times_called (); echo track_times_called (); ?> Though static variables retain their values between function calls, they do so only during one invocation of a script. A static variable accessed in one request doesn\u2019t keep its value for the next request to the same page.","title":"Variable Scope"},{"location":"PR/phpVar3/#local-scope","text":"A variable declared within a function has a LOCAL SCOPE and can only be accessed within that function: <?php function myTest () { $x = 5 ; // local scope echo \"<p>Variable x inside function is: $x </p>\" ; } myTest (); // using x outside the function will generate an error echo \"<p>Variable x outside function is: $x </p>\" ; ?> You can have local variables with the same name in different functions, because local variables are only recognized by the function in which they are declared.","title":"Local Scope"},{"location":"PR/phpVar3/#global-scope","text":"A variable declared outside a function has a GLOBAL SCOPE and can only be accessed outside a function: <?php $x = 5 ; // global scope function myTest () { // using x inside this function will generate an error echo \"<p>Variable x inside function is: $x </p>\" ; } myTest (); echo \"<p>Variable x outside function is: $x </p>\" ; ?>","title":"Global Scope"},{"location":"PR/phpVar3/#php-the-global-keyword","text":"The global keyword is used to access a global variable from within a function. To do this, use the global keyword before the variables (inside the function): <?php $x = 5 ; $y = 10 ; function myTest () { global $x , $y ; $y = $x + $y ; } myTest (); echo $y ; // outputs 15 ?> PHP also stores all global variables in an array called $GLOBALS[index]. The index holds the name of the variable. This array is also accessible from within functions and can be used to update global variables directly. The example above can be rewritten like this: <?php $x = 5 ; $y = 10 ; function myTest () { $GLOBALS [ 'y' ] = $GLOBALS [ 'x' ] + $GLOBALS [ 'y' ]; } myTest (); echo $y ; // outputs 15 ?>","title":"PHP The global Keyword"},{"location":"PR/phpVar3/#php-the-static-keyword","text":"Normally, when a function is completed/executed, all of its variables are deleted. However, sometimes we want a local variable NOT to be deleted. We need it for a further job. To do this, use the static keyword when you first declare the variable: <?php function myTest () { static $x = 0 ; echo $x ; $x ++ ; } myTest (); myTest (); myTest (); ?> Then, each time the function is called, that variable will still have the information it contained from the last time the function was called. Note: The variable is still local to the function.","title":"PHP The static Keyword"},{"location":"PR/phpVar3/#persisting-a-local-variables-value-across-function-invocations","text":"When you want a local variable to retain its value between invocations of a function. Declare the variable as static: <?php function track_times_called () { static $i = 0 ; $i ++ ; return $i ; } echo track_times_called (); echo track_times_called (); echo track_times_called (); ?> Though static variables retain their values between function calls, they do so only during one invocation of a script. A static variable accessed in one request doesn\u2019t keep its value for the next request to the same page.","title":"Persisting a Local Variable\u2019s Value Across Function Invocations"},{"location":"PR/phpVar4/","text":"Variable Handling Functions The PHP variable handling functions are part of the PHP core. No installation is required to use these functions. Function Description boolval() Returns the boolean value of a variable debug_zval_dump() Dumps a string representation of an internal zend value to output doubleval() Alias of floatval() empty() Checks whether a variable is empty floatval() Returns the float value of a variable get_defined_vars() Returns all defined variables, as an array get_resource_type() Returns the type of a resource gettype() Returns the type of a variable intval() Returns the integer value of a variable is_array() Checks whether a variable is an array is_bool() Checks whether a variable is a boolean is_callable() Checks whether the contents of a variable can be called as a function is_countable() Checks whether the contents of a variable is a countable value is_double() Alias of is_float() is_float() Checks whether a variable is of type float is_int() Checks whether a variable is of type integer is_integer() Alias of is_int() is_iterable() Checks whether the contents of a variable is an iterable value is_long() Alias of is_int() is_null() Checks whether a variable is NULL is_numeric() Checks whether a variable is a number or a numeric string is_object() Checks whether a variable is an object is_real() Alias of is_float() is_resource() Checks whether a variable is a resource is_scalar() Checks whether a variable is a scalar is_string() Checks whether a variable is of type string isset() Checks whether a variable is set (declared and not NULL) print_r() Prints the information about a variable in a human-readable way serialize() Converts a storable representation of a value settype() Converts a variable to a specific type strval() Returns the string value of a variable unserialize() Converts serialized data back into actual data unset() Unsets a variable var_dump() Dumps information about one or more variables var_export() Returns structured information (valid PHP code) about a variable unset() A variable is either set or unset. A variable with any value assigned to it, true or false, empty or nonempty, is set. The function isset() returns true when passed a variable that\u2019s set. To turn a variable that\u2019s set into one that\u2019s unset, call unset() on the variable or assign null to the variable. Scalars, arrays, and objects can all be passed to unset(). You can also pass unset() multiple variables to unset them all: <?php unset ( $vegetables ); unset ( $fruits [ 12 ]); unset ( $earth , $moon , $stars ); ?> All unset variables are also empty. Set variables may be empty or nonempty. Empty variables have values that evaluate to false as a boolean. <?php $a = \"Hello world!\" ; echo \"The value of variable 'a' before unset: \" . $a . \"<br>\" ; unset ( $a ); echo \"The value of variable 'a' after unset: \" . $a ; ?> Values that evaluate to false Type Value integer 0 double 0.0 string \u201c\u201d (empty string) string \u201c0\u201d boolean false array array() (empty array) null NULL object An object with no properties, only prior to PHP 5 Dumping Variable Contents as Strings When you want to inspect the values stored in a variable. It may be a complicated nested array or object, so you can\u2019t just print it out or loop through it. Use var_dump(), print_r(), or var_export(), depending on exactly what you need. The var_dump() and print_r() functions provide different human-readable representations of variables. print_r() The print_r() function is a little more concise: <?php $info = array ( 'name' => 'frank' , 12.6 , array ( 3 , 4 )); print_r ( $info ); ?> prints: Array ( [name] => frank [0] => 12.6 [1] => Array ( [0] => 3 [1] => 4 ) ) var_dump() <?php $info = array ( 'name' => 'frank' , 12.6 , array ( 3 , 4 )); var_dump ( $info ); ?> prints: array ( 'name' => 'frank', 0 => 12.6, 1 => array ( 0 => 3, 1 => 4, ), ) Dump information about different variables. <?php $a = 32 ; echo var_dump ( $a ) . \"<br>\" ; $b = \"Hello world!\" ; echo var_dump ( $b ) . \"<br>\" ; $c = 32.5 ; echo var_dump ( $c ) . \"<br>\" ; $d = array ( \"red\" , \"green\" , \"blue\" ); echo var_dump ( $d ) . \"<br>\" ; $e = array ( 32 , \"Hello world!\" , 32.5 , array ( \"red\" , \"green\" , \"blue\" )); echo var_dump ( $e ) . \"<br>\" ; // Dump two variables echo var_dump ( $a , $b ) . \"<br>\" ; ?> var_export() The var_export() function outputs or returns structured information about a variable. This function works similar to var_dump(), except that the returned value for this function is valid PHP code. <?php $a = 32 ; echo var_export ( $a ) . \"<br>\" ; $b = \"Hello world!\" ; echo var_export ( $b ) . \"<br>\" ; $c = 32.5 ; echo var_export ( $c ) . \"<br>\" ; $d = array ( \"red\" , \"green\" , \"blue\" ); echo var_export ( $d ) . \"<br>\" ; $e = array ( 32 , \"Hello world!\" , 32.5 , array ( \"red\" , \"green\" , \"blue\" )); echo var_export ( $e ) . \"<br>\" ; ?> 32 'Hello world!' 32.5 array ( 0 => 'red', 1 => 'green', 2 => 'blue', ) array ( 0 => 32, 1 => 'Hello world!', 2 => 32.5, 3 => array ( 0 => 'red', 1 => 'green', 2 => 'blue', ), ) Creating a Dynamic Variable Name When you want to construct a variable\u2019s name dynamically. For example, you want to use variable names that match the field names from a database query. Use PHP\u2019s variable variable syntax by prepending a $ to a variable whose value is the variable name you want: <?php $animal = 'turtles' ; $turtles = 103 ; print $$animal ; ?> This prints: 103 Placing two dollar signs before a variable name causes PHP to dereference the right variable name to get a value. It then uses that value as the name of your real variable. The preceding example prints 103 because $animal = turtles, so $$animal is $tur tles, which equals 103. Using curly braces, you can construct more complicated expressions that indicate variable names: <?php $stooges = array ( 'Moe' , 'Larry' , 'Curly' ); $stooge_moe = 'Moses Horwitz' ; $stooge_larry = 'Louis Feinberg' ; $stooge_curly = 'Jerome Horwitz' ; foreach ( $stooges as $s ) { print \" $s 's real name was ${ 'stooge_'.strtolower($s) } . \\n \" ; } ?> PHP evaluates the expression between the curly braces and uses it as a variable name. That expression can even have function calls in it, such as strtolower(). Variable variables are also useful when iterating through similarly named variables. Say you are querying a database table that has fields named title_1, title_2, etc. If you want to check if a title matches any of those values, the easiest way is to loop through them like this: <?php for ( $i = 1 ; $i <= $n ; $i ++ ) { $t = \"title_ $i \" ; if ( $title == $$t ) { /* match */ } } ?> Of course, it would be more straightforward to store these values in an array, but if you are maintaining old code that uses this technique (and you can\u2019t change it), variable variables are helpful. The curly brace syntax is also necessary in resolving ambiguity about array elements. The variable variable $$donkeys[12] could have two meanings. The first is take what\u2019s in the 12th element of the $donkeys array and use that as a variable name. Write this as:${$donkeys[12]}. The second is use what\u2019s in the scalar $donkeys as an array name and look in the 12th element of that array. Write this as: ${$donkeys}[12]. You are not limited by two dollar signs. You can use three, or more, but in practice it\u2019s rare to see greater than two levels of indirection. Encapsulating Complex Data Types in a String When you want a string representation of an array or object for storage in a file or database. This string should be easily reconstitutable into the original array or object. serialize() Use serialize() to encode variables and their values into a textual form: <?php $pantry = array ( 'sugar' => '2 lbs.' , 'butter' => '3 sticks' ); $fp = fopen ( '/tmp/pantry' , 'w' ) or die ( \"Can't open pantry\" ); fputs ( $fp , serialize ( $pantry )); fclose ( $fp ); ?> unserialize() To re-create the variables, use unserialize(): <?php // $new_pantry will be the array: // array('sugar' => '2 lbs.','butter' => '3 sticks' $new_pantry = unserialize ( file_get_contents ( '/tmp/pantry' )); ?> For easier interoperability with other languages (at a slight performance cost), use json_encode() to serialize data: <?php $pantry = array ( 'sugar' => '2 lbs.' , 'butter' => '3 sticks' ); $fp = fopen ( '/tmp/pantry.json' , 'w' ) or die ( \"Can't open pantry\" ); fputs ( $fp , json_encode ( $pantry )); fclose ( $fp ); ?> And use json_decode() to re-create the variables: <?php // $new_pantry will be the array: // array('sugar' => '2 lbs.','butter' => '3 sticks') $new_pantry = json_decode ( file_get_contents ( '/tmp/pantry.json' ), TRUE ); ?> The PHP serialized string that is reconstituted into $pantry looks like: a:2:{s:5:\"sugar\";s:6:\"2 lbs.\";s:6:\"butter\";s:8:\"3 sticks\";} The JSON-encoded version looks like: { \"sugar\" : \"2 lbs.\" , \"butter\" : \"3 sticks\" } The extra business in the serialized string that\u2019s not in the JSON string encodes the types and lengths of the values. This makes it uglier to look at but a little faster to decode. If you\u2019re just shuttling data among PHP applications, native serialization is great. If you need to work with other languages, use JSON instead. Both native serialization and JSON store enough information to bring back all the values in the array, but the variable name itself isn\u2019t stored in either serialized representation. JSON can\u2019t distinguish between objects and associative arrays in its serialization format, so you have to choose which you want when you call json_decode(). A second argument of true, as in the previous example, produces associative arrays. Without that argument, the same JSON would be decoded into an object of class stdClass with two properties: sugar and butter. When passing serialized data from page to page in a URL, call urlencode() on the data to make sure URL metacharacters are escaped in it: <?php $shopping_cart = array ( 'Poppy Seed Bagel' => 2 , 'Plain Bagel' => 1 , 'Lox' => 4 ); print '<a href=\"next.php?cart=' . urlencode ( serialize ( $shopping_cart )) . '\">Next</a>' ; ?> Serialized data going into a database always needs to be escaped as well. When you unserialize an object, PHP automatically invokes its __wakeUp() method. This allows the object to reestablish any state that\u2019s not preserved across serialization, such as database connection. This can alter your environment, so be sure you know what you\u2019re unserializing.","title":"Variable Handling"},{"location":"PR/phpVar4/#variable-handling-functions","text":"The PHP variable handling functions are part of the PHP core. No installation is required to use these functions. Function Description boolval() Returns the boolean value of a variable debug_zval_dump() Dumps a string representation of an internal zend value to output doubleval() Alias of floatval() empty() Checks whether a variable is empty floatval() Returns the float value of a variable get_defined_vars() Returns all defined variables, as an array get_resource_type() Returns the type of a resource gettype() Returns the type of a variable intval() Returns the integer value of a variable is_array() Checks whether a variable is an array is_bool() Checks whether a variable is a boolean is_callable() Checks whether the contents of a variable can be called as a function is_countable() Checks whether the contents of a variable is a countable value is_double() Alias of is_float() is_float() Checks whether a variable is of type float is_int() Checks whether a variable is of type integer is_integer() Alias of is_int() is_iterable() Checks whether the contents of a variable is an iterable value is_long() Alias of is_int() is_null() Checks whether a variable is NULL is_numeric() Checks whether a variable is a number or a numeric string is_object() Checks whether a variable is an object is_real() Alias of is_float() is_resource() Checks whether a variable is a resource is_scalar() Checks whether a variable is a scalar is_string() Checks whether a variable is of type string isset() Checks whether a variable is set (declared and not NULL) print_r() Prints the information about a variable in a human-readable way serialize() Converts a storable representation of a value settype() Converts a variable to a specific type strval() Returns the string value of a variable unserialize() Converts serialized data back into actual data unset() Unsets a variable var_dump() Dumps information about one or more variables var_export() Returns structured information (valid PHP code) about a variable","title":"Variable Handling Functions"},{"location":"PR/phpVar4/#unset","text":"A variable is either set or unset. A variable with any value assigned to it, true or false, empty or nonempty, is set. The function isset() returns true when passed a variable that\u2019s set. To turn a variable that\u2019s set into one that\u2019s unset, call unset() on the variable or assign null to the variable. Scalars, arrays, and objects can all be passed to unset(). You can also pass unset() multiple variables to unset them all: <?php unset ( $vegetables ); unset ( $fruits [ 12 ]); unset ( $earth , $moon , $stars ); ?> All unset variables are also empty. Set variables may be empty or nonempty. Empty variables have values that evaluate to false as a boolean. <?php $a = \"Hello world!\" ; echo \"The value of variable 'a' before unset: \" . $a . \"<br>\" ; unset ( $a ); echo \"The value of variable 'a' after unset: \" . $a ; ?>","title":"unset()"},{"location":"PR/phpVar4/#values-that-evaluate-to-false","text":"Type Value integer 0 double 0.0 string \u201c\u201d (empty string) string \u201c0\u201d boolean false array array() (empty array) null NULL object An object with no properties, only prior to PHP 5","title":"Values that evaluate to false"},{"location":"PR/phpVar4/#dumping-variable-contents-as-strings","text":"When you want to inspect the values stored in a variable. It may be a complicated nested array or object, so you can\u2019t just print it out or loop through it. Use var_dump(), print_r(), or var_export(), depending on exactly what you need. The var_dump() and print_r() functions provide different human-readable representations of variables.","title":"Dumping Variable Contents as Strings"},{"location":"PR/phpVar4/#print_r","text":"The print_r() function is a little more concise: <?php $info = array ( 'name' => 'frank' , 12.6 , array ( 3 , 4 )); print_r ( $info ); ?> prints: Array ( [name] => frank [0] => 12.6 [1] => Array ( [0] => 3 [1] => 4 ) )","title":"print_r()"},{"location":"PR/phpVar4/#var_dump","text":"<?php $info = array ( 'name' => 'frank' , 12.6 , array ( 3 , 4 )); var_dump ( $info ); ?> prints: array ( 'name' => 'frank', 0 => 12.6, 1 => array ( 0 => 3, 1 => 4, ), ) Dump information about different variables. <?php $a = 32 ; echo var_dump ( $a ) . \"<br>\" ; $b = \"Hello world!\" ; echo var_dump ( $b ) . \"<br>\" ; $c = 32.5 ; echo var_dump ( $c ) . \"<br>\" ; $d = array ( \"red\" , \"green\" , \"blue\" ); echo var_dump ( $d ) . \"<br>\" ; $e = array ( 32 , \"Hello world!\" , 32.5 , array ( \"red\" , \"green\" , \"blue\" )); echo var_dump ( $e ) . \"<br>\" ; // Dump two variables echo var_dump ( $a , $b ) . \"<br>\" ; ?>","title":"var_dump()"},{"location":"PR/phpVar4/#var_export","text":"The var_export() function outputs or returns structured information about a variable. This function works similar to var_dump(), except that the returned value for this function is valid PHP code. <?php $a = 32 ; echo var_export ( $a ) . \"<br>\" ; $b = \"Hello world!\" ; echo var_export ( $b ) . \"<br>\" ; $c = 32.5 ; echo var_export ( $c ) . \"<br>\" ; $d = array ( \"red\" , \"green\" , \"blue\" ); echo var_export ( $d ) . \"<br>\" ; $e = array ( 32 , \"Hello world!\" , 32.5 , array ( \"red\" , \"green\" , \"blue\" )); echo var_export ( $e ) . \"<br>\" ; ?> 32 'Hello world!' 32.5 array ( 0 => 'red', 1 => 'green', 2 => 'blue', ) array ( 0 => 32, 1 => 'Hello world!', 2 => 32.5, 3 => array ( 0 => 'red', 1 => 'green', 2 => 'blue', ), )","title":"var_export()"},{"location":"PR/phpVar4/#creating-a-dynamic-variable-name","text":"When you want to construct a variable\u2019s name dynamically. For example, you want to use variable names that match the field names from a database query. Use PHP\u2019s variable variable syntax by prepending a $ to a variable whose value is the variable name you want: <?php $animal = 'turtles' ; $turtles = 103 ; print $$animal ; ?> This prints: 103 Placing two dollar signs before a variable name causes PHP to dereference the right variable name to get a value. It then uses that value as the name of your real variable. The preceding example prints 103 because $animal = turtles, so $$animal is $tur tles, which equals 103. Using curly braces, you can construct more complicated expressions that indicate variable names: <?php $stooges = array ( 'Moe' , 'Larry' , 'Curly' ); $stooge_moe = 'Moses Horwitz' ; $stooge_larry = 'Louis Feinberg' ; $stooge_curly = 'Jerome Horwitz' ; foreach ( $stooges as $s ) { print \" $s 's real name was ${ 'stooge_'.strtolower($s) } . \\n \" ; } ?> PHP evaluates the expression between the curly braces and uses it as a variable name. That expression can even have function calls in it, such as strtolower(). Variable variables are also useful when iterating through similarly named variables. Say you are querying a database table that has fields named title_1, title_2, etc. If you want to check if a title matches any of those values, the easiest way is to loop through them like this: <?php for ( $i = 1 ; $i <= $n ; $i ++ ) { $t = \"title_ $i \" ; if ( $title == $$t ) { /* match */ } } ?> Of course, it would be more straightforward to store these values in an array, but if you are maintaining old code that uses this technique (and you can\u2019t change it), variable variables are helpful. The curly brace syntax is also necessary in resolving ambiguity about array elements. The variable variable $$donkeys[12] could have two meanings. The first is take what\u2019s in the 12th element of the $donkeys array and use that as a variable name. Write this as:${$donkeys[12]}. The second is use what\u2019s in the scalar $donkeys as an array name and look in the 12th element of that array. Write this as: ${$donkeys}[12]. You are not limited by two dollar signs. You can use three, or more, but in practice it\u2019s rare to see greater than two levels of indirection.","title":"Creating a Dynamic Variable Name"},{"location":"PR/phpVar4/#encapsulating-complex-data-types-in-a-string","text":"When you want a string representation of an array or object for storage in a file or database. This string should be easily reconstitutable into the original array or object.","title":"Encapsulating Complex Data Types in a String"},{"location":"PR/phpVar4/#serialize","text":"Use serialize() to encode variables and their values into a textual form: <?php $pantry = array ( 'sugar' => '2 lbs.' , 'butter' => '3 sticks' ); $fp = fopen ( '/tmp/pantry' , 'w' ) or die ( \"Can't open pantry\" ); fputs ( $fp , serialize ( $pantry )); fclose ( $fp ); ?>","title":"serialize()"},{"location":"PR/phpVar4/#unserialize","text":"To re-create the variables, use unserialize(): <?php // $new_pantry will be the array: // array('sugar' => '2 lbs.','butter' => '3 sticks' $new_pantry = unserialize ( file_get_contents ( '/tmp/pantry' )); ?> For easier interoperability with other languages (at a slight performance cost), use json_encode() to serialize data: <?php $pantry = array ( 'sugar' => '2 lbs.' , 'butter' => '3 sticks' ); $fp = fopen ( '/tmp/pantry.json' , 'w' ) or die ( \"Can't open pantry\" ); fputs ( $fp , json_encode ( $pantry )); fclose ( $fp ); ?> And use json_decode() to re-create the variables: <?php // $new_pantry will be the array: // array('sugar' => '2 lbs.','butter' => '3 sticks') $new_pantry = json_decode ( file_get_contents ( '/tmp/pantry.json' ), TRUE ); ?> The PHP serialized string that is reconstituted into $pantry looks like: a:2:{s:5:\"sugar\";s:6:\"2 lbs.\";s:6:\"butter\";s:8:\"3 sticks\";} The JSON-encoded version looks like: { \"sugar\" : \"2 lbs.\" , \"butter\" : \"3 sticks\" } The extra business in the serialized string that\u2019s not in the JSON string encodes the types and lengths of the values. This makes it uglier to look at but a little faster to decode. If you\u2019re just shuttling data among PHP applications, native serialization is great. If you need to work with other languages, use JSON instead. Both native serialization and JSON store enough information to bring back all the values in the array, but the variable name itself isn\u2019t stored in either serialized representation. JSON can\u2019t distinguish between objects and associative arrays in its serialization format, so you have to choose which you want when you call json_decode(). A second argument of true, as in the previous example, produces associative arrays. Without that argument, the same JSON would be decoded into an object of class stdClass with two properties: sugar and butter. When passing serialized data from page to page in a URL, call urlencode() on the data to make sure URL metacharacters are escaped in it: <?php $shopping_cart = array ( 'Poppy Seed Bagel' => 2 , 'Plain Bagel' => 1 , 'Lox' => 4 ); print '<a href=\"next.php?cart=' . urlencode ( serialize ( $shopping_cart )) . '\">Next</a>' ; ?> Serialized data going into a database always needs to be escaped as well. When you unserialize an object, PHP automatically invokes its __wakeUp() method. This allows the object to reestablish any state that\u2019s not preserved across serialization, such as database connection. This can alter your environment, so be sure you know what you\u2019re unserializing.","title":"unserialize()"}]}